Index: .syncignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.syncignore b/.syncignore
new file mode 100644
--- /dev/null	(date 1661936110000)
+++ b/.syncignore	(date 1661936110000)
@@ -0,0 +1,16 @@
+# CodeSync won't sync the files in the .syncignore. It follows same format as .gitignore.
+# SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>
+
+# SPDX-License-Identifier: CC0-1.0
+/node_modules/
+/pkg/
+/build/
+/sdk/
+/dist/
+/.idea/workspace.xml
+/.idea/compiler.xml
+/e2e/output/
+.idea/jsLibraryMappings.xml
+/junit.xml
+/coverage/cobertura-coverage.xml
+.DS_Store
Index: .idea/aws.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/aws.xml b/.idea/aws.xml
new file mode 100644
--- /dev/null	(date 1663573795052)
+++ b/.idea/aws.xml	(date 1663573795052)
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="accountSettings">
+    <option name="activeRegion" value="us-east-1" />
+    <option name="recentlyUsedRegions">
+      <list>
+        <option value="us-east-1" />
+      </list>
+    </option>
+  </component>
+</project>
\ No newline at end of file
Index: package-lock.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/package-lock.json b/package-lock.json
--- a/package-lock.json	(revision d8bea371a1253f951f0f0ff48819868807c68aa7)
+++ b/package-lock.json	(date 1662104839000)
@@ -10,6 +10,10 @@
       "hasInstallScript": true,
       "license": "AGPL-3.0-only",
       "dependencies": {
+        "@emotion/react": "^11.10.0",
+        "@emotion/styled": "^11.10.0",
+        "@mui/icons-material": "^5.10.2",
+        "@mui/material": "^5.10.2",
         "@reduxjs/toolkit": "1.6.2",
         "@zextras/carbonio-design-system": "^0.3.7",
         "@zextras/carbonio-shell-ui": "^0.4.30",
@@ -82,7 +86,6 @@
     "node_modules/@babel/compat-data": {
       "version": "7.16.8",
       "integrity": "sha512-m7OkX0IdKLKPpBlJtF561YJal5y/jyI5fNfWbPxh2D/nbzzGI4qRyrD8xO2jB24u7l+5I2a43scCG2IrfjC50Q==",
-      "dev": true,
       "engines": {
         "node": ">=6.9.0"
       }
@@ -90,7 +93,6 @@
     "node_modules/@babel/core": {
       "version": "7.16.0",
       "integrity": "sha512-mYZEvshBRHGsIAiyH5PzCFTCfbWfoYbO/jcSdXQSUQu1/pW0xDZAUP7KEc32heqWTAfAHhV9j1vH8Sav7l+JNQ==",
-      "dev": true,
       "dependencies": {
         "@babel/code-frame": "^7.16.0",
         "@babel/generator": "^7.16.0",
@@ -119,7 +121,6 @@
     "node_modules/@babel/core/node_modules/@babel/helper-compilation-targets": {
       "version": "7.16.7",
       "integrity": "sha512-mGojBwIWcwGD6rfqgRXVlVYmPAv7eOpIemUG3dGnDdCY4Pae70ROij3XmfrH6Fa1h1aiDylpglbZyktfzyo/hA==",
-      "dev": true,
       "dependencies": {
         "@babel/compat-data": "^7.16.4",
         "@babel/helper-validator-option": "^7.16.7",
@@ -244,7 +245,6 @@
     "node_modules/@babel/helper-module-transforms": {
       "version": "7.16.7",
       "integrity": "sha512-gaqtLDxJEFCeQbYp9aLAefjhkKdjKcdh6DB7jniIGU3Pz52WAmP268zK0VgPz9hUNkMSYeH976K2/Y6yPadpng==",
-      "dev": true,
       "dependencies": {
         "@babel/helper-environment-visitor": "^7.16.7",
         "@babel/helper-module-imports": "^7.16.7",
@@ -274,7 +274,6 @@
       "version": "7.18.9",
       "resolved": "https://registry.npmjs.org/@babel/helper-plugin-utils/-/helper-plugin-utils-7.18.9.tgz",
       "integrity": "sha512-aBXPT3bmtLryXaoJLyYPXPlSD4p1ld9aYeR+sJNOZjJJGiOpb+fKfh3NkcCu7J54nUJwCERPBExCCpyCOHnu/w==",
-      "dev": true,
       "engines": {
         "node": ">=6.9.0"
       }
@@ -310,7 +309,6 @@
     "node_modules/@babel/helper-simple-access": {
       "version": "7.16.7",
       "integrity": "sha512-ZIzHVyoeLMvXMN/vok/a4LWRy8G2v205mNP0XOuf9XRLyX5/u9CnVulUtDgUTama3lT+bf/UqucuZjqiGuTS1g==",
-      "dev": true,
       "dependencies": {
         "@babel/types": "^7.16.7"
       },
@@ -349,7 +347,6 @@
     "node_modules/@babel/helper-validator-option": {
       "version": "7.16.7",
       "integrity": "sha512-TRtenOuRUVo9oIQGPC5G9DgK4743cdxvtOw0weQNpZXaS16SCBi5MNjZF8vba3ETURjZpTbVn7Vvcf2eAwFozQ==",
-      "dev": true,
       "engines": {
         "node": ">=6.9.0"
       }
@@ -371,7 +368,6 @@
     "node_modules/@babel/helpers": {
       "version": "7.16.7",
       "integrity": "sha512-9ZDoqtfY7AuEOt3cxchfii6C7GDyyMBffktR5B2jvWv8u2+efwvpnVKXMWzNehqy68tKgAfSwfdw/lWpthS2bw==",
-      "dev": true,
       "dependencies": {
         "@babel/template": "^7.16.7",
         "@babel/traverse": "^7.16.7",
@@ -494,6 +490,20 @@
       "dependencies": {
         "@babel/helper-plugin-utils": "^7.8.0"
       },
+      "peerDependencies": {
+        "@babel/core": "^7.0.0-0"
+      }
+    },
+    "node_modules/@babel/plugin-syntax-jsx": {
+      "version": "7.18.6",
+      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-jsx/-/plugin-syntax-jsx-7.18.6.tgz",
+      "integrity": "sha512-6mmljtAedFGTWu2p/8WIORGwy+61PLgOMPOdazc7YoJ9ZCWUyFy3A6CpPkRKLKD1ToAesxX8KGEViAiLo9N+7Q==",
+      "dependencies": {
+        "@babel/helper-plugin-utils": "^7.18.6"
+      },
+      "engines": {
+        "node": ">=6.9.0"
+      },
       "peerDependencies": {
         "@babel/core": "^7.0.0-0"
       }
@@ -1926,20 +1936,6 @@
         "@babel/core": "^7.0.0-0"
       }
     },
-    "node_modules/@babel/preset-react/node_modules/@babel/plugin-transform-react-jsx/node_modules/@babel/plugin-syntax-jsx": {
-      "version": "7.16.7",
-      "integrity": "sha512-Esxmk7YjA8QysKeT3VhTXvF6y77f/a91SIs4pWb4H2eWGQkCKFgQaG6hdoEVZtGsrAcb2K5BW66XsOErD4WU3Q==",
-      "dev": true,
-      "dependencies": {
-        "@babel/helper-plugin-utils": "^7.16.7"
-      },
-      "engines": {
-        "node": ">=6.9.0"
-      },
-      "peerDependencies": {
-        "@babel/core": "^7.0.0-0"
-      }
-    },
     "node_modules/@babel/preset-react/node_modules/@babel/plugin-transform-react-pure-annotations": {
       "version": "7.16.7",
       "integrity": "sha512-hs71ToC97k3QWxswh2ElzMFABXHvGiJ01IB1TbYQDGeWRKWz/MPUTh5jGExdHvosYKpnJW5Pm3S4+TA3FyX+GA==",
@@ -2009,8 +2005,9 @@
       }
     },
     "node_modules/@babel/runtime": {
-      "version": "7.16.7",
-      "integrity": "sha512-9E9FJowqAsytyOY6LG+1KuueckRL+aQW+mKvXRXnuFGyRAyepJPmEo9vgMfXUA6O9u3IeEdv9MAkppFcaQwogQ==",
+      "version": "7.18.9",
+      "resolved": "https://registry.npmjs.org/@babel/runtime/-/runtime-7.18.9.tgz",
+      "integrity": "sha512-lkqXDcvlFT5rvEjiu6+QYO+1GXrEHRo2LOtS7E4GtX5ESIZOgepqsZBVIj6Pv+a6zqsya9VCgiK1KAK4BvJDAw==",
       "dependencies": {
         "regenerator-runtime": "^0.13.4"
       },
@@ -2488,6 +2485,66 @@
         "node": ">=8"
       }
     },
+    "node_modules/@emotion/babel-plugin": {
+      "version": "11.10.2",
+      "resolved": "https://registry.npmjs.org/@emotion/babel-plugin/-/babel-plugin-11.10.2.tgz",
+      "integrity": "sha512-xNQ57njWTFVfPAc3cjfuaPdsgLp5QOSuRsj9MA6ndEhH/AzuZM86qIQzt6rq+aGBwj3n5/TkLmU5lhAfdRmogA==",
+      "dependencies": {
+        "@babel/helper-module-imports": "^7.16.7",
+        "@babel/plugin-syntax-jsx": "^7.17.12",
+        "@babel/runtime": "^7.18.3",
+        "@emotion/hash": "^0.9.0",
+        "@emotion/memoize": "^0.8.0",
+        "@emotion/serialize": "^1.1.0",
+        "babel-plugin-macros": "^3.1.0",
+        "convert-source-map": "^1.5.0",
+        "escape-string-regexp": "^4.0.0",
+        "find-root": "^1.1.0",
+        "source-map": "^0.5.7",
+        "stylis": "4.0.13"
+      },
+      "peerDependencies": {
+        "@babel/core": "^7.0.0"
+      }
+    },
+    "node_modules/@emotion/babel-plugin/node_modules/@emotion/memoize": {
+      "version": "0.8.0",
+      "resolved": "https://registry.npmjs.org/@emotion/memoize/-/memoize-0.8.0.tgz",
+      "integrity": "sha512-G/YwXTkv7Den9mXDO7AhLWkE3q+I92B+VqAE+dYG4NGPaHZGvt3G8Q0p9vmE+sq7rTGphUbAvmQ9YpbfMQGGlA=="
+    },
+    "node_modules/@emotion/babel-plugin/node_modules/escape-string-regexp": {
+      "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-4.0.0.tgz",
+      "integrity": "sha512-TtpcNJ3XAzx3Gq8sWRzJaVajRs0uVxA2YAkdb1jm2YkPz4G6egUFAyA3n5vtEIZefPk5Wa4UXbKuS5fKkJWdgA==",
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/@emotion/cache": {
+      "version": "11.10.3",
+      "resolved": "https://registry.npmjs.org/@emotion/cache/-/cache-11.10.3.tgz",
+      "integrity": "sha512-Psmp/7ovAa8appWh3g51goxu/z3iVms7JXOreq136D8Bbn6dYraPnmL6mdM8GThEx9vwSn92Fz+mGSjBzN8UPQ==",
+      "dependencies": {
+        "@emotion/memoize": "^0.8.0",
+        "@emotion/sheet": "^1.2.0",
+        "@emotion/utils": "^1.2.0",
+        "@emotion/weak-memoize": "^0.3.0",
+        "stylis": "4.0.13"
+      }
+    },
+    "node_modules/@emotion/cache/node_modules/@emotion/memoize": {
+      "version": "0.8.0",
+      "resolved": "https://registry.npmjs.org/@emotion/memoize/-/memoize-0.8.0.tgz",
+      "integrity": "sha512-G/YwXTkv7Den9mXDO7AhLWkE3q+I92B+VqAE+dYG4NGPaHZGvt3G8Q0p9vmE+sq7rTGphUbAvmQ9YpbfMQGGlA=="
+    },
+    "node_modules/@emotion/hash": {
+      "version": "0.9.0",
+      "resolved": "https://registry.npmjs.org/@emotion/hash/-/hash-0.9.0.tgz",
+      "integrity": "sha512-14FtKiHhy2QoPIzdTcvh//8OyBlknNs2nXRwIhG904opCby3l+9Xaf/wuPvICBF0rc1ZCNBd3nKe9cd2mecVkQ=="
+    },
     "node_modules/@emotion/is-prop-valid": {
       "version": "0.8.8",
       "integrity": "sha512-u5WtneEAr5IDG2Wv65yhunPSMLIpuKsbuOktRojfrEiEvRyC85LgPMZI63cr7NUqT8ZIGdSVg8ZKGxIug4lXcA==",
@@ -2499,6 +2556,97 @@
       "version": "0.7.4",
       "integrity": "sha512-Ja/Vfqe3HpuzRsG1oBtWTHk2PGZ7GR+2Vz5iYGelAw8dx32K0y7PjVuxK6z1nMpZOqAFsRUPCkK1YjJ56qJlgw=="
     },
+    "node_modules/@emotion/react": {
+      "version": "11.10.0",
+      "resolved": "https://registry.npmjs.org/@emotion/react/-/react-11.10.0.tgz",
+      "integrity": "sha512-K6z9zlHxxBXwN8TcpwBKcEsBsOw4JWCCmR+BeeOWgqp8GIU1yA2Odd41bwdAAr0ssbQrbJbVnndvv7oiv1bZeQ==",
+      "dependencies": {
+        "@babel/runtime": "^7.18.3",
+        "@emotion/babel-plugin": "^11.10.0",
+        "@emotion/cache": "^11.10.0",
+        "@emotion/serialize": "^1.1.0",
+        "@emotion/utils": "^1.2.0",
+        "@emotion/weak-memoize": "^0.3.0",
+        "hoist-non-react-statics": "^3.3.1"
+      },
+      "peerDependencies": {
+        "@babel/core": "^7.0.0",
+        "react": ">=16.8.0"
+      },
+      "peerDependenciesMeta": {
+        "@babel/core": {
+          "optional": true
+        },
+        "@types/react": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/@emotion/serialize": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/@emotion/serialize/-/serialize-1.1.0.tgz",
+      "integrity": "sha512-F1ZZZW51T/fx+wKbVlwsfchr5q97iW8brAnXmsskz4d0hVB4O3M/SiA3SaeH06x02lSNzkkQv+n3AX3kCXKSFA==",
+      "dependencies": {
+        "@emotion/hash": "^0.9.0",
+        "@emotion/memoize": "^0.8.0",
+        "@emotion/unitless": "^0.8.0",
+        "@emotion/utils": "^1.2.0",
+        "csstype": "^3.0.2"
+      }
+    },
+    "node_modules/@emotion/serialize/node_modules/@emotion/memoize": {
+      "version": "0.8.0",
+      "resolved": "https://registry.npmjs.org/@emotion/memoize/-/memoize-0.8.0.tgz",
+      "integrity": "sha512-G/YwXTkv7Den9mXDO7AhLWkE3q+I92B+VqAE+dYG4NGPaHZGvt3G8Q0p9vmE+sq7rTGphUbAvmQ9YpbfMQGGlA=="
+    },
+    "node_modules/@emotion/serialize/node_modules/@emotion/unitless": {
+      "version": "0.8.0",
+      "resolved": "https://registry.npmjs.org/@emotion/unitless/-/unitless-0.8.0.tgz",
+      "integrity": "sha512-VINS5vEYAscRl2ZUDiT3uMPlrFQupiKgHz5AA4bCH1miKBg4qtwkim1qPmJj/4WG6TreYMY111rEFsjupcOKHw=="
+    },
+    "node_modules/@emotion/sheet": {
+      "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/@emotion/sheet/-/sheet-1.2.0.tgz",
+      "integrity": "sha512-OiTkRgpxescko+M51tZsMq7Puu/KP55wMT8BgpcXVG2hqXc0Vo0mfymJ/Uj24Hp0i083ji/o0aLddh08UEjq8w=="
+    },
+    "node_modules/@emotion/styled": {
+      "version": "11.10.0",
+      "resolved": "https://registry.npmjs.org/@emotion/styled/-/styled-11.10.0.tgz",
+      "integrity": "sha512-V9oaEH6V4KePeQpgUE83i8ht+4Ri3E8Djp/ZPJ4DQlqWhSKITvgzlR3/YQE2hdfP4Jw3qVRkANJz01LLqK9/TA==",
+      "dependencies": {
+        "@babel/runtime": "^7.18.3",
+        "@emotion/babel-plugin": "^11.10.0",
+        "@emotion/is-prop-valid": "^1.2.0",
+        "@emotion/serialize": "^1.1.0",
+        "@emotion/utils": "^1.2.0"
+      },
+      "peerDependencies": {
+        "@babel/core": "^7.0.0",
+        "@emotion/react": "^11.0.0-rc.0",
+        "react": ">=16.8.0"
+      },
+      "peerDependenciesMeta": {
+        "@babel/core": {
+          "optional": true
+        },
+        "@types/react": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/@emotion/styled/node_modules/@emotion/is-prop-valid": {
+      "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/@emotion/is-prop-valid/-/is-prop-valid-1.2.0.tgz",
+      "integrity": "sha512-3aDpDprjM0AwaxGE09bOPkNxHpBd+kA6jty3RnaEXdweX1DF1U3VQpPYb0g1IStAuK7SVQ1cy+bNBBKp4W3Fjg==",
+      "dependencies": {
+        "@emotion/memoize": "^0.8.0"
+      }
+    },
+    "node_modules/@emotion/styled/node_modules/@emotion/memoize": {
+      "version": "0.8.0",
+      "resolved": "https://registry.npmjs.org/@emotion/memoize/-/memoize-0.8.0.tgz",
+      "integrity": "sha512-G/YwXTkv7Den9mXDO7AhLWkE3q+I92B+VqAE+dYG4NGPaHZGvt3G8Q0p9vmE+sq7rTGphUbAvmQ9YpbfMQGGlA=="
+    },
     "node_modules/@emotion/stylis": {
       "version": "0.8.5",
       "integrity": "sha512-h6KtPihKFn3T9fuIrwvXXUOwlx3rfUvfZIcP5a6rh8Y7zjE3O06hT5Ss4S/YI1AYhuZ1kjaE/5EaOOI2NqSylQ=="
@@ -2507,6 +2655,16 @@
       "version": "0.7.5",
       "integrity": "sha512-OWORNpfjMsSSUBVrRBVGECkhWcULOAJz9ZW8uK9qgxD+87M7jHRcvh/A96XXNhXTLmKcoYSQtBEX7lHMO7YRwg=="
     },
+    "node_modules/@emotion/utils": {
+      "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/@emotion/utils/-/utils-1.2.0.tgz",
+      "integrity": "sha512-sn3WH53Kzpw8oQ5mgMmIzzyAaH2ZqFEbozVVBSYp538E06OSE6ytOp7pRAjNQR+Q/orwqdQYJSe2m3hCOeznkw=="
+    },
+    "node_modules/@emotion/weak-memoize": {
+      "version": "0.3.0",
+      "resolved": "https://registry.npmjs.org/@emotion/weak-memoize/-/weak-memoize-0.3.0.tgz",
+      "integrity": "sha512-AHPmaAx+RYfZz0eYu6Gviiagpmiyw98ySSlQvCUhVGDRtDFe4DBS0x1bSjdF3gqUDYOczB+yYvBTtEylYSdRhg=="
+    },
     "node_modules/@endemolshinegroup/cosmiconfig-typescript-loader": {
       "version": "3.0.2",
       "integrity": "sha512-QRVtqJuS1mcT56oHpVegkKBlgtWjXw/gHNWO3eL9oyB5Sc7HBoc2OLG/nYpVfT/Jejvo3NUrD0Udk7XgoyDKkA==",
@@ -3422,6 +3580,398 @@
         "@jridgewell/sourcemap-codec": "^1.4.10"
       }
     },
+    "node_modules/@mui/base": {
+      "version": "5.0.0-alpha.94",
+      "resolved": "https://registry.npmjs.org/@mui/base/-/base-5.0.0-alpha.94.tgz",
+      "integrity": "sha512-IJXmgTF07H1Iv5zjDV7zJZGUmb9cN8ERzd2dgA1akh6NWZgwyIGyQx+Au9+QSDoM5vN3FqZvU/0YCU6inUwgeQ==",
+      "dependencies": {
+        "@babel/runtime": "^7.17.2",
+        "@emotion/is-prop-valid": "^1.2.0",
+        "@mui/types": "^7.1.5",
+        "@mui/utils": "^5.9.3",
+        "@popperjs/core": "^2.11.6",
+        "clsx": "^1.2.1",
+        "prop-types": "^15.8.1",
+        "react-is": "^18.2.0"
+      },
+      "engines": {
+        "node": ">=12.0.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/mui"
+      },
+      "peerDependencies": {
+        "@types/react": "^17.0.0 || ^18.0.0",
+        "react": "^17.0.0 || ^18.0.0",
+        "react-dom": "^17.0.0 || ^18.0.0"
+      },
+      "peerDependenciesMeta": {
+        "@types/react": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/@mui/base/node_modules/@emotion/is-prop-valid": {
+      "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/@emotion/is-prop-valid/-/is-prop-valid-1.2.0.tgz",
+      "integrity": "sha512-3aDpDprjM0AwaxGE09bOPkNxHpBd+kA6jty3RnaEXdweX1DF1U3VQpPYb0g1IStAuK7SVQ1cy+bNBBKp4W3Fjg==",
+      "dependencies": {
+        "@emotion/memoize": "^0.8.0"
+      }
+    },
+    "node_modules/@mui/base/node_modules/@emotion/memoize": {
+      "version": "0.8.0",
+      "resolved": "https://registry.npmjs.org/@emotion/memoize/-/memoize-0.8.0.tgz",
+      "integrity": "sha512-G/YwXTkv7Den9mXDO7AhLWkE3q+I92B+VqAE+dYG4NGPaHZGvt3G8Q0p9vmE+sq7rTGphUbAvmQ9YpbfMQGGlA=="
+    },
+    "node_modules/@mui/base/node_modules/@popperjs/core": {
+      "version": "2.11.6",
+      "resolved": "https://registry.npmjs.org/@popperjs/core/-/core-2.11.6.tgz",
+      "integrity": "sha512-50/17A98tWUfQ176raKiOGXuYpLyyVMkxxG6oylzL3BPOlA6ADGdK7EYunSa4I064xerltq9TGXs8HmOk5E+vw==",
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/popperjs"
+      }
+    },
+    "node_modules/@mui/base/node_modules/prop-types": {
+      "version": "15.8.1",
+      "resolved": "https://registry.npmjs.org/prop-types/-/prop-types-15.8.1.tgz",
+      "integrity": "sha512-oj87CgZICdulUohogVAR7AjlC0327U4el4L6eAvOqCeudMDVU0NThNaV+b9Df4dXgSP1gXMTnPdhfe/2qDH5cg==",
+      "dependencies": {
+        "loose-envify": "^1.4.0",
+        "object-assign": "^4.1.1",
+        "react-is": "^16.13.1"
+      }
+    },
+    "node_modules/@mui/base/node_modules/prop-types/node_modules/react-is": {
+      "version": "16.13.1",
+      "resolved": "https://registry.npmjs.org/react-is/-/react-is-16.13.1.tgz",
+      "integrity": "sha512-24e6ynE2H+OKt4kqsOvNd8kBpV65zoxbA4BVsEOB3ARVWQki/DHzaUoC5KuON/BiccDaCCTZBuOcfZs70kR8bQ=="
+    },
+    "node_modules/@mui/base/node_modules/react-is": {
+      "version": "18.2.0",
+      "resolved": "https://registry.npmjs.org/react-is/-/react-is-18.2.0.tgz",
+      "integrity": "sha512-xWGDIW6x921xtzPkhiULtthJHoJvBbF3q26fzloPCK0hsvxtPVelvftw3zjbHWSkR2km9Z+4uxbDDK/6Zw9B8w=="
+    },
+    "node_modules/@mui/core-downloads-tracker": {
+      "version": "5.10.2",
+      "resolved": "https://registry.npmjs.org/@mui/core-downloads-tracker/-/core-downloads-tracker-5.10.2.tgz",
+      "integrity": "sha512-1guoGvL3QZ7VjA3y9zye9Rpm+jz18rVZIo3AauTGyW5ntDMxr/cR0M18nuc/NH2KqpMt+coh4NwPEO1uPuKM5w==",
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/mui"
+      }
+    },
+    "node_modules/@mui/icons-material": {
+      "version": "5.10.2",
+      "resolved": "https://registry.npmjs.org/@mui/icons-material/-/icons-material-5.10.2.tgz",
+      "integrity": "sha512-p7ku+43JeKRz0ONGzPZbRXZRbE7vCKP1Cr8l/Yj9sUIGVQ6CM/m37u6udacJZkDXD+G2FoxJPixrVvvjx6f64w==",
+      "dependencies": {
+        "@babel/runtime": "^7.17.2"
+      },
+      "engines": {
+        "node": ">=12.0.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/mui"
+      },
+      "peerDependencies": {
+        "@mui/material": "^5.0.0",
+        "@types/react": "^17.0.0 || ^18.0.0",
+        "react": "^17.0.0 || ^18.0.0"
+      },
+      "peerDependenciesMeta": {
+        "@types/react": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/@mui/material": {
+      "version": "5.10.2",
+      "resolved": "https://registry.npmjs.org/@mui/material/-/material-5.10.2.tgz",
+      "integrity": "sha512-ay43fuQLXROXkxFd6tqbj394Hu8BlbmpCdEDFtAisijulla2ZLfQa24pjhdX+56HrHReB3cZsf/sRq+DSfIgiA==",
+      "dependencies": {
+        "@babel/runtime": "^7.17.2",
+        "@mui/base": "5.0.0-alpha.94",
+        "@mui/core-downloads-tracker": "^5.10.2",
+        "@mui/system": "^5.10.2",
+        "@mui/types": "^7.1.5",
+        "@mui/utils": "^5.9.3",
+        "@types/react-transition-group": "^4.4.5",
+        "clsx": "^1.2.1",
+        "csstype": "^3.1.0",
+        "prop-types": "^15.8.1",
+        "react-is": "^18.2.0",
+        "react-transition-group": "^4.4.5"
+      },
+      "engines": {
+        "node": ">=12.0.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/mui"
+      },
+      "peerDependencies": {
+        "@emotion/react": "^11.5.0",
+        "@emotion/styled": "^11.3.0",
+        "@types/react": "^17.0.0 || ^18.0.0",
+        "react": "^17.0.0 || ^18.0.0",
+        "react-dom": "^17.0.0 || ^18.0.0"
+      },
+      "peerDependenciesMeta": {
+        "@emotion/react": {
+          "optional": true
+        },
+        "@emotion/styled": {
+          "optional": true
+        },
+        "@types/react": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/@mui/material/node_modules/dom-helpers": {
+      "version": "5.2.1",
+      "resolved": "https://registry.npmjs.org/dom-helpers/-/dom-helpers-5.2.1.tgz",
+      "integrity": "sha512-nRCa7CK3VTrM2NmGkIy4cbK7IZlgBE/PYMn55rrXefr5xXDP0LdtfPnblFDoVdcAfslJ7or6iqAUnx0CCGIWQA==",
+      "dependencies": {
+        "@babel/runtime": "^7.8.7",
+        "csstype": "^3.0.2"
+      }
+    },
+    "node_modules/@mui/material/node_modules/prop-types": {
+      "version": "15.8.1",
+      "resolved": "https://registry.npmjs.org/prop-types/-/prop-types-15.8.1.tgz",
+      "integrity": "sha512-oj87CgZICdulUohogVAR7AjlC0327U4el4L6eAvOqCeudMDVU0NThNaV+b9Df4dXgSP1gXMTnPdhfe/2qDH5cg==",
+      "dependencies": {
+        "loose-envify": "^1.4.0",
+        "object-assign": "^4.1.1",
+        "react-is": "^16.13.1"
+      }
+    },
+    "node_modules/@mui/material/node_modules/prop-types/node_modules/react-is": {
+      "version": "16.13.1",
+      "resolved": "https://registry.npmjs.org/react-is/-/react-is-16.13.1.tgz",
+      "integrity": "sha512-24e6ynE2H+OKt4kqsOvNd8kBpV65zoxbA4BVsEOB3ARVWQki/DHzaUoC5KuON/BiccDaCCTZBuOcfZs70kR8bQ=="
+    },
+    "node_modules/@mui/material/node_modules/react-is": {
+      "version": "18.2.0",
+      "resolved": "https://registry.npmjs.org/react-is/-/react-is-18.2.0.tgz",
+      "integrity": "sha512-xWGDIW6x921xtzPkhiULtthJHoJvBbF3q26fzloPCK0hsvxtPVelvftw3zjbHWSkR2km9Z+4uxbDDK/6Zw9B8w=="
+    },
+    "node_modules/@mui/material/node_modules/react-transition-group": {
+      "version": "4.4.5",
+      "resolved": "https://registry.npmjs.org/react-transition-group/-/react-transition-group-4.4.5.tgz",
+      "integrity": "sha512-pZcd1MCJoiKiBR2NRxeCRg13uCXbydPnmB4EOeRrY7480qNWO8IIgQG6zlDkm6uRMsURXPuKq0GWtiM59a5Q6g==",
+      "dependencies": {
+        "@babel/runtime": "^7.5.5",
+        "dom-helpers": "^5.0.1",
+        "loose-envify": "^1.4.0",
+        "prop-types": "^15.6.2"
+      },
+      "peerDependencies": {
+        "react": ">=16.6.0",
+        "react-dom": ">=16.6.0"
+      }
+    },
+    "node_modules/@mui/private-theming": {
+      "version": "5.9.3",
+      "resolved": "https://registry.npmjs.org/@mui/private-theming/-/private-theming-5.9.3.tgz",
+      "integrity": "sha512-Ys3WO39WqoGciGX9k5AIi/k2zJhlydv4FzlEEwtw9OqdMaV0ydK/TdZekKzjP9sTI/JcdAP3H5DWtUaPLQJjWg==",
+      "dependencies": {
+        "@babel/runtime": "^7.17.2",
+        "@mui/utils": "^5.9.3",
+        "prop-types": "^15.8.1"
+      },
+      "engines": {
+        "node": ">=12.0.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/mui"
+      },
+      "peerDependencies": {
+        "@types/react": "^17.0.0 || ^18.0.0",
+        "react": "^17.0.0 || ^18.0.0"
+      },
+      "peerDependenciesMeta": {
+        "@types/react": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/@mui/private-theming/node_modules/prop-types": {
+      "version": "15.8.1",
+      "resolved": "https://registry.npmjs.org/prop-types/-/prop-types-15.8.1.tgz",
+      "integrity": "sha512-oj87CgZICdulUohogVAR7AjlC0327U4el4L6eAvOqCeudMDVU0NThNaV+b9Df4dXgSP1gXMTnPdhfe/2qDH5cg==",
+      "dependencies": {
+        "loose-envify": "^1.4.0",
+        "object-assign": "^4.1.1",
+        "react-is": "^16.13.1"
+      }
+    },
+    "node_modules/@mui/private-theming/node_modules/react-is": {
+      "version": "16.13.1",
+      "resolved": "https://registry.npmjs.org/react-is/-/react-is-16.13.1.tgz",
+      "integrity": "sha512-24e6ynE2H+OKt4kqsOvNd8kBpV65zoxbA4BVsEOB3ARVWQki/DHzaUoC5KuON/BiccDaCCTZBuOcfZs70kR8bQ=="
+    },
+    "node_modules/@mui/styled-engine": {
+      "version": "5.10.2",
+      "resolved": "https://registry.npmjs.org/@mui/styled-engine/-/styled-engine-5.10.2.tgz",
+      "integrity": "sha512-YqnptNQ2E0cWwOTmLCEvrddiiR/neUfn2AD/4TDUXZu8B2n7NfDb9d3bAUfWZV+KmulQdAedoaZDqyXBFGLdbQ==",
+      "dependencies": {
+        "@babel/runtime": "^7.17.2",
+        "@emotion/cache": "^11.10.1",
+        "csstype": "^3.1.0",
+        "prop-types": "^15.8.1"
+      },
+      "engines": {
+        "node": ">=12.0.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/mui"
+      },
+      "peerDependencies": {
+        "@emotion/react": "^11.4.1",
+        "@emotion/styled": "^11.3.0",
+        "react": "^17.0.0 || ^18.0.0"
+      },
+      "peerDependenciesMeta": {
+        "@emotion/react": {
+          "optional": true
+        },
+        "@emotion/styled": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/@mui/styled-engine/node_modules/prop-types": {
+      "version": "15.8.1",
+      "resolved": "https://registry.npmjs.org/prop-types/-/prop-types-15.8.1.tgz",
+      "integrity": "sha512-oj87CgZICdulUohogVAR7AjlC0327U4el4L6eAvOqCeudMDVU0NThNaV+b9Df4dXgSP1gXMTnPdhfe/2qDH5cg==",
+      "dependencies": {
+        "loose-envify": "^1.4.0",
+        "object-assign": "^4.1.1",
+        "react-is": "^16.13.1"
+      }
+    },
+    "node_modules/@mui/styled-engine/node_modules/react-is": {
+      "version": "16.13.1",
+      "resolved": "https://registry.npmjs.org/react-is/-/react-is-16.13.1.tgz",
+      "integrity": "sha512-24e6ynE2H+OKt4kqsOvNd8kBpV65zoxbA4BVsEOB3ARVWQki/DHzaUoC5KuON/BiccDaCCTZBuOcfZs70kR8bQ=="
+    },
+    "node_modules/@mui/system": {
+      "version": "5.10.2",
+      "resolved": "https://registry.npmjs.org/@mui/system/-/system-5.10.2.tgz",
+      "integrity": "sha512-YudwJhLcEoQiwCAmzeMr9P3ISiVGNsxBIIPzFxaGwJ8+mMrx3qoPVOV2sfm0ZuNiQuABshEw4KqHa5ftNC+pOQ==",
+      "dependencies": {
+        "@babel/runtime": "^7.17.2",
+        "@mui/private-theming": "^5.9.3",
+        "@mui/styled-engine": "^5.10.2",
+        "@mui/types": "^7.1.5",
+        "@mui/utils": "^5.9.3",
+        "clsx": "^1.2.1",
+        "csstype": "^3.1.0",
+        "prop-types": "^15.8.1"
+      },
+      "engines": {
+        "node": ">=12.0.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/mui"
+      },
+      "peerDependencies": {
+        "@emotion/react": "^11.5.0",
+        "@emotion/styled": "^11.3.0",
+        "@types/react": "^17.0.0 || ^18.0.0",
+        "react": "^17.0.0 || ^18.0.0"
+      },
+      "peerDependenciesMeta": {
+        "@emotion/react": {
+          "optional": true
+        },
+        "@emotion/styled": {
+          "optional": true
+        },
+        "@types/react": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/@mui/system/node_modules/prop-types": {
+      "version": "15.8.1",
+      "resolved": "https://registry.npmjs.org/prop-types/-/prop-types-15.8.1.tgz",
+      "integrity": "sha512-oj87CgZICdulUohogVAR7AjlC0327U4el4L6eAvOqCeudMDVU0NThNaV+b9Df4dXgSP1gXMTnPdhfe/2qDH5cg==",
+      "dependencies": {
+        "loose-envify": "^1.4.0",
+        "object-assign": "^4.1.1",
+        "react-is": "^16.13.1"
+      }
+    },
+    "node_modules/@mui/system/node_modules/react-is": {
+      "version": "16.13.1",
+      "resolved": "https://registry.npmjs.org/react-is/-/react-is-16.13.1.tgz",
+      "integrity": "sha512-24e6ynE2H+OKt4kqsOvNd8kBpV65zoxbA4BVsEOB3ARVWQki/DHzaUoC5KuON/BiccDaCCTZBuOcfZs70kR8bQ=="
+    },
+    "node_modules/@mui/types": {
+      "version": "7.1.5",
+      "resolved": "https://registry.npmjs.org/@mui/types/-/types-7.1.5.tgz",
+      "integrity": "sha512-HnRXrxgHJYJcT8ZDdDCQIlqk0s0skOKD7eWs9mJgBUu70hyW4iA6Kiv3yspJR474RFH8hysKR65VVSzUSzkuwA==",
+      "peerDependencies": {
+        "@types/react": "*"
+      },
+      "peerDependenciesMeta": {
+        "@types/react": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/@mui/utils": {
+      "version": "5.9.3",
+      "resolved": "https://registry.npmjs.org/@mui/utils/-/utils-5.9.3.tgz",
+      "integrity": "sha512-l0N5bcrenE9hnwZ/jPecpIRqsDFHkPXoFUcmkgysaJwVZzJ3yQkGXB47eqmXX5yyGrSc6HksbbqXEaUya+siew==",
+      "dependencies": {
+        "@babel/runtime": "^7.17.2",
+        "@types/prop-types": "^15.7.5",
+        "@types/react-is": "^16.7.1 || ^17.0.0",
+        "prop-types": "^15.8.1",
+        "react-is": "^18.2.0"
+      },
+      "engines": {
+        "node": ">=12.0.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/mui"
+      },
+      "peerDependencies": {
+        "react": "^17.0.0 || ^18.0.0"
+      }
+    },
+    "node_modules/@mui/utils/node_modules/prop-types": {
+      "version": "15.8.1",
+      "resolved": "https://registry.npmjs.org/prop-types/-/prop-types-15.8.1.tgz",
+      "integrity": "sha512-oj87CgZICdulUohogVAR7AjlC0327U4el4L6eAvOqCeudMDVU0NThNaV+b9Df4dXgSP1gXMTnPdhfe/2qDH5cg==",
+      "dependencies": {
+        "loose-envify": "^1.4.0",
+        "object-assign": "^4.1.1",
+        "react-is": "^16.13.1"
+      }
+    },
+    "node_modules/@mui/utils/node_modules/prop-types/node_modules/react-is": {
+      "version": "16.13.1",
+      "resolved": "https://registry.npmjs.org/react-is/-/react-is-16.13.1.tgz",
+      "integrity": "sha512-24e6ynE2H+OKt4kqsOvNd8kBpV65zoxbA4BVsEOB3ARVWQki/DHzaUoC5KuON/BiccDaCCTZBuOcfZs70kR8bQ=="
+    },
+    "node_modules/@mui/utils/node_modules/react-is": {
+      "version": "18.2.0",
+      "resolved": "https://registry.npmjs.org/react-is/-/react-is-18.2.0.tgz",
+      "integrity": "sha512-xWGDIW6x921xtzPkhiULtthJHoJvBbF3q26fzloPCK0hsvxtPVelvftw3zjbHWSkR2km9Z+4uxbDDK/6Zw9B8w=="
+    },
     "node_modules/@nodelib/fs.scandir": {
       "version": "2.1.5",
       "integrity": "sha512-vq24Bq3ym5HEQm2NKCr3yXDwjc7vTsEThRDnkp2DK9p1uqLR+DHurm/NOTo0KG7HYHU7eppKZj3MyqYuMBf62g==",
@@ -4207,8 +4757,7 @@
     },
     "node_modules/@types/parse-json": {
       "version": "4.0.0",
-      "integrity": "sha512-//oorEZjL6sbPcKUaCdIGlIUeH26mgzimjBB77G6XRgnDl/L5wOnpyBGRe/Mmf5CVW3PwEBE1NjiMZ/ssFh4wA==",
-      "dev": true
+      "integrity": "sha512-//oorEZjL6sbPcKUaCdIGlIUeH26mgzimjBB77G6XRgnDl/L5wOnpyBGRe/Mmf5CVW3PwEBE1NjiMZ/ssFh4wA=="
     },
     "node_modules/@types/parse5": {
       "version": "6.0.3",
@@ -4223,8 +4772,9 @@
       "dev": true
     },
     "node_modules/@types/prop-types": {
-      "version": "15.7.4",
-      "integrity": "sha512-rZ5drC/jWjrArrS8BR6SIr4cWpW09RNTYt9AMZo3Jwwif+iacXAqgVjm0B0Bv/S1jhDXKHqRVNCbACkJ89RAnQ=="
+      "version": "15.7.5",
+      "resolved": "https://registry.npmjs.org/@types/prop-types/-/prop-types-15.7.5.tgz",
+      "integrity": "sha512-JCB8C6SnDoQf0cNycqd/35A7MjcnK+ZTqE7judS6o7utxUCg6imJg3QK2qzHKszlTjcj2cn+NwMB2i96ubpj7w=="
     },
     "node_modules/@types/qs": {
       "version": "6.9.7",
@@ -4253,6 +4803,14 @@
         "@types/react": "*"
       }
     },
+    "node_modules/@types/react-is": {
+      "version": "17.0.3",
+      "resolved": "https://registry.npmjs.org/@types/react-is/-/react-is-17.0.3.tgz",
+      "integrity": "sha512-aBTIWg1emtu95bLTLx0cpkxwGW3ueZv71nE2YFBpL8k/z5czEW8yYpOo8Dp+UUAFAtKwNaOsh/ioSeQnWlZcfw==",
+      "dependencies": {
+        "@types/react": "*"
+      }
+    },
     "node_modules/@types/react-redux": {
       "version": "7.1.20",
       "integrity": "sha512-q42es4c8iIeTgcnB+yJgRTTzftv3eYYvCZOh1Ckn2eX/3o5TdsQYKUWpLoLuGlcY/p+VAhV9IOEZJcWk/vfkXw==",
@@ -4287,6 +4845,14 @@
       "integrity": "sha512-qjDJRrmvBMiTx+jyLxvLfJU7UznFuokDv4f3WRuriHKERccVpFU+8XMQUAbDzoiJCsmexxRExQeMwwCdamSKDA==",
       "dev": true
     },
+    "node_modules/@types/react-transition-group": {
+      "version": "4.4.5",
+      "resolved": "https://registry.npmjs.org/@types/react-transition-group/-/react-transition-group-4.4.5.tgz",
+      "integrity": "sha512-juKD/eiSM3/xZYzjuzH6ZwpP+/lejltmiS3QEzV/vmb/Q8+HfDmxu+Baga8UEMGBqV88Nbg4l2hY/K2DkyaLLA==",
+      "dependencies": {
+        "@types/react": "*"
+      }
+    },
     "node_modules/@types/retry": {
       "version": "0.12.1",
       "integrity": "sha512-xoDlM2S4ortawSWORYqsdU+2rxdh4LRW9ytc3zmT37RIKQh6IHyKwwtKhKis9ah8ol07DCkZxPt8BBvPjC6v4g==",
@@ -5919,6 +6485,20 @@
         "node": "^12.13.0 || ^14.15.0 || ^16.10.0 || >=17.0.0"
       }
     },
+    "node_modules/babel-plugin-macros": {
+      "version": "3.1.0",
+      "resolved": "https://registry.npmjs.org/babel-plugin-macros/-/babel-plugin-macros-3.1.0.tgz",
+      "integrity": "sha512-Cg7TFGpIr01vOQNODXOOaGz2NpCU5gl8x1qJFbb6hbZxR7XrcE2vtbAsTAbJ7/xwJtUuJEw8K8Zr/AE0LHlesg==",
+      "dependencies": {
+        "@babel/runtime": "^7.12.5",
+        "cosmiconfig": "^7.0.0",
+        "resolve": "^1.19.0"
+      },
+      "engines": {
+        "node": ">=10",
+        "npm": ">=6"
+      }
+    },
     "node_modules/babel-plugin-styled-components": {
       "version": "2.0.1",
       "integrity": "sha512-U3wmORxerYBiqcRCo6thItIosEIga3F+ph0jJPkiOZJjyhpZyUZFQV9XvrZ2CbBIihJ3rDBC/itQ+Wx3VHMauw==",
@@ -6228,7 +6808,6 @@
     "node_modules/callsites": {
       "version": "3.1.0",
       "integrity": "sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==",
-      "dev": true,
       "engines": {
         "node": ">=6"
       }
@@ -6467,6 +7046,14 @@
         "node": ">=0.8"
       }
     },
+    "node_modules/clsx": {
+      "version": "1.2.1",
+      "resolved": "https://registry.npmjs.org/clsx/-/clsx-1.2.1.tgz",
+      "integrity": "sha512-EcR6r5a8bj6pu3ycsa/E/cKVGuTgZJZdsyUYHOksG/UHIiKfjxzRxYJpyVBwYaQeOvghal9fcc4PidlgzugAQg==",
+      "engines": {
+        "node": ">=6"
+      }
+    },
     "node_modules/co": {
       "version": "4.6.0",
       "resolved": "https://registry.npmjs.org/co/-/co-4.6.0.tgz",
@@ -6707,7 +7294,6 @@
     "node_modules/convert-source-map": {
       "version": "1.8.0",
       "integrity": "sha512-+OQdjP49zViI/6i7nIJpA8rAl4sV/JdPfU9nZs3VqOwGIgizICvuN2ru6fMd+4llL0tar18UYJXfZ/TWtmhUjA==",
-      "dev": true,
       "dependencies": {
         "safe-buffer": "~5.1.1"
       }
@@ -6850,7 +7436,6 @@
     "node_modules/cosmiconfig": {
       "version": "7.0.1",
       "integrity": "sha512-a1YWNUV2HwGimB7dU2s1wUMurNKjpx60HxBB6xUM8Re+2s1g1IIfJvFR0/iCF+XHdE0GMTKTuLR32UQff4TEyQ==",
-      "dev": true,
       "dependencies": {
         "@types/parse-json": "^4.0.0",
         "import-fresh": "^3.2.1",
@@ -7023,8 +7608,9 @@
       "dev": true
     },
     "node_modules/csstype": {
-      "version": "3.0.10",
-      "integrity": "sha512-2u44ZG2OcNUO9HDp/Jl8C07x6pU/eTR3ncV91SiK3dhG9TWvRVsCoJw14Ckx5DgWkzGA3waZWO3d7pgqpUI/XA=="
+      "version": "3.1.0",
+      "resolved": "https://registry.npmjs.org/csstype/-/csstype-3.1.0.tgz",
+      "integrity": "sha512-uX1KG+x9h5hIJsaKR9xHUeUraxf8IODOwq9JLNPq6BwB04a/xgpq3rcx47l5BZu5zBPlgD342tdke3Hom/nJRA=="
     },
     "node_modules/damerau-levenshtein": {
       "version": "1.0.8",
@@ -7599,7 +8185,6 @@
     "node_modules/error-ex": {
       "version": "1.3.2",
       "integrity": "sha512-7dFHNmqeFSEt2ZBsCriorKnn3Z2pj+fd9kmI6QoWw4//DL+icEBfc0U7qJCisqrTsKTjw4fNFy2pW9OqStD84g==",
-      "dev": true,
       "dependencies": {
         "is-arrayish": "^0.2.1"
       }
@@ -8926,8 +9511,7 @@
     },
     "node_modules/find-root": {
       "version": "1.1.0",
-      "integrity": "sha512-NKfW6bec6GfKc0SGx1e07QZY9PE99u0Bft/0rzSD5k3sO/vwkVUpDUKVm5Gpp5Ue3YfShPFTX2070tDs5kB9Ng==",
-      "dev": true
+      "integrity": "sha512-NKfW6bec6GfKc0SGx1e07QZY9PE99u0Bft/0rzSD5k3sO/vwkVUpDUKVm5Gpp5Ue3YfShPFTX2070tDs5kB9Ng=="
     },
     "node_modules/find-up": {
       "version": "5.0.0",
@@ -9073,8 +9657,7 @@
     },
     "node_modules/function-bind": {
       "version": "1.1.1",
-      "integrity": "sha512-yIovAzMX49sF8Yl58fSCWJ5svSLuaibPxXQJFLmBObTuCr0Mf1KiPopGM9NiFjiYBCbfaa2Fh6breQ6ANVTI0A==",
-      "dev": true
+      "integrity": "sha512-yIovAzMX49sF8Yl58fSCWJ5svSLuaibPxXQJFLmBObTuCr0Mf1KiPopGM9NiFjiYBCbfaa2Fh6breQ6ANVTI0A=="
     },
     "node_modules/functional-red-black-tree": {
       "version": "1.0.1",
@@ -9084,7 +9667,6 @@
     "node_modules/gensync": {
       "version": "1.0.0-beta.2",
       "integrity": "sha512-3hN7NaskYvMDLQY55gnW3NQ+mesEAepTqlg+VEbj7zzqEMBVNhzcGYYeqFo/TlYz6eQiFcp1HcsCZO+nGgS8zg==",
-      "dev": true,
       "engines": {
         "node": ">=6.9.0"
       }
@@ -9360,7 +9942,6 @@
     "node_modules/has": {
       "version": "1.0.3",
       "integrity": "sha512-f2dvO0VU6Oej7RkWJGrehjbzMAjFp5/VKPp5tTpWIV4JHHZK1/BxbFRtf/siA2SWTe09caDmVtYYzWEIbBS4zw==",
-      "dev": true,
       "dependencies": {
         "function-bind": "^1.1.1"
       },
@@ -9796,7 +10377,6 @@
     "node_modules/import-fresh": {
       "version": "3.3.0",
       "integrity": "sha512-veYYhQa+D1QBKznvhUHxb8faxlrwUnxseDAbAp457E0wLNio2bOSKnjYDhMj+YiAq61xrMGhQk9iXVk5FzgQMw==",
-      "dev": true,
       "dependencies": {
         "parent-module": "^1.0.0",
         "resolve-from": "^4.0.0"
@@ -9811,7 +10391,6 @@
     "node_modules/import-fresh/node_modules/resolve-from": {
       "version": "4.0.0",
       "integrity": "sha512-pb/MYmXstAkysRFx8piNI1tGFNQIFA3vkE3Gq4EuA1dF6gHp/+vgZqsCGJapvy8N3Q+4o7FwvquPJcnZ7RYy4g==",
-      "dev": true,
       "engines": {
         "node": ">=4"
       }
@@ -9924,8 +10503,7 @@
     },
     "node_modules/is-arrayish": {
       "version": "0.2.1",
-      "integrity": "sha512-zz06S8t0ozoDXMG+ube26zeCTNXcKIPJZJi8hBrF4idCLms4CG9QtK7qBl1boi5ODzFpjswb5JPmHCbMpjaYzg==",
-      "dev": true
+      "integrity": "sha512-zz06S8t0ozoDXMG+ube26zeCTNXcKIPJZJi8hBrF4idCLms4CG9QtK7qBl1boi5ODzFpjswb5JPmHCbMpjaYzg=="
     },
     "node_modules/is-bigint": {
       "version": "1.0.4",
@@ -10010,7 +10588,6 @@
     "node_modules/is-core-module": {
       "version": "2.8.1",
       "integrity": "sha512-SdNCUs284hr40hFTFP6l0IfZ/RSrMXF3qgoRHd3/79unUTvrFO/JoXwkGm+5J/Oe3E/b5GsnG330uUNgRpu1PA==",
-      "dev": true,
       "dependencies": {
         "has": "^1.0.3"
       },
@@ -12681,8 +13258,7 @@
     },
     "node_modules/json-parse-even-better-errors": {
       "version": "2.3.1",
-      "integrity": "sha512-xyFwyhro/JEof6Ghe2iz2NcXoj2sloNsWr/XsERDK/oiPCfaNhl5ONfp+jQdAZRQQ0IJWNzH9zIZF7li91kh2w==",
-      "dev": true
+      "integrity": "sha512-xyFwyhro/JEof6Ghe2iz2NcXoj2sloNsWr/XsERDK/oiPCfaNhl5ONfp+jQdAZRQQ0IJWNzH9zIZF7li91kh2w=="
     },
     "node_modules/json-schema-traverse": {
       "version": "0.4.1",
@@ -12884,8 +13460,7 @@
     },
     "node_modules/lines-and-columns": {
       "version": "1.2.4",
-      "integrity": "sha512-7ylylesZQ/PV29jhEDl3Ufjo6ZX7gCqJr5F7PKrqc93v7fzSymt1BpwEU8nAUXs8qzzvqhbjhK5QZg6Mt/HkBg==",
-      "dev": true
+      "integrity": "sha512-7ylylesZQ/PV29jhEDl3Ufjo6ZX7gCqJr5F7PKrqc93v7fzSymt1BpwEU8nAUXs8qzzvqhbjhK5QZg6Mt/HkBg=="
     },
     "node_modules/loader-runner": {
       "version": "4.2.0",
@@ -14696,7 +15271,6 @@
     "node_modules/parent-module": {
       "version": "1.0.1",
       "integrity": "sha512-GQ2EWRpQV8/o+Aw8YqtfZZPfNRWZYkbidE9k5rpl/hC3vtHHBfGm2Ifi6qWV+coDGkrUKZAxE3Lot5kcsRlh+g==",
-      "dev": true,
       "dependencies": {
         "callsites": "^3.0.0"
       },
@@ -14707,7 +15281,6 @@
     "node_modules/parse-json": {
       "version": "5.2.0",
       "integrity": "sha512-ayCKvm/phCGxOkYRSCM82iDwct8/EonSEgCSxWxD7ve6jHggsFl4fZVQBPRNgQoKiuV/odhFrGzQXZwbifC8Rg==",
-      "dev": true,
       "dependencies": {
         "@babel/code-frame": "^7.0.0",
         "error-ex": "^1.3.1",
@@ -14784,8 +15357,7 @@
     },
     "node_modules/path-parse": {
       "version": "1.0.7",
-      "integrity": "sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw==",
-      "dev": true
+      "integrity": "sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw=="
     },
     "node_modules/path-to-regexp": {
       "version": "1.8.0",
@@ -14797,7 +15369,6 @@
     "node_modules/path-type": {
       "version": "4.0.0",
       "integrity": "sha512-gDKb8aZMDeD/tZWs9P6+q0J9Mwkdl6xMV8TjnGP3qJVJ06bdMgkbBlLU8IdfOsIsFz2BW1rNVT3XuNEl8zPAvw==",
-      "dev": true,
       "engines": {
         "node": ">=8"
       }
@@ -16486,7 +17057,6 @@
     "node_modules/resolve": {
       "version": "1.22.0",
       "integrity": "sha512-Hhtrw0nLeSrFQ7phPp4OOcVjLPIeMnRlr5mcnVuMe7M/7eBn98A3hmFRLoFo3DLZkivSYwhRUJTyPyWAk56WLw==",
-      "dev": true,
       "dependencies": {
         "is-core-module": "^2.8.1",
         "path-parse": "^1.0.7",
@@ -16726,7 +17296,6 @@
     "node_modules/semver": {
       "version": "6.3.0",
       "integrity": "sha512-b39TBaTSfV6yBrapU89p5fKekE2m/NwnDocOVruQFS1/veMgdzuPcnOM34M6CwxW8jH/lxEa5rBoDeUwu5HHTw==",
-      "dev": true,
       "bin": {
         "semver": "bin/semver.js"
       }
@@ -17332,6 +17901,11 @@
         "react-is": ">= 16.8.0"
       }
     },
+    "node_modules/stylis": {
+      "version": "4.0.13",
+      "resolved": "https://registry.npmjs.org/stylis/-/stylis-4.0.13.tgz",
+      "integrity": "sha512-xGPXiFVl4YED9Jh7Euv2V220mriG9u4B2TA6Ybjc1catrstKD2PpIdU3U0RKpkVBC2EhmL/F0sPCr9vrFTNRag=="
+    },
     "node_modules/supports-color": {
       "version": "5.5.0",
       "integrity": "sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==",
@@ -17379,7 +17953,6 @@
     "node_modules/supports-preserve-symlinks-flag": {
       "version": "1.0.0",
       "integrity": "sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w==",
-      "dev": true,
       "engines": {
         "node": ">= 0.4"
       },
@@ -18815,7 +19388,6 @@
     "node_modules/yaml": {
       "version": "1.10.2",
       "integrity": "sha512-r3vXyErRCYJ7wg28yvBY5VSoAF8ZvlcW9/BwUzEtUsjvX/DKs24dIkuwjtuprwJJHsbyUbLApepYTR1BN4uHrg==",
-      "dev": true,
       "engines": {
         "node": ">= 6"
       }
@@ -18915,13 +19487,11 @@
     },
     "@babel/compat-data": {
       "version": "7.16.8",
-      "integrity": "sha512-m7OkX0IdKLKPpBlJtF561YJal5y/jyI5fNfWbPxh2D/nbzzGI4qRyrD8xO2jB24u7l+5I2a43scCG2IrfjC50Q==",
-      "dev": true
+      "integrity": "sha512-m7OkX0IdKLKPpBlJtF561YJal5y/jyI5fNfWbPxh2D/nbzzGI4qRyrD8xO2jB24u7l+5I2a43scCG2IrfjC50Q=="
     },
     "@babel/core": {
       "version": "7.16.0",
       "integrity": "sha512-mYZEvshBRHGsIAiyH5PzCFTCfbWfoYbO/jcSdXQSUQu1/pW0xDZAUP7KEc32heqWTAfAHhV9j1vH8Sav7l+JNQ==",
-      "dev": true,
       "requires": {
         "@babel/code-frame": "^7.16.0",
         "@babel/generator": "^7.16.0",
@@ -18943,7 +19513,6 @@
         "@babel/helper-compilation-targets": {
           "version": "7.16.7",
           "integrity": "sha512-mGojBwIWcwGD6rfqgRXVlVYmPAv7eOpIemUG3dGnDdCY4Pae70ROij3XmfrH6Fa1h1aiDylpglbZyktfzyo/hA==",
-          "dev": true,
           "requires": {
             "@babel/compat-data": "^7.16.4",
             "@babel/helper-validator-option": "^7.16.7",
@@ -19034,7 +19603,6 @@
     "@babel/helper-module-transforms": {
       "version": "7.16.7",
       "integrity": "sha512-gaqtLDxJEFCeQbYp9aLAefjhkKdjKcdh6DB7jniIGU3Pz52WAmP268zK0VgPz9hUNkMSYeH976K2/Y6yPadpng==",
-      "dev": true,
       "requires": {
         "@babel/helper-environment-visitor": "^7.16.7",
         "@babel/helper-module-imports": "^7.16.7",
@@ -19057,8 +19625,7 @@
     "@babel/helper-plugin-utils": {
       "version": "7.18.9",
       "resolved": "https://registry.npmjs.org/@babel/helper-plugin-utils/-/helper-plugin-utils-7.18.9.tgz",
-      "integrity": "sha512-aBXPT3bmtLryXaoJLyYPXPlSD4p1ld9aYeR+sJNOZjJJGiOpb+fKfh3NkcCu7J54nUJwCERPBExCCpyCOHnu/w==",
-      "dev": true
+      "integrity": "sha512-aBXPT3bmtLryXaoJLyYPXPlSD4p1ld9aYeR+sJNOZjJJGiOpb+fKfh3NkcCu7J54nUJwCERPBExCCpyCOHnu/w=="
     },
     "@babel/helper-remap-async-to-generator": {
       "version": "7.16.8",
@@ -19085,7 +19652,6 @@
     "@babel/helper-simple-access": {
       "version": "7.16.7",
       "integrity": "sha512-ZIzHVyoeLMvXMN/vok/a4LWRy8G2v205mNP0XOuf9XRLyX5/u9CnVulUtDgUTama3lT+bf/UqucuZjqiGuTS1g==",
-      "dev": true,
       "requires": {
         "@babel/types": "^7.16.7"
       }
@@ -19111,8 +19677,7 @@
     },
     "@babel/helper-validator-option": {
       "version": "7.16.7",
-      "integrity": "sha512-TRtenOuRUVo9oIQGPC5G9DgK4743cdxvtOw0weQNpZXaS16SCBi5MNjZF8vba3ETURjZpTbVn7Vvcf2eAwFozQ==",
-      "dev": true
+      "integrity": "sha512-TRtenOuRUVo9oIQGPC5G9DgK4743cdxvtOw0weQNpZXaS16SCBi5MNjZF8vba3ETURjZpTbVn7Vvcf2eAwFozQ=="
     },
     "@babel/helper-wrap-function": {
       "version": "7.16.8",
@@ -19128,7 +19693,6 @@
     "@babel/helpers": {
       "version": "7.16.7",
       "integrity": "sha512-9ZDoqtfY7AuEOt3cxchfii6C7GDyyMBffktR5B2jvWv8u2+efwvpnVKXMWzNehqy68tKgAfSwfdw/lWpthS2bw==",
-      "dev": true,
       "requires": {
         "@babel/template": "^7.16.7",
         "@babel/traverse": "^7.16.7",
@@ -19218,6 +19782,14 @@
         "@babel/helper-plugin-utils": "^7.8.0"
       }
     },
+    "@babel/plugin-syntax-jsx": {
+      "version": "7.18.6",
+      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-jsx/-/plugin-syntax-jsx-7.18.6.tgz",
+      "integrity": "sha512-6mmljtAedFGTWu2p/8WIORGwy+61PLgOMPOdazc7YoJ9ZCWUyFy3A6CpPkRKLKD1ToAesxX8KGEViAiLo9N+7Q==",
+      "requires": {
+        "@babel/helper-plugin-utils": "^7.18.6"
+      }
+    },
     "@babel/plugin-syntax-logical-assignment-operators": {
       "version": "7.10.4",
       "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-logical-assignment-operators/-/plugin-syntax-logical-assignment-operators-7.10.4.tgz",
@@ -20195,16 +20767,6 @@
             "@babel/helper-plugin-utils": "^7.16.7",
             "@babel/plugin-syntax-jsx": "^7.16.7",
             "@babel/types": "^7.16.7"
-          },
-          "dependencies": {
-            "@babel/plugin-syntax-jsx": {
-              "version": "7.16.7",
-              "integrity": "sha512-Esxmk7YjA8QysKeT3VhTXvF6y77f/a91SIs4pWb4H2eWGQkCKFgQaG6hdoEVZtGsrAcb2K5BW66XsOErD4WU3Q==",
-              "dev": true,
-              "requires": {
-                "@babel/helper-plugin-utils": "^7.16.7"
-              }
-            }
           }
         },
         "@babel/plugin-transform-react-jsx-development": {
@@ -20266,8 +20828,9 @@
       }
     },
     "@babel/runtime": {
-      "version": "7.16.7",
-      "integrity": "sha512-9E9FJowqAsytyOY6LG+1KuueckRL+aQW+mKvXRXnuFGyRAyepJPmEo9vgMfXUA6O9u3IeEdv9MAkppFcaQwogQ==",
+      "version": "7.18.9",
+      "resolved": "https://registry.npmjs.org/@babel/runtime/-/runtime-7.18.9.tgz",
+      "integrity": "sha512-lkqXDcvlFT5rvEjiu6+QYO+1GXrEHRo2LOtS7E4GtX5ESIZOgepqsZBVIj6Pv+a6zqsya9VCgiK1KAK4BvJDAw==",
       "requires": {
         "regenerator-runtime": "^0.13.4"
       }
@@ -20618,6 +21181,61 @@
         }
       }
     },
+    "@emotion/babel-plugin": {
+      "version": "11.10.2",
+      "resolved": "https://registry.npmjs.org/@emotion/babel-plugin/-/babel-plugin-11.10.2.tgz",
+      "integrity": "sha512-xNQ57njWTFVfPAc3cjfuaPdsgLp5QOSuRsj9MA6ndEhH/AzuZM86qIQzt6rq+aGBwj3n5/TkLmU5lhAfdRmogA==",
+      "requires": {
+        "@babel/helper-module-imports": "^7.16.7",
+        "@babel/plugin-syntax-jsx": "^7.17.12",
+        "@babel/runtime": "^7.18.3",
+        "@emotion/hash": "^0.9.0",
+        "@emotion/memoize": "^0.8.0",
+        "@emotion/serialize": "^1.1.0",
+        "babel-plugin-macros": "^3.1.0",
+        "convert-source-map": "^1.5.0",
+        "escape-string-regexp": "^4.0.0",
+        "find-root": "^1.1.0",
+        "source-map": "^0.5.7",
+        "stylis": "4.0.13"
+      },
+      "dependencies": {
+        "@emotion/memoize": {
+          "version": "0.8.0",
+          "resolved": "https://registry.npmjs.org/@emotion/memoize/-/memoize-0.8.0.tgz",
+          "integrity": "sha512-G/YwXTkv7Den9mXDO7AhLWkE3q+I92B+VqAE+dYG4NGPaHZGvt3G8Q0p9vmE+sq7rTGphUbAvmQ9YpbfMQGGlA=="
+        },
+        "escape-string-regexp": {
+          "version": "4.0.0",
+          "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-4.0.0.tgz",
+          "integrity": "sha512-TtpcNJ3XAzx3Gq8sWRzJaVajRs0uVxA2YAkdb1jm2YkPz4G6egUFAyA3n5vtEIZefPk5Wa4UXbKuS5fKkJWdgA=="
+        }
+      }
+    },
+    "@emotion/cache": {
+      "version": "11.10.3",
+      "resolved": "https://registry.npmjs.org/@emotion/cache/-/cache-11.10.3.tgz",
+      "integrity": "sha512-Psmp/7ovAa8appWh3g51goxu/z3iVms7JXOreq136D8Bbn6dYraPnmL6mdM8GThEx9vwSn92Fz+mGSjBzN8UPQ==",
+      "requires": {
+        "@emotion/memoize": "^0.8.0",
+        "@emotion/sheet": "^1.2.0",
+        "@emotion/utils": "^1.2.0",
+        "@emotion/weak-memoize": "^0.3.0",
+        "stylis": "4.0.13"
+      },
+      "dependencies": {
+        "@emotion/memoize": {
+          "version": "0.8.0",
+          "resolved": "https://registry.npmjs.org/@emotion/memoize/-/memoize-0.8.0.tgz",
+          "integrity": "sha512-G/YwXTkv7Den9mXDO7AhLWkE3q+I92B+VqAE+dYG4NGPaHZGvt3G8Q0p9vmE+sq7rTGphUbAvmQ9YpbfMQGGlA=="
+        }
+      }
+    },
+    "@emotion/hash": {
+      "version": "0.9.0",
+      "resolved": "https://registry.npmjs.org/@emotion/hash/-/hash-0.9.0.tgz",
+      "integrity": "sha512-14FtKiHhy2QoPIzdTcvh//8OyBlknNs2nXRwIhG904opCby3l+9Xaf/wuPvICBF0rc1ZCNBd3nKe9cd2mecVkQ=="
+    },
     "@emotion/is-prop-valid": {
       "version": "0.8.8",
       "integrity": "sha512-u5WtneEAr5IDG2Wv65yhunPSMLIpuKsbuOktRojfrEiEvRyC85LgPMZI63cr7NUqT8ZIGdSVg8ZKGxIug4lXcA==",
@@ -20629,6 +21247,76 @@
       "version": "0.7.4",
       "integrity": "sha512-Ja/Vfqe3HpuzRsG1oBtWTHk2PGZ7GR+2Vz5iYGelAw8dx32K0y7PjVuxK6z1nMpZOqAFsRUPCkK1YjJ56qJlgw=="
     },
+    "@emotion/react": {
+      "version": "11.10.0",
+      "resolved": "https://registry.npmjs.org/@emotion/react/-/react-11.10.0.tgz",
+      "integrity": "sha512-K6z9zlHxxBXwN8TcpwBKcEsBsOw4JWCCmR+BeeOWgqp8GIU1yA2Odd41bwdAAr0ssbQrbJbVnndvv7oiv1bZeQ==",
+      "requires": {
+        "@babel/runtime": "^7.18.3",
+        "@emotion/babel-plugin": "^11.10.0",
+        "@emotion/cache": "^11.10.0",
+        "@emotion/serialize": "^1.1.0",
+        "@emotion/utils": "^1.2.0",
+        "@emotion/weak-memoize": "^0.3.0",
+        "hoist-non-react-statics": "^3.3.1"
+      }
+    },
+    "@emotion/serialize": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/@emotion/serialize/-/serialize-1.1.0.tgz",
+      "integrity": "sha512-F1ZZZW51T/fx+wKbVlwsfchr5q97iW8brAnXmsskz4d0hVB4O3M/SiA3SaeH06x02lSNzkkQv+n3AX3kCXKSFA==",
+      "requires": {
+        "@emotion/hash": "^0.9.0",
+        "@emotion/memoize": "^0.8.0",
+        "@emotion/unitless": "^0.8.0",
+        "@emotion/utils": "^1.2.0",
+        "csstype": "^3.0.2"
+      },
+      "dependencies": {
+        "@emotion/memoize": {
+          "version": "0.8.0",
+          "resolved": "https://registry.npmjs.org/@emotion/memoize/-/memoize-0.8.0.tgz",
+          "integrity": "sha512-G/YwXTkv7Den9mXDO7AhLWkE3q+I92B+VqAE+dYG4NGPaHZGvt3G8Q0p9vmE+sq7rTGphUbAvmQ9YpbfMQGGlA=="
+        },
+        "@emotion/unitless": {
+          "version": "0.8.0",
+          "resolved": "https://registry.npmjs.org/@emotion/unitless/-/unitless-0.8.0.tgz",
+          "integrity": "sha512-VINS5vEYAscRl2ZUDiT3uMPlrFQupiKgHz5AA4bCH1miKBg4qtwkim1qPmJj/4WG6TreYMY111rEFsjupcOKHw=="
+        }
+      }
+    },
+    "@emotion/sheet": {
+      "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/@emotion/sheet/-/sheet-1.2.0.tgz",
+      "integrity": "sha512-OiTkRgpxescko+M51tZsMq7Puu/KP55wMT8BgpcXVG2hqXc0Vo0mfymJ/Uj24Hp0i083ji/o0aLddh08UEjq8w=="
+    },
+    "@emotion/styled": {
+      "version": "11.10.0",
+      "resolved": "https://registry.npmjs.org/@emotion/styled/-/styled-11.10.0.tgz",
+      "integrity": "sha512-V9oaEH6V4KePeQpgUE83i8ht+4Ri3E8Djp/ZPJ4DQlqWhSKITvgzlR3/YQE2hdfP4Jw3qVRkANJz01LLqK9/TA==",
+      "requires": {
+        "@babel/runtime": "^7.18.3",
+        "@emotion/babel-plugin": "^11.10.0",
+        "@emotion/is-prop-valid": "^1.2.0",
+        "@emotion/serialize": "^1.1.0",
+        "@emotion/utils": "^1.2.0"
+      },
+      "dependencies": {
+        "@emotion/is-prop-valid": {
+          "version": "1.2.0",
+          "resolved": "https://registry.npmjs.org/@emotion/is-prop-valid/-/is-prop-valid-1.2.0.tgz",
+          "integrity": "sha512-3aDpDprjM0AwaxGE09bOPkNxHpBd+kA6jty3RnaEXdweX1DF1U3VQpPYb0g1IStAuK7SVQ1cy+bNBBKp4W3Fjg==",
+          "requires": {
+            "@emotion/memoize": "^0.8.0"
+          }
+        },
+        "@emotion/memoize": {
+          "version": "0.8.0",
+          "resolved": "https://registry.npmjs.org/@emotion/memoize/-/memoize-0.8.0.tgz",
+          "integrity": "sha512-G/YwXTkv7Den9mXDO7AhLWkE3q+I92B+VqAE+dYG4NGPaHZGvt3G8Q0p9vmE+sq7rTGphUbAvmQ9YpbfMQGGlA=="
+        }
+      }
+    },
     "@emotion/stylis": {
       "version": "0.8.5",
       "integrity": "sha512-h6KtPihKFn3T9fuIrwvXXUOwlx3rfUvfZIcP5a6rh8Y7zjE3O06hT5Ss4S/YI1AYhuZ1kjaE/5EaOOI2NqSylQ=="
@@ -20637,6 +21325,16 @@
       "version": "0.7.5",
       "integrity": "sha512-OWORNpfjMsSSUBVrRBVGECkhWcULOAJz9ZW8uK9qgxD+87M7jHRcvh/A96XXNhXTLmKcoYSQtBEX7lHMO7YRwg=="
     },
+    "@emotion/utils": {
+      "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/@emotion/utils/-/utils-1.2.0.tgz",
+      "integrity": "sha512-sn3WH53Kzpw8oQ5mgMmIzzyAaH2ZqFEbozVVBSYp538E06OSE6ytOp7pRAjNQR+Q/orwqdQYJSe2m3hCOeznkw=="
+    },
+    "@emotion/weak-memoize": {
+      "version": "0.3.0",
+      "resolved": "https://registry.npmjs.org/@emotion/weak-memoize/-/weak-memoize-0.3.0.tgz",
+      "integrity": "sha512-AHPmaAx+RYfZz0eYu6Gviiagpmiyw98ySSlQvCUhVGDRtDFe4DBS0x1bSjdF3gqUDYOczB+yYvBTtEylYSdRhg=="
+    },
     "@endemolshinegroup/cosmiconfig-typescript-loader": {
       "version": "3.0.2",
       "integrity": "sha512-QRVtqJuS1mcT56oHpVegkKBlgtWjXw/gHNWO3eL9oyB5Sc7HBoc2OLG/nYpVfT/Jejvo3NUrD0Udk7XgoyDKkA==",
@@ -21335,6 +22033,268 @@
         "@jridgewell/sourcemap-codec": "^1.4.10"
       }
     },
+    "@mui/base": {
+      "version": "5.0.0-alpha.94",
+      "resolved": "https://registry.npmjs.org/@mui/base/-/base-5.0.0-alpha.94.tgz",
+      "integrity": "sha512-IJXmgTF07H1Iv5zjDV7zJZGUmb9cN8ERzd2dgA1akh6NWZgwyIGyQx+Au9+QSDoM5vN3FqZvU/0YCU6inUwgeQ==",
+      "requires": {
+        "@babel/runtime": "^7.17.2",
+        "@emotion/is-prop-valid": "^1.2.0",
+        "@mui/types": "^7.1.5",
+        "@mui/utils": "^5.9.3",
+        "@popperjs/core": "^2.11.6",
+        "clsx": "^1.2.1",
+        "prop-types": "^15.8.1",
+        "react-is": "^18.2.0"
+      },
+      "dependencies": {
+        "@emotion/is-prop-valid": {
+          "version": "1.2.0",
+          "resolved": "https://registry.npmjs.org/@emotion/is-prop-valid/-/is-prop-valid-1.2.0.tgz",
+          "integrity": "sha512-3aDpDprjM0AwaxGE09bOPkNxHpBd+kA6jty3RnaEXdweX1DF1U3VQpPYb0g1IStAuK7SVQ1cy+bNBBKp4W3Fjg==",
+          "requires": {
+            "@emotion/memoize": "^0.8.0"
+          }
+        },
+        "@emotion/memoize": {
+          "version": "0.8.0",
+          "resolved": "https://registry.npmjs.org/@emotion/memoize/-/memoize-0.8.0.tgz",
+          "integrity": "sha512-G/YwXTkv7Den9mXDO7AhLWkE3q+I92B+VqAE+dYG4NGPaHZGvt3G8Q0p9vmE+sq7rTGphUbAvmQ9YpbfMQGGlA=="
+        },
+        "@popperjs/core": {
+          "version": "2.11.6",
+          "resolved": "https://registry.npmjs.org/@popperjs/core/-/core-2.11.6.tgz",
+          "integrity": "sha512-50/17A98tWUfQ176raKiOGXuYpLyyVMkxxG6oylzL3BPOlA6ADGdK7EYunSa4I064xerltq9TGXs8HmOk5E+vw=="
+        },
+        "prop-types": {
+          "version": "15.8.1",
+          "resolved": "https://registry.npmjs.org/prop-types/-/prop-types-15.8.1.tgz",
+          "integrity": "sha512-oj87CgZICdulUohogVAR7AjlC0327U4el4L6eAvOqCeudMDVU0NThNaV+b9Df4dXgSP1gXMTnPdhfe/2qDH5cg==",
+          "requires": {
+            "loose-envify": "^1.4.0",
+            "object-assign": "^4.1.1",
+            "react-is": "^16.13.1"
+          },
+          "dependencies": {
+            "react-is": {
+              "version": "16.13.1",
+              "resolved": "https://registry.npmjs.org/react-is/-/react-is-16.13.1.tgz",
+              "integrity": "sha512-24e6ynE2H+OKt4kqsOvNd8kBpV65zoxbA4BVsEOB3ARVWQki/DHzaUoC5KuON/BiccDaCCTZBuOcfZs70kR8bQ=="
+            }
+          }
+        },
+        "react-is": {
+          "version": "18.2.0",
+          "resolved": "https://registry.npmjs.org/react-is/-/react-is-18.2.0.tgz",
+          "integrity": "sha512-xWGDIW6x921xtzPkhiULtthJHoJvBbF3q26fzloPCK0hsvxtPVelvftw3zjbHWSkR2km9Z+4uxbDDK/6Zw9B8w=="
+        }
+      }
+    },
+    "@mui/core-downloads-tracker": {
+      "version": "5.10.2",
+      "resolved": "https://registry.npmjs.org/@mui/core-downloads-tracker/-/core-downloads-tracker-5.10.2.tgz",
+      "integrity": "sha512-1guoGvL3QZ7VjA3y9zye9Rpm+jz18rVZIo3AauTGyW5ntDMxr/cR0M18nuc/NH2KqpMt+coh4NwPEO1uPuKM5w=="
+    },
+    "@mui/icons-material": {
+      "version": "5.10.2",
+      "resolved": "https://registry.npmjs.org/@mui/icons-material/-/icons-material-5.10.2.tgz",
+      "integrity": "sha512-p7ku+43JeKRz0ONGzPZbRXZRbE7vCKP1Cr8l/Yj9sUIGVQ6CM/m37u6udacJZkDXD+G2FoxJPixrVvvjx6f64w==",
+      "requires": {
+        "@babel/runtime": "^7.17.2"
+      }
+    },
+    "@mui/material": {
+      "version": "5.10.2",
+      "resolved": "https://registry.npmjs.org/@mui/material/-/material-5.10.2.tgz",
+      "integrity": "sha512-ay43fuQLXROXkxFd6tqbj394Hu8BlbmpCdEDFtAisijulla2ZLfQa24pjhdX+56HrHReB3cZsf/sRq+DSfIgiA==",
+      "requires": {
+        "@babel/runtime": "^7.17.2",
+        "@mui/base": "5.0.0-alpha.94",
+        "@mui/core-downloads-tracker": "^5.10.2",
+        "@mui/system": "^5.10.2",
+        "@mui/types": "^7.1.5",
+        "@mui/utils": "^5.9.3",
+        "@types/react-transition-group": "^4.4.5",
+        "clsx": "^1.2.1",
+        "csstype": "^3.1.0",
+        "prop-types": "^15.8.1",
+        "react-is": "^18.2.0",
+        "react-transition-group": "^4.4.5"
+      },
+      "dependencies": {
+        "dom-helpers": {
+          "version": "5.2.1",
+          "resolved": "https://registry.npmjs.org/dom-helpers/-/dom-helpers-5.2.1.tgz",
+          "integrity": "sha512-nRCa7CK3VTrM2NmGkIy4cbK7IZlgBE/PYMn55rrXefr5xXDP0LdtfPnblFDoVdcAfslJ7or6iqAUnx0CCGIWQA==",
+          "requires": {
+            "@babel/runtime": "^7.8.7",
+            "csstype": "^3.0.2"
+          }
+        },
+        "prop-types": {
+          "version": "15.8.1",
+          "resolved": "https://registry.npmjs.org/prop-types/-/prop-types-15.8.1.tgz",
+          "integrity": "sha512-oj87CgZICdulUohogVAR7AjlC0327U4el4L6eAvOqCeudMDVU0NThNaV+b9Df4dXgSP1gXMTnPdhfe/2qDH5cg==",
+          "requires": {
+            "loose-envify": "^1.4.0",
+            "object-assign": "^4.1.1",
+            "react-is": "^16.13.1"
+          },
+          "dependencies": {
+            "react-is": {
+              "version": "16.13.1",
+              "resolved": "https://registry.npmjs.org/react-is/-/react-is-16.13.1.tgz",
+              "integrity": "sha512-24e6ynE2H+OKt4kqsOvNd8kBpV65zoxbA4BVsEOB3ARVWQki/DHzaUoC5KuON/BiccDaCCTZBuOcfZs70kR8bQ=="
+            }
+          }
+        },
+        "react-is": {
+          "version": "18.2.0",
+          "resolved": "https://registry.npmjs.org/react-is/-/react-is-18.2.0.tgz",
+          "integrity": "sha512-xWGDIW6x921xtzPkhiULtthJHoJvBbF3q26fzloPCK0hsvxtPVelvftw3zjbHWSkR2km9Z+4uxbDDK/6Zw9B8w=="
+        },
+        "react-transition-group": {
+          "version": "4.4.5",
+          "resolved": "https://registry.npmjs.org/react-transition-group/-/react-transition-group-4.4.5.tgz",
+          "integrity": "sha512-pZcd1MCJoiKiBR2NRxeCRg13uCXbydPnmB4EOeRrY7480qNWO8IIgQG6zlDkm6uRMsURXPuKq0GWtiM59a5Q6g==",
+          "requires": {
+            "@babel/runtime": "^7.5.5",
+            "dom-helpers": "^5.0.1",
+            "loose-envify": "^1.4.0",
+            "prop-types": "^15.6.2"
+          }
+        }
+      }
+    },
+    "@mui/private-theming": {
+      "version": "5.9.3",
+      "resolved": "https://registry.npmjs.org/@mui/private-theming/-/private-theming-5.9.3.tgz",
+      "integrity": "sha512-Ys3WO39WqoGciGX9k5AIi/k2zJhlydv4FzlEEwtw9OqdMaV0ydK/TdZekKzjP9sTI/JcdAP3H5DWtUaPLQJjWg==",
+      "requires": {
+        "@babel/runtime": "^7.17.2",
+        "@mui/utils": "^5.9.3",
+        "prop-types": "^15.8.1"
+      },
+      "dependencies": {
+        "prop-types": {
+          "version": "15.8.1",
+          "resolved": "https://registry.npmjs.org/prop-types/-/prop-types-15.8.1.tgz",
+          "integrity": "sha512-oj87CgZICdulUohogVAR7AjlC0327U4el4L6eAvOqCeudMDVU0NThNaV+b9Df4dXgSP1gXMTnPdhfe/2qDH5cg==",
+          "requires": {
+            "loose-envify": "^1.4.0",
+            "object-assign": "^4.1.1",
+            "react-is": "^16.13.1"
+          }
+        },
+        "react-is": {
+          "version": "16.13.1",
+          "resolved": "https://registry.npmjs.org/react-is/-/react-is-16.13.1.tgz",
+          "integrity": "sha512-24e6ynE2H+OKt4kqsOvNd8kBpV65zoxbA4BVsEOB3ARVWQki/DHzaUoC5KuON/BiccDaCCTZBuOcfZs70kR8bQ=="
+        }
+      }
+    },
+    "@mui/styled-engine": {
+      "version": "5.10.2",
+      "resolved": "https://registry.npmjs.org/@mui/styled-engine/-/styled-engine-5.10.2.tgz",
+      "integrity": "sha512-YqnptNQ2E0cWwOTmLCEvrddiiR/neUfn2AD/4TDUXZu8B2n7NfDb9d3bAUfWZV+KmulQdAedoaZDqyXBFGLdbQ==",
+      "requires": {
+        "@babel/runtime": "^7.17.2",
+        "@emotion/cache": "^11.10.1",
+        "csstype": "^3.1.0",
+        "prop-types": "^15.8.1"
+      },
+      "dependencies": {
+        "prop-types": {
+          "version": "15.8.1",
+          "resolved": "https://registry.npmjs.org/prop-types/-/prop-types-15.8.1.tgz",
+          "integrity": "sha512-oj87CgZICdulUohogVAR7AjlC0327U4el4L6eAvOqCeudMDVU0NThNaV+b9Df4dXgSP1gXMTnPdhfe/2qDH5cg==",
+          "requires": {
+            "loose-envify": "^1.4.0",
+            "object-assign": "^4.1.1",
+            "react-is": "^16.13.1"
+          }
+        },
+        "react-is": {
+          "version": "16.13.1",
+          "resolved": "https://registry.npmjs.org/react-is/-/react-is-16.13.1.tgz",
+          "integrity": "sha512-24e6ynE2H+OKt4kqsOvNd8kBpV65zoxbA4BVsEOB3ARVWQki/DHzaUoC5KuON/BiccDaCCTZBuOcfZs70kR8bQ=="
+        }
+      }
+    },
+    "@mui/system": {
+      "version": "5.10.2",
+      "resolved": "https://registry.npmjs.org/@mui/system/-/system-5.10.2.tgz",
+      "integrity": "sha512-YudwJhLcEoQiwCAmzeMr9P3ISiVGNsxBIIPzFxaGwJ8+mMrx3qoPVOV2sfm0ZuNiQuABshEw4KqHa5ftNC+pOQ==",
+      "requires": {
+        "@babel/runtime": "^7.17.2",
+        "@mui/private-theming": "^5.9.3",
+        "@mui/styled-engine": "^5.10.2",
+        "@mui/types": "^7.1.5",
+        "@mui/utils": "^5.9.3",
+        "clsx": "^1.2.1",
+        "csstype": "^3.1.0",
+        "prop-types": "^15.8.1"
+      },
+      "dependencies": {
+        "prop-types": {
+          "version": "15.8.1",
+          "resolved": "https://registry.npmjs.org/prop-types/-/prop-types-15.8.1.tgz",
+          "integrity": "sha512-oj87CgZICdulUohogVAR7AjlC0327U4el4L6eAvOqCeudMDVU0NThNaV+b9Df4dXgSP1gXMTnPdhfe/2qDH5cg==",
+          "requires": {
+            "loose-envify": "^1.4.0",
+            "object-assign": "^4.1.1",
+            "react-is": "^16.13.1"
+          }
+        },
+        "react-is": {
+          "version": "16.13.1",
+          "resolved": "https://registry.npmjs.org/react-is/-/react-is-16.13.1.tgz",
+          "integrity": "sha512-24e6ynE2H+OKt4kqsOvNd8kBpV65zoxbA4BVsEOB3ARVWQki/DHzaUoC5KuON/BiccDaCCTZBuOcfZs70kR8bQ=="
+        }
+      }
+    },
+    "@mui/types": {
+      "version": "7.1.5",
+      "resolved": "https://registry.npmjs.org/@mui/types/-/types-7.1.5.tgz",
+      "integrity": "sha512-HnRXrxgHJYJcT8ZDdDCQIlqk0s0skOKD7eWs9mJgBUu70hyW4iA6Kiv3yspJR474RFH8hysKR65VVSzUSzkuwA==",
+      "requires": {}
+    },
+    "@mui/utils": {
+      "version": "5.9.3",
+      "resolved": "https://registry.npmjs.org/@mui/utils/-/utils-5.9.3.tgz",
+      "integrity": "sha512-l0N5bcrenE9hnwZ/jPecpIRqsDFHkPXoFUcmkgysaJwVZzJ3yQkGXB47eqmXX5yyGrSc6HksbbqXEaUya+siew==",
+      "requires": {
+        "@babel/runtime": "^7.17.2",
+        "@types/prop-types": "^15.7.5",
+        "@types/react-is": "^16.7.1 || ^17.0.0",
+        "prop-types": "^15.8.1",
+        "react-is": "^18.2.0"
+      },
+      "dependencies": {
+        "prop-types": {
+          "version": "15.8.1",
+          "resolved": "https://registry.npmjs.org/prop-types/-/prop-types-15.8.1.tgz",
+          "integrity": "sha512-oj87CgZICdulUohogVAR7AjlC0327U4el4L6eAvOqCeudMDVU0NThNaV+b9Df4dXgSP1gXMTnPdhfe/2qDH5cg==",
+          "requires": {
+            "loose-envify": "^1.4.0",
+            "object-assign": "^4.1.1",
+            "react-is": "^16.13.1"
+          },
+          "dependencies": {
+            "react-is": {
+              "version": "16.13.1",
+              "resolved": "https://registry.npmjs.org/react-is/-/react-is-16.13.1.tgz",
+              "integrity": "sha512-24e6ynE2H+OKt4kqsOvNd8kBpV65zoxbA4BVsEOB3ARVWQki/DHzaUoC5KuON/BiccDaCCTZBuOcfZs70kR8bQ=="
+            }
+          }
+        },
+        "react-is": {
+          "version": "18.2.0",
+          "resolved": "https://registry.npmjs.org/react-is/-/react-is-18.2.0.tgz",
+          "integrity": "sha512-xWGDIW6x921xtzPkhiULtthJHoJvBbF3q26fzloPCK0hsvxtPVelvftw3zjbHWSkR2km9Z+4uxbDDK/6Zw9B8w=="
+        }
+      }
+    },
     "@nodelib/fs.scandir": {
       "version": "2.1.5",
       "integrity": "sha512-vq24Bq3ym5HEQm2NKCr3yXDwjc7vTsEThRDnkp2DK9p1uqLR+DHurm/NOTo0KG7HYHU7eppKZj3MyqYuMBf62g==",
@@ -21996,8 +22956,7 @@
     },
     "@types/parse-json": {
       "version": "4.0.0",
-      "integrity": "sha512-//oorEZjL6sbPcKUaCdIGlIUeH26mgzimjBB77G6XRgnDl/L5wOnpyBGRe/Mmf5CVW3PwEBE1NjiMZ/ssFh4wA==",
-      "dev": true
+      "integrity": "sha512-//oorEZjL6sbPcKUaCdIGlIUeH26mgzimjBB77G6XRgnDl/L5wOnpyBGRe/Mmf5CVW3PwEBE1NjiMZ/ssFh4wA=="
     },
     "@types/parse5": {
       "version": "6.0.3",
@@ -22012,8 +22971,9 @@
       "dev": true
     },
     "@types/prop-types": {
-      "version": "15.7.4",
-      "integrity": "sha512-rZ5drC/jWjrArrS8BR6SIr4cWpW09RNTYt9AMZo3Jwwif+iacXAqgVjm0B0Bv/S1jhDXKHqRVNCbACkJ89RAnQ=="
+      "version": "15.7.5",
+      "resolved": "https://registry.npmjs.org/@types/prop-types/-/prop-types-15.7.5.tgz",
+      "integrity": "sha512-JCB8C6SnDoQf0cNycqd/35A7MjcnK+ZTqE7judS6o7utxUCg6imJg3QK2qzHKszlTjcj2cn+NwMB2i96ubpj7w=="
     },
     "@types/qs": {
       "version": "6.9.7",
@@ -22040,6 +23000,14 @@
       "dev": true,
       "requires": {
         "@types/react": "*"
+      }
+    },
+    "@types/react-is": {
+      "version": "17.0.3",
+      "resolved": "https://registry.npmjs.org/@types/react-is/-/react-is-17.0.3.tgz",
+      "integrity": "sha512-aBTIWg1emtu95bLTLx0cpkxwGW3ueZv71nE2YFBpL8k/z5czEW8yYpOo8Dp+UUAFAtKwNaOsh/ioSeQnWlZcfw==",
+      "requires": {
+        "@types/react": "*"
       }
     },
     "@types/react-redux": {
@@ -22078,6 +23046,14 @@
         "@types/react-router": "*"
       }
     },
+    "@types/react-transition-group": {
+      "version": "4.4.5",
+      "resolved": "https://registry.npmjs.org/@types/react-transition-group/-/react-transition-group-4.4.5.tgz",
+      "integrity": "sha512-juKD/eiSM3/xZYzjuzH6ZwpP+/lejltmiS3QEzV/vmb/Q8+HfDmxu+Baga8UEMGBqV88Nbg4l2hY/K2DkyaLLA==",
+      "requires": {
+        "@types/react": "*"
+      }
+    },
     "@types/retry": {
       "version": "0.12.1",
       "integrity": "sha512-xoDlM2S4ortawSWORYqsdU+2rxdh4LRW9ytc3zmT37RIKQh6IHyKwwtKhKis9ah8ol07DCkZxPt8BBvPjC6v4g==",
@@ -23280,6 +24256,16 @@
         "@types/babel__traverse": "^7.0.6"
       }
     },
+    "babel-plugin-macros": {
+      "version": "3.1.0",
+      "resolved": "https://registry.npmjs.org/babel-plugin-macros/-/babel-plugin-macros-3.1.0.tgz",
+      "integrity": "sha512-Cg7TFGpIr01vOQNODXOOaGz2NpCU5gl8x1qJFbb6hbZxR7XrcE2vtbAsTAbJ7/xwJtUuJEw8K8Zr/AE0LHlesg==",
+      "requires": {
+        "@babel/runtime": "^7.12.5",
+        "cosmiconfig": "^7.0.0",
+        "resolve": "^1.19.0"
+      }
+    },
     "babel-plugin-styled-components": {
       "version": "2.0.1",
       "integrity": "sha512-U3wmORxerYBiqcRCo6thItIosEIga3F+ph0jJPkiOZJjyhpZyUZFQV9XvrZ2CbBIihJ3rDBC/itQ+Wx3VHMauw==",
@@ -23511,8 +24497,7 @@
     },
     "callsites": {
       "version": "3.1.0",
-      "integrity": "sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==",
-      "dev": true
+      "integrity": "sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ=="
     },
     "camel-case": {
       "version": "4.1.2",
@@ -23673,6 +24658,11 @@
       "integrity": "sha512-JQHZ2QMW6l3aH/j6xCqQThY/9OH4D/9ls34cgkUBiEeocRTU04tHfKPBsUK1PqZCUQM7GiA0IIXJSuXHI64Kbg==",
       "dev": true
     },
+    "clsx": {
+      "version": "1.2.1",
+      "resolved": "https://registry.npmjs.org/clsx/-/clsx-1.2.1.tgz",
+      "integrity": "sha512-EcR6r5a8bj6pu3ycsa/E/cKVGuTgZJZdsyUYHOksG/UHIiKfjxzRxYJpyVBwYaQeOvghal9fcc4PidlgzugAQg=="
+    },
     "co": {
       "version": "4.6.0",
       "resolved": "https://registry.npmjs.org/co/-/co-4.6.0.tgz",
@@ -23856,7 +24846,6 @@
     "convert-source-map": {
       "version": "1.8.0",
       "integrity": "sha512-+OQdjP49zViI/6i7nIJpA8rAl4sV/JdPfU9nZs3VqOwGIgizICvuN2ru6fMd+4llL0tar18UYJXfZ/TWtmhUjA==",
-      "dev": true,
       "requires": {
         "safe-buffer": "~5.1.1"
       }
@@ -23952,7 +24941,6 @@
     "cosmiconfig": {
       "version": "7.0.1",
       "integrity": "sha512-a1YWNUV2HwGimB7dU2s1wUMurNKjpx60HxBB6xUM8Re+2s1g1IIfJvFR0/iCF+XHdE0GMTKTuLR32UQff4TEyQ==",
-      "dev": true,
       "requires": {
         "@types/parse-json": "^4.0.0",
         "import-fresh": "^3.2.1",
@@ -24085,8 +25073,9 @@
       }
     },
     "csstype": {
-      "version": "3.0.10",
-      "integrity": "sha512-2u44ZG2OcNUO9HDp/Jl8C07x6pU/eTR3ncV91SiK3dhG9TWvRVsCoJw14Ckx5DgWkzGA3waZWO3d7pgqpUI/XA=="
+      "version": "3.1.0",
+      "resolved": "https://registry.npmjs.org/csstype/-/csstype-3.1.0.tgz",
+      "integrity": "sha512-uX1KG+x9h5hIJsaKR9xHUeUraxf8IODOwq9JLNPq6BwB04a/xgpq3rcx47l5BZu5zBPlgD342tdke3Hom/nJRA=="
     },
     "damerau-levenshtein": {
       "version": "1.0.8",
@@ -24521,7 +25510,6 @@
     "error-ex": {
       "version": "1.3.2",
       "integrity": "sha512-7dFHNmqeFSEt2ZBsCriorKnn3Z2pj+fd9kmI6QoWw4//DL+icEBfc0U7qJCisqrTsKTjw4fNFy2pW9OqStD84g==",
-      "dev": true,
       "requires": {
         "is-arrayish": "^0.2.1"
       }
@@ -25481,8 +26469,7 @@
     },
     "find-root": {
       "version": "1.1.0",
-      "integrity": "sha512-NKfW6bec6GfKc0SGx1e07QZY9PE99u0Bft/0rzSD5k3sO/vwkVUpDUKVm5Gpp5Ue3YfShPFTX2070tDs5kB9Ng==",
-      "dev": true
+      "integrity": "sha512-NKfW6bec6GfKc0SGx1e07QZY9PE99u0Bft/0rzSD5k3sO/vwkVUpDUKVm5Gpp5Ue3YfShPFTX2070tDs5kB9Ng=="
     },
     "find-up": {
       "version": "5.0.0",
@@ -25572,8 +26559,7 @@
     },
     "function-bind": {
       "version": "1.1.1",
-      "integrity": "sha512-yIovAzMX49sF8Yl58fSCWJ5svSLuaibPxXQJFLmBObTuCr0Mf1KiPopGM9NiFjiYBCbfaa2Fh6breQ6ANVTI0A==",
-      "dev": true
+      "integrity": "sha512-yIovAzMX49sF8Yl58fSCWJ5svSLuaibPxXQJFLmBObTuCr0Mf1KiPopGM9NiFjiYBCbfaa2Fh6breQ6ANVTI0A=="
     },
     "functional-red-black-tree": {
       "version": "1.0.1",
@@ -25582,8 +26568,7 @@
     },
     "gensync": {
       "version": "1.0.0-beta.2",
-      "integrity": "sha512-3hN7NaskYvMDLQY55gnW3NQ+mesEAepTqlg+VEbj7zzqEMBVNhzcGYYeqFo/TlYz6eQiFcp1HcsCZO+nGgS8zg==",
-      "dev": true
+      "integrity": "sha512-3hN7NaskYvMDLQY55gnW3NQ+mesEAepTqlg+VEbj7zzqEMBVNhzcGYYeqFo/TlYz6eQiFcp1HcsCZO+nGgS8zg=="
     },
     "get-caller-file": {
       "version": "2.0.5",
@@ -25777,7 +26762,6 @@
     "has": {
       "version": "1.0.3",
       "integrity": "sha512-f2dvO0VU6Oej7RkWJGrehjbzMAjFp5/VKPp5tTpWIV4JHHZK1/BxbFRtf/siA2SWTe09caDmVtYYzWEIbBS4zw==",
-      "dev": true,
       "requires": {
         "function-bind": "^1.1.1"
       }
@@ -26064,7 +27048,6 @@
     "import-fresh": {
       "version": "3.3.0",
       "integrity": "sha512-veYYhQa+D1QBKznvhUHxb8faxlrwUnxseDAbAp457E0wLNio2bOSKnjYDhMj+YiAq61xrMGhQk9iXVk5FzgQMw==",
-      "dev": true,
       "requires": {
         "parent-module": "^1.0.0",
         "resolve-from": "^4.0.0"
@@ -26072,8 +27055,7 @@
       "dependencies": {
         "resolve-from": {
           "version": "4.0.0",
-          "integrity": "sha512-pb/MYmXstAkysRFx8piNI1tGFNQIFA3vkE3Gq4EuA1dF6gHp/+vgZqsCGJapvy8N3Q+4o7FwvquPJcnZ7RYy4g==",
-          "dev": true
+          "integrity": "sha512-pb/MYmXstAkysRFx8piNI1tGFNQIFA3vkE3Gq4EuA1dF6gHp/+vgZqsCGJapvy8N3Q+4o7FwvquPJcnZ7RYy4g=="
         }
       }
     },
@@ -26158,8 +27140,7 @@
     },
     "is-arrayish": {
       "version": "0.2.1",
-      "integrity": "sha512-zz06S8t0ozoDXMG+ube26zeCTNXcKIPJZJi8hBrF4idCLms4CG9QtK7qBl1boi5ODzFpjswb5JPmHCbMpjaYzg==",
-      "dev": true
+      "integrity": "sha512-zz06S8t0ozoDXMG+ube26zeCTNXcKIPJZJi8hBrF4idCLms4CG9QtK7qBl1boi5ODzFpjswb5JPmHCbMpjaYzg=="
     },
     "is-bigint": {
       "version": "1.0.4",
@@ -26206,7 +27187,6 @@
     "is-core-module": {
       "version": "2.8.1",
       "integrity": "sha512-SdNCUs284hr40hFTFP6l0IfZ/RSrMXF3qgoRHd3/79unUTvrFO/JoXwkGm+5J/Oe3E/b5GsnG330uUNgRpu1PA==",
-      "dev": true,
       "requires": {
         "has": "^1.0.3"
       }
@@ -28157,8 +29137,7 @@
     },
     "json-parse-even-better-errors": {
       "version": "2.3.1",
-      "integrity": "sha512-xyFwyhro/JEof6Ghe2iz2NcXoj2sloNsWr/XsERDK/oiPCfaNhl5ONfp+jQdAZRQQ0IJWNzH9zIZF7li91kh2w==",
-      "dev": true
+      "integrity": "sha512-xyFwyhro/JEof6Ghe2iz2NcXoj2sloNsWr/XsERDK/oiPCfaNhl5ONfp+jQdAZRQQ0IJWNzH9zIZF7li91kh2w=="
     },
     "json-schema-traverse": {
       "version": "0.4.1",
@@ -28302,8 +29281,7 @@
     },
     "lines-and-columns": {
       "version": "1.2.4",
-      "integrity": "sha512-7ylylesZQ/PV29jhEDl3Ufjo6ZX7gCqJr5F7PKrqc93v7fzSymt1BpwEU8nAUXs8qzzvqhbjhK5QZg6Mt/HkBg==",
-      "dev": true
+      "integrity": "sha512-7ylylesZQ/PV29jhEDl3Ufjo6ZX7gCqJr5F7PKrqc93v7fzSymt1BpwEU8nAUXs8qzzvqhbjhK5QZg6Mt/HkBg=="
     },
     "loader-runner": {
       "version": "4.2.0",
@@ -29504,7 +30482,6 @@
     "parent-module": {
       "version": "1.0.1",
       "integrity": "sha512-GQ2EWRpQV8/o+Aw8YqtfZZPfNRWZYkbidE9k5rpl/hC3vtHHBfGm2Ifi6qWV+coDGkrUKZAxE3Lot5kcsRlh+g==",
-      "dev": true,
       "requires": {
         "callsites": "^3.0.0"
       }
@@ -29512,7 +30489,6 @@
     "parse-json": {
       "version": "5.2.0",
       "integrity": "sha512-ayCKvm/phCGxOkYRSCM82iDwct8/EonSEgCSxWxD7ve6jHggsFl4fZVQBPRNgQoKiuV/odhFrGzQXZwbifC8Rg==",
-      "dev": true,
       "requires": {
         "@babel/code-frame": "^7.0.0",
         "error-ex": "^1.3.1",
@@ -29568,8 +30544,7 @@
     },
     "path-parse": {
       "version": "1.0.7",
-      "integrity": "sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw==",
-      "dev": true
+      "integrity": "sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw=="
     },
     "path-to-regexp": {
       "version": "1.8.0",
@@ -29580,8 +30555,7 @@
     },
     "path-type": {
       "version": "4.0.0",
-      "integrity": "sha512-gDKb8aZMDeD/tZWs9P6+q0J9Mwkdl6xMV8TjnGP3qJVJ06bdMgkbBlLU8IdfOsIsFz2BW1rNVT3XuNEl8zPAvw==",
-      "dev": true
+      "integrity": "sha512-gDKb8aZMDeD/tZWs9P6+q0J9Mwkdl6xMV8TjnGP3qJVJ06bdMgkbBlLU8IdfOsIsFz2BW1rNVT3XuNEl8zPAvw=="
     },
     "pdfjs-dist": {
       "version": "2.12.313",
@@ -30791,7 +31765,6 @@
     "resolve": {
       "version": "1.22.0",
       "integrity": "sha512-Hhtrw0nLeSrFQ7phPp4OOcVjLPIeMnRlr5mcnVuMe7M/7eBn98A3hmFRLoFo3DLZkivSYwhRUJTyPyWAk56WLw==",
-      "dev": true,
       "requires": {
         "is-core-module": "^2.8.1",
         "path-parse": "^1.0.7",
@@ -30958,8 +31931,7 @@
     },
     "semver": {
       "version": "6.3.0",
-      "integrity": "sha512-b39TBaTSfV6yBrapU89p5fKekE2m/NwnDocOVruQFS1/veMgdzuPcnOM34M6CwxW8jH/lxEa5rBoDeUwu5HHTw==",
-      "dev": true
+      "integrity": "sha512-b39TBaTSfV6yBrapU89p5fKekE2m/NwnDocOVruQFS1/veMgdzuPcnOM34M6CwxW8jH/lxEa5rBoDeUwu5HHTw=="
     },
     "send": {
       "version": "0.17.2",
@@ -31460,6 +32432,11 @@
         "supports-color": "^5.5.0"
       }
     },
+    "stylis": {
+      "version": "4.0.13",
+      "resolved": "https://registry.npmjs.org/stylis/-/stylis-4.0.13.tgz",
+      "integrity": "sha512-xGPXiFVl4YED9Jh7Euv2V220mriG9u4B2TA6Ybjc1catrstKD2PpIdU3U0RKpkVBC2EhmL/F0sPCr9vrFTNRag=="
+    },
     "supports-color": {
       "version": "5.5.0",
       "integrity": "sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==",
@@ -31496,8 +32473,7 @@
     },
     "supports-preserve-symlinks-flag": {
       "version": "1.0.0",
-      "integrity": "sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w==",
-      "dev": true
+      "integrity": "sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w=="
     },
     "symbol-tree": {
       "version": "3.2.4",
@@ -32505,8 +33481,7 @@
     },
     "yaml": {
       "version": "1.10.2",
-      "integrity": "sha512-r3vXyErRCYJ7wg28yvBY5VSoAF8ZvlcW9/BwUzEtUsjvX/DKs24dIkuwjtuprwJJHsbyUbLApepYTR1BN4uHrg==",
-      "dev": true
+      "integrity": "sha512-r3vXyErRCYJ7wg28yvBY5VSoAF8ZvlcW9/BwUzEtUsjvX/DKs24dIkuwjtuprwJJHsbyUbLApepYTR1BN4uHrg=="
     },
     "yargs": {
       "version": "17.3.1",
Index: .idea/prettier.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/prettier.xml b/.idea/prettier.xml
new file mode 100644
--- /dev/null	(date 1661936110000)
+++ b/.idea/prettier.xml	(date 1661936110000)
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="PrettierConfiguration">
+    <option name="myRunOnSave" value="true" />
+    <option name="myRunOnReformat" value="true" />
+  </component>
+</project>
\ No newline at end of file
Index: translations/en.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\n    \"action\": {\n        \"click_preview\": \"Click to preview\",\n        \"edit_as_new\": \"Edit as new\",\n        \"edit_share\": \"Edit Share\",\n        \"flag\": \"Add flag\",\n        \"forward\": \"Forward\",\n        \"goto_drafts\": \"Go to drafts\",\n        \"goto_folder\": \"GO TO FOLDER\",\n        \"hide_details\": \"Hide details\",\n        \"mark_as_non_spam\": \"Not spam\",\n        \"mark_as_read\": \"Mark as read\",\n        \"mark_as_spam\": \"Mark as spam\",\n        \"mark_as_unread\": \"Mark as unread\",\n        \"ok\": \"Ok\",\n        \"preview\": \"Preview\",\n        \"preview_new_tab\": \"Click to preview in another tab\",\n        \"print\": \"Print\",\n        \"redirect\": \"Redirect\",\n        \"reply\": \"Reply\",\n        \"reply_all\": \"Reply all\",\n        \"reset\": \"Reset\",\n        \"search\": \"Search\",\n        \"send_anyway\": \"Send anyway\",\n        \"share_folder\": \"Share folder\",\n        \"show_details\": \"Show details\",\n        \"show_original\": \"Show original\",\n        \"unflag\": \"Remove flag\"\n    },\n    \"attachment_type\": {\n        \"application\": \"Application\",\n        \"email\": \"Email\",\n        \"excel\": \"Excel\",\n        \"html\": \"HTML\",\n        \"image\": \"Image\",\n        \"pdf\": \"PDF\",\n        \"powerpoint\": \"Powerpoint\",\n        \"text_document\": \"Text Document\",\n        \"video\": \"Video\",\n        \"word\": \"Word\",\n        \"zipped_file\": \"Zipped File\"\n    },\n    \"board\": {\n        \"show\": \"Show board\"\n    },\n    \"composer\": {\n        \"attachment\": {\n            \"contacts_mod\": \"Add Contact Card\",\n            \"drag_and_drop\": {\n                \"content\": \"Drop here your attachments to quickly add them to this e-mail\",\n                \"title\": \"Drag&Drop Mode\"\n            },\n            \"files\": \"Add from Files\",\n            \"local\": \"Add from local\",\n            \"url\": \"Add public link from Files\"\n        }\n    },\n    \"displayer\": {\n        \"archive_title1\": \"Save an e-mail to archive so you can review it later.\",\n        \"archive_title2\": \"Select an archived e-mail to review it.\",\n        \"description2\": \"Send documents, images and more by composing a new e-mail.\",\n        \"description4\": \"You can flag it, reply or forward it to other users.\",\n        \"description5\": \"Check out what other users want to talk with you about.\",\n        \"description6\": \"Reply to this e-mail or forward it to other users.\",\n        \"description7\": \"Select an e-mail to reply.\",\n        \"draft_title1\": \"Saving an e-mail as a draft allows you to keep the messages that you'd like to send later.\",\n        \"draft_title2\": \"Select and edit an e-mail to send it to other users.\",\n        \"junk_title1\": \"How lucky! There are no spam e-mails you have to worry about\",\n        \"junk_title2\": \"Click the trash icon to delete a spam e-mail\",\n        \"list_draft_title\": \"There are no saved drafts\",\n        \"list_folder_title\": \"It looks like there are no e-mails yet\",\n        \"list_junk_title\": \"There are no spam e-mails\",\n        \"list_sent_title\": \"You haven’t sent any e-mail yet\",\n        \"list_spam_title\": \"There are no spam e-mails\",\n        \"list_trash_title\": \"The trash is empty\",\n        \"search_description1\": \"Or select “Advanced Filters” to refine your search.\",\n        \"search_description2\": \"Try to start another search.\",\n        \"search_description3\": \"Check the spelling and the filters options or try with another keyword.\",\n        \"search_list_title1\": \"It looks like there are no results. Keep searching!\",\n        \"search_list_title2\": \"None of your items matches your search.\",\n        \"search_title1\": \"Start another search\",\n        \"search_title2\": \"We’re sorry but there are no results for your search\",\n        \"search_title3\": \"There are no results for your search.\",\n        \"search_title4\": \"Select one or more results to perform actions or display details.\",\n        \"sent_title2\": \"Select an e-mail to display what you've sent.\",\n        \"spam_title1\": \"How lucky! There are no spam e-mails you have to worry about\",\n        \"spam_title2\": \"Click the trash icon to delete a spam e-mail.\",\n        \"title1\": \"Compose a new e-mail by clicking the \\\"NEW\\\" button\",\n        \"title2\": \"Click the “NEW” button\",\n        \"title3\": \"Stay in touch with other users.\",\n        \"title4\": \"Select an e-mail to read it\",\n        \"title8\": \"Select an e-mail to read or delete it.\",\n        \"trash_title1\": \"Click the trash icon to delete an e-mail\",\n        \"trash_title2\": \"Select and restore e-mails from the trash.\"\n    },\n    \"email_status\": {\n        \"anywhere\": \"in all the folders\",\n        \"ccme\": \"in copy to me\",\n        \"draft\": \"draft\",\n        \"flagged\": \"flagged\",\n        \"forwarded\": \"forwarded\",\n        \"fromccme\": \"from me\",\n        \"fromme\": \"from me\",\n        \"invitations\": \"invitations\",\n        \"local\": \"on my folders\",\n        \"read\": \"read\",\n        \"received\": \"received by me\",\n        \"remote\": \"on a folder shared by me\",\n        \"replied\": \"answered by me\",\n        \"sent\": \"sent by me\",\n        \"solo\": \"conversations with a single message\",\n        \"toccme\": \"to me or in copy to me\",\n        \"tofromccme\": \"to me, from me or in copy to me\",\n        \"tofromme\": \"to me, from me or in copy to me\",\n        \"tome\": \"to me\",\n        \"unflagged\": \"not flagged\",\n        \"unforwarded\": \"not forwarded\",\n        \"unread\": \"unread\",\n        \"unreplied\": \"not answered by me\"\n    },\n    \"filters\": {\n        \"active_filters\": \"Active Filters\",\n        \"available_filters\": \"Available Filters\",\n        \"filter_note\": \"Note: changes to filter rules are saved immediately\",\n        \"filters\": \"Filters\",\n        \"incoming_msg_filters\": \"Incoming Message Filters\",\n        \"outgoing_message_filters\": \"Outgoing Message Filters\",\n        \"run\": \"Run\"\n    },\n    \"folder\": {\n        \"modal\": {\n            \"edit\": {\n                \"add_share\": \"Add Share\",\n                \"rename_warning\": \"You cannot rename a folder as a system one.\",\n                \"retention_duration_warning\": \"The retention duration must be a positive number\",\n                \"retention_message\": \"Messages in this folder which fall within the retention range will require explicit confirmation before being deleted\",\n                \"threshold_message\": \"Messages in this folder which are older than the disposal threshold will be subject to automated cleanup and deletion.\"\n            }\n        }\n    },\n    \"folder_panel\": {\n        \"action\": {\n            \"edit_properties\": \"Edit Properties\",\n            \"empty\": {\n                \"trash\": \"Empty Trash\"\n            },\n            \"wipe\": {\n                \"folder_panel\": \"Wipe Folder\"\n            }\n        },\n        \"lists_item\": {\n            \"root\": \"/Root\"\n        },\n        \"modal\": {\n            \"delete\": {\n                \"body\": {\n                    \"message1\": \"Do you want to empty the selected folder?\",\n                    \"message2\": \"Do you want to delete the selected folder permanently?\",\n                    \"message3\": \"If you delete it, all the related content will be moved to Trash and the folder will no longer be visible.\",\n                    \"message4\": \"If you delete it, all the related content will be permanently removed and the folder will no longer be recoverable.\"\n                }\n            },\n            \"empty\": {\n                \"body\": {\n                    \"message1\": \"Do you want to empty the selected folder?\",\n                    \"message2\": \"If you empty it, all the related content will be deleted permanently.\"\n                }\n            },\n            \"lists-item\": {\n                \"empty\": \"\"\n            },\n            \"move\": {\n                \"body\": {\n                    \"message1\": \"Select a folder to move the considered one to:\",\n                    \"message2\": \"Select a folder to restore to:\"\n                },\n                \"title_modal\": \"Move Conversation\"\n            },\n            \"new\": {\n                \"create_footer\": \"Create and Move\",\n                \"input\": {\n                    \"name\": \"Enter Folder Name\",\n                    \"name_exist\": \"Name already exists in this path\",\n                    \"position\": \"Parent Folder\"\n                },\n                \"name_exist_warning\": \"Name already exists\",\n                \"restore_create_footer\": \"Create and Restore\",\n                \"title\": \"Create a new folder\"\n            },\n            \"wipe\": {\n                \"body\": {\n                    \"message1\": \"\",\n                    \"message2\": \"If you wipe it, all the related content will be deleted permanently.\"\n                }\n            }\n        }\n    },\n    \"folders\": {\n        \"drafts\": \"Drafts\",\n        \"inbox\": \"Inbox\",\n        \"junk\": \"Junk\",\n        \"sent\": \"Sent\",\n        \"spam\": \"Spam\",\n        \"trash\": \"Trash\"\n    },\n    \"header\": {\n        \"attention\": \"Attention\",\n        \"delete_email\": \"Delete e-mail\",\n        \"edit_draft\": \"Edit draft\",\n        \"message_not_sent\": \"Error - Message not sent\",\n        \"redirect_email\": \"Redirect e-mail\",\n        \"warning\": \"Warning\"\n    },\n    \"label\": {\n        \"accept\": \"Accept\",\n        \"activate_selection_mode\": \"Activate selection mode\",\n        \"add\": \"Add\",\n        \"add_custom_message\": \"Add a custom message\",\n        \"add_task\": \"If you need to take a note, you can add a task to your TO DO LIST\",\n        \"addresses_not_accepted\": \"One or more addresses were not accepted. Rejected addresses:\",\n        \"administer\": \"Administer\",\n        \"advanced_filters\": \"Advanced Filter\",\n        \"advanced_filters_plural\": \"Advanced Filters\",\n        \"all\": \"all\",\n        \"allowed_actions\": \"Allowed actions\",\n        \"always_allow_address\": \"Always allow from <strong>{{from}}</strong>\",\n        \"always_allow_domain\": \"Always allow from <strong>{{domain}}</strong> domain\",\n        \"any\": \"any\",\n        \"app_name\": \"Mails\",\n        \"attachement_unknown\": \"Unknown <{{mimeType}}>\",\n        \"attachment\": \"Attachment\",\n        \"attachment_plural\": \"Attachments\",\n        \"attachment_status\": \"Status of e-mail item\",\n        \"attachment_type\": \"Attachment type\",\n        \"automatically_delete_duplicates\": \"Automatically delete duplicate copies of the same message when received\",\n        \"back\": \"Back\",\n        \"bcc\": \"Bcc\",\n        \"before_you_leave\": \"Before you leave\",\n        \"behalf_of\": \"on behalf of\",\n        \"by_conversation\": \"By Conversation\",\n        \"by_message\": \"By Message\",\n        \"calendar\": \"Calendar\",\n        \"calendar_color\": \"Item color\",\n        \"cancel\": \"Cancel\",\n        \"cc\": \"Cc\",\n        \"cc_bcc\": \"Cc Bcc\",\n        \"choose_folder\": \"Choose folder\",\n        \"collapse_receivers_list\": \"Collapse receiver's list\",\n        \"confirm\": \"Confirm\",\n        \"contact_folder\": \"Contact Folder\",\n        \"create\": \"Create\",\n        \"create_and_move\": \"Create and move\",\n        \"create_new_task\": \"Create New Task\",\n        \"create_tag\": \"Create Tag\",\n        \"decline\": \"Decline\",\n        \"delayed_sending\": \"Delayed sending\",\n        \"delete\": \"Delete\",\n        \"delete_draft\": \"Delete Draft\",\n        \"delete_permanently\": \"Delete Permanently\",\n        \"delete_tag\": \"Delete Tag\",\n        \"delete_tag_name\": \"Delete \\\"{{name}}\\\" tag\",\n        \"destination_folder\": \"Destination Folder\",\n        \"discard_changes\": \"DISCARD CHANGES\",\n        \"disposal_threshold\": \"Disposal Threshold\",\n        \"do_not_notify\": \"Do not notify\",\n        \"download\": \"Download\",\n        \"download_plural\": \"Download all\",\n        \"draft\": \"Draft\",\n        \"draft_folder\": \"[DRAFT]\",\n        \"edit\": \"Edit\",\n        \"edit_access\": \"Edit {{name}}'s access\",\n        \"edit_folder_properties\": \"\",\n        \"edit_tag\": \"Edit Tag\",\n        \"edit_tag_name\": \"Edit \\\"{{name}}\\\" tag\",\n        \"email_perm_deleted\": \"E-mail permanently deleted\",\n        \"empty\": \"Empty\",\n        \"enable_message_disposal\": \"Enable Message Disposal\",\n        \"enable_message_retention\": \"Enable Message Retention\",\n        \"enter_email_address\": \"Enter email address or domain\",\n        \"error\": \"Error\",\n        \"error_address\": \"A valid e-mail is required\",\n        \"error_try_again\": \"Something went wrong, please try again\",\n        \"expand\": \"Expand\",\n        \"expand_receivers_list\": \"Expand receiver's list\",\n        \"filter_folders\": \"Filter folders\",\n        \"filter_modified\": \"Filter modified succesfully\",\n        \"filter_user\": \"Filter users\",\n        \"find_mail_shares\": \"Find shared folders\",\n        \"find_shares\": \"Find shares\",\n        \"flagged\": \"Flagged\",\n        \"flash_browser_title\": \"Flash the browser title\",\n        \"folder_name\": \"Folder name\",\n        \"forwarded\": \"Forwarded\",\n        \"freebusy\": \"FreeBusy\",\n        \"from\": \"From\",\n        \"from_identity\": \"From: {{identity}}\",\n        \"go_back\": \"Go Back\",\n        \"grantee\": \"Grantee: \",\n        \"hide\": \"Hide\",\n        \"highlight_tab\": \"Highlight the Mail tab\",\n        \"include_shared_folders\": \"Include shared folders\",\n        \"insert\": \"Insert\",\n        \"invalid_destination\": \"This node is not a valid destination\",\n        \"keep_draft\": \"Keep Draft\",\n        \"keywords\": \"Keywords\",\n        \"loading_results\": \"Loading Results…\",\n        \"mail_folder\": \"E-mail folder\",\n        \"mail_selected\": \"{{count}} e-mail selected\",\n        \"mail_selected_plural\": \"{{count}} e-mails selected\",\n        \"mail_settings\": \"Mails settings\",\n        \"mark_as_important\": \"Mark as important\",\n        \"mark_as_un_important\": \"Mark as un important\",\n        \"me\": \"Me\",\n        \"messages\": \"Messages\",\n        \"move\": \"Move\",\n        \"new_email\": \"New E-mail\",\n        \"new_folder\": \"New Folder\",\n        \"no_name\": \"<No Name>\",\n        \"no_search_results_found\": \"No results found\",\n        \"no_special_char_allowed\": \"Name should not contain any special character\",\n        \"no_subject\": \"No subject\",\n        \"no_subject_with_tags\": \"<No Subject>\",\n        \"notification_audio\": \"Play audio hint when new notification appears\",\n        \"notification_folders\": \"Folders Notifications\",\n        \"notify\": \"Notify\",\n        \"notify_organizer\": \"Notify Organizer\",\n        \"of\": \"of\",\n        \"on_behalf_of\": \"on behalf of\",\n        \"owner\": \"Owner: \",\n        \"preview\": \"Preview\",\n        \"private\": \"Private\",\n        \"read\": \"Read\",\n        \"read_receipt_req\": \"Read receipt required\",\n        \"read_receipt_sent\": \"A read receipt was sent for this message\",\n        \"receive_message\": \"Receiving Messages\",\n        \"received_from_address\": \"Received from (address)\",\n        \"remove\": \"Remove\",\n        \"remove_from_this_list\": \"Remove from this list\",\n        \"remove_plural\": \"Remove all\",\n        \"remove_request_receipt\": \"Remove read receipt request\",\n        \"replied\": \"Replied\",\n        \"request_receipt\": \"Request read receipt\",\n        \"resend\": \"Resend\",\n        \"restore\": \"Restore\",\n        \"results_for\": \"Results for: \",\n        \"results_for_error\": \"Unable to start the search, clear it and retry: \",\n        \"retention_policy\": \"Retention policy\",\n        \"retention_range\": \"Retention Range\",\n        \"revoke\": \"Revoke\",\n        \"revoke_access_tooltip\": \"Revoke access sending a standard notification\",\n        \"revoke_access_without_notification\": \"Revoke access without sending a notification\",\n        \"revoke_share\": \"Revoke {{title}}'s share\",\n        \"revoke_with_custom_message\": \"Revoke access sending a custom notification\",\n        \"role\": \"Role: \",\n        \"save\": \"Save\",\n        \"save_to_files\": \"Save to Files\",\n        \"search_activate_selection_mode\": \"Selection mode isn’t available yet on search results\",\n        \"searching\": \"Searching...\",\n        \"select\": \"Select\",\n        \"select_color\": \"Select Color\",\n        \"select_folder\": \"Select folder\",\n        \"select_signature\": \"Select a signature\",\n        \"send\": \"Send\",\n        \"send_email\": \"Send e-mail\",\n        \"send_later\": \"Send later\",\n        \"send_notification\": \"Send a notification message to\",\n        \"sending\": \"Sending\",\n        \"sent\": \"Sent\",\n        \"sent_to_address\": \"Sent to (address)\",\n        \"set_default_signatures\": \"Set Default Signatures\",\n        \"share\": \"Share\",\n        \"share_public_link\": \"Share Public Link\",\n        \"share_with\": \"Share with\",\n        \"shared_folders\": \"Shared Folders\",\n        \"shared_item\": \"Shared item\",\n        \"shares_folder_edit\": \"Sharing of this folder\",\n        \"shares_info\": \"Shared folder's info\",\n        \"shares_items\": \"{{value}}'s shared folders\",\n        \"show_all\": \"Show all\",\n        \"show_popup\": \"Show a popup notification\",\n        \"show_quoted_text\": \"Show quoted text\",\n        \"signature_required\": \"Signature information is required.\",\n        \"single_advanced_filter\": \"Advanced Filters\",\n        \"size\": \"Size\",\n        \"size_larger\": \"Size larger than (MB)\",\n        \"size_smaller\": \"Size smaller than (MB)\",\n        \"spam\": \"Spam\",\n        \"subject\": \"Subject\",\n        \"tag\": \"Tag\",\n        \"tag_max_length\": \"Max 128 characters are allowed\",\n        \"tag_name\": \"Tag name\",\n        \"tags\": \"Tags\",\n        \"time_zone\": \"Time Zone\",\n        \"to\": \"To\",\n        \"trusted_addresses\": \"Trusted addresses\",\n        \"type\": \"Type\",\n        \"type_name_here\": \"Item name\",\n        \"undo\": \"Undo\",\n        \"upload_from_files\": \"Upload from Files\",\n        \"view_images\": \"VIEW IMAGES\",\n        \"wipe\": \"Wipe\",\n        \"with_you\": \"with you\",\n        \"workflow\": \"WorkFlow\",\n        \"would_like_to_share\": \"shared its\",\n        \"write\": \"Write\"\n    },\n    \"message\": {\n        \"admin_rights\": \"View,Edit,Add,Remove,Administer\",\n        \"delete_tag_message1\": \"Are you sure to delete \\\"{{name}}\\\" Tag?\",\n        \"delete_tag_message2\": \"Once deleted, it will be removed from every item marked with it.\",\n        \"email_saved_at\": \"E-mail saved as a draft at {{time}}\",\n        \"external_images_blocked\": \"External images have been blocked to protect you against potential spam\",\n        \"invalid_search_message\": \"We didn't find any match\",\n        \"manager_rights\": \"View,Edit,Add,Remove\",\n        \"schedule_mail\": \"Will be sent on: {{date}} at {{time}}\",\n        \"schedule_time\": \"{{date}} at {{time}}\",\n        \"sending_mail_to_self\": \"It looks like you're about to send an e-mail to yourself\",\n        \"snackbar\": {\n            \"all_att_added\": \"Attachments added successfully\",\n            \"all_att_saved\": \"Attachments successfully saved in the selected folder\",\n            \"all_link_copied\": \"Public link copied successfully\",\n            \"att_err\": \"There seems to be a problem when saving, please try again\",\n            \"att_err_adding\": \"There seems to be a problem when adding attachments, please try again\",\n            \"att_saved\": \"Attachment saved in the selected folder\",\n            \"calendar_edits_saved\": \"Edits saved correctly\",\n            \"link_copying_error\": \"There seems to be a problem while generating public link, please try again\",\n            \"settings_saved\": \"Edits saved correctly\",\n            \"share\": {\n                \"accepted\": \"You have accepted the share request\",\n                \"declined\": \"You have declined the share request\"\n            },\n            \"some_att_add_fails\": \"There seems to be a problem when adding some attachments, please try again\",\n            \"some_att_fails\": \"There seems to be a problem when saving some files, please try again\",\n            \"some_link_copying_error\": \"There seems to be a problem while generating public url for some files, please try again\"\n        },\n        \"view_rights\": \"View\"\n    },\n    \"messages\": {\n        \"cal_name_exist_warning\": \"A calendar with the same name already exists in this path\",\n        \"check_and_try_again\": \"Please, check Carbonio and try again\",\n        \"could_not_find_to_show\": \"Sorry, we couldn’t find anything to show\",\n        \"invalid_address\": \"The following address appears to be invalid\",\n        \"invalid_trustee_address\": \"Please enter only e-mail addresses or domains\",\n        \"modal\": {\n            \"delete\": {\n                \"if_delete_lost_forever\": \"If you delete the e-mail, it will be lost forever.\",\n                \"sure_delete_email\": \"Are you sure to delete the selected e-mail?\"\n            },\n            \"redirect\": {\n                \"first\": \"This e-mail will be sent on to a new recipient while preserving the e-mail address of the original sender.\",\n                \"second\": \"The e-mail will appear as originally intended for the new recipient\"\n            },\n            \"send_anyway\": {\n                \"first\": \"Email subject is empty and you didn't attach any files.\",\n                \"second\": \"Do you still want to send the email?\"\n            }\n        },\n        \"new_email\": \"New e-mail\",\n        \"no_content\": \"This message has no text content\",\n        \"permanent_delete_body\": \"If you permanently delete this element you will not be able to recover it. Continue?\",\n        \"permanent_delete_title\": \"Are you sure to permanently delete this element?\",\n        \"powered_by\": \"powered by\",\n        \"read_receipt_1\": \"The sender of this message has requested to be notified when you read this message.\",\n        \"read_receipt_2\": \"Do you wish to notify the sender?\",\n        \"snackbar\": {\n            \"conversation_deleted\": \"Conversation deleted\",\n            \"conversation_move\": \"Conversation successfully moved\",\n            \"conversation_move_error\": \"Something went wrong, the conversation move was not completed. Please try again.\",\n            \"email_moved_to_trash\": \"E-mail moved to Trash\",\n            \"email_restored\": \"E-mail restored in destination folder\",\n            \"folder_created\": \"New folder created\",\n            \"folder_deleted\": \"Folder successfully deleted.\",\n            \"folder_edited\": \"Changes correctly saved\",\n            \"folder_empty\": \"Trash successfully emptied\",\n            \"folder_empty_error\": \"Something went wrong, changes were not made. Please try again.\",\n            \"folder_move_error\": \"Something went wrong, the folder was not moved. Please try again.\",\n            \"folder_moved\": \"Folder successfully moved\",\n            \"folder_moved_to_trash\": \"Folder moved to trash\",\n            \"folder_restored\": \"Folder restored\",\n            \"folder_will_be_moved_in_time\": \"\",\n            \"folder_wiped\": \"Folder successfully wiped\",\n            \"mail_saved_to_drafts\": \"Mail saved to drafts\",\n            \"mail_sent\": \"Message sent\",\n            \"marked_as_non_spam\": \"You’ve marked this e-mail as Not Spam\",\n            \"marked_as_spam\": \"You’ve marked this e-mail as Spam\",\n            \"message_delete_error\": \"Something went wrong, this message was not deleted. Please try again.\",\n            \"message_deleted\": \"Message deleted\",\n            \"message_move\": \"Message successfully moved\",\n            \"message_redirected\": \"The message has been redirected\",\n            \"sending_mail_in_count\": \"Sending your message in {{count}} second\",\n            \"sending_mail_in_count_plural\": \"Sending your message in {{count}} seconds\",\n            \"tag_created\": \"Tag {{name}} successfully created\",\n            \"tag_deleted\": \"{{name}} Tag deleted successfully\",\n            \"tag_not_updated\": \"Something went wrong, the tag was not updated. Please try again.\",\n            \"tag_updated\": \"Tag successfully updated\"\n        },\n        \"something_went_wrong\": \"SOMETHING WENT WRONG\",\n        \"trustee_addresses\": \"Mail from these addresses or domains will be considered trusted and images will automatically be displayed.\"\n    },\n    \"modal\": {\n        \"delete_draft\": {\n            \"message1\": \"Do you want to keep this draft or delete it?\"\n        }\n    },\n    \"notification\": {\n        \"new_message\": \"New Message\",\n        \"no_content\": \"Message without content\"\n    },\n    \"placeholder\": {\n        \"add_new_recipients\": \"Add new recipients\"\n    },\n    \"preview\": {\n        \"close\": \"Close Preview\"\n    },\n    \"search\": {\n        \"attachment_note\": \"Search for all e-mails that have an attachment.\",\n        \"flagged_note\": \"Search for all flagged e-mails.\",\n        \"sent_after\": \"Sent after\",\n        \"sent_before\": \"Sent before\",\n        \"sent_on\": \"Sent on\",\n        \"shared_folders_note\": \"Include shared items in searches.\",\n        \"size_error\": \"Only numbers are allowed\",\n        \"unread\": \"Unread\",\n        \"unread_note\": \"Search for all unread e-mail items.\"\n    },\n    \"settings\": {\n        \"actions\": \"Actions\",\n        \"active_filter\": \"Active filter\",\n        \"add_condition\": \"Add new condition\",\n        \"address_in\": \"Address In\",\n        \"after\": \"after\",\n        \"b\": \"B\",\n        \"before\": \"before\",\n        \"body\": \"Body\",\n        \"browse\": \"Browse\",\n        \"calendar\": \"Calendar\",\n        \"choose\": \"Choose\",\n        \"choose_date\": \"Choose Date\",\n        \"condition_met\": \"\",\n        \"conditions\": \"Conditions\",\n        \"contacts\": \"contacts\",\n        \"contains\": \"contains\",\n        \"conv_is_participated\": \"in conversations I participated\",\n        \"conv_is_started\": \"in conversation I started\",\n        \"conv_sort_option\": {\n            \"asc\": \"From old to new\",\n            \"desc\": \"From new to old\"\n        },\n        \"create_new_filter\": \"Create new Filter\",\n        \"date\": \"Date\",\n        \"delete_filter\": \"Delete filter\",\n        \"delete_filter_text\": \"Are you sure to delete filter \",\n        \"discard\": \"Discard\",\n        \"display_mail_options\": {\n            \"html\": \"As HTML(When Possible)\",\n            \"text\": \"As text\"\n        },\n        \"do_not_process_additional_filters\": \"Do not process additional filters\",\n        \"does_not_contain\": \"does not contain\",\n        \"does_not_exists\": \"does not exist\",\n        \"does_not_match_exactly\": \"does not match exactly\",\n        \"does_not_match_wildcard_condition\": \"does not match wildcard condition\",\n        \"domain\": \"domain\",\n        \"exists\": \"exists\",\n        \"facebook_notification\": \"Facebook notification\",\n        \"field\": \"Field\",\n        \"filter_deleted\": \"Filter successfully deleted\",\n        \"filter_folder_message\": \"Select a folder to apply your filter:\",\n        \"filter_name\": \"Filter Name\",\n        \"from_distribution_list\": \"from distribution list\",\n        \"gb\": \"GB\",\n        \"header_name\": \"Header Named\",\n        \"if\": \"If\",\n        \"in\": \"in\",\n        \"invite_not_replied\": \"invite is not replied \",\n        \"invite_not_requested\": \"invite is not requested\",\n        \"invite_replied\": \"invite is replied\",\n        \"invite_requested\": \"invite is requested\",\n        \"is\": \"is\",\n        \"is_me\": \"is me\",\n        \"is_not\": \"is not\",\n        \"is_not_me\": \"is not me\",\n        \"kb\": \"KB\",\n        \"keep_in_inbox\": \"Keep in Inbox\",\n        \"keep_in_sent\": \"Keep in Sent\",\n        \"keyword\": \"Keyword\",\n        \"label\": {\n            \"check_new_mail\": \"Check new e-mail\",\n            \"conversation_ordering\": \"Conversation ordering\",\n            \"default_mail_search\": \"Default Mail Search\",\n            \"display_mail\": \"Display mail\",\n            \"display_messages\": \"Displaying Messages\",\n            \"message_color\": \"Message Color\",\n            \"message_selection\": \"Message Selection\",\n            \"search_query\": \"Default query\",\n            \"set_message_color\": \"Set color of messages and conversations according to tag color.\",\n            \"visualization_options\": \"Visualization Options\"\n        },\n        \"linkedin_msg\": \"LinkedIn messages and connections\",\n        \"localpart\": \"localpart\",\n        \"mark_as\": \"Mark as\",\n        \"mass_marketing\": \"mass marketing (bulk)\",\n        \"matches_exactly\": \"matches exactly\",\n        \"matches_wildcard_condition\": \"matches wildcard condition\",\n        \"mb\": \"MB\",\n        \"message\": \"Message\",\n        \"move_into_folder\": \"Move Into Folder\",\n        \"msg_from_optn\": {\n            \"discard\": \"Discard message automatically\",\n            \"inbox\": \"Place in inbox\",\n            \"inbox_if_cc\": \"Place in inbox if I'm in To: or Cc:\"\n        },\n        \"msg_selection_optn\": {\n            \"above_deleted\": \"Select message above the deleted or moved message\",\n            \"based_on_previous\": \"Select next message based on previous selections\",\n            \"below_deleted\": \"Select message below the deleted or moved message\"\n        },\n        \"my_frequent_emails\": \"my frequent e-mails\",\n        \"new_mail_optn\": {\n            \"manually\": \"Manually\",\n            \"minute\": \"{{count}} minute\",\n            \"minute_plural\": \"{{count}} minutes\",\n            \"when_arrive\": \"As new e-mail arrives\"\n        },\n        \"not_after\": \"not after\",\n        \"not_before\": \"not before\",\n        \"not_in\": \"not in\",\n        \"not_over\": \"not over\",\n        \"not_under\": \"not under\",\n        \"notify_folder_optn\": {\n            \"new_message_folder\": \"Display notifications for new messages that arrive in any folder\",\n            \"new_message_inbox\": \"Display notifications for new messages that arrive in inbox\"\n        },\n        \"over\": \"over\",\n        \"perform_following_action\": \"Perform the following actions:\",\n        \"read_rcpt_optn\": {\n            \"always\": \"Always send a read receipt\",\n            \"ask_me\": \"Ask me\",\n            \"never\": \"Never send a read receipt\"\n        },\n        \"read_receipt\": \"Read Receipt\",\n        \"redirect_to_address\": \"Redirect to address\",\n        \"remove_condition\": \"Remove this condition\",\n        \"social\": \"Social\",\n        \"tag_with\": \"Tag with\",\n        \"to_cc\": \"To or CC\",\n        \"twitter_notification\": \"Twitter notifications\",\n        \"under\": \"under\"\n    },\n    \"share\": {\n        \"filter_folder_message\": \"Select a folder where to start your advanced search\",\n        \"is_contained_in\": \"Is contained in\",\n        \"options\": {\n            \"share_calendar_role\": {\n                \"admin\": \"Admin\",\n                \"manager\": \"Manager\",\n                \"none\": \"None\",\n                \"viewer\": \"Viewer\"\n            },\n            \"share_calendar_with\": {\n                \"external_guests\": \"External guests (view only)\",\n                \"internal_users_groups\": \"Internal Users or Groups\",\n                \"public\": \"Public (view only, no password required)\"\n            }\n        },\n        \"recipients_address\": \"Recipients’ e-mail addresses\",\n        \"send_notification\": \"Send a notification about this share\",\n        \"share_note\": \"The standard message displays your name, the name of the shared item, permissions granted to the recipients, and sign-in information.\",\n        \"standard_message\": \"Add a note to the standard message\"\n    },\n    \"signatures\": {\n        \"add_signature\": \"Add signature\",\n        \"name\": \"Name\",\n        \"signature_heading\": \"Signatures\"\n    },\n    \"snackbar\": {\n        \"email_moved_to_trash\": \"E-mail moved to Trash\",\n        \"folder_shared\": \"Folder shared\",\n        \"share_resend\": \"Share invite resent\",\n        \"share_revoke\": \"Share access revoked\",\n        \"share_updated\": \"\\\"Access rights updated\\\"\",\n        \"tag_applied\": \"\\\"{{tag}}\\\" tag applied\",\n        \"tag_removed\": \"\\\"{{tag}}\\\" tag removed\"\n    },\n    \"title\": {\n        \"new_messages\": \"New Messages\",\n        \"replies_forwards\": \"Replies & Forwards\"\n    },\n    \"tooltip\": {\n        \"add_attachments\": \"Add attachments\",\n        \"disable_rich_text\": \"Disable rich text editor\",\n        \"disable_urgent\": \"Disable urgent\",\n        \"edit\": \"Edit share properties\",\n        \"enable_rich_text\": \"Enable rich text editor\",\n        \"enable_urgent\": \"Enable urgent\",\n        \"folder_linked_status\": \"Linked to me\",\n        \"folder_sharing_status\": \"Shared with {{count}} user\",\n        \"folder_sharing_status_plural\": \"Shared with {{count}} users\",\n        \"marked_as_important\": \"Marked as important\",\n        \"resend\": \"Resend mail notification about this share\",\n        \"revoke\": \"Revoke access\"\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/translations/en.json b/translations/en.json
--- a/translations/en.json	(revision d8bea371a1253f951f0f0ff48819868807c68aa7)
+++ b/translations/en.json	(date 1662121967000)
@@ -227,6 +227,7 @@
         "always_allow_domain": "Always allow from <strong>{{domain}}</strong> domain",
         "any": "any",
         "app_name": "Mails",
+        "arrival_notifications": "Arrival Notifications",
         "attachement_unknown": "Unknown <{{mimeType}}>",
         "attachment": "Attachment",
         "attachment_plural": "Attachments",
@@ -267,6 +268,7 @@
         "download_plural": "Download all",
         "draft": "Draft",
         "draft_folder": "[DRAFT]",
+        "duplicate_messages": "Duplicate Messages",
         "edit": "Edit",
         "edit_access": "Edit {{name}}'s access",
         "edit_folder_properties": "",
@@ -311,6 +313,8 @@
         "mark_as_important": "Mark as important",
         "mark_as_un_important": "Mark as un important",
         "me": "Me",
+        "message_arrival": "Message Arrival",
+        "message_from_me": "Messages from me",
         "messages": "Messages",
         "move": "Move",
         "new_email": "New E-mail",
@@ -330,6 +334,7 @@
         "preview": "Preview",
         "private": "Private",
         "read": "Read",
+        "read_receipt": "Read Receipt",
         "read_receipt_req": "Read receipt required",
         "read_receipt_sent": "A read receipt was sent for this message",
         "receive_message": "Receiving Messages",
Index: src/commons/utils.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport moment from 'moment';\nimport { find, isArray } from 'lodash';\nimport { TFunction } from 'react-i18next';\nimport { Account } from '@zextras/carbonio-shell-ui';\nimport { Participant } from '../types/participant';\n\nexport const getTimeLabel = (date: number): string => {\n\tconst momentDate = moment(date);\n\tif (momentDate.isSame(new Date(), 'day')) {\n\t\treturn momentDate.format('LT');\n\t}\n\tif (momentDate.isSame(new Date(), 'week')) {\n\t\treturn momentDate.format('dddd, LT');\n\t}\n\tif (momentDate.isSame(new Date(), 'month')) {\n\t\treturn momentDate.format('DD MMMM');\n\t}\n\treturn momentDate.format('DD/MM/YYYY');\n};\n\nexport const participantToString = (\n\tparticipant: Participant | undefined,\n\tt: TFunction,\n\taccounts: Array<Account>\n): string => {\n\tconst me = find(accounts, ['name', participant?.address]);\n\tif (me) {\n\t\treturn t('label.me', 'Me');\n\t}\n\treturn participant?.fullName || participant?.name || participant?.address || '';\n};\n\nexport const isAvailableInTrusteeList = (\n\ttrusteeList: Array<string> | string,\n\taddress: string\n): boolean => {\n\tlet trusteeAddress: Array<string> = [];\n\tlet availableInTrusteeList = false;\n\tif (trusteeList) {\n\t\ttrusteeAddress = isArray(trusteeList) ? trusteeList : trusteeList.split(',');\n\t}\n\tif (trusteeAddress.length > 0) {\n\t\tconst domain = address.substring(address.lastIndexOf('@') + 1);\n\t\ttrusteeAddress.forEach((ta) => {\n\t\t\tif (ta === domain || ta === address) {\n\t\t\t\tavailableInTrusteeList = true;\n\t\t\t}\n\t\t});\n\t}\n\treturn availableInTrusteeList;\n};\n\n// eslint-disable-next-line no-shadow\nexport enum LineType {\n\tORIG_UNKNOWN = 'UNKNOWN',\n\tORIG_QUOTED = 'QUOTED',\n\tORIG_SEP_STRONG = 'SEP_STRONG',\n\tORIG_WROTE_STRONG = 'WROTE_STRONG',\n\tORIG_WROTE_WEAK = 'WROTE_WEAK',\n\tORIG_HEADER = 'HEADER',\n\tORIG_LINE = 'LINE',\n\tHTML_SEP_ID = 'zwchr',\n\tNOTES_SEPARATOR = '*~*~*~*~*~*~*~*~*~*'\n}\n\n// eslint-disable-next-line no-shadow\nexport enum FolderActionsType {\n\tNEW = 'new',\n\tMOVE = 'move',\n\tDELETE = 'delete',\n\tEDIT = 'edit',\n\tEMPTY = 'empty',\n\tREMOVE_FROM_LIST = 'removeFromList',\n\tSHARES_INFO = 'sharesInfo',\n\tSHARE = 'share'\n}\n\n// eslint-disable-next-line no-shadow\nexport enum ParticipantRole {\n\tFROM = 'f',\n\tTO = 't',\n\tCARBON_COPY = 'c',\n\tBLIND_CARBON_COPY = 'b',\n\tREPLY_TO = 'r',\n\tSENDER = 's',\n\tREAD_RECEIPT_NOTIFICATION = 'n',\n\tRESENT_FROM = 'rf'\n}\n\n// eslint-disable-next-line no-shadow\nexport enum ActionsType {\n\tNEW = 'new',\n\tEDIT_AS_DRAFT = 'editAsDraft',\n\tEDIT_AS_NEW = 'editAsNew',\n\tREPLY = 'reply',\n\tREPLY_ALL = 'replyAll',\n\tFORWARD = 'forward',\n\tMAIL_TO = 'mailTo',\n\tCOMPOSE = 'compose',\n\tPREFILL_COMPOSE = 'prefillCompose'\n}\n\n// eslint-disable-next-line no-shadow\nexport enum TagsActionsType {\n\tNEW = 'new',\n\tDELETE = 'delete',\n\tEDIT = 'edit',\n\tApply = 'apply'\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/commons/utils.tsx b/src/commons/utils.tsx
--- a/src/commons/utils.tsx	(revision d8bea371a1253f951f0f0ff48819868807c68aa7)
+++ b/src/commons/utils.tsx	(date 1661936110000)
@@ -112,3 +112,12 @@
 	EDIT = 'edit',
 	Apply = 'apply'
 }
+
+// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
+export const omitBy = (obj: any, check: (arg: unknown) => boolean): any => {
+	// eslint-disable-next-line no-param-reassign
+	obj = { ...obj };
+	// eslint-disable-next-line no-param-reassign
+	Object.entries(obj).forEach(([key, value]) => check(value) && delete obj[key]);
+	return obj;
+};
Index: .idea/webResources.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/webResources.xml b/.idea/webResources.xml
new file mode 100644
--- /dev/null	(date 1661936110000)
+++ b/.idea/webResources.xml	(date 1661936110000)
@@ -0,0 +1,14 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="WebResourcesPaths">
+    <contentEntries>
+      <entry url="file://$PROJECT_DIR$">
+        <entryData>
+          <resourceRoots>
+            <path value="file://$PROJECT_DIR$/src" />
+          </resourceRoots>
+        </entryData>
+      </entry>
+    </contentEntries>
+  </component>
+</project>
\ No newline at end of file
Index: src/theme/theme-mui.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/theme/theme-mui.ts b/src/theme/theme-mui.ts
new file mode 100644
--- /dev/null	(date 1662125545000)
+++ b/src/theme/theme-mui.ts	(date 1662125545000)
@@ -0,0 +1,100 @@
+/*
+ * SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
+ *
+ * SPDX-License-Identifier: AGPL-3.0-only
+ */
+
+import { createTheme } from '@mui/material';
+
+export const themeMui = createTheme({
+	palette: {
+		primary: {
+			main: '#ff0',
+			contrastText: '#fff'
+		},
+		secondary: {
+			main: '#ffc107',
+			contrastText: '#fff'
+		},
+		error: {
+			main: '#f44336',
+			contrastText: '#fff'
+		},
+		warning: {
+			main: '#ff9800',
+			contrastText: '#fff'
+		}
+	},
+	components: {
+		MuiSvgIcon: {
+			styleOverrides: {
+				root: {
+					color: '#333333',
+					'&:hover': { background: '#c8cfd8' },
+					fontSize: '20px',
+					fontWeight: 400
+				}
+			}
+		},
+		MuiAccordionSummary: {
+			styleOverrides: {
+				root: {
+					padding: '0 16px 0 0',
+					margin: '0px',
+					minHeight: '0px'
+				},
+				focusVisible: {
+					background: 'blue'
+				},
+				content: {
+					margin: '0px'
+				}
+			}
+		},
+		MuiAccordionDetails: {
+			styleOverrides: {
+				root: {
+					padding: '0 0 0 8px',
+					margin: '0px'
+				}
+			}
+		},
+		MuiButtonBase: {
+			styleOverrides: {
+				root: {
+					padding: '0px'
+				}
+			}
+		},
+		MuiPaper: {
+			styleOverrides: {
+				root: {
+					borderBottomLeftRadius: '0px',
+					borderTopLeftRadius: '0px',
+					borderBottomRightRadius: '0px',
+					borderTopRightRadius: '0px'
+				}
+			}
+		},
+		MuiAccordion: {
+			styleOverrides: {
+				root: {
+					':last-of-type': {
+						borderBottomLeftRadius: '0px',
+						borderTopLeftRadius: '0px',
+						borderBottomRightRadius: '0px',
+						borderTopRightRadius: '0px'
+					},
+					':first-of-type': {
+						borderBottomLeftRadius: '0px',
+						borderTopLeftRadius: '0px',
+						borderBottomRightRadius: '0px',
+						borderTopRightRadius: '0px'
+					},
+					boxShadow: 'none',
+					background: '#f5f6f8'
+				}
+			}
+		}
+	}
+});
Index: src/types/share/index.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { Dispatch } from '@reduxjs/toolkit';\n\nexport type ShareCalendarModalProps = {\n\topenModal: () => void;\n\tsetModal: (a: any) => void;\n\tdispatch: Dispatch;\n\tt: (...args: any[]) => string;\n\ttoggleSnackbar: () => void;\n\tfolder: string;\n\tfolders: any;\n\tallCalendars: any;\n};\n\nexport type ShareFolderModalProps = {\n\topenModal: () => void;\n\tsetModal: (a: any) => void;\n\tdispatch: Dispatch;\n\tt: (...args: any[]) => string;\n\tcreateSnackbar: (obj: any) => void;\n\tfolder: any;\n\tfolders: any;\n\tallFolders: any;\n};\n\nexport type ResponseActionsProps = {\n\tdispatch: Dispatch;\n\tt: (...args: any[]) => string;\n\tcreateSnackbar: any;\n\tzid: string;\n\tview: string;\n\trid: string;\n\tmsgId: string;\n\tsharedCalendarName: string;\n\tgrantee: string;\n\towner: string;\n\trole: string;\n\tallowedActions: string;\n\tparticipants: any;\n};\n\nexport type ReplyShareParameters = {\n\tdata: any;\n};\n\nexport type GranteeInfoProps = {\n\tgrant: Grant;\n\tshareCalendarRoleOptions: ShareCalendarRoleOptions;\n\thovered?: boolean;\n};\n\nexport type GranteeProps = {\n\tgrant: Grant;\n\tfolder: FolderType;\n\tonMouseLeave?: () => void;\n\tonMouseEnter?: () => void;\n\tsetActiveModal: (modal: string) => void;\n\tshareCalendarRoleOptions: ShareCalendarRoleOptions;\n};\n\nexport type ShareFolderPropertiesProps = {\n\tfolder: FolderType;\n\tsetActiveModal;\n};\n\nexport type ShareCalendarRoleOptions = {\n\tlabel: string;\n\tvalue: string;\n};\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/types/share/index.d.ts b/src/types/share/index.d.ts
--- a/src/types/share/index.d.ts	(revision d8bea371a1253f951f0f0ff48819868807c68aa7)
+++ b/src/types/share/index.d.ts	(date 1661936110000)
@@ -64,7 +64,7 @@
 };
 
 export type ShareFolderPropertiesProps = {
-	folder: FolderType;
+	folder: FolderType | Folder;
 	setActiveModal;
 };
 
Index: src/types/utils/index.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport { AccordionFolder } from '@zextras/carbonio-shell-ui';\n\nexport type ModalFooterProps = {\n\tmainAlignment?: string | undefined;\n\tcrossAlignment?: string | undefined;\n\tpadding?: Record<string, string> | undefined;\n\tonConfirm: (a: string) => void;\n\tsecondaryAction?: () => void | undefined;\n\tlabel: string;\n\tsecondaryLabel?: string | undefined;\n\tdisabled?: boolean | undefined;\n\tsecondaryDisabled?: boolean | undefined;\n\tbackground?: string | undefined;\n\tsecondarybackground?: string | undefined;\n\tcolor?: string | undefined;\n\tsecondaryColor?: string | undefined;\n\tsize?: string | undefined;\n\tprimaryBtnType?: string | undefined;\n\tsecondaryBtnType?: string | undefined;\n\tshowDivider?: boolean;\n\ttooltip?: string;\n\tsecondaryTooltip?: string;\n\tpaddingTop?: string;\n};\n\nexport type CreateSnackbar = (arg: {\n\tkey: string;\n\treplace?: boolean;\n\ttype: string;\n\thideButton?: boolean;\n\tlabel: string;\n\tautoHideTimeout: number;\n\tactionLabel?: string;\n\tonActionClick?: () => void;\n}) => void;\n\nexport type ModalProps = {\n\tfolder: AccordionFolder;\n\tonClose: () => void;\n};\n\nexport type Crumb = {\n\tlabel: string;\n\ttooltip: string;\n};\n\nexport type ResFolder = AccordionFolder &\n\tPartial<{\n\t\tfolderId: number;\n\t\tfolderPath: string;\n\t\tfolderUuid: string;\n\t\tgranteeId: string;\n\t\tgranteeName: string;\n\t\tgranteeType: string;\n\t\tmid: string;\n\t\townerEmail: string;\n\t\townerId: string;\n\t\townerName: string;\n\t\trights: string;\n\t\tview: string;\n\t}>;\n\nexport type DataProps = {\n\tid: string;\n\tdate: number;\n\tmsgCount: number;\n\tunreadMsgCount: number;\n\tmessages: [\n\t\t{\n\t\t\tid: string;\n\t\t\tparent: string;\n\t\t\tdate: number;\n\t\t}\n\t];\n\tparticipants: [\n\t\t{\n\t\t\ttype: string;\n\t\t\taddress: string;\n\t\t\tname: string;\n\t\t\tfullName: string;\n\t\t},\n\t\t{\n\t\t\ttype: string;\n\t\t\taddress: string;\n\t\t\tname: string;\n\t\t}\n\t];\n\tsubject: string;\n\tfragment: string;\n\tread: false;\n\tattachment: false;\n\tflagged: false;\n\turgent: false;\n\tparentFolderId: string;\n\tselectedIDs: Array<string>;\n};\n\nexport type TextReadValuesProps = {\n\tcolor: string;\n\tweight: string;\n\tbadge: 'unread' | 'read';\n};\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/types/utils/index.d.ts b/src/types/utils/index.d.ts
--- a/src/types/utils/index.d.ts	(revision d8bea371a1253f951f0f0ff48819868807c68aa7)
+++ b/src/types/utils/index.d.ts	(date 1661936110000)
@@ -3,7 +3,7 @@
  *
  * SPDX-License-Identifier: AGPL-3.0-only
  */
-import { AccordionFolder } from '@zextras/carbonio-shell-ui';
+import { Folder } from '@zextras/carbonio-shell-ui';
 
 export type ModalFooterProps = {
 	mainAlignment?: string | undefined;
@@ -40,7 +40,7 @@
 }) => void;
 
 export type ModalProps = {
-	folder: AccordionFolder;
+	folder: Folder;
 	onClose: () => void;
 };
 
@@ -49,7 +49,7 @@
 	tooltip: string;
 };
 
-export type ResFolder = AccordionFolder &
+export type ResFolder = Folder &
 	Partial<{
 		folderId: number;
 		folderPath: string;
Index: src/views/sidebar/utils.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport {\n\tZIMBRA_STANDARD_COLORS,\n\tFOLDERS,\n\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t// @ts-ignore\n\tROOT_NAME,\n\tAccordionFolder,\n\tFolder,\n\tLinkFolderFields\n} from '@zextras/carbonio-shell-ui';\nimport { isNil, omitBy, reduce } from 'lodash';\nimport { TFunction } from 'react-i18next';\n\nconst folderIdRegex = /^(.+:)*(\\d+)$/;\n\nexport const normalizeFolder = (\n\tfolder: Folder & Partial<LinkFolderFields>\n): Partial<Folder & Partial<LinkFolderFields>> =>\n\tomitBy(\n\t\t{\n\t\t\tid: folder.id,\n\t\t\tuuid: folder.uuid,\n\t\t\tcolor: folder.color,\n\t\t\tname: folder.name,\n\t\t\tpath: folder.absFolderPath,\n\t\t\tparent: folder.l,\n\t\t\tparentUuid: folder.luuid,\n\t\t\titemsCount: folder.n,\n\t\t\tsize: folder.s,\n\t\t\tunreadCount: folder.u,\n\t\t\tsynced: true,\n\t\t\trgb: folder.rgb,\n\t\t\towner: folder.owner,\n\t\t\trid: folder.rid,\n\t\t\tzid: folder.zid,\n\t\t\tacl: folder.acl,\n\t\t\tperm: folder.perm,\n\t\t\tisSharedFolder: !!folder.owner,\n\t\t\tretentionPolicy: folder.retentionPolicy,\n\t\t\tview: folder.view\n\t\t},\n\t\tisNil\n\t);\n\nexport const extractFolders = (accordion: Array<any>, acc = {}): any =>\n\treduce(\n\t\taccordion,\n\t\t(acc2, folder) => {\n\t\t\tif (folder.folder) {\n\t\t\t\treturn (folder.view === 'message' &&\n\t\t\t\t\tfolder.id !== FOLDERS.IM_LOGS &&\n\t\t\t\t\tfolder.id !== FOLDERS.USER_ROOT) ||\n\t\t\t\t\tfolder.id === FOLDERS.TRASH\n\t\t\t\t\t? {\n\t\t\t\t\t\t\t...acc2,\n\t\t\t\t\t\t\t[folder.id]: normalizeFolder(folder),\n\t\t\t\t\t\t\t...extractFolders(folder.folder, acc2)\n\t\t\t\t\t  }\n\t\t\t\t\t: { ...acc2, ...extractFolders(folder.folder, acc2) };\n\t\t\t}\n\t\t\treturn (folder.view === 'message' &&\n\t\t\t\tfolder.id !== FOLDERS.IM_LOGS &&\n\t\t\t\tfolder.id !== FOLDERS.USER_ROOT) ||\n\t\t\t\tfolder.id === FOLDERS.TRASH\n\t\t\t\t? {\n\t\t\t\t\t\t...acc2,\n\t\t\t\t\t\t[folder.id]: normalizeFolder(folder)\n\t\t\t\t  }\n\t\t\t\t: acc2;\n\t\t},\n\t\tacc\n\t);\n\nexport const capitalise = (word: string): string => {\n\tconst asciiRef = word?.charCodeAt(0);\n\tconst newAsciiRef = asciiRef - 32;\n\tconst newChar = String.fromCharCode(newAsciiRef);\n\treturn word ? newChar + word.substring(1) : '';\n};\n\nexport const getFolderIconColor = (f: AccordionFolder): string => {\n\tif (f?.folder?.color) {\n\t\treturn f.folder.color < 10\n\t\t\t? ZIMBRA_STANDARD_COLORS[f.folder.color].hex\n\t\t\t: f?.folder.rgb ?? ZIMBRA_STANDARD_COLORS[0].hex;\n\t}\n\treturn ZIMBRA_STANDARD_COLORS[0].hex;\n};\n\nexport const getFolderIconName = (folder: AccordionFolder): string | null => {\n\tconst systemFolders = [\n\t\tFOLDERS.USER_ROOT,\n\t\tFOLDERS.INBOX,\n\t\tFOLDERS.TRASH,\n\t\tFOLDERS.DRAFTS,\n\t\tFOLDERS.SPAM,\n\t\tFOLDERS.SENT\n\t];\n\n\tif (folder.id === FOLDERS.USER_ROOT || folder.folder?.oname === ROOT_NAME) {\n\t\treturn null;\n\t}\n\n\tif (folder.id && systemFolders.includes(folder.id)) {\n\t\tswitch (folder.id) {\n\t\t\tcase FOLDERS.INBOX:\n\t\t\t\treturn 'InboxOutline';\n\t\t\tcase FOLDERS.DRAFTS:\n\t\t\t\treturn 'FileOutline';\n\t\t\tcase FOLDERS.SENT:\n\t\t\t\treturn 'PaperPlaneOutline';\n\t\t\tcase FOLDERS.SPAM:\n\t\t\t\treturn 'SlashOutline';\n\t\t\tcase FOLDERS.TRASH:\n\t\t\t\treturn 'Trash2Outline';\n\t\t\tdefault:\n\t\t\t\treturn 'FolderOutline';\n\t\t}\n\t}\n\tif (\n\t\tfolder.id?.charAt(folder.id.length - 2) === ':' &&\n\t\tsystemFolders.includes(folder.id.slice(-1))\n\t) {\n\t\tswitch (folder.id.slice(-1)) {\n\t\t\tcase FOLDERS.INBOX:\n\t\t\t\treturn 'InboxOutline';\n\t\t\tcase FOLDERS.DRAFTS:\n\t\t\t\treturn 'FileOutline';\n\t\t\tcase FOLDERS.SENT:\n\t\t\t\treturn 'PaperPlaneOutline';\n\t\t\tcase FOLDERS.SPAM:\n\t\t\t\treturn 'SlashOutline';\n\t\t\tcase FOLDERS.TRASH:\n\t\t\t\treturn 'Trash2Outline';\n\t\t\tdefault:\n\t\t\t\treturn 'FolderOutline';\n\t\t}\n\t}\n\treturn 'FolderOutline';\n};\n\nexport const translatedSystemFolders = (t: TFunction): Array<string> => [\n\tt('folders.inbox', 'Inbox'),\n\tt('folders.sent', 'Sent'),\n\tt('folders.drafts', 'Drafts'),\n\tt('folders.trash', 'Trash'),\n\tt('folders.spam', 'Spam'),\n\tt('folders.junk', 'Junk')\n];\n\ntype GetSystemFolderProps = {\n\tt: TFunction;\n\tfolderId?: string;\n\tfolderName: string;\n};\n\nexport const getSystemFolderTranslatedName = ({ t, folderName }: GetSystemFolderProps): string => {\n\tif (folderName) {\n\t\tswitch (folderName) {\n\t\t\tcase 'Inbox':\n\t\t\t\treturn t('folders.inbox', 'Inbox');\n\t\t\tcase 'Sent':\n\t\t\t\treturn t('folders.sent', 'Sent');\n\t\t\tcase 'Drafts':\n\t\t\t\treturn t('folders.drafts', 'Drafts');\n\t\t\tcase 'Trash':\n\t\t\t\treturn t('folders.trash', 'Trash');\n\t\t\tcase 'Spam':\n\t\t\t\treturn t('folders.spam', 'Spam');\n\t\t\tcase 'Junk':\n\t\t\t\treturn t('folders.junk', 'Junk');\n\t\t\tdefault:\n\t\t\t\treturn folderName;\n\t\t}\n\t}\n\treturn folderName;\n};\n\nexport const getFolderTranslatedName = ({\n\tt,\n\tfolderId,\n\tfolderName\n}: GetSystemFolderProps): string => {\n\tconst id = folderIdRegex.exec(folderId ?? '')?.[2];\n\tif (id && Object.values(FOLDERS).includes(id)) {\n\t\treturn getSystemFolderTranslatedName({ t, folderName });\n\t}\n\n\treturn folderName;\n};\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/views/sidebar/utils.ts b/src/views/sidebar/utils.ts
--- a/src/views/sidebar/utils.ts	(revision d8bea371a1253f951f0f0ff48819868807c68aa7)
+++ b/src/views/sidebar/utils.ts	(date 1662125762000)
@@ -83,7 +83,7 @@
 	return word ? newChar + word.substring(1) : '';
 };
 
-export const getFolderIconColor = (f: AccordionFolder): string => {
+export const getFolderIconColorForAccordionFolder = (f: AccordionFolder): string => {
 	if (f?.folder?.color) {
 		return f.folder.color < 10
 			? ZIMBRA_STANDARD_COLORS[f.folder.color].hex
@@ -92,7 +92,16 @@
 	return ZIMBRA_STANDARD_COLORS[0].hex;
 };
 
-export const getFolderIconName = (folder: AccordionFolder): string | null => {
+export const getFolderIconColor = (f: Folder): string => {
+	if (f?.color) {
+		return Number(f.color) < 10
+			? ZIMBRA_STANDARD_COLORS[Number(f.color)].hex
+			: f?.rgb ?? ZIMBRA_STANDARD_COLORS[0].hex;
+	}
+	return ZIMBRA_STANDARD_COLORS[0].hex;
+};
+
+export const getFolderIconNameForAccordionFolder = (folder: AccordionFolder): string | null => {
 	const systemFolders = [
 		FOLDERS.USER_ROOT,
 		FOLDERS.INBOX,
@@ -105,6 +114,58 @@
 	if (folder.id === FOLDERS.USER_ROOT || folder.folder?.oname === ROOT_NAME) {
 		return null;
 	}
+
+	if (folder.id && systemFolders.includes(folder.id)) {
+		switch (folder.id) {
+			case FOLDERS.INBOX:
+				return 'InboxOutline';
+			case FOLDERS.DRAFTS:
+				return 'FileOutline';
+			case FOLDERS.SENT:
+				return 'PaperPlaneOutline';
+			case FOLDERS.SPAM:
+				return 'SlashOutline';
+			case FOLDERS.TRASH:
+				return 'Trash2Outline';
+			default:
+				return 'FolderOutline';
+		}
+	}
+	if (
+		folder.id?.charAt(folder.id.length - 2) === ':' &&
+		systemFolders.includes(folder.id.slice(-1))
+	) {
+		switch (folder.id.slice(-1)) {
+			case FOLDERS.INBOX:
+				return 'InboxOutline';
+			case FOLDERS.DRAFTS:
+				return 'FileOutline';
+			case FOLDERS.SENT:
+				return 'PaperPlaneOutline';
+			case FOLDERS.SPAM:
+				return 'SlashOutline';
+			case FOLDERS.TRASH:
+				return 'Trash2Outline';
+			default:
+				return 'FolderOutline';
+		}
+	}
+	return 'FolderOutline';
+};
+
+export const getFolderIconName = (folder: Folder): string | null => {
+	const systemFolders = [
+		FOLDERS.USER_ROOT,
+		FOLDERS.INBOX,
+		FOLDERS.TRASH,
+		FOLDERS.DRAFTS,
+		FOLDERS.SPAM,
+		FOLDERS.SENT
+	];
+
+	if (folder.id === FOLDERS.USER_ROOT || (folder.isLink && folder.oname === ROOT_NAME)) {
+		return null;
+	}
 
 	if (folder.id && systemFolders.includes(folder.id)) {
 		switch (folder.id) {
Index: src/store/actions/search.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n/* eslint no-param-reassign: [\"error\", { \"props\": true, \"ignorePropertyModificationsFor\": [\"conversation\"] }] */\n\nimport { createAsyncThunk } from '@reduxjs/toolkit';\nimport { soapFetch } from '@zextras/carbonio-shell-ui';\nimport { keyBy, map, reduce } from 'lodash';\nimport { normalizeConversation } from '../../normalizations/normalize-conversation';\nimport { normalizeMailMessageFromSoap } from '../../normalizations/normalize-message';\nimport {\n\tConversation,\n\tSearchRequest,\n\tSearchResponse,\n\tFetchConversationsReturn,\n\tFetchConversationsParameters\n} from '../../types';\n\nexport const search = createAsyncThunk<\n\tFetchConversationsReturn | undefined,\n\tFetchConversationsParameters\n>(\n\t'fetchConversations',\n\tasync ({\n\t\tfolderId,\n\t\tlimit = 100,\n\t\tbefore,\n\t\ttypes = 'conversation',\n\t\tsortBy = 'dateDesc',\n\t\tquery,\n\t\toffset,\n\t\trecip = '2',\n\t\twantContent = 'full'\n\t}) => {\n\t\tconst queryPart = [`inId:\"${folderId}\"`];\n\t\tif (before) queryPart.push(`before:${before.getTime()}`);\n\t\tconst result = await soapFetch<SearchRequest, SearchResponse>('Search', {\n\t\t\t_jsns: 'urn:zimbraMail',\n\t\t\tlimit,\n\t\t\tneedExp: 1,\n\t\t\trecip,\n\t\t\tfullConversation: 1,\n\t\t\twantContent,\n\t\t\tsortBy,\n\t\t\tquery: query || queryPart.join(' '),\n\t\t\toffset,\n\t\t\ttypes\n\t\t});\n\n\t\tif (types === 'conversation') {\n\t\t\tconst conversations = map(result?.c ?? [], (obj) =>\n\t\t\t\tnormalizeConversation(obj)\n\t\t\t) as unknown as Array<Conversation>;\n\t\t\treturn {\n\t\t\t\tconversations: keyBy(conversations, 'id'),\n\t\t\t\thasMore: result.more,\n\t\t\t\ttypes\n\t\t\t};\n\t\t}\n\t\tif (types === 'message') {\n\t\t\treturn {\n\t\t\t\tmessages: reduce(\n\t\t\t\t\tresult.m ?? [],\n\t\t\t\t\t(acc, msg) => {\n\t\t\t\t\t\tconst normalized = normalizeMailMessageFromSoap(msg, false);\n\t\t\t\t\t\treturn { ...acc, [normalized.id]: normalized };\n\t\t\t\t\t},\n\t\t\t\t\t{}\n\t\t\t\t),\n\t\t\t\thasMore: result.more,\n\t\t\t\ttypes\n\t\t\t};\n\t\t}\n\t\treturn undefined;\n\t}\n);\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/store/actions/search.ts b/src/store/actions/search.ts
--- a/src/store/actions/search.ts	(revision d8bea371a1253f951f0f0ff48819868807c68aa7)
+++ b/src/store/actions/search.ts	(date 1662125082000)
@@ -6,7 +6,7 @@
 /* eslint no-param-reassign: ["error", { "props": true, "ignorePropertyModificationsFor": ["conversation"] }] */
 
 import { createAsyncThunk } from '@reduxjs/toolkit';
-import { soapFetch } from '@zextras/carbonio-shell-ui';
+import { getTags, soapFetch } from '@zextras/carbonio-shell-ui';
 import { keyBy, map, reduce } from 'lodash';
 import { normalizeConversation } from '../../normalizations/normalize-conversation';
 import { normalizeMailMessageFromSoap } from '../../normalizations/normalize-message';
@@ -48,10 +48,10 @@
 			offset,
 			types
 		});
-
+		const tags = getTags();
 		if (types === 'conversation') {
 			const conversations = map(result?.c ?? [], (obj) =>
-				normalizeConversation(obj)
+				normalizeConversation({ c: obj, tags })
 			) as unknown as Array<Conversation>;
 			return {
 				conversations: keyBy(conversations, 'id'),
Index: src/types/folder/index.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\n * SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nexport type FolderType = {\n\tid: string;\n\tuuid: string;\n\tname: string;\n\tpath: string | undefined;\n\tparent: string;\n\tparentUuid: string;\n\tunreadCount: number;\n\tsize: number;\n\titemsCount: number;\n\tsynced: boolean;\n\tabsParent: string;\n\titems: FolderType[];\n\tlevel: number;\n\tto: string;\n\tcolor: string;\n\trgb: string;\n\trid?: string;\n\tisSharedFolder?: boolean;\n\tisShared?: boolean;\n\towner?: string;\n\tzid?: string;\n\tacl?: unknown;\n\tperm?: string;\n\tretentionPolicy?: unknown;\n};\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/types/folder/index.d.ts b/src/types/folder/index.d.ts
--- a/src/types/folder/index.d.ts	(revision d8bea371a1253f951f0f0ff48819868807c68aa7)
+++ b/src/types/folder/index.d.ts	(date 1661936110000)
@@ -29,4 +29,5 @@
 	acl?: unknown;
 	perm?: string;
 	retentionPolicy?: unknown;
+	children?: Array<unknown>;
 };
Index: src/views/sidebar/sidebar.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport React, { useRef, FC, useContext, useMemo, useCallback, useEffect, useState } from 'react';\nimport {\n\tAccordionFolder,\n\tuseFoldersAccordionByView,\n\tuseLocalStorage\n} from '@zextras/carbonio-shell-ui';\nimport { Accordion, Container, Button, ModalManagerContext } from '@zextras/carbonio-design-system';\nimport { Route, Switch, useRouteMatch, useParams } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport { filter, isEqual, map, uniqWith } from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport CollapsedSideBarItems from './collapsed-sidebar-items';\nimport { FOLDER_VIEW } from '../../constants';\nimport { AccordionCustomComponent } from './accordion-custom-component';\nimport { getShareInfo } from '../../store/actions/get-share-info';\nimport { ResFolder } from '../../types';\nimport { SharesModal } from './shares-modal';\nimport useGetTagsAccordion from '../../hooks/use-get-tags-accordions';\n\ntype SidebarComponentProps = {\n\taccordions: Array<AccordionFolder>;\n\topenIds: Array<string>;\n};\n\nconst ButtonFindShares: FC = () => {\n\tconst [t] = useTranslation();\n\tconst dispatch = useDispatch();\n\t// eslint-disable-next-line @typescript-eslint/ban-types\n\tconst createModal = useContext(ModalManagerContext) as Function;\n\n\tconst openFindShares = useCallback(\n\t\t(ev: MouseEvent): void => {\n\t\t\tev.stopPropagation();\n\t\t\tdispatch(getShareInfo())\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t\t// @ts-ignore\n\t\t\t\t.then((res: any) => {\n\t\t\t\t\tif (res.type.includes('fulfilled') && res.payload?.share?.length > 0) {\n\t\t\t\t\t\tconst resFolders: Array<ResFolder> = uniqWith(\n\t\t\t\t\t\t\tfilter(res.payload.share, ['view', 'message']),\n\t\t\t\t\t\t\tisEqual\n\t\t\t\t\t\t);\n\t\t\t\t\t\tconst closeModal = createModal(\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tchildren: <SharesModal folders={resFolders} onClose={(): void => closeModal()} />\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\ttrue\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t},\n\t\t[createModal, dispatch]\n\t);\n\n\treturn (\n\t\t<Container padding={{ horizontal: 'medium', vertical: 'small' }}>\n\t\t\t<Button\n\t\t\t\ttype=\"outlined\"\n\t\t\t\tlabel={t('label.find_shares', 'Find shares')}\n\t\t\t\tcolor=\"primary\"\n\t\t\t\tsize=\"fill\"\n\t\t\t\tonClick={openFindShares}\n\t\t\t/>\n\t\t</Container>\n\t);\n};\n\nconst SidebarComponent: FC<SidebarComponentProps> = ({ accordions, openIds }) => {\n\tconst sidebarRef = useRef<HTMLInputElement>(null);\n\tconst { folderId } = useParams<{ folderId: string }>();\n\tconst tagsAccordionItems = useGetTagsAccordion();\n\tconst [disableTransition, setDisableTransition] = useState(true);\n\tconst [t] = useTranslation();\n\tconst accordionsWithFindShare = useMemo(() => {\n\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t// @ts-ignore\n\t\taccordions[0]?.items?.push({\n\t\t\tid: 'find_shares',\n\t\t\tlabel: t('label.find_shares', 'Find shares'),\n\t\t\tCustomComponent: ButtonFindShares,\n\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t// @ts-ignore\n\t\t\tdisableHover: true\n\t\t});\n\t\treturn map(accordions, (item) => ({ ...item, background: 'gray4' }));\n\t}, [accordions, t]);\n\n\tuseEffect(() => {\n\t\tsetDisableTransition(false);\n\t}, []);\n\n\treturn (\n\t\t<Container orientation=\"vertical\" height=\"fit\">\n\t\t\t<Accordion\n\t\t\t\topenIds={openIds}\n\t\t\t\tref={sidebarRef}\n\t\t\t\titems={accordionsWithFindShare}\n\t\t\t\tactiveId={folderId}\n\t\t\t\tdisableTransition={disableTransition}\n\t\t\t/>\n\t\t\t<Accordion items={[tagsAccordionItems]} />\n\t\t</Container>\n\t);\n};\n\ntype SidebarProps = {\n\texpanded: boolean;\n};\n\nconst Sidebar: FC<SidebarProps> = ({ expanded }) => {\n\tconst { path } = useRouteMatch();\n\tconst [openIds, setOpenIds] = useLocalStorage<Array<string>>('open_mails_folders', []);\n\n\tconst additionalProps = (item: AccordionFolder): Record<string, any> => ({\n\t\tonOpen: () => setOpenIds((s: Array<string>) => (s.includes(item.id) ? s : [...s, item.id])),\n\t\tonClose: () => setOpenIds((s: Array<string>) => s.filter((id: string) => id !== item.id))\n\t});\n\n\tconst accordions = useFoldersAccordionByView(\n\t\tFOLDER_VIEW.message,\n\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t// @ts-ignore\n\t\tAccordionCustomComponent,\n\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t// @ts-ignore\n\t\tadditionalProps\n\t);\n\n\treturn (\n\t\t<>\n\t\t\t{expanded ? (\n\t\t\t\t<>\n\t\t\t\t\t<Switch>\n\t\t\t\t\t\t<Route path={`${path}/folder/:folderId/:type?/:itemId?`}>\n\t\t\t\t\t\t\t<SidebarComponent accordions={accordions} openIds={openIds} />\n\t\t\t\t\t\t</Route>\n\t\t\t\t\t</Switch>\n\t\t\t\t</>\n\t\t\t) : (\n\t\t\t\taccordions[0].items.map((folder, index: number) => (\n\t\t\t\t\t<CollapsedSideBarItems key={index} folder={folder} />\n\t\t\t\t))\n\t\t\t)}\n\t\t</>\n\t);\n};\n\nexport default Sidebar;\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/views/sidebar/sidebar.tsx b/src/views/sidebar/sidebar.tsx
--- a/src/views/sidebar/sidebar.tsx	(revision d8bea371a1253f951f0f0ff48819868807c68aa7)
+++ b/src/views/sidebar/sidebar.tsx	(date 1662117359000)
@@ -3,106 +3,43 @@
  *
  * SPDX-License-Identifier: AGPL-3.0-only
  */
-import React, { useRef, FC, useContext, useMemo, useCallback, useEffect, useState } from 'react';
-import {
-	AccordionFolder,
-	useFoldersAccordionByView,
-	useLocalStorage
-} from '@zextras/carbonio-shell-ui';
-import { Accordion, Container, Button, ModalManagerContext } from '@zextras/carbonio-design-system';
-import { Route, Switch, useRouteMatch, useParams } from 'react-router-dom';
-import { useDispatch } from 'react-redux';
-import { filter, isEqual, map, uniqWith } from 'lodash';
-import { useTranslation } from 'react-i18next';
-import CollapsedSideBarItems from './collapsed-sidebar-items';
+
+import { ThemeProvider } from '@mui/material';
+import { Folder, useFoldersByView } from '@zextras/carbonio-shell-ui';
+import { Accordion, Container } from '@zextras/carbonio-design-system';
+import { map } from 'lodash';
+import React, { FC, useMemo } from 'react';
+import { Route, Switch, useParams, useRouteMatch } from 'react-router-dom';
 import { FOLDER_VIEW } from '../../constants';
-import { AccordionCustomComponent } from './accordion-custom-component';
-import { getShareInfo } from '../../store/actions/get-share-info';
-import { ResFolder } from '../../types';
-import { SharesModal } from './shares-modal';
 import useGetTagsAccordion from '../../hooks/use-get-tags-accordions';
+import { themeMui } from '../../theme/theme-mui';
+import CollapsedSideBarItems from './collapsed-sidebar-items';
+import { SidebarAccordionMui } from './sidebar-accordion-mui';
 
 type SidebarComponentProps = {
-	accordions: Array<AccordionFolder>;
-	openIds: Array<string>;
-};
-
-const ButtonFindShares: FC = () => {
-	const [t] = useTranslation();
-	const dispatch = useDispatch();
-	// eslint-disable-next-line @typescript-eslint/ban-types
-	const createModal = useContext(ModalManagerContext) as Function;
-
-	const openFindShares = useCallback(
-		(ev: MouseEvent): void => {
-			ev.stopPropagation();
-			dispatch(getShareInfo())
-				// eslint-disable-next-line @typescript-eslint/ban-ts-comment
-				// @ts-ignore
-				.then((res: any) => {
-					if (res.type.includes('fulfilled') && res.payload?.share?.length > 0) {
-						const resFolders: Array<ResFolder> = uniqWith(
-							filter(res.payload.share, ['view', 'message']),
-							isEqual
-						);
-						const closeModal = createModal(
-							{
-								children: <SharesModal folders={resFolders} onClose={(): void => closeModal()} />
-							},
-							true
-						);
-					}
-				});
-		},
-		[createModal, dispatch]
-	);
-
-	return (
-		<Container padding={{ horizontal: 'medium', vertical: 'small' }}>
-			<Button
-				type="outlined"
-				label={t('label.find_shares', 'Find shares')}
-				color="primary"
-				size="fill"
-				onClick={openFindShares}
-			/>
-		</Container>
-	);
+	accordions: Array<Folder>;
 };
 
-const SidebarComponent: FC<SidebarComponentProps> = ({ accordions, openIds }) => {
-	const sidebarRef = useRef<HTMLInputElement>(null);
+const SidebarComponent: FC<SidebarComponentProps> = ({ accordions }) => {
 	const { folderId } = useParams<{ folderId: string }>();
 	const tagsAccordionItems = useGetTagsAccordion();
-	const [disableTransition, setDisableTransition] = useState(true);
-	const [t] = useTranslation();
+
 	const accordionsWithFindShare = useMemo(() => {
-		// eslint-disable-next-line @typescript-eslint/ban-ts-comment
-		// @ts-ignore
-		accordions[0]?.items?.push({
-			id: 'find_shares',
-			label: t('label.find_shares', 'Find shares'),
-			CustomComponent: ButtonFindShares,
-			// eslint-disable-next-line @typescript-eslint/ban-ts-comment
-			// @ts-ignore
-			disableHover: true
-		});
+		if (!accordions?.[0]?.children.find((folder) => folder.id === 'find_shares')) {
+			// eslint-disable-next-line @typescript-eslint/ban-ts-comment
+			// @ts-ignore
+			accordions[0]?.children?.push({
+				id: 'find_shares',
+				// eslint-disable-next-line @typescript-eslint/ban-ts-comment
+				// @ts-ignore
+				disableHover: true
+			});
+		}
 		return map(accordions, (item) => ({ ...item, background: 'gray4' }));
-	}, [accordions, t]);
-
-	useEffect(() => {
-		setDisableTransition(false);
-	}, []);
-
+	}, [accordions]);
 	return (
 		<Container orientation="vertical" height="fit">
-			<Accordion
-				openIds={openIds}
-				ref={sidebarRef}
-				items={accordionsWithFindShare}
-				activeId={folderId}
-				disableTransition={disableTransition}
-			/>
+			<SidebarAccordionMui accordions={accordionsWithFindShare} folderId={folderId} />
 			<Accordion items={[tagsAccordionItems]} />
 		</Container>
 	);
@@ -112,40 +49,26 @@
 	expanded: boolean;
 };
 
+const MemoSidebar: FC<SidebarComponentProps> = React.memo(SidebarComponent);
+
 const Sidebar: FC<SidebarProps> = ({ expanded }) => {
 	const { path } = useRouteMatch();
-	const [openIds, setOpenIds] = useLocalStorage<Array<string>>('open_mails_folders', []);
-
-	const additionalProps = (item: AccordionFolder): Record<string, any> => ({
-		onOpen: () => setOpenIds((s: Array<string>) => (s.includes(item.id) ? s : [...s, item.id])),
-		onClose: () => setOpenIds((s: Array<string>) => s.filter((id: string) => id !== item.id))
-	});
-
-	const accordions = useFoldersAccordionByView(
-		FOLDER_VIEW.message,
-		// eslint-disable-next-line @typescript-eslint/ban-ts-comment
-		// @ts-ignore
-		AccordionCustomComponent,
-		// eslint-disable-next-line @typescript-eslint/ban-ts-comment
-		// @ts-ignore
-		additionalProps
-	);
-
+	const accordions = useFoldersByView(FOLDER_VIEW.message);
 	return (
 		<>
-			{expanded ? (
-				<>
+			<ThemeProvider theme={themeMui}>
+				{expanded ? (
 					<Switch>
 						<Route path={`${path}/folder/:folderId/:type?/:itemId?`}>
-							<SidebarComponent accordions={accordions} openIds={openIds} />
+							<MemoSidebar accordions={accordions} />
 						</Route>
 					</Switch>
-				</>
-			) : (
-				accordions[0].items.map((folder, index: number) => (
-					<CollapsedSideBarItems key={index} folder={folder} />
-				))
-			)}
+				) : (
+					accordions[0].children.map((folder) => (
+						<CollapsedSideBarItems key={folder.id} folder={folder} />
+					))
+				)}
+			</ThemeProvider>
 		</>
 	);
 };
Index: src/store/actions/get-conv.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport { createAsyncThunk } from '@reduxjs/toolkit';\nimport { soapFetch } from '@zextras/carbonio-shell-ui';\nimport { map } from 'lodash';\nimport { normalizeConversation } from '../../normalizations/normalize-conversation';\nimport { normalizeMailMessageFromSoap } from '../../normalizations/normalize-message';\nimport {\n\tConversation,\n\tGetConvParameters,\n\tGetConvRequest,\n\tGetConvResponse,\n\tIncompleteMessage\n} from '../../types';\n\nexport const getConv = createAsyncThunk<\n\t{ conversation: Partial<Conversation>; messages: Array<IncompleteMessage> },\n\tGetConvParameters\n>(\n\t'conversations/getConv',\n\tasync ({ conversationId, fetch = 'all' }) => {\n\t\tconst result = (await soapFetch<GetConvRequest, GetConvResponse>('GetConv', {\n\t\t\t_jsns: 'urn:zimbraMail',\n\t\t\tc: {\n\t\t\t\tid: conversationId,\n\t\t\t\thtml: 1,\n\t\t\t\tneedExp: 1,\n\t\t\t\tfetch\n\t\t\t}\n\t\t})) as GetConvResponse;\n\t\tconst conversation = normalizeConversation(result.c[0]);\n\t\tconst messages = map(result.c[0].m, (item) =>\n\t\t\tnormalizeMailMessageFromSoap(item, false)\n\t\t) as unknown as Array<IncompleteMessage>;\n\t\treturn { conversation, messages };\n\t},\n\t{\n\t\tcondition: ({ folderId, conversationId }: GetConvParameters, { getState }: any) => {\n\t\t\tif (!folderId) return true;\n\t\t\treturn (\n\t\t\t\tgetState().conversations?.expandedStatus[conversationId] !== 'complete' &&\n\t\t\t\tgetState().conversations?.expandedStatus[conversationId] !== 'pending'\n\t\t\t);\n\t\t}\n\t}\n);\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/store/actions/get-conv.ts b/src/store/actions/get-conv.ts
--- a/src/store/actions/get-conv.ts	(revision d8bea371a1253f951f0f0ff48819868807c68aa7)
+++ b/src/store/actions/get-conv.ts	(date 1661936110000)
@@ -4,7 +4,7 @@
  * SPDX-License-Identifier: AGPL-3.0-only
  */
 import { createAsyncThunk } from '@reduxjs/toolkit';
-import { soapFetch } from '@zextras/carbonio-shell-ui';
+import { getTags, soapFetch } from '@zextras/carbonio-shell-ui';
 import { map } from 'lodash';
 import { normalizeConversation } from '../../normalizations/normalize-conversation';
 import { normalizeMailMessageFromSoap } from '../../normalizations/normalize-message';
@@ -31,7 +31,8 @@
 				fetch
 			}
 		})) as GetConvResponse;
-		const conversation = normalizeConversation(result.c[0]);
+		const tags = getTags();
+		const conversation = normalizeConversation({ c: result.c[0], tags });
 		const messages = map(result.c[0].m, (item) =>
 			normalizeMailMessageFromSoap(item, false)
 		) as unknown as Array<IncompleteMessage>;
Index: src/hooks/use-local-storage.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/hooks/use-local-storage.ts b/src/hooks/use-local-storage.ts
new file mode 100644
--- /dev/null	(date 1662125629000)
+++ b/src/hooks/use-local-storage.ts	(date 1662125629000)
@@ -0,0 +1,29 @@
+/*
+ * SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
+ *
+ * SPDX-License-Identifier: AGPL-3.0-only
+ */
+
+import { Dispatch, SetStateAction, useState } from 'react';
+
+export function useLocalStorage<T>(key: string, initialValue: T): [T, Dispatch<SetStateAction<T>>] {
+	const [storedValue, setStoredValue] = useState<T>(() => {
+		try {
+			const item = window.localStorage.getItem(key);
+			return item ? JSON.parse(item) : initialValue;
+		} catch (error) {
+			console.error(error);
+			return initialValue;
+		}
+	});
+	const setValue = (value: T | ((val: T) => T)): void => {
+		try {
+			const valueToStore = value instanceof Function ? value(storedValue) : value;
+			setStoredValue(valueToStore);
+			localStorage.setItem(key, JSON.stringify(valueToStore));
+		} catch (error) {
+			console.error(error);
+		}
+	};
+	return [storedValue, setValue];
+}
Index: src/views/sidebar/new-modal.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport React, {\n\tChangeEvent,\n\tFC,\n\tuseCallback,\n\tuseContext,\n\tuseEffect,\n\tuseLayoutEffect,\n\tuseMemo,\n\tuseRef,\n\tuseState\n} from 'react';\nimport {\n\tContainer,\n\tInput,\n\tText,\n\tPadding,\n\tAccordion,\n\tSnackbarManagerContext\n} from '@zextras/carbonio-design-system';\n\nimport { cloneDeep, filter, includes, startsWith } from 'lodash';\nimport { nanoid } from '@reduxjs/toolkit';\nimport {\n\tAccordionFolder,\n\tFOLDERS,\n\tuseFoldersAccordionByView,\n\tuseUserAccount\n} from '@zextras/carbonio-shell-ui';\nimport { useTranslation } from 'react-i18next';\nimport { useDispatch } from 'react-redux';\nimport styled from 'styled-components';\nimport { useParams } from 'react-router-dom';\nimport ModalFooter from './commons/modal-footer';\nimport { ModalHeader } from './commons/modal-header';\nimport { createFolder } from '../../store/actions/create-folder';\nimport { FOLDER_VIEW } from '../../constants';\nimport ModalAccordionCustomComponent from './parts/edit/modal-accordion-custom-component';\nimport { ModalProps } from '../../types';\nimport { getFolderTranslatedName, translatedSystemFolders } from './utils';\n\nconst ContainerEl = styled(Container)`\n\toverflow-y: auto;\n\tdisplay: block;\n`;\n\nexport const NewModal: FC<ModalProps> = ({ folder, onClose }) => {\n\tconst [t] = useTranslation();\n\tconst dispatch = useDispatch();\n\t// eslint-disable-next-line @typescript-eslint/ban-types\n\tconst createSnackbar = useContext(SnackbarManagerContext) as Function;\n\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t// @ts-ignore\n\tconst folders = useFoldersAccordionByView(FOLDER_VIEW.message, null);\n\tconst [inputValue, setInputValue] = useState('');\n\tconst [searchString, setSearchString] = useState('');\n\tconst [folderDestination, setFolderDestination] = useState<AccordionFolder | undefined>(folder);\n\tconst [disabled, setDisabled] = useState(true);\n\tconst [hasError, setHasError] = useState(false);\n\tconst [label, setLabel] = useState(t('folder_panel.modal.new.input.name', 'Enter Folder Name'));\n\tconst { folderId } = useParams<{ folderId: string }>();\n\tconst accountName = useUserAccount().name;\n\tconst accordionRef = useRef<HTMLDivElement>();\n\tconst [accordionWidth, setAccordionWidth] = useState<number>();\n\n\tuseLayoutEffect(() => {\n\t\tconst calculateAvailableWidth = (): void => {\n\t\t\tif (accordionRef && accordionRef.current) {\n\t\t\t\tsetAccordionWidth(accordionRef?.current?.clientWidth);\n\t\t\t}\n\t\t};\n\t\twindow.addEventListener('resize', calculateAvailableWidth);\n\t\treturn (): void => window.removeEventListener('resize', calculateAvailableWidth);\n\t}, [accordionRef]);\n\n\tconst showWarning = useMemo(\n\t\t() => includes(translatedSystemFolders(t), inputValue),\n\t\t[t, inputValue]\n\t);\n\n\tconst flattenFolders = useCallback(\n\t\t(arr: Array<AccordionFolder>): Array<AccordionFolder> => {\n\t\t\tconst result: Array<AccordionFolder> = [];\n\t\t\tarr.forEach((item) => {\n\t\t\t\tconst { items } = item;\n\t\t\t\tif (\n\t\t\t\t\titem.folder.id !== FOLDERS.TRASH &&\n\t\t\t\t\titem.folder.id !== FOLDERS.SPAM &&\n\t\t\t\t\t!startsWith(item.folder.absFolderPath, '/Trash')\n\t\t\t\t)\n\t\t\t\t\tresult.push({\n\t\t\t\t\t\t...item,\n\t\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\tCustomComponent: ModalAccordionCustomComponent,\n\t\t\t\t\t\tonClick: () => {\n\t\t\t\t\t\t\tsetFolderDestination(item);\n\t\t\t\t\t\t},\n\t\t\t\t\t\tbackground:\n\t\t\t\t\t\t\ttypeof folderDestination !== 'undefined' && folderDestination.id === item.folder.id\n\t\t\t\t\t\t\t\t? 'highlight'\n\t\t\t\t\t\t\t\t: undefined,\n\t\t\t\t\t\tlabel:\n\t\t\t\t\t\t\titem.folder.id === FOLDERS.USER_ROOT\n\t\t\t\t\t\t\t\t? accountName\n\t\t\t\t\t\t\t\t: getFolderTranslatedName({\n\t\t\t\t\t\t\t\t\t\tt,\n\t\t\t\t\t\t\t\t\t\tfolderId: item.folder.id,\n\t\t\t\t\t\t\t\t\t\tfolderName: item.folder.name\n\t\t\t\t\t\t\t\t  }),\n\t\t\t\t\t\tactiveId: item.folder.id === folderId,\n\t\t\t\t\t\taccordionWidth,\n\t\t\t\t\t\titems: []\n\t\t\t\t\t});\n\t\t\t\tif (items) result.push(...flattenFolders(items));\n\t\t\t});\n\t\t\treturn result;\n\t\t},\n\t\t[folderDestination, accountName, t, folderId, accordionWidth]\n\t);\n\n\tconst getFolderRootName = useCallback((_folder: AccordionFolder): string => {\n\t\tlet result = _folder.folder;\n\t\twhile (result.parent?.parent) {\n\t\t\tresult = result.parent;\n\t\t}\n\t\treturn result.owner || result.parent?.name || result.name;\n\t}, []);\n\n\tconst filteredFolders = useMemo(\n\t\t() => folders.filter((item) => item.label === getFolderRootName(folder)),\n\t\t[folders, getFolderRootName, folder]\n\t);\n\n\tconst flattenedFolders = useMemo(\n\t\t() => flattenFolders(filteredFolders),\n\t\t[filteredFolders, flattenFolders]\n\t);\n\n\tuseEffect(() => {\n\t\tif (!folderDestination || !inputValue.length || showWarning) {\n\t\t\tsetDisabled(true);\n\t\t\treturn;\n\t\t}\n\t\tconst value = !!filter(folderDestination.folder.children, (item) => item.name === inputValue)\n\t\t\t.length;\n\t\tif (value) {\n\t\t\tsetLabel(t('folder_panel.modal.new.input.name_exist', 'Name already exists in this path'));\n\t\t} else {\n\t\t\tsetLabel(t('folder_panel.modal.new.input.name', 'Enter Folder Name'));\n\t\t}\n\t\tsetHasError(value);\n\t\tsetDisabled(value);\n\t}, [folderDestination, inputValue, showWarning, t]);\n\n\tconst filteredFromUserInput = useMemo(\n\t\t() =>\n\t\t\tfilter(flattenedFolders, (item) => {\n\t\t\t\tconst folderName = item.label.toLowerCase();\n\t\t\t\treturn startsWith(folderName, searchString.toLowerCase());\n\t\t\t}),\n\t\t[flattenedFolders, searchString]\n\t);\n\n\tconst onConfirm = useCallback(() => {\n\t\tdispatch(createFolder({ parentFolder: folderDestination, name: inputValue, id: nanoid() }))\n\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t// @ts-ignore\n\t\t\t.then((res: unknown & { type: string }) => {\n\t\t\t\tif (res.type.includes('fulfilled')) {\n\t\t\t\t\tcreateSnackbar({\n\t\t\t\t\t\tkey: `edit`,\n\t\t\t\t\t\treplace: true,\n\t\t\t\t\t\ttype: 'success',\n\t\t\t\t\t\tlabel: t('messages.snackbar.folder_created', 'New folder created'),\n\t\t\t\t\t\tautoHideTimeout: 3000,\n\t\t\t\t\t\thideButton: true\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tcreateSnackbar({\n\t\t\t\t\t\tkey: `edit`,\n\t\t\t\t\t\treplace: true,\n\t\t\t\t\t\ttype: 'error',\n\t\t\t\t\t\tlabel: t('label.error_try_again', 'Something went wrong, please try again'),\n\t\t\t\t\t\tautoHideTimeout: 3000,\n\t\t\t\t\t\thideButton: true\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\tsetSearchString('');\n\t\tsetInputValue('');\n\t\tsetLabel(t('folder_panel.modal.new.input.name', 'Enter Folder Name'));\n\t\tsetFolderDestination(undefined);\n\t\tsetHasError(false);\n\t\tonClose();\n\t}, [dispatch, folderDestination, inputValue, t, onClose, createSnackbar]);\n\n\treturn folder ? (\n\t\t<Container\n\t\t\tpadding={{ all: 'large' }}\n\t\t\tmainAlignment=\"center\"\n\t\t\tcrossAlignment=\"flex-start\"\n\t\t\theight=\"fit\"\n\t\t>\n\t\t\t<ModalHeader\n\t\t\t\ttitle={t('folder_panel.modal.new.title', 'Create a new folder')}\n\t\t\t\tonClose={onClose}\n\t\t\t/>\n\t\t\t<Container mainAlignment=\"center\" crossAlignment=\"flex-start\" height=\"fit\">\n\t\t\t\t<Input\n\t\t\t\t\tlabel={label}\n\t\t\t\t\tbackgroundColor=\"gray5\"\n\t\t\t\t\thasError={hasError}\n\t\t\t\t\tdefaultValue={inputValue}\n\t\t\t\t\tonChange={(e: ChangeEvent<HTMLInputElement>): void => setInputValue(e.target.value)}\n\t\t\t\t/>\n\t\t\t\t{showWarning && (\n\t\t\t\t\t<Padding all=\"small\">\n\t\t\t\t\t\t<Text size=\"small\" color=\"error\">\n\t\t\t\t\t\t\t{`${t(\n\t\t\t\t\t\t\t\t'folder.modal.edit.rename_warning',\n\t\t\t\t\t\t\t\t'You cannot rename a folder as a system one.'\n\t\t\t\t\t\t\t)}`}\n\t\t\t\t\t\t</Text>\n\t\t\t\t\t</Padding>\n\t\t\t\t)}\n\t\t\t\t<Input\n\t\t\t\t\tlabel={t('label.filter_folders', 'Filter folders')}\n\t\t\t\t\tbackgroundColor=\"gray5\"\n\t\t\t\t\tvalue={searchString}\n\t\t\t\t\tonChange={(e: ChangeEvent<HTMLInputElement>): void => setSearchString(e.target.value)}\n\t\t\t\t/>\n\t\t\t\t<ContainerEl\n\t\t\t\t\torientation=\"vertical\"\n\t\t\t\t\tmainAlignment=\"flex-start\"\n\t\t\t\t\tminHeight=\"30vh\"\n\t\t\t\t\tmaxHeight=\"60vh\"\n\t\t\t\t>\n\t\t\t\t\t<Accordion\n\t\t\t\t\t\tref={accordionRef}\n\t\t\t\t\t\tbackground=\"gray6\"\n\t\t\t\t\t\titems={filteredFromUserInput}\n\t\t\t\t\t\tstyle={{ overflowY: 'hidden' }}\n\t\t\t\t\t/>\n\t\t\t\t</ContainerEl>\n\t\t\t\t<ModalFooter\n\t\t\t\t\tonConfirm={onConfirm}\n\t\t\t\t\tsecondaryAction={onClose}\n\t\t\t\t\tlabel={t('label.create_and_move', 'Create and move')}\n\t\t\t\t\tdisabled={disabled}\n\t\t\t\t/>\n\t\t\t</Container>\n\t\t</Container>\n\t) : (\n\t\t<></>\n\t);\n};\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/views/sidebar/new-modal.tsx b/src/views/sidebar/new-modal.tsx
--- a/src/views/sidebar/new-modal.tsx	(revision d8bea371a1253f951f0f0ff48819868807c68aa7)
+++ b/src/views/sidebar/new-modal.tsx	(date 1662120670000)
@@ -23,14 +23,9 @@
 	SnackbarManagerContext
 } from '@zextras/carbonio-design-system';
 
-import { cloneDeep, filter, includes, startsWith } from 'lodash';
+import { filter, includes, startsWith } from 'lodash';
 import { nanoid } from '@reduxjs/toolkit';
-import {
-	AccordionFolder,
-	FOLDERS,
-	useFoldersAccordionByView,
-	useUserAccount
-} from '@zextras/carbonio-shell-ui';
+import { Folder, FOLDERS, useFoldersByView, useUserAccount } from '@zextras/carbonio-shell-ui';
 import { useTranslation } from 'react-i18next';
 import { useDispatch } from 'react-redux';
 import styled from 'styled-components';
@@ -55,10 +50,10 @@
 	const createSnackbar = useContext(SnackbarManagerContext) as Function;
 	// eslint-disable-next-line @typescript-eslint/ban-ts-comment
 	// @ts-ignore
-	const folders = useFoldersAccordionByView(FOLDER_VIEW.message, null);
+	const folders = useFoldersByView(FOLDER_VIEW.message);
 	const [inputValue, setInputValue] = useState('');
 	const [searchString, setSearchString] = useState('');
-	const [folderDestination, setFolderDestination] = useState<AccordionFolder | undefined>(folder);
+	const [folderDestination, setFolderDestination] = useState<Folder | undefined>(folder);
 	const [disabled, setDisabled] = useState(true);
 	const [hasError, setHasError] = useState(false);
 	const [label, setLabel] = useState(t('folder_panel.modal.new.input.name', 'Enter Folder Name'));
@@ -83,14 +78,13 @@
 	);
 
 	const flattenFolders = useCallback(
-		(arr: Array<AccordionFolder>): Array<AccordionFolder> => {
-			const result: Array<AccordionFolder> = [];
+		(arr: Array<Folder>): Array<Folder> => {
+			const result: Array<Folder> = [];
 			arr.forEach((item) => {
-				const { items } = item;
 				if (
-					item.folder.id !== FOLDERS.TRASH &&
-					item.folder.id !== FOLDERS.SPAM &&
-					!startsWith(item.folder.absFolderPath, '/Trash')
+					item.id !== FOLDERS.TRASH &&
+					item.id !== FOLDERS.SPAM &&
+					!startsWith(item.absFolderPath, '/Trash')
 				)
 					result.push({
 						...item,
@@ -101,38 +95,40 @@
 							setFolderDestination(item);
 						},
 						background:
-							typeof folderDestination !== 'undefined' && folderDestination.id === item.folder.id
+							typeof folderDestination !== 'undefined' && folderDestination.id === item.id
 								? 'highlight'
 								: undefined,
 						label:
-							item.folder.id === FOLDERS.USER_ROOT
+							item.id === FOLDERS.USER_ROOT
 								? accountName
 								: getFolderTranslatedName({
 										t,
-										folderId: item.folder.id,
-										folderName: item.folder.name
+										folderId: item.id,
+										folderName: item.name
 								  }),
-						activeId: item.folder.id === folderId,
+						activeId: item.id === folderId,
 						accordionWidth,
 						items: []
 					});
-				if (items) result.push(...flattenFolders(items));
+				if (item.children.length > 0) {
+					result.push(...flattenFolders(item.children));
+				}
 			});
 			return result;
 		},
 		[folderDestination, accountName, t, folderId, accordionWidth]
 	);
 
-	const getFolderRootName = useCallback((_folder: AccordionFolder): string => {
-		let result = _folder.folder;
+	const getFolderRootName = useCallback((_folder: Folder): string => {
+		let result = _folder;
 		while (result.parent?.parent) {
 			result = result.parent;
 		}
-		return result.owner || result.parent?.name || result.name;
+		return (result.isLink && result.owner) || result.parent?.name || result.name;
 	}, []);
 
 	const filteredFolders = useMemo(
-		() => folders.filter((item) => item.label === getFolderRootName(folder)),
+		() => folders.filter((item: Folder) => item.name === getFolderRootName(folder)),
 		[folders, getFolderRootName, folder]
 	);
 
@@ -146,8 +142,7 @@
 			setDisabled(true);
 			return;
 		}
-		const value = !!filter(folderDestination.folder.children, (item) => item.name === inputValue)
-			.length;
+		const value = !!filter(folderDestination.children, (item) => item.name === inputValue).length;
 		if (value) {
 			setLabel(t('folder_panel.modal.new.input.name_exist', 'Name already exists in this path'));
 		} else {
@@ -157,10 +152,11 @@
 		setDisabled(value);
 	}, [folderDestination, inputValue, showWarning, t]);
 
+	// @TODO: optimize function
 	const filteredFromUserInput = useMemo(
 		() =>
 			filter(flattenedFolders, (item) => {
-				const folderName = item.label.toLowerCase();
+				const folderName = item.name.toLowerCase();
 				return startsWith(folderName, searchString.toLowerCase());
 			}),
 		[flattenedFolders, searchString]
Index: src/views/sidebar/edit-modal.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport { Container, SnackbarManagerContext } from '@zextras/carbonio-design-system';\nimport React, { FC, useCallback, useContext, useState } from 'react';\nimport { ModalProps } from '../../types';\nimport { Context } from './parts/edit/edit-context';\nimport EditDefaultModal from './parts/edit/edit-default-modal';\nimport ShareRevokeModal from './parts/edit/share-revoke-modal';\nimport ShareFolderModal from './share-folder-modal';\n\nexport const EditModal: FC<ModalProps> = ({ folder, onClose }) => {\n\t// eslint-disable-next-line @typescript-eslint/ban-types\n\tconst createSnackbar = useContext(SnackbarManagerContext) as Function;\n\tconst [activeModal, setActiveModal] = useState('default');\n\tconst [activeGrant, setActiveGrant] = useState({});\n\tconst goBack = useCallback(() => {\n\t\tsetActiveModal('default');\n\t}, [setActiveModal]);\n\treturn (\n\t\t<Context.Provider value={{ activeModal, setActiveModal, activeGrant, setActiveGrant, onClose }}>\n\t\t\t<Container\n\t\t\t\tpadding={{ all: 'medium' }}\n\t\t\t\tmainAlignment=\"center\"\n\t\t\t\tcrossAlignment=\"flex-start\"\n\t\t\t\theight=\"fit\"\n\t\t\t>\n\t\t\t\t{activeModal === 'default' && (\n\t\t\t\t\t<EditDefaultModal folder={folder} onClose={onClose} setActiveModal={setActiveModal} />\n\t\t\t\t)}\n\n\t\t\t\t{activeModal === 'edit' && (\n\t\t\t\t\t<ShareFolderModal\n\t\t\t\t\t\tfolder={folder}\n\t\t\t\t\t\tactiveGrant={activeGrant}\n\t\t\t\t\t\tgoBack={goBack}\n\t\t\t\t\t\tonClose={onClose}\n\t\t\t\t\t\teditMode\n\t\t\t\t\t/>\n\t\t\t\t)}\n\n\t\t\t\t{activeModal === 'revoke' && (\n\t\t\t\t\t<ShareRevokeModal\n\t\t\t\t\t\tfolder={folder.folder}\n\t\t\t\t\t\tgoBack={goBack}\n\t\t\t\t\t\tgrant={activeGrant || folder?.folder.acl?.grant[0]}\n\t\t\t\t\t\tcreateSnackbar={createSnackbar}\n\t\t\t\t\t/>\n\t\t\t\t)}\n\t\t\t\t{activeModal === 'share' && (\n\t\t\t\t\t<ShareFolderModal\n\t\t\t\t\t\tfolder={folder}\n\t\t\t\t\t\tactiveGrant={activeGrant}\n\t\t\t\t\t\tonClose={onClose}\n\t\t\t\t\t\tgoBack={goBack}\n\t\t\t\t\t/>\n\t\t\t\t)}\n\t\t\t</Container>\n\t\t</Context.Provider>\n\t);\n};\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/views/sidebar/edit-modal.tsx b/src/views/sidebar/edit-modal.tsx
--- a/src/views/sidebar/edit-modal.tsx	(revision d8bea371a1253f951f0f0ff48819868807c68aa7)
+++ b/src/views/sidebar/edit-modal.tsx	(date 1661936110000)
@@ -43,9 +43,9 @@
 
 				{activeModal === 'revoke' && (
 					<ShareRevokeModal
-						folder={folder.folder}
+						folder={folder}
 						goBack={goBack}
-						grant={activeGrant || folder?.folder.acl?.grant[0]}
+						grant={activeGrant || folder?.acl?.grant[0]}
 						createSnackbar={createSnackbar}
 					/>
 				)}
Index: src/views/sidebar/move-modal.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport React, {\n\tChangeEvent,\n\tFC,\n\tuseCallback,\n\tuseContext,\n\tuseLayoutEffect,\n\tuseMemo,\n\tuseRef,\n\tuseState\n} from 'react';\nimport {\n\tInput,\n\tText,\n\tContainer,\n\tAccordion,\n\tPadding,\n\tButton,\n\tSnackbarManagerContext\n} from '@zextras/carbonio-design-system';\nimport { cloneDeep, filter, startsWith } from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { useDispatch } from 'react-redux';\nimport {\n\tAccordionFolder,\n\tFolder,\n\tFOLDERS,\n\tuseFoldersAccordionByView,\n\tuseUserAccount\n} from '@zextras/carbonio-shell-ui';\nimport { useParams } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { folderAction } from '../../store/actions/folder-action';\nimport ModalFooter from './commons/modal-footer';\nimport { ModalHeader } from './commons/modal-header';\nimport { FOLDER_VIEW } from '../../constants';\nimport ModalAccordionCustomComponent from './parts/edit/modal-accordion-custom-component';\nimport { ModalProps } from '../../types';\nimport { getFolderTranslatedName } from './utils';\n\nconst ContainerEl = styled(Container)`\n\toverflow-y: auto;\n\tdisplay: block;\n`;\n\nexport const MoveModal: FC<ModalProps> = ({ folder, onClose }) => {\n\tconst [t] = useTranslation();\n\tconst dispatch = useDispatch();\n\t// eslint-disable-next-line @typescript-eslint/ban-types\n\tconst createSnackbar = useContext(SnackbarManagerContext) as Function;\n\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t// @ts-ignore\n\tconst folders = useFoldersAccordionByView(FOLDER_VIEW.message, null);\n\tconst [searchString, setSearchString] = useState('');\n\tconst [folderDestination, setFolderDestination] = useState<Folder | undefined>(folder.folder);\n\tconst { folderId } = useParams<{ folderId: string }>();\n\tconst accountName = useUserAccount().name;\n\tconst accordionRef = useRef<HTMLDivElement>();\n\tconst [accordionWidth, setAccordionWidth] = useState<number>();\n\n\tuseLayoutEffect(() => {\n\t\tconst calculateAvailableWidth = (): void => {\n\t\t\tif (accordionRef && accordionRef.current) {\n\t\t\t\tsetAccordionWidth(accordionRef?.current?.clientWidth);\n\t\t\t}\n\t\t};\n\t\twindow.addEventListener('resize', calculateAvailableWidth);\n\t\treturn (): void => window.removeEventListener('resize', calculateAvailableWidth);\n\t}, [accordionRef]);\n\n\tconst flattenFolders = useCallback(\n\t\t(arr: Array<AccordionFolder>): Array<AccordionFolder> => {\n\t\t\tconst result: Array<AccordionFolder> = [];\n\t\t\tarr.forEach((item) => {\n\t\t\t\tconst { items } = item;\n\t\t\t\tif (\n\t\t\t\t\titem.folder.id !== FOLDERS.TRASH &&\n\t\t\t\t\titem.folder.id !== FOLDERS.SPAM &&\n\t\t\t\t\t!startsWith(item.folder.absFolderPath, '/Trash')\n\t\t\t\t)\n\t\t\t\t\tresult.push({\n\t\t\t\t\t\t...item,\n\t\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\tCustomComponent: ModalAccordionCustomComponent,\n\t\t\t\t\t\tonClick: () => {\n\t\t\t\t\t\t\tsetFolderDestination(item.folder);\n\t\t\t\t\t\t},\n\t\t\t\t\t\tbackground:\n\t\t\t\t\t\t\ttypeof folderDestination !== 'undefined' && folderDestination.id === item.folder.id\n\t\t\t\t\t\t\t\t? 'highlight'\n\t\t\t\t\t\t\t\t: undefined,\n\t\t\t\t\t\tlabel:\n\t\t\t\t\t\t\titem.folder.id === FOLDERS.USER_ROOT\n\t\t\t\t\t\t\t\t? accountName\n\t\t\t\t\t\t\t\t: getFolderTranslatedName({\n\t\t\t\t\t\t\t\t\t\tt,\n\t\t\t\t\t\t\t\t\t\tfolderId: item.folder.id,\n\t\t\t\t\t\t\t\t\t\tfolderName: item.folder.name\n\t\t\t\t\t\t\t\t  }),\n\t\t\t\t\t\tactiveId: item.folder.id === folderId,\n\t\t\t\t\t\taccordionWidth,\n\t\t\t\t\t\titems: []\n\t\t\t\t\t});\n\t\t\t\tif (items) result.push(...flattenFolders(items));\n\t\t\t});\n\t\t\treturn result;\n\t\t},\n\t\t[folderDestination, accountName, t, folderId, accordionWidth]\n\t);\n\tconst getFolderRootName = (_folder: AccordionFolder): string => {\n\t\tlet result = cloneDeep(_folder.folder);\n\t\twhile (result.parent?.parent) {\n\t\t\tresult = result.parent;\n\t\t}\n\t\treturn result.owner || result.parent?.name || result.name;\n\t};\n\n\tconst filteredFolders = folders.filter((item) => item.label === getFolderRootName(folder));\n\n\tconst flattenedFolders = useMemo(\n\t\t() => flattenFolders(filteredFolders),\n\t\t[filteredFolders, flattenFolders]\n\t);\n\n\tconst filteredFromUserInput = useMemo(\n\t\t() =>\n\t\t\tfilter(flattenedFolders, (item) => {\n\t\t\t\tconst folderName = item.label.toLowerCase();\n\t\t\t\treturn startsWith(folderName, searchString.toLowerCase());\n\t\t\t}),\n\t\t[flattenedFolders, searchString]\n\t);\n\n\tconst onConfirm = useCallback(() => {\n\t\tconst restoreFolder = (): void =>\n\t\t\tdispatch(folderAction({ folder: folder.folder, l: folder.folder.l, op: 'move' }))\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t\t// @ts-ignore\n\t\t\t\t.then((res) => {\n\t\t\t\t\tif (res.type.includes('fulfilled')) {\n\t\t\t\t\t\tcreateSnackbar({\n\t\t\t\t\t\t\tkey: `move-folder`,\n\t\t\t\t\t\t\treplace: true,\n\t\t\t\t\t\t\ttype: 'success',\n\t\t\t\t\t\t\tlabel: t('messages.snackbar.folder_restored', 'Folder restored'),\n\t\t\t\t\t\t\tautoHideTimeout: 3000,\n\t\t\t\t\t\t\thideButton: true\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcreateSnackbar({\n\t\t\t\t\t\t\tkey: `move`,\n\t\t\t\t\t\t\treplace: true,\n\t\t\t\t\t\t\ttype: 'error',\n\t\t\t\t\t\t\tlabel: t('label.error_try_again', 'Something went wrong, please try again'),\n\t\t\t\t\t\t\tautoHideTimeout: 3000,\n\t\t\t\t\t\t\thideButton: true\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\tif (\n\t\t\tfolderDestination?.id !== folder.folder?.l &&\n\t\t\t!startsWith(folderDestination?.absFolderPath, folder.folder?.absFolderPath)\n\t\t) {\n\t\t\t// if (folderDestination?.id !== folder.id && folderDestination?.l !== folder.folder?.l) {\n\t\t\tdispatch(\n\t\t\t\tfolderAction({\n\t\t\t\t\tfolder: folder.folder,\n\t\t\t\t\tl: folderDestination?.id || FOLDERS.USER_ROOT,\n\t\t\t\t\top: 'move'\n\t\t\t\t})\n\t\t\t)\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t\t// @ts-ignore\n\t\t\t\t.then((res) => {\n\t\t\t\t\tif (res.type.includes('fulfilled')) {\n\t\t\t\t\t\tcreateSnackbar({\n\t\t\t\t\t\t\tkey: `move`,\n\t\t\t\t\t\t\treplace: true,\n\t\t\t\t\t\t\ttype: 'success',\n\t\t\t\t\t\t\tlabel: t('messages.snackbar.folder_moved', 'Folder successfully moved'),\n\t\t\t\t\t\t\tautoHideTimeout: 5000,\n\t\t\t\t\t\t\thideButton: false,\n\t\t\t\t\t\t\tactionLabel: 'Undo',\n\t\t\t\t\t\t\tonActionClick: () => restoreFolder()\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcreateSnackbar({\n\t\t\t\t\t\t\tkey: `move`,\n\t\t\t\t\t\t\treplace: true,\n\t\t\t\t\t\t\ttype: 'error',\n\t\t\t\t\t\t\tlabel: t('label.error_try_again', 'Something went wrong, please try again.'),\n\t\t\t\t\t\t\tautoHideTimeout: 3000\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t}\n\n\t\tsetFolderDestination(undefined);\n\t\tsetSearchString('');\n\t\tonClose();\n\t}, [folderDestination, folder, onClose, dispatch, createSnackbar, t]);\n\n\treturn folder ? (\n\t\t<Container\n\t\t\tpadding={{ all: 'large' }}\n\t\t\tmainAlignment=\"center\"\n\t\t\tcrossAlignment=\"flex-start\"\n\t\t\theight=\"fit\"\n\t\t>\n\t\t\t<ModalHeader onClose={onClose} title={`${t('label.move', 'Move')} ${folder.folder?.name}`} />\n\t\t\t<Container\n\t\t\t\tpadding={{ all: 'small' }}\n\t\t\t\tmainAlignment=\"center\"\n\t\t\t\tcrossAlignment=\"flex-start\"\n\t\t\t\theight=\"fit\"\n\t\t\t>\n\t\t\t\t<Container padding={{ all: 'small' }} mainAlignment=\"center\" crossAlignment=\"flex-start\">\n\t\t\t\t\t<Text overflow=\"break-word\">\n\t\t\t\t\t\t{t(\n\t\t\t\t\t\t\t'folder_panel.modal.move.body.message1',\n\t\t\t\t\t\t\t'Select a folder to move the considered one to:'\n\t\t\t\t\t\t)}\n\t\t\t\t\t</Text>\n\t\t\t\t</Container>\n\t\t\t\t<Input\n\t\t\t\t\tinputName={folder.folder?.name}\n\t\t\t\t\tlabel={t('label.filter_folders', 'Filter folders')}\n\t\t\t\t\tbackgroundColor=\"gray5\"\n\t\t\t\t\tvalue={searchString}\n\t\t\t\t\tonChange={(e: ChangeEvent<HTMLInputElement>): void => setSearchString(e.target.value)}\n\t\t\t\t/>\n\t\t\t\t<Padding vertical=\"medium\" />\n\t\t\t\t<ContainerEl\n\t\t\t\t\torientation=\"vertical\"\n\t\t\t\t\tmainAlignment=\"flex-start\"\n\t\t\t\t\tminHeight=\"30vh\"\n\t\t\t\t\tmaxHeight=\"60vh\"\n\t\t\t\t>\n\t\t\t\t\t<Accordion\n\t\t\t\t\t\tbackground=\"gray6\"\n\t\t\t\t\t\titems={filteredFromUserInput}\n\t\t\t\t\t\tstyle={{ overflowY: 'hidden' }}\n\t\t\t\t\t/>\n\t\t\t\t</ContainerEl>\n\n\t\t\t\t<Container\n\t\t\t\t\tpadding={{ top: 'medium', bottom: 'medium' }}\n\t\t\t\t\tmainAlignment=\"center\"\n\t\t\t\t\tcrossAlignment=\"flex-start\"\n\t\t\t\t>\n\t\t\t\t\t<Button type=\"ghost\" label={t('label.new_folder', 'New Folder')} color=\"primary\" />\n\t\t\t\t</Container>\n\t\t\t\t<ModalFooter\n\t\t\t\t\tonConfirm={onConfirm}\n\t\t\t\t\tsecondaryAction={onClose}\n\t\t\t\t\tlabel={t('label.move', 'Move')}\n\t\t\t\t\tsecondaryLabel={t('label.cancel', 'Cancel')}\n\t\t\t\t\tdisabled={typeof folderDestination === 'undefined'}\n\t\t\t\t/>\n\t\t\t</Container>\n\t\t</Container>\n\t) : (\n\t\t<></>\n\t);\n};\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/views/sidebar/move-modal.tsx b/src/views/sidebar/move-modal.tsx
--- a/src/views/sidebar/move-modal.tsx	(revision d8bea371a1253f951f0f0ff48819868807c68aa7)
+++ b/src/views/sidebar/move-modal.tsx	(date 1661936110000)
@@ -25,13 +25,7 @@
 import { cloneDeep, filter, startsWith } from 'lodash';
 import { useTranslation } from 'react-i18next';
 import { useDispatch } from 'react-redux';
-import {
-	AccordionFolder,
-	Folder,
-	FOLDERS,
-	useFoldersAccordionByView,
-	useUserAccount
-} from '@zextras/carbonio-shell-ui';
+import { Folder, FOLDERS, useFoldersByView, useUserAccount } from '@zextras/carbonio-shell-ui';
 import { useParams } from 'react-router-dom';
 import styled from 'styled-components';
 import { folderAction } from '../../store/actions/folder-action';
@@ -54,9 +48,9 @@
 	const createSnackbar = useContext(SnackbarManagerContext) as Function;
 	// eslint-disable-next-line @typescript-eslint/ban-ts-comment
 	// @ts-ignore
-	const folders = useFoldersAccordionByView(FOLDER_VIEW.message, null);
+	const folders = useFoldersByView(FOLDER_VIEW.message);
 	const [searchString, setSearchString] = useState('');
-	const [folderDestination, setFolderDestination] = useState<Folder | undefined>(folder.folder);
+	const [folderDestination, setFolderDestination] = useState<Folder | undefined>(folder);
 	const { folderId } = useParams<{ folderId: string }>();
 	const accountName = useUserAccount().name;
 	const accordionRef = useRef<HTMLDivElement>();
@@ -73,14 +67,13 @@
 	}, [accordionRef]);
 
 	const flattenFolders = useCallback(
-		(arr: Array<AccordionFolder>): Array<AccordionFolder> => {
-			const result: Array<AccordionFolder> = [];
+		(arr: Array<Folder>): Array<Folder> => {
+			const result: Array<Folder> = [];
 			arr.forEach((item) => {
-				const { items } = item;
 				if (
-					item.folder.id !== FOLDERS.TRASH &&
-					item.folder.id !== FOLDERS.SPAM &&
-					!startsWith(item.folder.absFolderPath, '/Trash')
+					item.id !== FOLDERS.TRASH &&
+					item.id !== FOLDERS.SPAM &&
+					!startsWith(item.absFolderPath, '/Trash')
 				)
 					result.push({
 						...item,
@@ -88,39 +81,39 @@
 						// @ts-ignore
 						CustomComponent: ModalAccordionCustomComponent,
 						onClick: () => {
-							setFolderDestination(item.folder);
+							setFolderDestination(item);
 						},
 						background:
-							typeof folderDestination !== 'undefined' && folderDestination.id === item.folder.id
+							typeof folderDestination !== 'undefined' && folderDestination.id === item.id
 								? 'highlight'
 								: undefined,
 						label:
-							item.folder.id === FOLDERS.USER_ROOT
+							item.id === FOLDERS.USER_ROOT
 								? accountName
 								: getFolderTranslatedName({
 										t,
-										folderId: item.folder.id,
-										folderName: item.folder.name
+										folderId: item.id,
+										folderName: item.name
 								  }),
-						activeId: item.folder.id === folderId,
+						activeId: item.id === folderId,
 						accordionWidth,
 						items: []
 					});
-				if (items) result.push(...flattenFolders(items));
+				if (item.children) result.push(...flattenFolders(item.children));
 			});
 			return result;
 		},
 		[folderDestination, accountName, t, folderId, accordionWidth]
 	);
-	const getFolderRootName = (_folder: AccordionFolder): string => {
-		let result = cloneDeep(_folder.folder);
+	const getFolderRootName = (_folder: Folder): string => {
+		let result = cloneDeep(_folder);
 		while (result.parent?.parent) {
 			result = result.parent;
 		}
-		return result.owner || result.parent?.name || result.name;
+		return (result.isLink && result.owner) || result.parent?.name || result.name;
 	};
 
-	const filteredFolders = folders.filter((item) => item.label === getFolderRootName(folder));
+	const filteredFolders = folders.filter((item) => item.name === getFolderRootName(folder));
 
 	const flattenedFolders = useMemo(
 		() => flattenFolders(filteredFolders),
@@ -130,7 +123,7 @@
 	const filteredFromUserInput = useMemo(
 		() =>
 			filter(flattenedFolders, (item) => {
-				const folderName = item.label.toLowerCase();
+				const folderName = item.name.toLowerCase();
 				return startsWith(folderName, searchString.toLowerCase());
 			}),
 		[flattenedFolders, searchString]
@@ -138,7 +131,7 @@
 
 	const onConfirm = useCallback(() => {
 		const restoreFolder = (): void =>
-			dispatch(folderAction({ folder: folder.folder, l: folder.folder.l, op: 'move' }))
+			dispatch(folderAction({ folder, l: folder.l, op: 'move' }))
 				// eslint-disable-next-line @typescript-eslint/ban-ts-comment
 				// @ts-ignore
 				.then((res) => {
@@ -164,13 +157,13 @@
 				});
 
 		if (
-			folderDestination?.id !== folder.folder?.l &&
-			!startsWith(folderDestination?.absFolderPath, folder.folder?.absFolderPath)
+			folderDestination?.id !== folder.l &&
+			!startsWith(folderDestination?.absFolderPath, folder.absFolderPath)
 		) {
 			// if (folderDestination?.id !== folder.id && folderDestination?.l !== folder.folder?.l) {
 			dispatch(
 				folderAction({
-					folder: folder.folder,
+					folder,
 					l: folderDestination?.id || FOLDERS.USER_ROOT,
 					op: 'move'
 				})
@@ -213,7 +206,7 @@
 			crossAlignment="flex-start"
 			height="fit"
 		>
-			<ModalHeader onClose={onClose} title={`${t('label.move', 'Move')} ${folder.folder?.name}`} />
+			<ModalHeader onClose={onClose} title={`${t('label.move', 'Move')} ${folder.name}`} />
 			<Container
 				padding={{ all: 'small' }}
 				mainAlignment="center"
@@ -229,7 +222,7 @@
 					</Text>
 				</Container>
 				<Input
-					inputName={folder.folder?.name}
+					inputName={folder.name}
 					label={t('label.filter_folders', 'Filter folders')}
 					backgroundColor="gray5"
 					value={searchString}
Index: src/store/actions/conv-action.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport { createAsyncThunk } from '@reduxjs/toolkit';\nimport { soapFetch } from '@zextras/carbonio-shell-ui';\nimport { isNil, omitBy } from 'lodash';\nimport {\n\tConvActionParameters,\n\tConvActionRequest,\n\tConvActionResponse,\n\tConvActionResult\n} from '../../types';\n\nexport const convAction = createAsyncThunk<ConvActionResult, ConvActionParameters>(\n\t'convAction',\n\tasync ({ ids, operation, parent, tagName }) => {\n\t\tconst { action } = (await soapFetch<ConvActionRequest, ConvActionResponse>('ConvAction', {\n\t\t\t_jsns: 'urn:zimbraMail',\n\n\t\t\taction: omitBy(\n\t\t\t\t{\n\t\t\t\t\tid: ids.join(','),\n\t\t\t\t\top: operation,\n\t\t\t\t\tl: parent,\n\t\t\t\t\ttn: tagName\n\t\t\t\t},\n\t\t\t\tisNil\n\t\t\t)\n\t\t})) as ConvActionResponse;\n\t\treturn {\n\t\t\tids: action.id.split(','),\n\t\t\toperation: action.op\n\t\t};\n\t}\n);\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/store/actions/conv-action.ts b/src/store/actions/conv-action.ts
--- a/src/store/actions/conv-action.ts	(revision d8bea371a1253f951f0f0ff48819868807c68aa7)
+++ b/src/store/actions/conv-action.ts	(date 1661942266000)
@@ -5,7 +5,8 @@
  */
 import { createAsyncThunk } from '@reduxjs/toolkit';
 import { soapFetch } from '@zextras/carbonio-shell-ui';
-import { isNil, omitBy } from 'lodash';
+import { isNil } from 'lodash';
+import { omitBy } from '../../commons/utils';
 import {
 	ConvActionParameters,
 	ConvActionRequest,
Index: .idea/shelf/Changes/shelved.patch
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/shelf/Changes/shelved.patch b/.idea/shelf/Changes/shelved.patch
new file mode 100644
--- /dev/null	(date 1661734920000)
+++ b/.idea/shelf/Changes/shelved.patch	(date 1661734920000)
@@ -0,0 +1,599 @@
+Index: src/views/sidebar/accordion-custom-component.tsx
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport React, { FC, useCallback, useContext, useMemo, useState } from 'react';\nimport {\n\tAppLink,\n\tFOLDERS,\n\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t// @ts-ignore\n\tROOT_NAME,\n\treplaceHistory,\n\tuseUserSettings,\n\tgetBridgedFunctions,\n\tuseUserAccount,\n\tpushHistory,\n\tAccordionFolder\n} from '@zextras/carbonio-shell-ui';\nimport styled from 'styled-components';\nimport {\n\tAccordionItem,\n\tDropdown,\n\tDrag,\n\tDrop,\n\tContainer,\n\tTooltip,\n\tAvatar,\n\tIcon,\n\tRow,\n\tPadding,\n\tModalManagerContext\n} from '@zextras/carbonio-design-system';\nimport { find, startsWith } from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { useDispatch } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport { convAction, msgAction, search } from '../../store/actions';\nimport { folderAction } from '../../store/actions/folder-action';\nimport { getFolderIconColor, getFolderIconName, getFolderTranslatedName } from './utils';\nimport { NewModal } from './new-modal';\nimport { MoveModal } from './move-modal';\nimport { EmptyModal } from './empty-modal';\nimport { DeleteModal } from './delete-modal';\nimport { EditModal } from './edit-modal';\nimport { SharesInfoModal } from './shares-info-modal';\nimport ShareFolderModal from './share-folder-modal';\nimport { FolderActionsType } from '../../commons/utils';\nimport { DataProps } from '../../types';\n\nconst FittedRow = styled(Row)`\n\tmax-width: calc(100% - (2 * ${({ theme }): string => theme.sizes.padding.small}));\n\theight: 48px;\n`;\n\nconst DropOverlayContainer = styled(Container)`\n\tposition: absolute;\n\twidth: calc(248px - ${(props): number => (props.folder.level - 2) * 16}px);\n\theight: 100%;\n\tbackground: ${(props): string => props.theme.palette.primary.regular};\n\tborder-radius: 4px;\n\tborder: 4px solid #d5e3f6;\n\topacity: 0.4;\n`;\n\nconst DropDenyOverlayContainer = styled(Container)`\n\tposition: absolute;\n\twidth: calc(248px - ${(props): number => (props.folder.level - 2) * 16}px);\n\theight: 100%;\n\tbackground: ${(props): string => props.theme.palette.gray1.regular};\n\tborder-radius: 4px;\n\tborder: 4px solid #d5e3f6;\n\topacity: 0.4;\n`;\n\ntype FolderActionsProps = {\n\tid: string;\n\ticon: string;\n\tlabel: string;\n\tclick: (e: MouseEvent) => void;\n\tdisabled?: boolean;\n};\n\nconst useFolderActions = (folder: AccordionFolder): Array<FolderActionsProps> => {\n\tconst [t] = useTranslation();\n\tconst dispatch = useDispatch();\n\t// eslint-disable-next-line @typescript-eslint/ban-types\n\tconst createModal = useContext(ModalManagerContext) as Function;\n\tconst [activeModal, setActiveModal] = useState('default');\n\tconst [activeGrant, setActiveGrant] = useState({});\n\tconst goBack = useCallback(() => {\n\t\tsetActiveModal('default');\n\t}, [setActiveModal]);\n\n\tconst actions = useMemo(\n\t\t() => [\n\t\t\t{\n\t\t\t\tid: FolderActionsType.NEW,\n\t\t\t\ticon: 'FolderAddOutline',\n\t\t\t\tlabel: t('label.new_folder', 'New Folder'),\n\t\t\t\tclick: (e: MouseEvent): void => {\n\t\t\t\t\tif (e) {\n\t\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t}\n\t\t\t\t\tconst closeModal = createModal(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmaxHeight: '90vh',\n\t\t\t\t\t\t\tchildren: (\n\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t<NewModal folder={folder} onClose={(): void => closeModal()} />\n\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttrue\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: FolderActionsType.MOVE,\n\t\t\t\ticon: 'MoveOutline',\n\t\t\t\tlabel: startsWith(folder.folder?.absFolderPath, '/Trash')\n\t\t\t\t\t? t('label.restore', 'Restore')\n\t\t\t\t\t: t('label.move', 'Move'),\n\t\t\t\tclick: (e: MouseEvent): void => {\n\t\t\t\t\tif (e) {\n\t\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t}\n\t\t\t\t\tconst closeModal = createModal(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmaxHeight: '90vh',\n\t\t\t\t\t\t\tchildren: (\n\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t<MoveModal folder={folder} onClose={(): void => closeModal()} />\n\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttrue\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: FolderActionsType.EMPTY,\n\t\t\t\ticon: folder.id === FOLDERS.TRASH ? 'DeletePermanentlyOutline' : 'EmptyFolderOutline',\n\t\t\t\tlabel:\n\t\t\t\t\tfolder.id === FOLDERS.TRASH\n\t\t\t\t\t\t? t('folder_panel.action.empty.trash', 'Empty Trash')\n\t\t\t\t\t\t: t('folder_panel.action.wipe.folder_panel', 'Wipe Folder'),\n\t\t\t\tdisabled: folder.folder?.n === 0 && folder.folder?.children?.length === 0,\n\t\t\t\tclick: (e: MouseEvent): void => {\n\t\t\t\t\tif (e) {\n\t\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t}\n\t\t\t\t\tconst closeModal = createModal(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tchildren: (\n\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t<EmptyModal onClose={(): void => closeModal()} folder={folder} />\n\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttrue\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: FolderActionsType.EDIT,\n\t\t\t\ticon: 'Edit2Outline',\n\t\t\t\tlabel: folder?.folder?.isLink\n\t\t\t\t\t? t('folder_panel.action.edit_properties', 'Edit Properties')\n\t\t\t\t\t: t('label.edit', 'Edit'),\n\t\t\t\tclick: (e: MouseEvent): void => {\n\t\t\t\t\tif (e) {\n\t\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t}\n\t\t\t\t\tconst closeModal = createModal(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmaxHeight: '90vh',\n\t\t\t\t\t\t\tchildren: (\n\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t<EditModal onClose={(): void => closeModal()} folder={folder} />\n\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttrue\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: FolderActionsType.DELETE,\n\t\t\t\ticon: 'Trash2Outline',\n\t\t\t\tlabel: startsWith(folder.folder?.absFolderPath, '/Trash')\n\t\t\t\t\t? t('label.delete_permanently', 'Delete Permanently')\n\t\t\t\t\t: t('label.delete', 'Delete'),\n\t\t\t\tclick: (e: MouseEvent): void => {\n\t\t\t\t\tif (e) {\n\t\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t}\n\t\t\t\t\tconst closeModal = createModal(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tchildren: (\n\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t<DeleteModal onClose={(): void => closeModal()} folder={folder} />\n\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttrue\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: FolderActionsType.SHARE,\n\t\t\t\ticon: 'ShareOutline',\n\t\t\t\tlabel: t('action.share_folder', 'Share folder'),\n\t\t\t\tclick: (e: MouseEvent): void => {\n\t\t\t\t\tif (e) {\n\t\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t}\n\t\t\t\t\tconst closeModal = createModal(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tchildren: (\n\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t<ShareFolderModal\n\t\t\t\t\t\t\t\t\t\tonClose={(): void => closeModal()}\n\t\t\t\t\t\t\t\t\t\tfolder={folder}\n\t\t\t\t\t\t\t\t\t\tactiveGrant={activeGrant}\n\t\t\t\t\t\t\t\t\t\tgoBack={goBack}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttrue\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: FolderActionsType.REMOVE_FROM_LIST,\n\t\t\t\ticon: 'CloseOutline',\n\t\t\t\tlabel: t('label.remove_from_this_list', 'Remove from this list'),\n\t\t\t\tclick: (e): void => {\n\t\t\t\t\tif (e) {\n\t\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t\tdispatch(folderAction({ folder: folder.folder, op: 'delete' }));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: FolderActionsType.SHARES_INFO,\n\t\t\t\ticon: 'InfoOutline',\n\t\t\t\tlabel: t('label.shares_info', `Shared folder's info`),\n\t\t\t\tclick: (e): void => {\n\t\t\t\t\tif (e) {\n\t\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t}\n\t\t\t\t\tconst closeModal = createModal(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tchildren: (\n\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t<SharesInfoModal onClose={(): void => closeModal()} folder={folder.folder} />\n\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttrue\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t],\n\t\t[activeGrant, createModal, dispatch, folder, goBack, t]\n\t);\n\n\tconst defaultFolderActions = useMemo(\n\t\t() =>\n\t\t\tactions.filter(\n\t\t\t\t(action) =>\n\t\t\t\t\taction.id !== FolderActionsType.SHARES_INFO &&\n\t\t\t\t\taction.id !== FolderActionsType.REMOVE_FROM_LIST\n\t\t\t),\n\t\t[actions]\n\t);\n\tconst id =\n\t\tfolder.id.indexOf(':') !== -1 ? folder.id.slice(folder.id.indexOf(':') + 1) : folder.id;\n\tswitch (id) {\n\t\t// default folders\n\t\tcase FOLDERS.INBOX:\n\t\tcase FOLDERS.SENT:\n\t\tcase FOLDERS.DRAFTS:\n\t\t\treturn defaultFolderActions.map((action) =>\n\t\t\t\taction.id === FolderActionsType.MOVE || action.id === FolderActionsType.DELETE\n\t\t\t\t\t? { ...action, disabled: true }\n\t\t\t\t\t: action\n\t\t\t);\n\n\t\tcase FOLDERS.SPAM:\n\t\t\treturn defaultFolderActions.map((action) =>\n\t\t\t\taction.id === FolderActionsType.NEW ||\n\t\t\t\taction.id === FolderActionsType.MOVE ||\n\t\t\t\taction.id === FolderActionsType.DELETE\n\t\t\t\t\t? { ...action, disabled: true }\n\t\t\t\t\t: action\n\t\t\t);\n\t\tcase FOLDERS.TRASH:\n\t\t\treturn defaultFolderActions.map((action) =>\n\t\t\t\taction.id === FolderActionsType.MOVE ||\n\t\t\t\taction.id === FolderActionsType.DELETE ||\n\t\t\t\taction.id === FolderActionsType.EDIT ||\n\t\t\t\taction.id === FolderActionsType.SHARE\n\t\t\t\t\t? { ...action, disabled: true }\n\t\t\t\t\t: action\n\t\t\t);\n\t\t// customizable folders\n\t\tdefault:\n\t\t\treturn folder.folder?.isLink\n\t\t\t\t? actions.filter(\n\t\t\t\t\t\t(action) =>\n\t\t\t\t\t\t\taction.id === FolderActionsType.SHARES_INFO ||\n\t\t\t\t\t\t\taction.id === FolderActionsType.REMOVE_FROM_LIST ||\n\t\t\t\t\t\t\taction.id === FolderActionsType.EDIT\n\t\t\t\t  )\n\t\t\t\t: defaultFolderActions.map((action) => {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tstartsWith(folder.folder?.absFolderPath, '/Trash') &&\n\t\t\t\t\t\t\t(action.id === FolderActionsType.NEW || action.id === FolderActionsType.EDIT)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\treturn { ...action, disabled: true };\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn action;\n\t\t\t\t  });\n\t}\n};\n\ntype DragEnterAction =\n\t| undefined\n\t| {\n\t\t\tsuccess: false;\n\t  };\n\ntype OnDropActionProps = {\n\ttype: string;\n\tdata: DataProps;\n};\n\nconst badgeCount = (v?: number): number | undefined => (v && v > 0 ? v : undefined);\nexport const AccordionCustomComponent: FC<{ item: AccordionFolder }> = ({ item }) => {\n\tconst { folder } = item;\n\tconst accountName = useUserAccount().name;\n\tconst [t] = useTranslation();\n\tconst dispatch = useDispatch();\n\tconst { folderId } = useParams<{ folderId: string }>();\n\n\tconst onDragEnterAction = (data: OnDropActionProps): DragEnterAction => {\n\t\tif (data.type === 'conversation' || data.type === 'message') {\n\t\t\tif (\n\t\t\t\tdata.data.parentFolderId === folder.id || // same folder not allowed\n\t\t\t\t(data.data.parentFolderId === FOLDERS.INBOX && [5, 6].includes(Number(folder.id))) || // from inbox not allowed in draft and sent\n\t\t\t\t(data.data.parentFolderId === FOLDERS.DRAFTS && ![3].includes(Number(folder.id))) || // from draft only allowed in Trash\n\t\t\t\t(folder.id === FOLDERS.DRAFTS && data.data.parentFolderId !== FOLDERS.TRASH) || // only from Trash can move in Draft\n\t\t\t\t(folder.isLink && folder.perm?.indexOf('w') === -1) || // only if shared folder have write permission\n\t\t\t\tfolder.id === FOLDERS.USER_ROOT ||\n\t\t\t\tfolder.oname === ROOT_NAME\n\t\t\t) {\n\t\t\t\treturn { success: false };\n\t\t\t}\n\t\t}\n\t\tif (data.type === 'folder') {\n\t\t\tif (\n\t\t\t\tfolder.id === data.data.id || // same folder not allowed\n\t\t\t\tfolder.isLink || //  shared folder not allowed\n\t\t\t\t[FOLDERS.DRAFTS, FOLDERS.SPAM].includes(folder.id) // cannot be moved inside Draft and Spam\n\t\t\t)\n\t\t\t\treturn { success: false };\n\t\t}\n\t\treturn undefined;\n\t};\n\n\tconst onDropAction = (data: OnDropActionProps): void => {\n\t\tconst dragEnterResponse = onDragEnterAction(data);\n\t\tif (dragEnterResponse && dragEnterResponse?.success === false) return;\n\t\tlet convMsgsIds = [data.data.id];\n\t\tif (\n\t\t\tdata.type !== 'folder' &&\n\t\t\tdata.data?.selectedIDs?.length &&\n\t\t\tdata.data?.selectedIDs.includes(data.data.id)\n\t\t) {\n\t\t\tconvMsgsIds = data.data?.selectedIDs;\n\t\t}\n\n\t\tif (data.type === 'folder') {\n\t\t\tdispatch(folderAction({ folder: data.data, l: folder.id || FOLDERS.USER_ROOT, op: 'move' }))\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t\t// @ts-ignore\n\t\t\t\t.then((res) => {\n\t\t\t\t\tif (res.type.includes('fulfilled')) {\n\t\t\t\t\t\tgetBridgedFunctions().createSnackbar({\n\t\t\t\t\t\t\tkey: `move`,\n\t\t\t\t\t\t\treplace: true,\n\t\t\t\t\t\t\ttype: 'success',\n\t\t\t\t\t\t\tlabel: t('messages.snackbar.folder_moved', 'Folder successfully moved'),\n\t\t\t\t\t\t\tautoHideTimeout: 3000\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tgetBridgedFunctions().createSnackbar({\n\t\t\t\t\t\t\tkey: `move`,\n\t\t\t\t\t\t\treplace: true,\n\t\t\t\t\t\t\ttype: 'error',\n\t\t\t\t\t\t\tlabel: t('label.error_try_again', 'Something went wrong, please try again.'),\n\t\t\t\t\t\t\tautoHideTimeout: 3000\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t} else if (data.type === 'conversation') {\n\t\t\tdispatch(\n\t\t\t\tconvAction({\n\t\t\t\t\toperation: `move`,\n\t\t\t\t\tids: convMsgsIds,\n\t\t\t\t\tparent: folder.id\n\t\t\t\t})\n\t\t\t)\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t\t// @ts-ignore\n\t\t\t\t.then((res) => {\n\t\t\t\t\tif (res.type.includes('fulfilled')) {\n\t\t\t\t\t\treplaceHistory(`/folder/${folderId}`);\n\t\t\t\t\t\tgetBridgedFunctions().createSnackbar({\n\t\t\t\t\t\t\tkey: `edit`,\n\t\t\t\t\t\t\treplace: true,\n\t\t\t\t\t\t\ttype: 'info',\n\t\t\t\t\t\t\tlabel: t('messages.snackbar.conversation_move', 'Conversation successfully moved'),\n\t\t\t\t\t\t\tautoHideTimeout: 3000,\n\t\t\t\t\t\t\tactionLabel: t('action.goto_folder', 'GO TO FOLDER'),\n\t\t\t\t\t\t\tonActionClick: () => {\n\t\t\t\t\t\t\t\treplaceHistory(`/folder/${folder.id}`);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tgetBridgedFunctions().createSnackbar({\n\t\t\t\t\t\t\tkey: `edit`,\n\t\t\t\t\t\t\treplace: true,\n\t\t\t\t\t\t\ttype: 'error',\n\t\t\t\t\t\t\tlabel: t('label.error_try_again', 'Something went wrong, please try again'),\n\t\t\t\t\t\t\tautoHideTimeout: 3000,\n\t\t\t\t\t\t\thideButton: true\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t} else {\n\t\t\tdispatch(\n\t\t\t\tmsgAction({\n\t\t\t\t\toperation: `move`,\n\t\t\t\t\tids: convMsgsIds,\n\t\t\t\t\tparent: folder.id\n\t\t\t\t})\n\t\t\t)\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t\t// @ts-ignore\n\t\t\t\t.then((res) => {\n\t\t\t\t\tif (res.type.includes('fulfilled')) {\n\t\t\t\t\t\tgetBridgedFunctions().createSnackbar({\n\t\t\t\t\t\t\tkey: `edit`,\n\t\t\t\t\t\t\treplace: true,\n\t\t\t\t\t\t\ttype: 'info',\n\t\t\t\t\t\t\tlabel: t('messages.snackbar.message_move', 'Message successfully moved'),\n\t\t\t\t\t\t\tautoHideTimeout: 3000,\n\t\t\t\t\t\t\tactionLabel: t('action.goto_folder', 'GO TO FOLDER'),\n\t\t\t\t\t\t\tonActionClick: () => {\n\t\t\t\t\t\t\t\treplaceHistory(`/folder/${folder.id}`);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tgetBridgedFunctions().createSnackbar({\n\t\t\t\t\t\t\tkey: `edit`,\n\t\t\t\t\t\t\treplace: true,\n\t\t\t\t\t\t\ttype: 'error',\n\t\t\t\t\t\t\tlabel: t('label.error_try_again', 'Something went wrong, please try again'),\n\t\t\t\t\t\t\tautoHideTimeout: 3000,\n\t\t\t\t\t\t\thideButton: true\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t}\n\t};\n\n\tconst dragFolderDisable = useMemo(\n\t\t() =>\n\t\t\t[FOLDERS.INBOX, FOLDERS.TRASH, FOLDERS.SPAM, FOLDERS.SENT, FOLDERS.DRAFTS].includes(\n\t\t\t\tfolder.id\n\t\t\t) || folder.isLink, // Default folders and shared folders not allowed to drag\n\t\t[folder.id, folder.isLink]\n\t);\n\tconst { zimbraPrefGroupMailBy } = useUserSettings().prefs;\n\n\t/* NOTE: Need to comment out when need to sort as per the configured sort order */\n\t// const { zimbraPrefSortOrder, zimbraPrefGroupMailBy } = useUserSettings().prefs;\n\t// const sorting = useMemo(() => {\n\t// \tif (typeof zimbraPrefSortOrder === 'string') {\n\t// \t\treturn (\n\t// \t\t\tfind(zimbraPrefSortOrder?.split(','), (f) => f?.split(':')?.[0] === folder.id)?.split(\n\t// \t\t\t\t':'\n\t// \t\t\t)?.[1] ?? 'dateDesc'\n\t// \t\t);\n\t// \t}\n\t// \treturn 'dateDesc';\n\t// }, [zimbraPrefSortOrder, folder.id]) as 'dateDesc' | 'dateAsc';\n\n\tconst onClick = useCallback((): void => {\n\t\tpushHistory(`/folder/${folder.id}`);\n\t\tdispatch(\n\t\t\tsearch({\n\t\t\t\tfolderId: folder.id,\n\t\t\t\tlimit: 101,\n\t\t\t\tsortBy: 'dateDesc',\n\t\t\t\t// folder.id === FOLDERS.DRAFTS ? 'message' : zimbraPrefGroupMailBy\n\t\t\t\ttypes:\n\t\t\t\t\tfolder.id === FOLDERS.DRAFTS || typeof zimbraPrefGroupMailBy !== 'string'\n\t\t\t\t\t\t? 'message'\n\t\t\t\t\t\t: zimbraPrefGroupMailBy\n\t\t\t})\n\t\t);\n\t}, [dispatch, folder.id, zimbraPrefGroupMailBy]);\n\n\tconst accordionItem = useMemo(\n\t\t() => ({\n\t\t\t...item,\n\t\t\tlabel:\n\t\t\t\titem.id === FOLDERS.USER_ROOT\n\t\t\t\t\t? accountName\n\t\t\t\t\t: getFolderTranslatedName({ t, folderId: item.id, folderName: item.label }),\n\t\t\ticon: getFolderIconName(item),\n\t\t\ticonColor: getFolderIconColor(item),\n\t\t\t// open: openIds ? openIds.includes(folder.id) : false,\n\t\t\tbadgeCounter: badgeCount(item.id === FOLDERS.DRAFTS ? item?.folder.n : item?.folder?.u),\n\t\t\tbadgeType: item.id === FOLDERS.DRAFTS ? 'read' : 'unread',\n\t\t\tto: `/folder/${item.id}`,\n\t\t\ttextProps: { size: 'small' }\n\t\t}),\n\t\t[item, accountName, t]\n\t);\n\n\tconst dropdownItems = useFolderActions(item);\n\n\tconst statusIcon = useMemo(() => {\n\t\tconst RowWithIcon = (icon: string, color: string, tooltipText: string): JSX.Element => (\n\t\t\t<Padding left=\"small\">\n\t\t\t\t<Tooltip placement=\"right\" label={tooltipText}>\n\t\t\t\t\t<Row>\n\t\t\t\t\t\t<Icon icon={icon} color={color} size=\"medium\" />\n\t\t\t\t\t</Row>\n\t\t\t\t</Tooltip>\n\t\t\t</Padding>\n\t\t);\n\n\t\tif (folder.acl?.grant) {\n\t\t\tconst tooltipText = t('tooltip.folder_sharing_status', {\n\t\t\t\tcount: folder.acl.grant.length,\n\t\t\t\tdefaultValue_one: 'Shared with {{count}} person',\n\t\t\t\tdefaultValue: 'Shared with {{count}} people'\n\t\t\t});\n\t\t\treturn RowWithIcon('Shared', 'shared', tooltipText);\n\t\t}\n\t\tif (folder.isLink) {\n\t\t\tconst tooltipText = t('tooltip.folder_linked_status', 'Linked to me');\n\t\t\treturn RowWithIcon('Linked', 'linked', tooltipText);\n\t\t}\n\t\treturn '';\n\t}, [folder, t]);\n\n\t// hide folders where a share was provided and subsequently removed\n\tif (folder.broken) {\n\t\treturn <></>;\n\t}\n\n\treturn folder.id === FOLDERS.USER_ROOT || folder.oname === ROOT_NAME ? (\n\t\t<FittedRow>\n\t\t\t<Padding horizontal=\"small\">\n\t\t\t\t<Avatar label={accordionItem.label} colorLabel={accordionItem.iconColor} size=\"medium\" />\n\t\t\t</Padding>\n\t\t\t<Tooltip label={accordionItem.label} placement=\"right\" maxWidth=\"100%\">\n\t\t\t\t<AccordionItem item={accordionItem} />\n\t\t\t</Tooltip>\n\t\t</FittedRow>\n\t) : (\n\t\t<Drop\n\t\t\tacceptType={['message', 'conversation', 'folder']}\n\t\t\tonDrop={(data: OnDropActionProps): void => onDropAction(data)}\n\t\t\tonDragEnter={(data: OnDropActionProps): unknown => onDragEnterAction(data)}\n\t\t\toverlayAcceptComponent={<DropOverlayContainer folder={folder} />}\n\t\t\toverlayDenyComponent={<DropDenyOverlayContainer folder={folder} />}\n\t\t>\n\t\t\t<Drag\n\t\t\t\ttype=\"folder\"\n\t\t\t\tdata={folder}\n\t\t\t\tdragDisabled={dragFolderDisable}\n\t\t\t\tstyle={{ display: 'block' }}\n\t\t\t>\n\t\t\t\t<AppLink\n\t\t\t\t\tonClick={onClick}\n\t\t\t\t\tto={`/folder/${folder.id}`}\n\t\t\t\t\tstyle={{ width: '100%', height: '100%', textDecoration: 'none' }}\n\t\t\t\t>\n\t\t\t\t\t<Dropdown contextMenu items={dropdownItems} display=\"block\" width=\"100%\">\n\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t<Padding left=\"small\" />\n\t\t\t\t\t\t\t<Tooltip label={accordionItem.label} placement=\"right\" maxWidth=\"100%\">\n\t\t\t\t\t\t\t\t<AccordionItem item={accordionItem}>{statusIcon}</AccordionItem>\n\t\t\t\t\t\t\t</Tooltip>\n\t\t\t\t\t\t</Row>\n\t\t\t\t\t</Dropdown>\n\t\t\t\t</AppLink>\n\t\t\t</Drag>\n\t\t</Drop>\n\t);\n};\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/views/sidebar/accordion-custom-component.tsx b/src/views/sidebar/accordion-custom-component.tsx
+--- a/src/views/sidebar/accordion-custom-component.tsx	(revision 4adaba21c8889cfd3cf44adf6271b75e82f59433)
++++ b/src/views/sidebar/accordion-custom-component.tsx	(date 1661441789000)
+@@ -3,57 +3,48 @@
+  *
+  * SPDX-License-Identifier: AGPL-3.0-only
+  */
+-import React, { FC, useCallback, useContext, useMemo, useState } from 'react';
++import {
++	AccordionItem,
++	Avatar,
++	Container,
++	Drag,
++	Drop,
++	Dropdown,
++	Icon,
++	Padding,
++	Row,
++	Tooltip
++} from '@zextras/carbonio-design-system';
+ import {
+ 	AppLink,
++	Folder,
+ 	FOLDERS,
++	getBridgedFunctions,
++	pushHistory,
++	replaceHistory,
+ 	// eslint-disable-next-line @typescript-eslint/ban-ts-comment
+ 	// @ts-ignore
+ 	ROOT_NAME,
+-	replaceHistory,
+-	useUserSettings,
+-	getBridgedFunctions,
+ 	useUserAccount,
+-	pushHistory,
+-	AccordionFolder
++	useUserSettings
+ } from '@zextras/carbonio-shell-ui';
+-import styled from 'styled-components';
+-import {
+-	AccordionItem,
+-	Dropdown,
+-	Drag,
+-	Drop,
+-	Container,
+-	Tooltip,
+-	Avatar,
+-	Icon,
+-	Row,
+-	Padding,
+-	ModalManagerContext
+-} from '@zextras/carbonio-design-system';
+-import { find, startsWith } from 'lodash';
++import React, { FC, useCallback, useMemo } from 'react';
+ import { useTranslation } from 'react-i18next';
+ import { useDispatch } from 'react-redux';
+ import { useParams } from 'react-router-dom';
++import styled from 'styled-components';
+ import { convAction, msgAction, search } from '../../store/actions';
+ import { folderAction } from '../../store/actions/folder-action';
+-import { getFolderIconColor, getFolderIconName, getFolderTranslatedName } from './utils';
+-import { NewModal } from './new-modal';
+-import { MoveModal } from './move-modal';
+-import { EmptyModal } from './empty-modal';
+-import { DeleteModal } from './delete-modal';
+-import { EditModal } from './edit-modal';
+-import { SharesInfoModal } from './shares-info-modal';
+-import ShareFolderModal from './share-folder-modal';
+-import { FolderActionsType } from '../../commons/utils';
+ import { DataProps } from '../../types';
++import { useFolderActions } from './use-folder-actions';
++import { getFolderIconColor, getFolderIconName, getFolderTranslatedName } from './utils';
+ 
+ const FittedRow = styled(Row)`
+ 	max-width: calc(100% - (2 * ${({ theme }): string => theme.sizes.padding.small}));
+ 	height: 48px;
+ `;
+ 
+-const DropOverlayContainer = styled(Container)`
++export const DropOverlayContainer = styled(Container)`
+ 	position: absolute;
+ 	width: calc(248px - ${(props): number => (props.folder.level - 2) * 16}px);
+ 	height: 100%;
+@@ -62,8 +53,7 @@
+ 	border: 4px solid #d5e3f6;
+ 	opacity: 0.4;
+ `;
+-
+-const DropDenyOverlayContainer = styled(Container)`
++export const DropDenyOverlayContainer = styled(Container)`
+ 	position: absolute;
+ 	width: calc(248px - ${(props): number => (props.folder.level - 2) * 16}px);
+ 	height: 100%;
+@@ -72,304 +62,52 @@
+ 	border: 4px solid #d5e3f6;
+ 	opacity: 0.4;
+ `;
+-
+-type FolderActionsProps = {
+-	id: string;
+-	icon: string;
+-	label: string;
+-	click: (e: MouseEvent) => void;
+-	disabled?: boolean;
+-};
+-
+-const useFolderActions = (folder: AccordionFolder): Array<FolderActionsProps> => {
+-	const [t] = useTranslation();
+-	const dispatch = useDispatch();
+-	// eslint-disable-next-line @typescript-eslint/ban-types
+-	const createModal = useContext(ModalManagerContext) as Function;
+-	const [activeModal, setActiveModal] = useState('default');
+-	const [activeGrant, setActiveGrant] = useState({});
+-	const goBack = useCallback(() => {
+-		setActiveModal('default');
+-	}, [setActiveModal]);
+-
+-	const actions = useMemo(
+-		() => [
+-			{
+-				id: FolderActionsType.NEW,
+-				icon: 'FolderAddOutline',
+-				label: t('label.new_folder', 'New Folder'),
+-				click: (e: MouseEvent): void => {
+-					if (e) {
+-						e.stopPropagation();
+-					}
+-					const closeModal = createModal(
+-						{
+-							maxHeight: '90vh',
+-							children: (
+-								<>
+-									<NewModal folder={folder} onClose={(): void => closeModal()} />
+-								</>
+-							)
+-						},
+-						true
+-					);
+-				}
+-			},
+-			{
+-				id: FolderActionsType.MOVE,
+-				icon: 'MoveOutline',
+-				label: startsWith(folder.folder?.absFolderPath, '/Trash')
+-					? t('label.restore', 'Restore')
+-					: t('label.move', 'Move'),
+-				click: (e: MouseEvent): void => {
+-					if (e) {
+-						e.stopPropagation();
+-					}
+-					const closeModal = createModal(
+-						{
+-							maxHeight: '90vh',
+-							children: (
+-								<>
+-									<MoveModal folder={folder} onClose={(): void => closeModal()} />
+-								</>
+-							)
+-						},
+-						true
+-					);
+-				}
+-			},
+-			{
+-				id: FolderActionsType.EMPTY,
+-				icon: folder.id === FOLDERS.TRASH ? 'DeletePermanentlyOutline' : 'EmptyFolderOutline',
+-				label:
+-					folder.id === FOLDERS.TRASH
+-						? t('folder_panel.action.empty.trash', 'Empty Trash')
+-						: t('folder_panel.action.wipe.folder_panel', 'Wipe Folder'),
+-				disabled: folder.folder?.n === 0 && folder.folder?.children?.length === 0,
+-				click: (e: MouseEvent): void => {
+-					if (e) {
+-						e.stopPropagation();
+-					}
+-					const closeModal = createModal(
+-						{
+-							children: (
+-								<>
+-									<EmptyModal onClose={(): void => closeModal()} folder={folder} />
+-								</>
+-							)
+-						},
+-						true
+-					);
+-				}
+-			},
+-			{
+-				id: FolderActionsType.EDIT,
+-				icon: 'Edit2Outline',
+-				label: folder?.folder?.isLink
+-					? t('folder_panel.action.edit_properties', 'Edit Properties')
+-					: t('label.edit', 'Edit'),
+-				click: (e: MouseEvent): void => {
+-					if (e) {
+-						e.stopPropagation();
+-					}
+-					const closeModal = createModal(
+-						{
+-							maxHeight: '90vh',
+-							children: (
+-								<>
+-									<EditModal onClose={(): void => closeModal()} folder={folder} />
+-								</>
+-							)
+-						},
+-						true
+-					);
+-				}
+-			},
+-			{
+-				id: FolderActionsType.DELETE,
+-				icon: 'Trash2Outline',
+-				label: startsWith(folder.folder?.absFolderPath, '/Trash')
+-					? t('label.delete_permanently', 'Delete Permanently')
+-					: t('label.delete', 'Delete'),
+-				click: (e: MouseEvent): void => {
+-					if (e) {
+-						e.stopPropagation();
+-					}
+-					const closeModal = createModal(
+-						{
+-							children: (
+-								<>
+-									<DeleteModal onClose={(): void => closeModal()} folder={folder} />
+-								</>
+-							)
+-						},
+-						true
+-					);
+-				}
+-			},
+-			{
+-				id: FolderActionsType.SHARE,
+-				icon: 'ShareOutline',
+-				label: t('action.share_folder', 'Share folder'),
+-				click: (e: MouseEvent): void => {
+-					if (e) {
+-						e.stopPropagation();
+-					}
+-					const closeModal = createModal(
+-						{
+-							children: (
+-								<>
+-									<ShareFolderModal
+-										onClose={(): void => closeModal()}
+-										folder={folder}
+-										activeGrant={activeGrant}
+-										goBack={goBack}
+-									/>
+-								</>
+-							)
+-						},
+-						true
+-					);
+-				}
+-			},
+-			{
+-				id: FolderActionsType.REMOVE_FROM_LIST,
+-				icon: 'CloseOutline',
+-				label: t('label.remove_from_this_list', 'Remove from this list'),
+-				click: (e): void => {
+-					if (e) {
+-						e.stopPropagation();
+-						dispatch(folderAction({ folder: folder.folder, op: 'delete' }));
+-					}
+-				}
+-			},
+-			{
+-				id: FolderActionsType.SHARES_INFO,
+-				icon: 'InfoOutline',
+-				label: t('label.shares_info', `Shared folder's info`),
+-				click: (e): void => {
+-					if (e) {
+-						e.stopPropagation();
+-					}
+-					const closeModal = createModal(
+-						{
+-							children: (
+-								<>
+-									<SharesInfoModal onClose={(): void => closeModal()} folder={folder.folder} />
+-								</>
+-							)
+-						},
+-						true
+-					);
+-				}
+-			}
+-		],
+-		[activeGrant, createModal, dispatch, folder, goBack, t]
+-	);
+-
+-	const defaultFolderActions = useMemo(
+-		() =>
+-			actions.filter(
+-				(action) =>
+-					action.id !== FolderActionsType.SHARES_INFO &&
+-					action.id !== FolderActionsType.REMOVE_FROM_LIST
+-			),
+-		[actions]
+-	);
+-	const id =
+-		folder.id.indexOf(':') !== -1 ? folder.id.slice(folder.id.indexOf(':') + 1) : folder.id;
+-	switch (id) {
+-		// default folders
+-		case FOLDERS.INBOX:
+-		case FOLDERS.SENT:
+-		case FOLDERS.DRAFTS:
+-			return defaultFolderActions.map((action) =>
+-				action.id === FolderActionsType.MOVE || action.id === FolderActionsType.DELETE
+-					? { ...action, disabled: true }
+-					: action
+-			);
+-
+-		case FOLDERS.SPAM:
+-			return defaultFolderActions.map((action) =>
+-				action.id === FolderActionsType.NEW ||
+-				action.id === FolderActionsType.MOVE ||
+-				action.id === FolderActionsType.DELETE
+-					? { ...action, disabled: true }
+-					: action
+-			);
+-		case FOLDERS.TRASH:
+-			return defaultFolderActions.map((action) =>
+-				action.id === FolderActionsType.MOVE ||
+-				action.id === FolderActionsType.DELETE ||
+-				action.id === FolderActionsType.EDIT ||
+-				action.id === FolderActionsType.SHARE
+-					? { ...action, disabled: true }
+-					: action
+-			);
+-		// customizable folders
+-		default:
+-			return folder.folder?.isLink
+-				? actions.filter(
+-						(action) =>
+-							action.id === FolderActionsType.SHARES_INFO ||
+-							action.id === FolderActionsType.REMOVE_FROM_LIST ||
+-							action.id === FolderActionsType.EDIT
+-				  )
+-				: defaultFolderActions.map((action) => {
+-						if (
+-							startsWith(folder.folder?.absFolderPath, '/Trash') &&
+-							(action.id === FolderActionsType.NEW || action.id === FolderActionsType.EDIT)
+-						) {
+-							return { ...action, disabled: true };
+-						}
+-						return action;
+-				  });
+-	}
+-};
+-
+-type DragEnterAction =
++export type DragEnterAction =
+ 	| undefined
+ 	| {
+ 			success: false;
+ 	  };
+-
+-type OnDropActionProps = {
++export type OnDropActionProps = {
+ 	type: string;
+ 	data: DataProps;
+ };
+ 
+ const badgeCount = (v?: number): number | undefined => (v && v > 0 ? v : undefined);
+-export const AccordionCustomComponent: FC<{ item: AccordionFolder }> = ({ item }) => {
+-	const { folder } = item;
++
++const AccordionCustomComponentRaw: FC<{ item: Folder }> = ({ item }) => {
++	console.count('@@AccordionCustomComponent');
+ 	const accountName = useUserAccount().name;
+ 	const [t] = useTranslation();
+ 	const dispatch = useDispatch();
+ 	const { folderId } = useParams<{ folderId: string }>();
+ 
+-	const onDragEnterAction = (data: OnDropActionProps): DragEnterAction => {
+-		if (data.type === 'conversation' || data.type === 'message') {
+-			if (
+-				data.data.parentFolderId === folder.id || // same folder not allowed
+-				(data.data.parentFolderId === FOLDERS.INBOX && [5, 6].includes(Number(folder.id))) || // from inbox not allowed in draft and sent
+-				(data.data.parentFolderId === FOLDERS.DRAFTS && ![3].includes(Number(folder.id))) || // from draft only allowed in Trash
+-				(folder.id === FOLDERS.DRAFTS && data.data.parentFolderId !== FOLDERS.TRASH) || // only from Trash can move in Draft
+-				(folder.isLink && folder.perm?.indexOf('w') === -1) || // only if shared folder have write permission
+-				folder.id === FOLDERS.USER_ROOT ||
+-				folder.oname === ROOT_NAME
+-			) {
+-				return { success: false };
+-			}
+-		}
+-		if (data.type === 'folder') {
+-			if (
+-				folder.id === data.data.id || // same folder not allowed
+-				folder.isLink || //  shared folder not allowed
+-				[FOLDERS.DRAFTS, FOLDERS.SPAM].includes(folder.id) // cannot be moved inside Draft and Spam
+-			)
+-				return { success: false };
+-		}
+-		return undefined;
+-	};
++	const onDragEnterAction = useCallback(
++		(data: OnDropActionProps): DragEnterAction => {
++			if (data.type === 'conversation' || data.type === 'message') {
++				if (
++					data.data.parentFolderId === item.id || // same folder not allowed
++					(data.data.parentFolderId === FOLDERS.INBOX && [5, 6].includes(Number(item.id))) || // from inbox not allowed in draft and sent
++					(data.data.parentFolderId === FOLDERS.DRAFTS && ![3].includes(Number(item.id))) || // from draft only allowed in Trash
++					(item.id === FOLDERS.DRAFTS && data.data.parentFolderId !== FOLDERS.TRASH) || // only from Trash can move in Draft
++					(item.isLink && item.perm?.indexOf('w') === -1) || // only if shared folder have write permission
++					item.id === FOLDERS.USER_ROOT ||
++					(item.isLink && item.oname === ROOT_NAME)
++				) {
++					return { success: false };
++				}
++			}
++			if (data.type === 'folder') {
++				if (
++					item.id === data.data.id || // same folder not allowed
++					item.isLink || //  shared folder not allowed
++					[FOLDERS.DRAFTS, FOLDERS.SPAM].includes(item.id) // cannot be moved inside Draft and Spam
++				)
++					return { success: false };
++			}
++			return undefined;
++		},
++		[item]
++	);
+ 
+ 	const onDropAction = (data: OnDropActionProps): void => {
+ 		const dragEnterResponse = onDragEnterAction(data);
+@@ -384,7 +122,7 @@
+ 		}
+ 
+ 		if (data.type === 'folder') {
+-			dispatch(folderAction({ folder: data.data, l: folder.id || FOLDERS.USER_ROOT, op: 'move' }))
++			dispatch(folderAction({ folder: data.data, l: item.id || FOLDERS.USER_ROOT, op: 'move' }))
+ 				// eslint-disable-next-line @typescript-eslint/ban-ts-comment
+ 				// @ts-ignore
+ 				.then((res) => {
+@@ -411,7 +149,7 @@
+ 				convAction({
+ 					operation: `move`,
+ 					ids: convMsgsIds,
+-					parent: folder.id
++					parent: item.id
+ 				})
+ 			)
+ 				// eslint-disable-next-line @typescript-eslint/ban-ts-comment
+@@ -427,7 +165,7 @@
+ 							autoHideTimeout: 3000,
+ 							actionLabel: t('action.goto_folder', 'GO TO FOLDER'),
+ 							onActionClick: () => {
+-								replaceHistory(`/folder/${folder.id}`);
++								replaceHistory(`/folder/${item.id}`);
+ 							}
+ 						});
+ 					} else {
+@@ -446,7 +184,7 @@
+ 				msgAction({
+ 					operation: `move`,
+ 					ids: convMsgsIds,
+-					parent: folder.id
++					parent: item.id
+ 				})
+ 			)
+ 				// eslint-disable-next-line @typescript-eslint/ban-ts-comment
+@@ -461,7 +199,7 @@
+ 							autoHideTimeout: 3000,
+ 							actionLabel: t('action.goto_folder', 'GO TO FOLDER'),
+ 							onActionClick: () => {
+-								replaceHistory(`/folder/${folder.id}`);
++								replaceHistory(`/folder/${item.id}`);
+ 							}
+ 						});
+ 					} else {
+@@ -481,9 +219,9 @@
+ 	const dragFolderDisable = useMemo(
+ 		() =>
+ 			[FOLDERS.INBOX, FOLDERS.TRASH, FOLDERS.SPAM, FOLDERS.SENT, FOLDERS.DRAFTS].includes(
+-				folder.id
+-			) || folder.isLink, // Default folders and shared folders not allowed to drag
+-		[folder.id, folder.isLink]
++				item.id
++			) || item.isLink, // Default folders and shared folders not allowed to drag
++		[item.id, item.isLink]
+ 	);
+ 	const { zimbraPrefGroupMailBy } = useUserSettings().prefs;
+ 
+@@ -501,20 +239,20 @@
+ 	// }, [zimbraPrefSortOrder, folder.id]) as 'dateDesc' | 'dateAsc';
+ 
+ 	const onClick = useCallback((): void => {
+-		pushHistory(`/folder/${folder.id}`);
++		pushHistory(`/folder/${item.id}`);
+ 		dispatch(
+ 			search({
+-				folderId: folder.id,
++				folderId: item.id,
+ 				limit: 101,
+ 				sortBy: 'dateDesc',
+ 				// folder.id === FOLDERS.DRAFTS ? 'message' : zimbraPrefGroupMailBy
+ 				types:
+-					folder.id === FOLDERS.DRAFTS || typeof zimbraPrefGroupMailBy !== 'string'
++					item.id === FOLDERS.DRAFTS || typeof zimbraPrefGroupMailBy !== 'string'
+ 						? 'message'
+ 						: zimbraPrefGroupMailBy
+ 			})
+ 		);
+-	}, [dispatch, folder.id, zimbraPrefGroupMailBy]);
++	}, [dispatch, item.id, zimbraPrefGroupMailBy]);
+ 
+ 	const accordionItem = useMemo(
+ 		() => ({
+@@ -522,11 +260,11 @@
+ 			label:
+ 				item.id === FOLDERS.USER_ROOT
+ 					? accountName
+-					: getFolderTranslatedName({ t, folderId: item.id, folderName: item.label }),
++					: getFolderTranslatedName({ t, folderId: item.id, folderName: item.name }),
+ 			icon: getFolderIconName(item),
+ 			iconColor: getFolderIconColor(item),
+ 			// open: openIds ? openIds.includes(folder.id) : false,
+-			badgeCounter: badgeCount(item.id === FOLDERS.DRAFTS ? item?.folder.n : item?.folder?.u),
++			badgeCounter: badgeCount(item.id === FOLDERS.DRAFTS ? item?.n : item?.u),
+ 			badgeType: item.id === FOLDERS.DRAFTS ? 'read' : 'unread',
+ 			to: `/folder/${item.id}`,
+ 			textProps: { size: 'small' }
+@@ -547,27 +285,27 @@
+ 			</Padding>
+ 		);
+ 
+-		if (folder.acl?.grant) {
++		if (item.acl?.grant) {
+ 			const tooltipText = t('tooltip.folder_sharing_status', {
+-				count: folder.acl.grant.length,
++				count: item.acl.grant.length,
+ 				defaultValue_one: 'Shared with {{count}} person',
+ 				defaultValue: 'Shared with {{count}} people'
+ 			});
+ 			return RowWithIcon('Shared', 'shared', tooltipText);
+ 		}
+-		if (folder.isLink) {
++		if (item.isLink) {
+ 			const tooltipText = t('tooltip.folder_linked_status', 'Linked to me');
+ 			return RowWithIcon('Linked', 'linked', tooltipText);
+ 		}
+ 		return '';
+-	}, [folder, t]);
++	}, [item, t]);
+ 
+ 	// hide folders where a share was provided and subsequently removed
+-	if (folder.broken) {
++	if (item.isLink && item.broken) {
+ 		return <></>;
+ 	}
+ 
+-	return folder.id === FOLDERS.USER_ROOT || folder.oname === ROOT_NAME ? (
++	return item.id === FOLDERS.USER_ROOT || (item.isLink && item.oname === ROOT_NAME) ? (
+ 		<FittedRow>
+ 			<Padding horizontal="small">
+ 				<Avatar label={accordionItem.label} colorLabel={accordionItem.iconColor} size="medium" />
+@@ -581,18 +319,13 @@
+ 			acceptType={['message', 'conversation', 'folder']}
+ 			onDrop={(data: OnDropActionProps): void => onDropAction(data)}
+ 			onDragEnter={(data: OnDropActionProps): unknown => onDragEnterAction(data)}
+-			overlayAcceptComponent={<DropOverlayContainer folder={folder} />}
+-			overlayDenyComponent={<DropDenyOverlayContainer folder={folder} />}
++			overlayAcceptComponent={<DropOverlayContainer folder={item} />}
++			overlayDenyComponent={<DropDenyOverlayContainer folder={item} />}
+ 		>
+-			<Drag
+-				type="folder"
+-				data={folder}
+-				dragDisabled={dragFolderDisable}
+-				style={{ display: 'block' }}
+-			>
++			<Drag type="folder" data={item} dragDisabled={dragFolderDisable} style={{ display: 'block' }}>
+ 				<AppLink
+ 					onClick={onClick}
+-					to={`/folder/${folder.id}`}
++					to={`/folder/${item.id}`}
+ 					style={{ width: '100%', height: '100%', textDecoration: 'none' }}
+ 				>
+ 					<Dropdown contextMenu items={dropdownItems} display="block" width="100%">
+@@ -608,3 +341,7 @@
+ 		</Drop>
+ 	);
+ };
++
++const AccordionCustomComponent = React.memo(AccordionCustomComponentRaw);
++
++export default AccordionCustomComponent;
Index: src/views/sidebar/empty-modal.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport React, { FC, useCallback, useContext, useMemo } from 'react';\nimport { Text, Container, SnackbarManagerContext } from '@zextras/carbonio-design-system';\nimport { FOLDERS } from '@zextras/carbonio-shell-ui';\nimport { useTranslation } from 'react-i18next';\nimport { useDispatch } from 'react-redux';\nimport ModalFooter from './commons/modal-footer';\nimport { folderAction } from '../../store/actions/folder-action';\nimport { ModalHeader } from './commons/modal-header';\nimport { ModalProps } from '../../types';\n\nexport const EmptyModal: FC<ModalProps> = ({ folder, onClose }) => {\n\tconst [t] = useTranslation();\n\tconst dispatch = useDispatch();\n\t// eslint-disable-next-line @typescript-eslint/ban-types\n\tconst createSnackbar = useContext(SnackbarManagerContext) as Function;\n\n\tconst onConfirm = useCallback(() => {\n\t\tdispatch(folderAction({ folder: folder.folder, recursive: true, op: 'empty' }))\n\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t// @ts-ignore\n\t\t\t.then((res) => {\n\t\t\t\tif (res.type.includes('fulfilled')) {\n\t\t\t\t\tcreateSnackbar({\n\t\t\t\t\t\tkey: `trash`,\n\t\t\t\t\t\treplace: true,\n\t\t\t\t\t\ttype: 'info',\n\t\t\t\t\t\tlabel:\n\t\t\t\t\t\t\tfolder.id === FOLDERS.TRASH\n\t\t\t\t\t\t\t\t? t('messages.snackbar.folder_empty', 'Trash successfully emptied')\n\t\t\t\t\t\t\t\t: t('messages.snackbar.folder_wiped', 'Folder successfully wiped'),\n\t\t\t\t\t\tautoHideTimeout: 3000,\n\t\t\t\t\t\thideButton: true\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tcreateSnackbar({\n\t\t\t\t\t\tkey: `trash`,\n\t\t\t\t\t\treplace: true,\n\t\t\t\t\t\ttype: 'error',\n\t\t\t\t\t\tlabel: t('label.error_try_again', 'Something went wrong, please try again.'),\n\t\t\t\t\t\tautoHideTimeout: 3000,\n\t\t\t\t\t\thideButton: true\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\tonClose();\n\t}, [dispatch, folder, onClose, createSnackbar, t]);\n\n\tconst title = useMemo(\n\t\t() =>\n\t\t\tfolder.id === FOLDERS.TRASH\n\t\t\t\t? `${t('label.empty', 'Empty')} ${folder.folder?.name}`\n\t\t\t\t: `${t('label.wipe', 'Wipe')} ${folder.folder?.name}`,\n\t\t[folder.id, folder.folder?.name, t]\n\t);\n\treturn (\n\t\t<Container\n\t\t\tpadding={{ all: 'large' }}\n\t\t\tmainAlignment=\"center\"\n\t\t\tcrossAlignment=\"flex-start\"\n\t\t\theight=\"fit\"\n\t\t>\n\t\t\t<ModalHeader title={title} onClose={onClose} />\n\t\t\t<Container padding={{ top: 'large', bottom: 'large' }} crossAlignment=\"flex-start\">\n\t\t\t\t{folder.id === FOLDERS.TRASH ? (\n\t\t\t\t\t<Text overflow=\"break-word\">\n\t\t\t\t\t\t{t(\n\t\t\t\t\t\t\t'folder_panel.modal.empty.body.message1',\n\t\t\t\t\t\t\t'Do you want to empty the selected folder?'\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\t{t(\n\t\t\t\t\t\t\t'folder_panel.modal.empty.body.message2',\n\t\t\t\t\t\t\t'If you empty it, all the related content will be deleted permanently.'\n\t\t\t\t\t\t)}\n\t\t\t\t\t</Text>\n\t\t\t\t) : (\n\t\t\t\t\t<Text overflow=\"break-word\">\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t(t('folder_panel.modal.wipe.body.message1'),\n\t\t\t\t\t\t\t'Do you want to wipe the selected folder?')\n\t\t\t\t\t\t}\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\t{t(\n\t\t\t\t\t\t\t'folder_panel.modal.wipe.body.message2',\n\t\t\t\t\t\t\t'If you wipe it, all the related content will be deleted permanently.'\n\t\t\t\t\t\t)}\n\t\t\t\t\t</Text>\n\t\t\t\t)}\n\t\t\t</Container>\n\n\t\t\t<ModalFooter\n\t\t\t\tonConfirm={onConfirm}\n\t\t\t\tlabel={folder.id === FOLDERS.TRASH ? t('label.empty', 'Empty') : t('label.wipe', 'Wipe')}\n\t\t\t\tcolor=\"error\"\n\t\t\t/>\n\t\t</Container>\n\t);\n};\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/views/sidebar/empty-modal.tsx b/src/views/sidebar/empty-modal.tsx
--- a/src/views/sidebar/empty-modal.tsx	(revision d8bea371a1253f951f0f0ff48819868807c68aa7)
+++ b/src/views/sidebar/empty-modal.tsx	(date 1662121480000)
@@ -20,7 +20,7 @@
 	const createSnackbar = useContext(SnackbarManagerContext) as Function;
 
 	const onConfirm = useCallback(() => {
-		dispatch(folderAction({ folder: folder.folder, recursive: true, op: 'empty' }))
+		dispatch(folderAction({ folder, recursive: true, op: 'empty' }))
 			// eslint-disable-next-line @typescript-eslint/ban-ts-comment
 			// @ts-ignore
 			.then((res) => {
@@ -53,9 +53,9 @@
 	const title = useMemo(
 		() =>
 			folder.id === FOLDERS.TRASH
-				? `${t('label.empty', 'Empty')} ${folder.folder?.name}`
-				: `${t('label.wipe', 'Wipe')} ${folder.folder?.name}`,
-		[folder.id, folder.folder?.name, t]
+				? `${t('label.empty', 'Empty')} ${folder.name}`
+				: `${t('label.wipe', 'Wipe')} ${folder.name}`,
+		[folder.id, folder.name, t]
 	);
 	return (
 		<Container
@@ -80,10 +80,7 @@
 					</Text>
 				) : (
 					<Text overflow="break-word">
-						{
-							(t('folder_panel.modal.wipe.body.message1'),
-							'Do you want to wipe the selected folder?')
-						}
+						{t('folder_panel.modal.wipe.body.message1', 'Do you want to wipe the selected folder?')}
 						<br />
 						{t(
 							'folder_panel.modal.wipe.body.message2',
Index: .idea/shelf/Changes3/shelved.patch
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/shelf/Changes3/shelved.patch b/.idea/shelf/Changes3/shelved.patch
new file mode 100644
--- /dev/null	(date 1662011723000)
+++ b/.idea/shelf/Changes3/shelved.patch	(date 1662011723000)
@@ -0,0 +1,597 @@
+Index: src/views/sidebar/accordion-custom-component.tsx
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport React, { FC, useCallback, useContext, useMemo, useState } from 'react';\nimport {\n\tAppLink,\n\tFOLDERS,\n\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t// @ts-ignore\n\tROOT_NAME,\n\treplaceHistory,\n\tuseUserSettings,\n\tgetBridgedFunctions,\n\tuseUserAccount,\n\tpushHistory,\n\tAccordionFolder\n} from '@zextras/carbonio-shell-ui';\nimport styled from 'styled-components';\nimport {\n\tAccordionItem,\n\tDropdown,\n\tDrag,\n\tDrop,\n\tContainer,\n\tTooltip,\n\tAvatar,\n\tIcon,\n\tRow,\n\tPadding,\n\tModalManagerContext\n} from '@zextras/carbonio-design-system';\nimport { find, startsWith } from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { useDispatch } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport { convAction, msgAction, search } from '../../store/actions';\nimport { folderAction } from '../../store/actions/folder-action';\nimport { getFolderIconColor, getFolderIconName, getFolderTranslatedName } from './utils';\nimport { NewModal } from './new-modal';\nimport { MoveModal } from './move-modal';\nimport { EmptyModal } from './empty-modal';\nimport { DeleteModal } from './delete-modal';\nimport { EditModal } from './edit-modal';\nimport { SharesInfoModal } from './shares-info-modal';\nimport ShareFolderModal from './share-folder-modal';\nimport { FolderActionsType } from '../../commons/utils';\nimport { DataProps } from '../../types';\n\nconst FittedRow = styled(Row)`\n\tmax-width: calc(100% - (2 * ${({ theme }): string => theme.sizes.padding.small}));\n\theight: 48px;\n`;\n\nconst DropOverlayContainer = styled(Container)`\n\tposition: absolute;\n\twidth: calc(248px - ${(props): number => (props.folder.level - 2) * 16}px);\n\theight: 100%;\n\tbackground: ${(props): string => props.theme.palette.primary.regular};\n\tborder-radius: 4px;\n\tborder: 4px solid #d5e3f6;\n\topacity: 0.4;\n`;\n\nconst DropDenyOverlayContainer = styled(Container)`\n\tposition: absolute;\n\twidth: calc(248px - ${(props): number => (props.folder.level - 2) * 16}px);\n\theight: 100%;\n\tbackground: ${(props): string => props.theme.palette.gray1.regular};\n\tborder-radius: 4px;\n\tborder: 4px solid #d5e3f6;\n\topacity: 0.4;\n`;\n\ntype FolderActionsProps = {\n\tid: string;\n\ticon: string;\n\tlabel: string;\n\tclick: (e: MouseEvent) => void;\n\tdisabled?: boolean;\n};\n\nconst useFolderActions = (folder: AccordionFolder): Array<FolderActionsProps> => {\n\tconst [t] = useTranslation();\n\tconst dispatch = useDispatch();\n\t// eslint-disable-next-line @typescript-eslint/ban-types\n\tconst createModal = useContext(ModalManagerContext) as Function;\n\tconst [activeModal, setActiveModal] = useState('default');\n\tconst [activeGrant, setActiveGrant] = useState({});\n\tconst goBack = useCallback(() => {\n\t\tsetActiveModal('default');\n\t}, [setActiveModal]);\n\n\tconst actions = useMemo(\n\t\t() => [\n\t\t\t{\n\t\t\t\tid: FolderActionsType.NEW,\n\t\t\t\ticon: 'FolderAddOutline',\n\t\t\t\tlabel: t('label.new_folder', 'New Folder'),\n\t\t\t\tclick: (e: MouseEvent): void => {\n\t\t\t\t\tif (e) {\n\t\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t}\n\t\t\t\t\tconst closeModal = createModal(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmaxHeight: '90vh',\n\t\t\t\t\t\t\tchildren: (\n\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t<NewModal folder={folder} onClose={(): void => closeModal()} />\n\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttrue\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: FolderActionsType.MOVE,\n\t\t\t\ticon: 'MoveOutline',\n\t\t\t\tlabel: startsWith(folder.folder?.absFolderPath, '/Trash')\n\t\t\t\t\t? t('label.restore', 'Restore')\n\t\t\t\t\t: t('label.move', 'Move'),\n\t\t\t\tclick: (e: MouseEvent): void => {\n\t\t\t\t\tif (e) {\n\t\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t}\n\t\t\t\t\tconst closeModal = createModal(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmaxHeight: '90vh',\n\t\t\t\t\t\t\tchildren: (\n\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t<MoveModal folder={folder} onClose={(): void => closeModal()} />\n\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttrue\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: FolderActionsType.EMPTY,\n\t\t\t\ticon: folder.id === FOLDERS.TRASH ? 'DeletePermanentlyOutline' : 'EmptyFolderOutline',\n\t\t\t\tlabel:\n\t\t\t\t\tfolder.id === FOLDERS.TRASH\n\t\t\t\t\t\t? t('folder_panel.action.empty.trash', 'Empty Trash')\n\t\t\t\t\t\t: t('folder_panel.action.wipe.folder_panel', 'Wipe Folder'),\n\t\t\t\tdisabled: folder.folder?.n === 0 && folder.folder?.children?.length === 0,\n\t\t\t\tclick: (e: MouseEvent): void => {\n\t\t\t\t\tif (e) {\n\t\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t}\n\t\t\t\t\tconst closeModal = createModal(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tchildren: (\n\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t<EmptyModal onClose={(): void => closeModal()} folder={folder} />\n\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttrue\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: FolderActionsType.EDIT,\n\t\t\t\ticon: 'Edit2Outline',\n\t\t\t\tlabel: folder?.folder?.isLink\n\t\t\t\t\t? t('folder_panel.action.edit_properties', 'Edit Properties')\n\t\t\t\t\t: t('label.edit', 'Edit'),\n\t\t\t\tclick: (e: MouseEvent): void => {\n\t\t\t\t\tif (e) {\n\t\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t}\n\t\t\t\t\tconst closeModal = createModal(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmaxHeight: '90vh',\n\t\t\t\t\t\t\tchildren: (\n\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t<EditModal onClose={(): void => closeModal()} folder={folder} />\n\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttrue\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: FolderActionsType.DELETE,\n\t\t\t\ticon: 'Trash2Outline',\n\t\t\t\tlabel: startsWith(folder.folder?.absFolderPath, '/Trash')\n\t\t\t\t\t? t('label.delete_permanently', 'Delete Permanently')\n\t\t\t\t\t: t('label.delete', 'Delete'),\n\t\t\t\tclick: (e: MouseEvent): void => {\n\t\t\t\t\tif (e) {\n\t\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t}\n\t\t\t\t\tconst closeModal = createModal(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tchildren: (\n\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t<DeleteModal onClose={(): void => closeModal()} folder={folder} />\n\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttrue\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: FolderActionsType.SHARE,\n\t\t\t\ticon: 'ShareOutline',\n\t\t\t\tlabel: t('action.share_folder', 'Share folder'),\n\t\t\t\tclick: (e: MouseEvent): void => {\n\t\t\t\t\tif (e) {\n\t\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t}\n\t\t\t\t\tconst closeModal = createModal(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tchildren: (\n\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t<ShareFolderModal\n\t\t\t\t\t\t\t\t\t\tonClose={(): void => closeModal()}\n\t\t\t\t\t\t\t\t\t\tfolder={folder}\n\t\t\t\t\t\t\t\t\t\tactiveGrant={activeGrant}\n\t\t\t\t\t\t\t\t\t\tgoBack={goBack}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttrue\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: FolderActionsType.REMOVE_FROM_LIST,\n\t\t\t\ticon: 'CloseOutline',\n\t\t\t\tlabel: t('label.remove_from_this_list', 'Remove from this list'),\n\t\t\t\tclick: (e): void => {\n\t\t\t\t\tif (e) {\n\t\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t\tdispatch(folderAction({ folder: folder.folder, op: 'delete' }));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: FolderActionsType.SHARES_INFO,\n\t\t\t\ticon: 'InfoOutline',\n\t\t\t\tlabel: t('label.shares_info', `Shared folder's info`),\n\t\t\t\tclick: (e): void => {\n\t\t\t\t\tif (e) {\n\t\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t}\n\t\t\t\t\tconst closeModal = createModal(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tchildren: (\n\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t<SharesInfoModal onClose={(): void => closeModal()} folder={folder.folder} />\n\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttrue\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t],\n\t\t[activeGrant, createModal, dispatch, folder, goBack, t]\n\t);\n\n\tconst defaultFolderActions = useMemo(\n\t\t() =>\n\t\t\tactions.filter(\n\t\t\t\t(action) =>\n\t\t\t\t\taction.id !== FolderActionsType.SHARES_INFO &&\n\t\t\t\t\taction.id !== FolderActionsType.REMOVE_FROM_LIST\n\t\t\t),\n\t\t[actions]\n\t);\n\tconst id =\n\t\tfolder.id.indexOf(':') !== -1 ? folder.id.slice(folder.id.indexOf(':') + 1) : folder.id;\n\tswitch (id) {\n\t\t// default folders\n\t\tcase FOLDERS.INBOX:\n\t\tcase FOLDERS.SENT:\n\t\tcase FOLDERS.DRAFTS:\n\t\t\treturn defaultFolderActions.map((action) =>\n\t\t\t\taction.id === FolderActionsType.MOVE || action.id === FolderActionsType.DELETE\n\t\t\t\t\t? { ...action, disabled: true }\n\t\t\t\t\t: action\n\t\t\t);\n\n\t\tcase FOLDERS.SPAM:\n\t\t\treturn defaultFolderActions.map((action) =>\n\t\t\t\taction.id === FolderActionsType.NEW ||\n\t\t\t\taction.id === FolderActionsType.MOVE ||\n\t\t\t\taction.id === FolderActionsType.DELETE\n\t\t\t\t\t? { ...action, disabled: true }\n\t\t\t\t\t: action\n\t\t\t);\n\t\tcase FOLDERS.TRASH:\n\t\t\treturn defaultFolderActions.map((action) =>\n\t\t\t\taction.id === FolderActionsType.MOVE ||\n\t\t\t\taction.id === FolderActionsType.DELETE ||\n\t\t\t\taction.id === FolderActionsType.EDIT ||\n\t\t\t\taction.id === FolderActionsType.SHARE\n\t\t\t\t\t? { ...action, disabled: true }\n\t\t\t\t\t: action\n\t\t\t);\n\t\t// customizable folders\n\t\tdefault:\n\t\t\treturn folder.folder?.isLink\n\t\t\t\t? actions.filter(\n\t\t\t\t\t\t(action) =>\n\t\t\t\t\t\t\taction.id === FolderActionsType.SHARES_INFO ||\n\t\t\t\t\t\t\taction.id === FolderActionsType.REMOVE_FROM_LIST ||\n\t\t\t\t\t\t\taction.id === FolderActionsType.EDIT\n\t\t\t\t  )\n\t\t\t\t: defaultFolderActions.map((action) => {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tstartsWith(folder.folder?.absFolderPath, '/Trash') &&\n\t\t\t\t\t\t\t(action.id === FolderActionsType.NEW || action.id === FolderActionsType.EDIT)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\treturn { ...action, disabled: true };\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn action;\n\t\t\t\t  });\n\t}\n};\n\ntype DragEnterAction =\n\t| undefined\n\t| {\n\t\t\tsuccess: false;\n\t  };\n\ntype OnDropActionProps = {\n\ttype: string;\n\tdata: DataProps;\n};\n\nconst badgeCount = (v?: number): number | undefined => (v && v > 0 ? v : undefined);\nexport const AccordionCustomComponent: FC<{ item: AccordionFolder }> = ({ item }) => {\n\tconst { folder } = item;\n\tconst accountName = useUserAccount().name;\n\tconst [t] = useTranslation();\n\tconst dispatch = useDispatch();\n\tconst { folderId } = useParams<{ folderId: string }>();\n\n\tconst onDragEnterAction = (data: OnDropActionProps): DragEnterAction => {\n\t\tif (data.type === 'conversation' || data.type === 'message') {\n\t\t\tif (\n\t\t\t\tdata.data.parentFolderId === folder.id || // same folder not allowed\n\t\t\t\t(data.data.parentFolderId === FOLDERS.INBOX && [5, 6].includes(Number(folder.id))) || // from inbox not allowed in draft and sent\n\t\t\t\t(data.data.parentFolderId === FOLDERS.DRAFTS && ![3].includes(Number(folder.id))) || // from draft only allowed in Trash\n\t\t\t\t(folder.id === FOLDERS.DRAFTS && data.data.parentFolderId !== FOLDERS.TRASH) || // only from Trash can move in Draft\n\t\t\t\t(folder.isLink && folder.perm?.indexOf('w') === -1) || // only if shared folder have write permission\n\t\t\t\tfolder.id === FOLDERS.USER_ROOT ||\n\t\t\t\tfolder.oname === ROOT_NAME\n\t\t\t) {\n\t\t\t\treturn { success: false };\n\t\t\t}\n\t\t}\n\t\tif (data.type === 'folder') {\n\t\t\tif (\n\t\t\t\tfolder.id === data.data.id || // same folder not allowed\n\t\t\t\tfolder.isLink || //  shared folder not allowed\n\t\t\t\t[FOLDERS.DRAFTS, FOLDERS.SPAM].includes(folder.id) // cannot be moved inside Draft and Spam\n\t\t\t)\n\t\t\t\treturn { success: false };\n\t\t}\n\t\treturn undefined;\n\t};\n\n\tconst onDropAction = (data: OnDropActionProps): void => {\n\t\tconst dragEnterResponse = onDragEnterAction(data);\n\t\tif (dragEnterResponse && dragEnterResponse?.success === false) return;\n\t\tlet convMsgsIds = [data.data.id];\n\t\tif (\n\t\t\tdata.type !== 'folder' &&\n\t\t\tdata.data?.selectedIDs?.length &&\n\t\t\tdata.data?.selectedIDs.includes(data.data.id)\n\t\t) {\n\t\t\tconvMsgsIds = data.data?.selectedIDs;\n\t\t}\n\n\t\tif (data.type === 'folder') {\n\t\t\tdispatch(folderAction({ folder: data.data, l: folder.id || FOLDERS.USER_ROOT, op: 'move' }))\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t\t// @ts-ignore\n\t\t\t\t.then((res) => {\n\t\t\t\t\tif (res.type.includes('fulfilled')) {\n\t\t\t\t\t\tgetBridgedFunctions().createSnackbar({\n\t\t\t\t\t\t\tkey: `move`,\n\t\t\t\t\t\t\treplace: true,\n\t\t\t\t\t\t\ttype: 'success',\n\t\t\t\t\t\t\tlabel: t('messages.snackbar.folder_moved', 'Folder successfully moved'),\n\t\t\t\t\t\t\tautoHideTimeout: 3000\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tgetBridgedFunctions().createSnackbar({\n\t\t\t\t\t\t\tkey: `move`,\n\t\t\t\t\t\t\treplace: true,\n\t\t\t\t\t\t\ttype: 'error',\n\t\t\t\t\t\t\tlabel: t('label.error_try_again', 'Something went wrong, please try again.'),\n\t\t\t\t\t\t\tautoHideTimeout: 3000\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t} else if (data.type === 'conversation') {\n\t\t\tdispatch(\n\t\t\t\tconvAction({\n\t\t\t\t\toperation: `move`,\n\t\t\t\t\tids: convMsgsIds,\n\t\t\t\t\tparent: folder.id\n\t\t\t\t})\n\t\t\t)\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t\t// @ts-ignore\n\t\t\t\t.then((res) => {\n\t\t\t\t\tif (res.type.includes('fulfilled')) {\n\t\t\t\t\t\treplaceHistory(`/folder/${folderId}`);\n\t\t\t\t\t\tgetBridgedFunctions().createSnackbar({\n\t\t\t\t\t\t\tkey: `edit`,\n\t\t\t\t\t\t\treplace: true,\n\t\t\t\t\t\t\ttype: 'info',\n\t\t\t\t\t\t\tlabel: t('messages.snackbar.conversation_move', 'Conversation successfully moved'),\n\t\t\t\t\t\t\tautoHideTimeout: 3000,\n\t\t\t\t\t\t\tactionLabel: t('action.goto_folder', 'GO TO FOLDER'),\n\t\t\t\t\t\t\tonActionClick: () => {\n\t\t\t\t\t\t\t\treplaceHistory(`/folder/${folder.id}`);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tgetBridgedFunctions().createSnackbar({\n\t\t\t\t\t\t\tkey: `edit`,\n\t\t\t\t\t\t\treplace: true,\n\t\t\t\t\t\t\ttype: 'error',\n\t\t\t\t\t\t\tlabel: t('label.error_try_again', 'Something went wrong, please try again'),\n\t\t\t\t\t\t\tautoHideTimeout: 3000,\n\t\t\t\t\t\t\thideButton: true\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t} else {\n\t\t\tdispatch(\n\t\t\t\tmsgAction({\n\t\t\t\t\toperation: `move`,\n\t\t\t\t\tids: convMsgsIds,\n\t\t\t\t\tparent: folder.id\n\t\t\t\t})\n\t\t\t)\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t\t// @ts-ignore\n\t\t\t\t.then((res) => {\n\t\t\t\t\tif (res.type.includes('fulfilled')) {\n\t\t\t\t\t\tgetBridgedFunctions().createSnackbar({\n\t\t\t\t\t\t\tkey: `edit`,\n\t\t\t\t\t\t\treplace: true,\n\t\t\t\t\t\t\ttype: 'info',\n\t\t\t\t\t\t\tlabel: t('messages.snackbar.message_move', 'Message successfully moved'),\n\t\t\t\t\t\t\tautoHideTimeout: 3000,\n\t\t\t\t\t\t\tactionLabel: t('action.goto_folder', 'GO TO FOLDER'),\n\t\t\t\t\t\t\tonActionClick: () => {\n\t\t\t\t\t\t\t\treplaceHistory(`/folder/${folder.id}`);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tgetBridgedFunctions().createSnackbar({\n\t\t\t\t\t\t\tkey: `edit`,\n\t\t\t\t\t\t\treplace: true,\n\t\t\t\t\t\t\ttype: 'error',\n\t\t\t\t\t\t\tlabel: t('label.error_try_again', 'Something went wrong, please try again'),\n\t\t\t\t\t\t\tautoHideTimeout: 3000,\n\t\t\t\t\t\t\thideButton: true\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t}\n\t};\n\n\tconst dragFolderDisable = useMemo(\n\t\t() =>\n\t\t\t[FOLDERS.INBOX, FOLDERS.TRASH, FOLDERS.SPAM, FOLDERS.SENT, FOLDERS.DRAFTS].includes(\n\t\t\t\tfolder.id\n\t\t\t) || folder.isLink, // Default folders and shared folders not allowed to drag\n\t\t[folder.id, folder.isLink]\n\t);\n\tconst { zimbraPrefGroupMailBy } = useUserSettings().prefs;\n\n\t/* NOTE: Need to comment out when need to sort as per the configured sort order */\n\t// const { zimbraPrefSortOrder, zimbraPrefGroupMailBy } = useUserSettings().prefs;\n\t// const sorting = useMemo(() => {\n\t// \tif (typeof zimbraPrefSortOrder === 'string') {\n\t// \t\treturn (\n\t// \t\t\tfind(zimbraPrefSortOrder?.split(','), (f) => f?.split(':')?.[0] === folder.id)?.split(\n\t// \t\t\t\t':'\n\t// \t\t\t)?.[1] ?? 'dateDesc'\n\t// \t\t);\n\t// \t}\n\t// \treturn 'dateDesc';\n\t// }, [zimbraPrefSortOrder, folder.id]) as 'dateDesc' | 'dateAsc';\n\n\tconst onClick = useCallback((): void => {\n\t\tpushHistory(`/folder/${folder.id}`);\n\t\tdispatch(\n\t\t\tsearch({\n\t\t\t\tfolderId: folder.id,\n\t\t\t\tlimit: 101,\n\t\t\t\tsortBy: 'dateDesc',\n\t\t\t\t// folder.id === FOLDERS.DRAFTS ? 'message' : zimbraPrefGroupMailBy\n\t\t\t\ttypes:\n\t\t\t\t\tfolder.id === FOLDERS.DRAFTS || typeof zimbraPrefGroupMailBy !== 'string'\n\t\t\t\t\t\t? 'message'\n\t\t\t\t\t\t: zimbraPrefGroupMailBy\n\t\t\t})\n\t\t);\n\t}, [dispatch, folder.id, zimbraPrefGroupMailBy]);\n\n\tconst accordionItem = useMemo(\n\t\t() => ({\n\t\t\t...item,\n\t\t\tlabel:\n\t\t\t\titem.id === FOLDERS.USER_ROOT\n\t\t\t\t\t? accountName\n\t\t\t\t\t: getFolderTranslatedName({ t, folderId: item.id, folderName: item.label }),\n\t\t\ticon: getFolderIconName(item),\n\t\t\ticonColor: getFolderIconColor(item),\n\t\t\t// open: openIds ? openIds.includes(folder.id) : false,\n\t\t\tbadgeCounter: badgeCount(item.id === FOLDERS.DRAFTS ? item?.folder.n : item?.folder?.u),\n\t\t\tbadgeType: item.id === FOLDERS.DRAFTS ? 'read' : 'unread',\n\t\t\tto: `/folder/${item.id}`,\n\t\t\ttextProps: { size: 'small' }\n\t\t}),\n\t\t[item, accountName, t]\n\t);\n\n\tconst dropdownItems = useFolderActions(item);\n\n\tconst statusIcon = useMemo(() => {\n\t\tconst RowWithIcon = (icon: string, color: string, tooltipText: string): JSX.Element => (\n\t\t\t<Padding left=\"small\">\n\t\t\t\t<Tooltip placement=\"right\" label={tooltipText}>\n\t\t\t\t\t<Row>\n\t\t\t\t\t\t<Icon icon={icon} color={color} size=\"medium\" />\n\t\t\t\t\t</Row>\n\t\t\t\t</Tooltip>\n\t\t\t</Padding>\n\t\t);\n\n\t\tif (folder.acl?.grant) {\n\t\t\tconst tooltipText = t('tooltip.folder_sharing_status', {\n\t\t\t\tcount: folder.acl.grant.length,\n\t\t\t\tdefaultValue_one: 'Shared with {{count}} person',\n\t\t\t\tdefaultValue: 'Shared with {{count}} people'\n\t\t\t});\n\t\t\treturn RowWithIcon('Shared', 'shared', tooltipText);\n\t\t}\n\t\tif (folder.isLink) {\n\t\t\tconst tooltipText = t('tooltip.folder_linked_status', 'Linked to me');\n\t\t\treturn RowWithIcon('Linked', 'linked', tooltipText);\n\t\t}\n\t\treturn '';\n\t}, [folder, t]);\n\n\t// hide folders where a share was provided and subsequently removed\n\tif (folder.broken) {\n\t\treturn <></>;\n\t}\n\n\treturn folder.id === FOLDERS.USER_ROOT || folder.oname === ROOT_NAME ? (\n\t\t<FittedRow>\n\t\t\t<Padding horizontal=\"small\">\n\t\t\t\t<Avatar label={accordionItem.label} colorLabel={accordionItem.iconColor} size=\"medium\" />\n\t\t\t</Padding>\n\t\t\t<Tooltip label={accordionItem.label} placement=\"right\" maxWidth=\"100%\">\n\t\t\t\t<AccordionItem item={accordionItem} />\n\t\t\t</Tooltip>\n\t\t</FittedRow>\n\t) : (\n\t\t<Row width=\"fill\" minWidth={0}>\n\t\t\t<Drop\n\t\t\t\tacceptType={['message', 'conversation', 'folder']}\n\t\t\t\tonDrop={(data: OnDropActionProps): void => onDropAction(data)}\n\t\t\t\tonDragEnter={(data: OnDropActionProps): unknown => onDragEnterAction(data)}\n\t\t\t\toverlayAcceptComponent={<DropOverlayContainer folder={folder} />}\n\t\t\t\toverlayDenyComponent={<DropDenyOverlayContainer folder={folder} />}\n\t\t\t>\n\t\t\t\t<Drag\n\t\t\t\t\ttype=\"folder\"\n\t\t\t\t\tdata={folder}\n\t\t\t\t\tdragDisabled={dragFolderDisable}\n\t\t\t\t\tstyle={{ display: 'block' }}\n\t\t\t\t>\n\t\t\t\t\t<AppLink\n\t\t\t\t\t\tonClick={onClick}\n\t\t\t\t\t\tto={`/folder/${folder.id}`}\n\t\t\t\t\t\tstyle={{ width: '100%', height: '100%', textDecoration: 'none' }}\n\t\t\t\t\t>\n\t\t\t\t\t\t<Dropdown contextMenu items={dropdownItems} display=\"block\" width=\"100%\">\n\t\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t\t<Padding left=\"small\" />\n\t\t\t\t\t\t\t\t<Tooltip label={accordionItem.label} placement=\"right\" maxWidth=\"100%\">\n\t\t\t\t\t\t\t\t\t<AccordionItem item={accordionItem}>{statusIcon}</AccordionItem>\n\t\t\t\t\t\t\t\t</Tooltip>\n\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t</Dropdown>\n\t\t\t\t\t</AppLink>\n\t\t\t\t</Drag>\n\t\t\t</Drop>\n\t\t</Row>\n\t);\n};\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/views/sidebar/accordion-custom-component.tsx b/src/views/sidebar/accordion-custom-component.tsx
+--- a/src/views/sidebar/accordion-custom-component.tsx	(revision 625354c8af746681a130d381c5881a3713632fe6)
++++ b/src/views/sidebar/accordion-custom-component.tsx	(date 1661883378823)
+@@ -3,57 +3,48 @@
+  *
+  * SPDX-License-Identifier: AGPL-3.0-only
+  */
+-import React, { FC, useCallback, useContext, useMemo, useState } from 'react';
++import {
++	AccordionItem,
++	Avatar,
++	Container,
++	Drag,
++	Drop,
++	Dropdown,
++	Icon,
++	Padding,
++	Row,
++	Tooltip
++} from '@zextras/carbonio-design-system';
+ import {
+ 	AppLink,
++	Folder,
+ 	FOLDERS,
++	getBridgedFunctions,
++	pushHistory,
++	replaceHistory,
+ 	// eslint-disable-next-line @typescript-eslint/ban-ts-comment
+ 	// @ts-ignore
+ 	ROOT_NAME,
+-	replaceHistory,
+-	useUserSettings,
+-	getBridgedFunctions,
+ 	useUserAccount,
+-	pushHistory,
+-	AccordionFolder
++	useUserSettings
+ } from '@zextras/carbonio-shell-ui';
+-import styled from 'styled-components';
+-import {
+-	AccordionItem,
+-	Dropdown,
+-	Drag,
+-	Drop,
+-	Container,
+-	Tooltip,
+-	Avatar,
+-	Icon,
+-	Row,
+-	Padding,
+-	ModalManagerContext
+-} from '@zextras/carbonio-design-system';
+-import { find, startsWith } from 'lodash';
++import React, { FC, useCallback, useMemo } from 'react';
+ import { useTranslation } from 'react-i18next';
+ import { useDispatch } from 'react-redux';
+ import { useParams } from 'react-router-dom';
++import styled from 'styled-components';
+ import { convAction, msgAction, search } from '../../store/actions';
+ import { folderAction } from '../../store/actions/folder-action';
+-import { getFolderIconColor, getFolderIconName, getFolderTranslatedName } from './utils';
+-import { NewModal } from './new-modal';
+-import { MoveModal } from './move-modal';
+-import { EmptyModal } from './empty-modal';
+-import { DeleteModal } from './delete-modal';
+-import { EditModal } from './edit-modal';
+-import { SharesInfoModal } from './shares-info-modal';
+-import ShareFolderModal from './share-folder-modal';
+-import { FolderActionsType } from '../../commons/utils';
+ import { DataProps } from '../../types';
++import { useFolderActions } from './use-folder-actions';
++import { getFolderIconColor, getFolderIconName, getFolderTranslatedName } from './utils';
+ 
+ const FittedRow = styled(Row)`
+ 	max-width: calc(100% - (2 * ${({ theme }): string => theme.sizes.padding.small}));
+ 	height: 48px;
+ `;
+ 
+-const DropOverlayContainer = styled(Container)`
++export const DropOverlayContainer = styled(Container)`
+ 	position: absolute;
+ 	width: calc(248px - ${(props): number => (props.folder.level - 2) * 16}px);
+ 	height: 100%;
+@@ -62,8 +53,7 @@
+ 	border: 4px solid #d5e3f6;
+ 	opacity: 0.4;
+ `;
+-
+-const DropDenyOverlayContainer = styled(Container)`
++export const DropDenyOverlayContainer = styled(Container)`
+ 	position: absolute;
+ 	width: calc(248px - ${(props): number => (props.folder.level - 2) * 16}px);
+ 	height: 100%;
+@@ -72,304 +62,52 @@
+ 	border: 4px solid #d5e3f6;
+ 	opacity: 0.4;
+ `;
+-
+-type FolderActionsProps = {
+-	id: string;
+-	icon: string;
+-	label: string;
+-	click: (e: MouseEvent) => void;
+-	disabled?: boolean;
+-};
+-
+-const useFolderActions = (folder: AccordionFolder): Array<FolderActionsProps> => {
+-	const [t] = useTranslation();
+-	const dispatch = useDispatch();
+-	// eslint-disable-next-line @typescript-eslint/ban-types
+-	const createModal = useContext(ModalManagerContext) as Function;
+-	const [activeModal, setActiveModal] = useState('default');
+-	const [activeGrant, setActiveGrant] = useState({});
+-	const goBack = useCallback(() => {
+-		setActiveModal('default');
+-	}, [setActiveModal]);
+-
+-	const actions = useMemo(
+-		() => [
+-			{
+-				id: FolderActionsType.NEW,
+-				icon: 'FolderAddOutline',
+-				label: t('label.new_folder', 'New Folder'),
+-				click: (e: MouseEvent): void => {
+-					if (e) {
+-						e.stopPropagation();
+-					}
+-					const closeModal = createModal(
+-						{
+-							maxHeight: '90vh',
+-							children: (
+-								<>
+-									<NewModal folder={folder} onClose={(): void => closeModal()} />
+-								</>
+-							)
+-						},
+-						true
+-					);
+-				}
+-			},
+-			{
+-				id: FolderActionsType.MOVE,
+-				icon: 'MoveOutline',
+-				label: startsWith(folder.folder?.absFolderPath, '/Trash')
+-					? t('label.restore', 'Restore')
+-					: t('label.move', 'Move'),
+-				click: (e: MouseEvent): void => {
+-					if (e) {
+-						e.stopPropagation();
+-					}
+-					const closeModal = createModal(
+-						{
+-							maxHeight: '90vh',
+-							children: (
+-								<>
+-									<MoveModal folder={folder} onClose={(): void => closeModal()} />
+-								</>
+-							)
+-						},
+-						true
+-					);
+-				}
+-			},
+-			{
+-				id: FolderActionsType.EMPTY,
+-				icon: folder.id === FOLDERS.TRASH ? 'DeletePermanentlyOutline' : 'EmptyFolderOutline',
+-				label:
+-					folder.id === FOLDERS.TRASH
+-						? t('folder_panel.action.empty.trash', 'Empty Trash')
+-						: t('folder_panel.action.wipe.folder_panel', 'Wipe Folder'),
+-				disabled: folder.folder?.n === 0 && folder.folder?.children?.length === 0,
+-				click: (e: MouseEvent): void => {
+-					if (e) {
+-						e.stopPropagation();
+-					}
+-					const closeModal = createModal(
+-						{
+-							children: (
+-								<>
+-									<EmptyModal onClose={(): void => closeModal()} folder={folder} />
+-								</>
+-							)
+-						},
+-						true
+-					);
+-				}
+-			},
+-			{
+-				id: FolderActionsType.EDIT,
+-				icon: 'Edit2Outline',
+-				label: folder?.folder?.isLink
+-					? t('folder_panel.action.edit_properties', 'Edit Properties')
+-					: t('label.edit', 'Edit'),
+-				click: (e: MouseEvent): void => {
+-					if (e) {
+-						e.stopPropagation();
+-					}
+-					const closeModal = createModal(
+-						{
+-							maxHeight: '90vh',
+-							children: (
+-								<>
+-									<EditModal onClose={(): void => closeModal()} folder={folder} />
+-								</>
+-							)
+-						},
+-						true
+-					);
+-				}
+-			},
+-			{
+-				id: FolderActionsType.DELETE,
+-				icon: 'Trash2Outline',
+-				label: startsWith(folder.folder?.absFolderPath, '/Trash')
+-					? t('label.delete_permanently', 'Delete Permanently')
+-					: t('label.delete', 'Delete'),
+-				click: (e: MouseEvent): void => {
+-					if (e) {
+-						e.stopPropagation();
+-					}
+-					const closeModal = createModal(
+-						{
+-							children: (
+-								<>
+-									<DeleteModal onClose={(): void => closeModal()} folder={folder} />
+-								</>
+-							)
+-						},
+-						true
+-					);
+-				}
+-			},
+-			{
+-				id: FolderActionsType.SHARE,
+-				icon: 'ShareOutline',
+-				label: t('action.share_folder', 'Share folder'),
+-				click: (e: MouseEvent): void => {
+-					if (e) {
+-						e.stopPropagation();
+-					}
+-					const closeModal = createModal(
+-						{
+-							children: (
+-								<>
+-									<ShareFolderModal
+-										onClose={(): void => closeModal()}
+-										folder={folder}
+-										activeGrant={activeGrant}
+-										goBack={goBack}
+-									/>
+-								</>
+-							)
+-						},
+-						true
+-					);
+-				}
+-			},
+-			{
+-				id: FolderActionsType.REMOVE_FROM_LIST,
+-				icon: 'CloseOutline',
+-				label: t('label.remove_from_this_list', 'Remove from this list'),
+-				click: (e): void => {
+-					if (e) {
+-						e.stopPropagation();
+-						dispatch(folderAction({ folder: folder.folder, op: 'delete' }));
+-					}
+-				}
+-			},
+-			{
+-				id: FolderActionsType.SHARES_INFO,
+-				icon: 'InfoOutline',
+-				label: t('label.shares_info', `Shared folder's info`),
+-				click: (e): void => {
+-					if (e) {
+-						e.stopPropagation();
+-					}
+-					const closeModal = createModal(
+-						{
+-							children: (
+-								<>
+-									<SharesInfoModal onClose={(): void => closeModal()} folder={folder.folder} />
+-								</>
+-							)
+-						},
+-						true
+-					);
+-				}
+-			}
+-		],
+-		[activeGrant, createModal, dispatch, folder, goBack, t]
+-	);
+-
+-	const defaultFolderActions = useMemo(
+-		() =>
+-			actions.filter(
+-				(action) =>
+-					action.id !== FolderActionsType.SHARES_INFO &&
+-					action.id !== FolderActionsType.REMOVE_FROM_LIST
+-			),
+-		[actions]
+-	);
+-	const id =
+-		folder.id.indexOf(':') !== -1 ? folder.id.slice(folder.id.indexOf(':') + 1) : folder.id;
+-	switch (id) {
+-		// default folders
+-		case FOLDERS.INBOX:
+-		case FOLDERS.SENT:
+-		case FOLDERS.DRAFTS:
+-			return defaultFolderActions.map((action) =>
+-				action.id === FolderActionsType.MOVE || action.id === FolderActionsType.DELETE
+-					? { ...action, disabled: true }
+-					: action
+-			);
+-
+-		case FOLDERS.SPAM:
+-			return defaultFolderActions.map((action) =>
+-				action.id === FolderActionsType.NEW ||
+-				action.id === FolderActionsType.MOVE ||
+-				action.id === FolderActionsType.DELETE
+-					? { ...action, disabled: true }
+-					: action
+-			);
+-		case FOLDERS.TRASH:
+-			return defaultFolderActions.map((action) =>
+-				action.id === FolderActionsType.MOVE ||
+-				action.id === FolderActionsType.DELETE ||
+-				action.id === FolderActionsType.EDIT ||
+-				action.id === FolderActionsType.SHARE
+-					? { ...action, disabled: true }
+-					: action
+-			);
+-		// customizable folders
+-		default:
+-			return folder.folder?.isLink
+-				? actions.filter(
+-						(action) =>
+-							action.id === FolderActionsType.SHARES_INFO ||
+-							action.id === FolderActionsType.REMOVE_FROM_LIST ||
+-							action.id === FolderActionsType.EDIT
+-				  )
+-				: defaultFolderActions.map((action) => {
+-						if (
+-							startsWith(folder.folder?.absFolderPath, '/Trash') &&
+-							(action.id === FolderActionsType.NEW || action.id === FolderActionsType.EDIT)
+-						) {
+-							return { ...action, disabled: true };
+-						}
+-						return action;
+-				  });
+-	}
+-};
+-
+-type DragEnterAction =
++export type DragEnterAction =
+ 	| undefined
+ 	| {
+ 			success: false;
+ 	  };
+-
+-type OnDropActionProps = {
++export type OnDropActionProps = {
+ 	type: string;
+ 	data: DataProps;
+ };
+ 
+ const badgeCount = (v?: number): number | undefined => (v && v > 0 ? v : undefined);
+-export const AccordionCustomComponent: FC<{ item: AccordionFolder }> = ({ item }) => {
+-	const { folder } = item;
++
++const AccordionCustomComponent: FC<{ item: Folder }> = ({ item }) => {
++	console.count('@@AccordionCustomComponent');
+ 	const accountName = useUserAccount().name;
+ 	const [t] = useTranslation();
+ 	const dispatch = useDispatch();
+ 	const { folderId } = useParams<{ folderId: string }>();
+ 
+-	const onDragEnterAction = (data: OnDropActionProps): DragEnterAction => {
+-		if (data.type === 'conversation' || data.type === 'message') {
+-			if (
+-				data.data.parentFolderId === folder.id || // same folder not allowed
+-				(data.data.parentFolderId === FOLDERS.INBOX && [5, 6].includes(Number(folder.id))) || // from inbox not allowed in draft and sent
+-				(data.data.parentFolderId === FOLDERS.DRAFTS && ![3].includes(Number(folder.id))) || // from draft only allowed in Trash
+-				(folder.id === FOLDERS.DRAFTS && data.data.parentFolderId !== FOLDERS.TRASH) || // only from Trash can move in Draft
+-				(folder.isLink && folder.perm?.indexOf('w') === -1) || // only if shared folder have write permission
+-				folder.id === FOLDERS.USER_ROOT ||
+-				folder.oname === ROOT_NAME
+-			) {
+-				return { success: false };
+-			}
+-		}
+-		if (data.type === 'folder') {
+-			if (
+-				folder.id === data.data.id || // same folder not allowed
+-				folder.isLink || //  shared folder not allowed
+-				[FOLDERS.DRAFTS, FOLDERS.SPAM].includes(folder.id) // cannot be moved inside Draft and Spam
+-			)
+-				return { success: false };
+-		}
+-		return undefined;
+-	};
++	const onDragEnterAction = useCallback(
++		(data: OnDropActionProps): DragEnterAction => {
++			if (data.type === 'conversation' || data.type === 'message') {
++				if (
++					data.data.parentFolderId === item.id || // same folder not allowed
++					(data.data.parentFolderId === FOLDERS.INBOX && [5, 6].includes(Number(item.id))) || // from inbox not allowed in draft and sent
++					(data.data.parentFolderId === FOLDERS.DRAFTS && ![3].includes(Number(item.id))) || // from draft only allowed in Trash
++					(item.id === FOLDERS.DRAFTS && data.data.parentFolderId !== FOLDERS.TRASH) || // only from Trash can move in Draft
++					(item.isLink && item.perm?.indexOf('w') === -1) || // only if shared folder have write permission
++					item.id === FOLDERS.USER_ROOT ||
++					(item.isLink && item.oname === ROOT_NAME)
++				) {
++					return { success: false };
++				}
++			}
++			if (data.type === 'folder') {
++				if (
++					item.id === data.data.id || // same folder not allowed
++					item.isLink || //  shared folder not allowed
++					[FOLDERS.DRAFTS, FOLDERS.SPAM].includes(item.id) // cannot be moved inside Draft and Spam
++				)
++					return { success: false };
++			}
++			return undefined;
++		},
++		[item]
++	);
+ 
+ 	const onDropAction = (data: OnDropActionProps): void => {
+ 		const dragEnterResponse = onDragEnterAction(data);
+@@ -384,7 +122,7 @@
+ 		}
+ 
+ 		if (data.type === 'folder') {
+-			dispatch(folderAction({ folder: data.data, l: folder.id || FOLDERS.USER_ROOT, op: 'move' }))
++			dispatch(folderAction({ folder: data.data, l: item.id || FOLDERS.USER_ROOT, op: 'move' }))
+ 				// eslint-disable-next-line @typescript-eslint/ban-ts-comment
+ 				// @ts-ignore
+ 				.then((res) => {
+@@ -411,7 +149,7 @@
+ 				convAction({
+ 					operation: `move`,
+ 					ids: convMsgsIds,
+-					parent: folder.id
++					parent: item.id
+ 				})
+ 			)
+ 				// eslint-disable-next-line @typescript-eslint/ban-ts-comment
+@@ -427,7 +165,7 @@
+ 							autoHideTimeout: 3000,
+ 							actionLabel: t('action.goto_folder', 'GO TO FOLDER'),
+ 							onActionClick: () => {
+-								replaceHistory(`/folder/${folder.id}`);
++								replaceHistory(`/folder/${item.id}`);
+ 							}
+ 						});
+ 					} else {
+@@ -446,7 +184,7 @@
+ 				msgAction({
+ 					operation: `move`,
+ 					ids: convMsgsIds,
+-					parent: folder.id
++					parent: item.id
+ 				})
+ 			)
+ 				// eslint-disable-next-line @typescript-eslint/ban-ts-comment
+@@ -461,7 +199,7 @@
+ 							autoHideTimeout: 3000,
+ 							actionLabel: t('action.goto_folder', 'GO TO FOLDER'),
+ 							onActionClick: () => {
+-								replaceHistory(`/folder/${folder.id}`);
++								replaceHistory(`/folder/${item.id}`);
+ 							}
+ 						});
+ 					} else {
+@@ -481,9 +219,9 @@
+ 	const dragFolderDisable = useMemo(
+ 		() =>
+ 			[FOLDERS.INBOX, FOLDERS.TRASH, FOLDERS.SPAM, FOLDERS.SENT, FOLDERS.DRAFTS].includes(
+-				folder.id
+-			) || folder.isLink, // Default folders and shared folders not allowed to drag
+-		[folder.id, folder.isLink]
++				item.id
++			) || item.isLink, // Default folders and shared folders not allowed to drag
++		[item.id, item.isLink]
+ 	);
+ 	const { zimbraPrefGroupMailBy } = useUserSettings().prefs;
+ 
+@@ -501,20 +239,20 @@
+ 	// }, [zimbraPrefSortOrder, folder.id]) as 'dateDesc' | 'dateAsc';
+ 
+ 	const onClick = useCallback((): void => {
+-		pushHistory(`/folder/${folder.id}`);
++		pushHistory(`/folder/${item.id}`);
+ 		dispatch(
+ 			search({
+-				folderId: folder.id,
++				folderId: item.id,
+ 				limit: 101,
+ 				sortBy: 'dateDesc',
+ 				// folder.id === FOLDERS.DRAFTS ? 'message' : zimbraPrefGroupMailBy
+ 				types:
+-					folder.id === FOLDERS.DRAFTS || typeof zimbraPrefGroupMailBy !== 'string'
++					item.id === FOLDERS.DRAFTS || typeof zimbraPrefGroupMailBy !== 'string'
+ 						? 'message'
+ 						: zimbraPrefGroupMailBy
+ 			})
+ 		);
+-	}, [dispatch, folder.id, zimbraPrefGroupMailBy]);
++	}, [dispatch, item.id, zimbraPrefGroupMailBy]);
+ 
+ 	const accordionItem = useMemo(
+ 		() => ({
+@@ -522,11 +260,11 @@
+ 			label:
+ 				item.id === FOLDERS.USER_ROOT
+ 					? accountName
+-					: getFolderTranslatedName({ t, folderId: item.id, folderName: item.label }),
++					: getFolderTranslatedName({ t, folderId: item.id, folderName: item.name }),
+ 			icon: getFolderIconName(item),
+ 			iconColor: getFolderIconColor(item),
+ 			// open: openIds ? openIds.includes(folder.id) : false,
+-			badgeCounter: badgeCount(item.id === FOLDERS.DRAFTS ? item?.folder.n : item?.folder?.u),
++			badgeCounter: badgeCount(item.id === FOLDERS.DRAFTS ? item?.n : item?.u),
+ 			badgeType: item.id === FOLDERS.DRAFTS ? 'read' : 'unread',
+ 			to: `/folder/${item.id}`,
+ 			textProps: { size: 'small' }
+@@ -547,27 +285,27 @@
+ 			</Padding>
+ 		);
+ 
+-		if (folder.acl?.grant) {
++		if (item.acl?.grant) {
+ 			const tooltipText = t('tooltip.folder_sharing_status', {
+-				count: folder.acl.grant.length,
++				count: item.acl.grant.length,
+ 				defaultValue_one: 'Shared with {{count}} person',
+ 				defaultValue: 'Shared with {{count}} people'
+ 			});
+ 			return RowWithIcon('Shared', 'shared', tooltipText);
+ 		}
+-		if (folder.isLink) {
++		if (item.isLink) {
+ 			const tooltipText = t('tooltip.folder_linked_status', 'Linked to me');
+ 			return RowWithIcon('Linked', 'linked', tooltipText);
+ 		}
+ 		return '';
+-	}, [folder, t]);
++	}, [item, t]);
+ 
+ 	// hide folders where a share was provided and subsequently removed
+-	if (folder.broken) {
++	if (item.isLink && item.broken) {
+ 		return <></>;
+ 	}
+ 
+-	return folder.id === FOLDERS.USER_ROOT || folder.oname === ROOT_NAME ? (
++	return item.id === FOLDERS.USER_ROOT || (item.isLink && item.oname === ROOT_NAME) ? (
+ 		<FittedRow>
+ 			<Padding horizontal="small">
+ 				<Avatar label={accordionItem.label} colorLabel={accordionItem.iconColor} size="medium" />
+@@ -582,18 +320,18 @@
+ 				acceptType={['message', 'conversation', 'folder']}
+ 				onDrop={(data: OnDropActionProps): void => onDropAction(data)}
+ 				onDragEnter={(data: OnDropActionProps): unknown => onDragEnterAction(data)}
+-				overlayAcceptComponent={<DropOverlayContainer folder={folder} />}
+-				overlayDenyComponent={<DropDenyOverlayContainer folder={folder} />}
++				overlayAcceptComponent={<DropOverlayContainer folder={item} />}
++				overlayDenyComponent={<DropDenyOverlayContainer folder={item} />}
+ 			>
+ 				<Drag
+ 					type="folder"
+-					data={folder}
++					data={item}
+ 					dragDisabled={dragFolderDisable}
+ 					style={{ display: 'block' }}
+ 				>
+ 					<AppLink
+ 						onClick={onClick}
+-						to={`/folder/${folder.id}`}
++						to={`/folder/${item.id}`}
+ 						style={{ width: '100%', height: '100%', textDecoration: 'none' }}
+ 					>
+ 						<Dropdown contextMenu items={dropdownItems} display="block" width="100%">
+@@ -610,3 +348,5 @@
+ 		</Row>
+ 	);
+ };
++
++export default AccordionCustomComponent;
Index: src/store/actions/folder-action.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport { createAsyncThunk } from '@reduxjs/toolkit';\nimport { soapFetch } from '@zextras/carbonio-shell-ui';\nimport { isEmpty, isNil, omitBy } from 'lodash';\nimport { DataProps, FolderType } from '../../types';\n\ntype FolderActionProps = {\n\tfolder: FolderType | DataProps;\n\tcolor?: number;\n\tzid?: string;\n\top: string;\n\tname?: string;\n\tl?: string;\n\trecursive?: boolean;\n\tretentionPolicy?: unknown;\n};\n\nexport const folderAction = createAsyncThunk(\n\t'contacts/folderAction',\n\tasync ({ folder, color, zid, op, name, l, recursive, retentionPolicy }: FolderActionProps) => {\n\t\tconst result = !isEmpty(retentionPolicy)\n\t\t\t? await soapFetch('Batch', {\n\t\t\t\t\tFolderActionRequest: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\taction: {\n\t\t\t\t\t\t\t\tid: folder.id,\n\t\t\t\t\t\t\t\top,\n\t\t\t\t\t\t\t\tl,\n\t\t\t\t\t\t\t\trecursive,\n\t\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\t\tcolor\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t_jsns: 'urn:zimbraMail'\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\taction: {\n\t\t\t\t\t\t\t\tid: folder.id,\n\t\t\t\t\t\t\t\top: 'retentionpolicy',\n\t\t\t\t\t\t\t\tretentionPolicy\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t_jsns: 'urn:zimbraMail'\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t\t_jsns: 'urn:zimbra'\n\t\t\t  })\n\t\t\t: await soapFetch('FolderAction', {\n\t\t\t\t\taction: omitBy(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tid: folder.id,\n\t\t\t\t\t\t\top,\n\t\t\t\t\t\t\tl,\n\t\t\t\t\t\t\trecursive,\n\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\tcolor,\n\t\t\t\t\t\t\tzid\n\t\t\t\t\t\t},\n\t\t\t\t\t\tisNil\n\t\t\t\t\t),\n\t\t\t\t\t_jsns: 'urn:zimbraMail'\n\t\t\t  });\n\t\treturn result;\n\t}\n);\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/store/actions/folder-action.ts b/src/store/actions/folder-action.ts
--- a/src/store/actions/folder-action.ts	(revision d8bea371a1253f951f0f0ff48819868807c68aa7)
+++ b/src/store/actions/folder-action.ts	(date 1661936110000)
@@ -4,12 +4,12 @@
  * SPDX-License-Identifier: AGPL-3.0-only
  */
 import { createAsyncThunk } from '@reduxjs/toolkit';
-import { soapFetch } from '@zextras/carbonio-shell-ui';
+import { Folder, soapFetch } from '@zextras/carbonio-shell-ui';
 import { isEmpty, isNil, omitBy } from 'lodash';
 import { DataProps, FolderType } from '../../types';
 
 type FolderActionProps = {
-	folder: FolderType | DataProps;
+	folder: FolderType | DataProps | Omit<Folder, 'parent'>;
 	color?: number;
 	zid?: string;
 	op: string;
Index: .idea/shelf/Changes1/shelved.patch
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/shelf/Changes1/shelved.patch b/.idea/shelf/Changes1/shelved.patch
new file mode 100644
--- /dev/null	(date 1661734983000)
+++ b/.idea/shelf/Changes1/shelved.patch	(date 1661734983000)
@@ -0,0 +1,5255 @@
+Index: src/views/sidebar/delete-modal.tsx
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport React, { FC, useCallback, useContext } from 'react';\nimport { FOLDERS, report } from '@zextras/carbonio-shell-ui';\nimport { Container, Text, Divider, SnackbarManagerContext } from '@zextras/carbonio-design-system';\nimport { useTranslation } from 'react-i18next';\nimport { useDispatch } from 'react-redux';\nimport { startsWith } from 'lodash';\nimport ModalFooter from './commons/modal-footer';\nimport { ModalHeader } from './commons/modal-header';\nimport { folderAction } from '../../store/actions/folder-action';\nimport { ModalProps } from '../../types';\nimport { FOLDER_ACTIONS } from '../../commons/utilities';\n\nexport const DeleteModal: FC<ModalProps> = ({ folder, onClose }) => {\n\tconst [t] = useTranslation();\n\tconst dispatch = useDispatch();\n\t// eslint-disable-next-line @typescript-eslint/ban-types\n\tconst createSnackbar = useContext(SnackbarManagerContext) as Function;\n\tconst onConfirm = useCallback(() => {\n\t\tlet inTrash = false;\n\t\tconst restoreFolder = (): void =>\n\t\t\tdispatch(\n\t\t\t\tfolderAction({ folder: folder.folder, l: folder.folder?.parent, op: FOLDER_ACTIONS.MOVE })\n\t\t\t)\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t\t// @ts-ignore\n\t\t\t\t.then((res) => {\n\t\t\t\t\tif (res.type.includes('fulfilled')) {\n\t\t\t\t\t\tcreateSnackbar({\n\t\t\t\t\t\t\tkey: `trash-folder`,\n\t\t\t\t\t\t\treplace: true,\n\t\t\t\t\t\t\ttype: 'success',\n\t\t\t\t\t\t\tlabel: t('messages.snackbar.folder_restored', 'Folder restored'),\n\t\t\t\t\t\t\tautoHideTimeout: 3000,\n\t\t\t\t\t\t\thideButton: true\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcreateSnackbar({\n\t\t\t\t\t\t\tkey: `trash`,\n\t\t\t\t\t\t\treplace: true,\n\t\t\t\t\t\t\ttype: 'error',\n\t\t\t\t\t\t\tlabel: t('label.error_try_again', 'Something went wrong, please try again'),\n\t\t\t\t\t\t\tautoHideTimeout: 3000,\n\t\t\t\t\t\t\thideButton: true\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.catch(report);\n\n\t\tif (startsWith(folder.folder?.absFolderPath, '/Trash')) {\n\t\t\tinTrash = true;\n\t\t}\n\t\tdispatch(\n\t\t\tfolderAction({\n\t\t\t\tfolder: folder.folder,\n\t\t\t\tl: FOLDERS.TRASH,\n\t\t\t\top: inTrash ? FOLDER_ACTIONS.DELETE : FOLDER_ACTIONS.MOVE\n\t\t\t})\n\t\t)\n\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t// @ts-ignore\n\t\t\t.then((res: { type: string }) => {\n\t\t\t\tif (res.type.includes('fulfilled')) {\n\t\t\t\t\tcreateSnackbar({\n\t\t\t\t\t\tkey: `trash-folder`,\n\t\t\t\t\t\treplace: true,\n\t\t\t\t\t\ttype: 'info',\n\t\t\t\t\t\tlabel: inTrash\n\t\t\t\t\t\t\t? t('messages.snackbar.folder_deleted', 'Folder permanently deleted.')\n\t\t\t\t\t\t\t: t('messages.snackbar.folder_moved_to_trash', 'Folder moved to trash'),\n\t\t\t\t\t\tautoHideTimeout: 5000,\n\t\t\t\t\t\thideButton: false,\n\t\t\t\t\t\tactionLabel: 'Undo',\n\t\t\t\t\t\tonActionClick: () => restoreFolder()\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tcreateSnackbar({\n\t\t\t\t\t\tkey: `trash`,\n\t\t\t\t\t\treplace: true,\n\t\t\t\t\t\ttype: 'error',\n\t\t\t\t\t\tlabel: t('label.error_try_again', 'Something went wrong, please try again'),\n\t\t\t\t\t\tautoHideTimeout: 3000,\n\t\t\t\t\t\thideButton: true\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(report);\n\t\tonClose();\n\t}, [folder, dispatch, onClose, createSnackbar, t]);\n\n\treturn folder.folder ? (\n\t\t<Container\n\t\t\tpadding={{ all: 'large' }}\n\t\t\tmainAlignment=\"center\"\n\t\t\tcrossAlignment=\"flex-start\"\n\t\t\theight=\"fit\"\n\t\t>\n\t\t\t<ModalHeader\n\t\t\t\ttitle={`${t('label.delete', 'Delete')} ${folder.folder?.name}`}\n\t\t\t\tonClose={onClose}\n\t\t\t/>\n\t\t\t<Container\n\t\t\t\tpadding={{ all: 'small' }}\n\t\t\t\tmainAlignment=\"center\"\n\t\t\t\tcrossAlignment=\"flex-start\"\n\t\t\t\theight=\"fit\"\n\t\t\t>\n\t\t\t\t{startsWith(folder.folder?.absFolderPath, '/Trash') ? (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<Text overflow=\"break-word\">\n\t\t\t\t\t\t\t{t(\n\t\t\t\t\t\t\t\t'folder_panel.modal.delete.body.message2',\n\t\t\t\t\t\t\t\t'Do you want to delete the selected folder permanently?'\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</Text>\n\t\t\t\t\t\t<Text overflow=\"break-word\">\n\t\t\t\t\t\t\t{t(\n\t\t\t\t\t\t\t\t'folder_panel.modal.delete.body.message4',\n\t\t\t\t\t\t\t\t'If you delete it, all the related content will be permanently removed and the folder will no longer be recoverable.'\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</Text>\n\t\t\t\t\t</>\n\t\t\t\t) : (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<Text overflow=\"break-word\">\n\t\t\t\t\t\t\t{t(\n\t\t\t\t\t\t\t\t'folder_panel.modal.delete.body.message1',\n\t\t\t\t\t\t\t\t'Do you want to delete the selected folder?'\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</Text>\n\t\t\t\t\t\t<Text overflow=\"break-word\">\n\t\t\t\t\t\t\t{t(\n\t\t\t\t\t\t\t\t'folder_panel.modal.delete.body.message3',\n\t\t\t\t\t\t\t\t'If you delete it, all the related content will be moved to Trash and the folder will no longer be visible.'\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</Text>\n\t\t\t\t\t</>\n\t\t\t\t)}\n\t\t\t</Container>\n\t\t\t<Divider />\n\t\t\t<ModalFooter\n\t\t\t\tonConfirm={onConfirm}\n\t\t\t\tsecondaryAction={onClose}\n\t\t\t\tlabel={t('action.ok', 'Ok')}\n\t\t\t\tcolor=\"error\"\n\t\t\t/>\n\t\t</Container>\n\t) : (\n\t\t<></>\n\t);\n};\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/views/sidebar/delete-modal.tsx b/src/views/sidebar/delete-modal.tsx
+--- a/src/views/sidebar/delete-modal.tsx	(revision 4adaba21c8889cfd3cf44adf6271b75e82f59433)
++++ b/src/views/sidebar/delete-modal.tsx	(date 1661285002000)
+@@ -4,7 +4,7 @@
+  * SPDX-License-Identifier: AGPL-3.0-only
+  */
+ import React, { FC, useCallback, useContext } from 'react';
+-import { FOLDERS, report } from '@zextras/carbonio-shell-ui';
++import { Folder, FOLDERS, report } from '@zextras/carbonio-shell-ui';
+ import { Container, Text, Divider, SnackbarManagerContext } from '@zextras/carbonio-design-system';
+ import { useTranslation } from 'react-i18next';
+ import { useDispatch } from 'react-redux';
+@@ -24,7 +24,11 @@
+ 		let inTrash = false;
+ 		const restoreFolder = (): void =>
+ 			dispatch(
+-				folderAction({ folder: folder.folder, l: folder.folder?.parent, op: FOLDER_ACTIONS.MOVE })
++				folderAction({
++					folder,
++					l: folder.parent as unknown as string,
++					op: FOLDER_ACTIONS.MOVE
++				})
+ 			)
+ 				// eslint-disable-next-line @typescript-eslint/ban-ts-comment
+ 				// @ts-ignore
+@@ -51,12 +55,12 @@
+ 				})
+ 				.catch(report);
+ 
+-		if (startsWith(folder.folder?.absFolderPath, '/Trash')) {
++		if (startsWith(folder.absFolderPath, '/Trash')) {
+ 			inTrash = true;
+ 		}
+ 		dispatch(
+ 			folderAction({
+-				folder: folder.folder,
++				folder,
+ 				l: FOLDERS.TRASH,
+ 				op: inTrash ? FOLDER_ACTIONS.DELETE : FOLDER_ACTIONS.MOVE
+ 			})
+@@ -92,24 +96,21 @@
+ 		onClose();
+ 	}, [folder, dispatch, onClose, createSnackbar, t]);
+ 
+-	return folder.folder ? (
++	return folder ? (
+ 		<Container
+ 			padding={{ all: 'large' }}
+ 			mainAlignment="center"
+ 			crossAlignment="flex-start"
+ 			height="fit"
+ 		>
+-			<ModalHeader
+-				title={`${t('label.delete', 'Delete')} ${folder.folder?.name}`}
+-				onClose={onClose}
+-			/>
++			<ModalHeader title={`${t('label.delete', 'Delete')} ${folder.name}`} onClose={onClose} />
+ 			<Container
+ 				padding={{ all: 'small' }}
+ 				mainAlignment="center"
+ 				crossAlignment="flex-start"
+ 				height="fit"
+ 			>
+-				{startsWith(folder.folder?.absFolderPath, '/Trash') ? (
++				{startsWith(folder.absFolderPath, '/Trash') ? (
+ 					<>
+ 						<Text overflow="break-word">
+ 							{t(
+Index: src/views/sidebar/accordion-custom-component.tsx
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport React, { FC, useCallback, useContext, useMemo, useState } from 'react';\nimport {\n\tAppLink,\n\tFOLDERS,\n\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t// @ts-ignore\n\tROOT_NAME,\n\treplaceHistory,\n\tuseUserSettings,\n\tgetBridgedFunctions,\n\tuseUserAccount,\n\tpushHistory,\n\tAccordionFolder\n} from '@zextras/carbonio-shell-ui';\nimport styled from 'styled-components';\nimport {\n\tAccordionItem,\n\tDropdown,\n\tDrag,\n\tDrop,\n\tContainer,\n\tTooltip,\n\tAvatar,\n\tIcon,\n\tRow,\n\tPadding,\n\tModalManagerContext\n} from '@zextras/carbonio-design-system';\nimport { find, startsWith } from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { useDispatch } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport { convAction, msgAction, search } from '../../store/actions';\nimport { folderAction } from '../../store/actions/folder-action';\nimport { getFolderIconColor, getFolderIconName, getFolderTranslatedName } from './utils';\nimport { NewModal } from './new-modal';\nimport { MoveModal } from './move-modal';\nimport { EmptyModal } from './empty-modal';\nimport { DeleteModal } from './delete-modal';\nimport { EditModal } from './edit-modal';\nimport { SharesInfoModal } from './shares-info-modal';\nimport ShareFolderModal from './share-folder-modal';\nimport { FolderActionsType } from '../../commons/utils';\nimport { DataProps } from '../../types';\n\nconst FittedRow = styled(Row)`\n\tmax-width: calc(100% - (2 * ${({ theme }): string => theme.sizes.padding.small}));\n\theight: 48px;\n`;\n\nconst DropOverlayContainer = styled(Container)`\n\tposition: absolute;\n\twidth: calc(248px - ${(props): number => (props.folder.level - 2) * 16}px);\n\theight: 100%;\n\tbackground: ${(props): string => props.theme.palette.primary.regular};\n\tborder-radius: 4px;\n\tborder: 4px solid #d5e3f6;\n\topacity: 0.4;\n`;\n\nconst DropDenyOverlayContainer = styled(Container)`\n\tposition: absolute;\n\twidth: calc(248px - ${(props): number => (props.folder.level - 2) * 16}px);\n\theight: 100%;\n\tbackground: ${(props): string => props.theme.palette.gray1.regular};\n\tborder-radius: 4px;\n\tborder: 4px solid #d5e3f6;\n\topacity: 0.4;\n`;\n\ntype FolderActionsProps = {\n\tid: string;\n\ticon: string;\n\tlabel: string;\n\tclick: (e: MouseEvent) => void;\n\tdisabled?: boolean;\n};\n\nconst useFolderActions = (folder: AccordionFolder): Array<FolderActionsProps> => {\n\tconst [t] = useTranslation();\n\tconst dispatch = useDispatch();\n\t// eslint-disable-next-line @typescript-eslint/ban-types\n\tconst createModal = useContext(ModalManagerContext) as Function;\n\tconst [activeModal, setActiveModal] = useState('default');\n\tconst [activeGrant, setActiveGrant] = useState({});\n\tconst goBack = useCallback(() => {\n\t\tsetActiveModal('default');\n\t}, [setActiveModal]);\n\n\tconst actions = useMemo(\n\t\t() => [\n\t\t\t{\n\t\t\t\tid: FolderActionsType.NEW,\n\t\t\t\ticon: 'FolderAddOutline',\n\t\t\t\tlabel: t('label.new_folder', 'New Folder'),\n\t\t\t\tclick: (e: MouseEvent): void => {\n\t\t\t\t\tif (e) {\n\t\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t}\n\t\t\t\t\tconst closeModal = createModal(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmaxHeight: '90vh',\n\t\t\t\t\t\t\tchildren: (\n\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t<NewModal folder={folder} onClose={(): void => closeModal()} />\n\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttrue\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: FolderActionsType.MOVE,\n\t\t\t\ticon: 'MoveOutline',\n\t\t\t\tlabel: startsWith(folder.folder?.absFolderPath, '/Trash')\n\t\t\t\t\t? t('label.restore', 'Restore')\n\t\t\t\t\t: t('label.move', 'Move'),\n\t\t\t\tclick: (e: MouseEvent): void => {\n\t\t\t\t\tif (e) {\n\t\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t}\n\t\t\t\t\tconst closeModal = createModal(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmaxHeight: '90vh',\n\t\t\t\t\t\t\tchildren: (\n\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t<MoveModal folder={folder} onClose={(): void => closeModal()} />\n\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttrue\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: FolderActionsType.EMPTY,\n\t\t\t\ticon: folder.id === FOLDERS.TRASH ? 'DeletePermanentlyOutline' : 'EmptyFolderOutline',\n\t\t\t\tlabel:\n\t\t\t\t\tfolder.id === FOLDERS.TRASH\n\t\t\t\t\t\t? t('folder_panel.action.empty.trash', 'Empty Trash')\n\t\t\t\t\t\t: t('folder_panel.action.wipe.folder_panel', 'Wipe Folder'),\n\t\t\t\tdisabled: folder.folder?.n === 0 && folder.folder?.children?.length === 0,\n\t\t\t\tclick: (e: MouseEvent): void => {\n\t\t\t\t\tif (e) {\n\t\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t}\n\t\t\t\t\tconst closeModal = createModal(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tchildren: (\n\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t<EmptyModal onClose={(): void => closeModal()} folder={folder} />\n\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttrue\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: FolderActionsType.EDIT,\n\t\t\t\ticon: 'Edit2Outline',\n\t\t\t\tlabel: folder?.folder?.isLink\n\t\t\t\t\t? t('folder_panel.action.edit_properties', 'Edit Properties')\n\t\t\t\t\t: t('label.edit', 'Edit'),\n\t\t\t\tclick: (e: MouseEvent): void => {\n\t\t\t\t\tif (e) {\n\t\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t}\n\t\t\t\t\tconst closeModal = createModal(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmaxHeight: '90vh',\n\t\t\t\t\t\t\tchildren: (\n\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t<EditModal onClose={(): void => closeModal()} folder={folder} />\n\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttrue\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: FolderActionsType.DELETE,\n\t\t\t\ticon: 'Trash2Outline',\n\t\t\t\tlabel: startsWith(folder.folder?.absFolderPath, '/Trash')\n\t\t\t\t\t? t('label.delete_permanently', 'Delete Permanently')\n\t\t\t\t\t: t('label.delete', 'Delete'),\n\t\t\t\tclick: (e: MouseEvent): void => {\n\t\t\t\t\tif (e) {\n\t\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t}\n\t\t\t\t\tconst closeModal = createModal(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tchildren: (\n\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t<DeleteModal onClose={(): void => closeModal()} folder={folder} />\n\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttrue\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: FolderActionsType.SHARE,\n\t\t\t\ticon: 'ShareOutline',\n\t\t\t\tlabel: t('action.share_folder', 'Share folder'),\n\t\t\t\tclick: (e: MouseEvent): void => {\n\t\t\t\t\tif (e) {\n\t\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t}\n\t\t\t\t\tconst closeModal = createModal(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tchildren: (\n\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t<ShareFolderModal\n\t\t\t\t\t\t\t\t\t\tonClose={(): void => closeModal()}\n\t\t\t\t\t\t\t\t\t\tfolder={folder}\n\t\t\t\t\t\t\t\t\t\tactiveGrant={activeGrant}\n\t\t\t\t\t\t\t\t\t\tgoBack={goBack}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttrue\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: FolderActionsType.REMOVE_FROM_LIST,\n\t\t\t\ticon: 'CloseOutline',\n\t\t\t\tlabel: t('label.remove_from_this_list', 'Remove from this list'),\n\t\t\t\tclick: (e): void => {\n\t\t\t\t\tif (e) {\n\t\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t\tdispatch(folderAction({ folder: folder.folder, op: 'delete' }));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: FolderActionsType.SHARES_INFO,\n\t\t\t\ticon: 'InfoOutline',\n\t\t\t\tlabel: t('label.shares_info', `Shared folder's info`),\n\t\t\t\tclick: (e): void => {\n\t\t\t\t\tif (e) {\n\t\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t}\n\t\t\t\t\tconst closeModal = createModal(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tchildren: (\n\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t<SharesInfoModal onClose={(): void => closeModal()} folder={folder.folder} />\n\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttrue\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t],\n\t\t[activeGrant, createModal, dispatch, folder, goBack, t]\n\t);\n\n\tconst defaultFolderActions = useMemo(\n\t\t() =>\n\t\t\tactions.filter(\n\t\t\t\t(action) =>\n\t\t\t\t\taction.id !== FolderActionsType.SHARES_INFO &&\n\t\t\t\t\taction.id !== FolderActionsType.REMOVE_FROM_LIST\n\t\t\t),\n\t\t[actions]\n\t);\n\tconst id =\n\t\tfolder.id.indexOf(':') !== -1 ? folder.id.slice(folder.id.indexOf(':') + 1) : folder.id;\n\tswitch (id) {\n\t\t// default folders\n\t\tcase FOLDERS.INBOX:\n\t\tcase FOLDERS.SENT:\n\t\tcase FOLDERS.DRAFTS:\n\t\t\treturn defaultFolderActions.map((action) =>\n\t\t\t\taction.id === FolderActionsType.MOVE || action.id === FolderActionsType.DELETE\n\t\t\t\t\t? { ...action, disabled: true }\n\t\t\t\t\t: action\n\t\t\t);\n\n\t\tcase FOLDERS.SPAM:\n\t\t\treturn defaultFolderActions.map((action) =>\n\t\t\t\taction.id === FolderActionsType.NEW ||\n\t\t\t\taction.id === FolderActionsType.MOVE ||\n\t\t\t\taction.id === FolderActionsType.DELETE\n\t\t\t\t\t? { ...action, disabled: true }\n\t\t\t\t\t: action\n\t\t\t);\n\t\tcase FOLDERS.TRASH:\n\t\t\treturn defaultFolderActions.map((action) =>\n\t\t\t\taction.id === FolderActionsType.MOVE ||\n\t\t\t\taction.id === FolderActionsType.DELETE ||\n\t\t\t\taction.id === FolderActionsType.EDIT ||\n\t\t\t\taction.id === FolderActionsType.SHARE\n\t\t\t\t\t? { ...action, disabled: true }\n\t\t\t\t\t: action\n\t\t\t);\n\t\t// customizable folders\n\t\tdefault:\n\t\t\treturn folder.folder?.isLink\n\t\t\t\t? actions.filter(\n\t\t\t\t\t\t(action) =>\n\t\t\t\t\t\t\taction.id === FolderActionsType.SHARES_INFO ||\n\t\t\t\t\t\t\taction.id === FolderActionsType.REMOVE_FROM_LIST ||\n\t\t\t\t\t\t\taction.id === FolderActionsType.EDIT\n\t\t\t\t  )\n\t\t\t\t: defaultFolderActions.map((action) => {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tstartsWith(folder.folder?.absFolderPath, '/Trash') &&\n\t\t\t\t\t\t\t(action.id === FolderActionsType.NEW || action.id === FolderActionsType.EDIT)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\treturn { ...action, disabled: true };\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn action;\n\t\t\t\t  });\n\t}\n};\n\ntype DragEnterAction =\n\t| undefined\n\t| {\n\t\t\tsuccess: false;\n\t  };\n\ntype OnDropActionProps = {\n\ttype: string;\n\tdata: DataProps;\n};\n\nconst badgeCount = (v?: number): number | undefined => (v && v > 0 ? v : undefined);\nexport const AccordionCustomComponent: FC<{ item: AccordionFolder }> = ({ item }) => {\n\tconst { folder } = item;\n\tconst accountName = useUserAccount().name;\n\tconst [t] = useTranslation();\n\tconst dispatch = useDispatch();\n\tconst { folderId } = useParams<{ folderId: string }>();\n\n\tconst onDragEnterAction = (data: OnDropActionProps): DragEnterAction => {\n\t\tif (data.type === 'conversation' || data.type === 'message') {\n\t\t\tif (\n\t\t\t\tdata.data.parentFolderId === folder.id || // same folder not allowed\n\t\t\t\t(data.data.parentFolderId === FOLDERS.INBOX && [5, 6].includes(Number(folder.id))) || // from inbox not allowed in draft and sent\n\t\t\t\t(data.data.parentFolderId === FOLDERS.DRAFTS && ![3].includes(Number(folder.id))) || // from draft only allowed in Trash\n\t\t\t\t(folder.id === FOLDERS.DRAFTS && data.data.parentFolderId !== FOLDERS.TRASH) || // only from Trash can move in Draft\n\t\t\t\t(folder.isLink && folder.perm?.indexOf('w') === -1) || // only if shared folder have write permission\n\t\t\t\tfolder.id === FOLDERS.USER_ROOT ||\n\t\t\t\tfolder.oname === ROOT_NAME\n\t\t\t) {\n\t\t\t\treturn { success: false };\n\t\t\t}\n\t\t}\n\t\tif (data.type === 'folder') {\n\t\t\tif (\n\t\t\t\tfolder.id === data.data.id || // same folder not allowed\n\t\t\t\tfolder.isLink || //  shared folder not allowed\n\t\t\t\t[FOLDERS.DRAFTS, FOLDERS.SPAM].includes(folder.id) // cannot be moved inside Draft and Spam\n\t\t\t)\n\t\t\t\treturn { success: false };\n\t\t}\n\t\treturn undefined;\n\t};\n\n\tconst onDropAction = (data: OnDropActionProps): void => {\n\t\tconst dragEnterResponse = onDragEnterAction(data);\n\t\tif (dragEnterResponse && dragEnterResponse?.success === false) return;\n\t\tlet convMsgsIds = [data.data.id];\n\t\tif (\n\t\t\tdata.type !== 'folder' &&\n\t\t\tdata.data?.selectedIDs?.length &&\n\t\t\tdata.data?.selectedIDs.includes(data.data.id)\n\t\t) {\n\t\t\tconvMsgsIds = data.data?.selectedIDs;\n\t\t}\n\n\t\tif (data.type === 'folder') {\n\t\t\tdispatch(folderAction({ folder: data.data, l: folder.id || FOLDERS.USER_ROOT, op: 'move' }))\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t\t// @ts-ignore\n\t\t\t\t.then((res) => {\n\t\t\t\t\tif (res.type.includes('fulfilled')) {\n\t\t\t\t\t\tgetBridgedFunctions().createSnackbar({\n\t\t\t\t\t\t\tkey: `move`,\n\t\t\t\t\t\t\treplace: true,\n\t\t\t\t\t\t\ttype: 'success',\n\t\t\t\t\t\t\tlabel: t('messages.snackbar.folder_moved', 'Folder successfully moved'),\n\t\t\t\t\t\t\tautoHideTimeout: 3000\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tgetBridgedFunctions().createSnackbar({\n\t\t\t\t\t\t\tkey: `move`,\n\t\t\t\t\t\t\treplace: true,\n\t\t\t\t\t\t\ttype: 'error',\n\t\t\t\t\t\t\tlabel: t('label.error_try_again', 'Something went wrong, please try again.'),\n\t\t\t\t\t\t\tautoHideTimeout: 3000\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t} else if (data.type === 'conversation') {\n\t\t\tdispatch(\n\t\t\t\tconvAction({\n\t\t\t\t\toperation: `move`,\n\t\t\t\t\tids: convMsgsIds,\n\t\t\t\t\tparent: folder.id\n\t\t\t\t})\n\t\t\t)\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t\t// @ts-ignore\n\t\t\t\t.then((res) => {\n\t\t\t\t\tif (res.type.includes('fulfilled')) {\n\t\t\t\t\t\treplaceHistory(`/folder/${folderId}`);\n\t\t\t\t\t\tgetBridgedFunctions().createSnackbar({\n\t\t\t\t\t\t\tkey: `edit`,\n\t\t\t\t\t\t\treplace: true,\n\t\t\t\t\t\t\ttype: 'info',\n\t\t\t\t\t\t\tlabel: t('messages.snackbar.conversation_move', 'Conversation successfully moved'),\n\t\t\t\t\t\t\tautoHideTimeout: 3000,\n\t\t\t\t\t\t\tactionLabel: t('action.goto_folder', 'GO TO FOLDER'),\n\t\t\t\t\t\t\tonActionClick: () => {\n\t\t\t\t\t\t\t\treplaceHistory(`/folder/${folder.id}`);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tgetBridgedFunctions().createSnackbar({\n\t\t\t\t\t\t\tkey: `edit`,\n\t\t\t\t\t\t\treplace: true,\n\t\t\t\t\t\t\ttype: 'error',\n\t\t\t\t\t\t\tlabel: t('label.error_try_again', 'Something went wrong, please try again'),\n\t\t\t\t\t\t\tautoHideTimeout: 3000,\n\t\t\t\t\t\t\thideButton: true\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t} else {\n\t\t\tdispatch(\n\t\t\t\tmsgAction({\n\t\t\t\t\toperation: `move`,\n\t\t\t\t\tids: convMsgsIds,\n\t\t\t\t\tparent: folder.id\n\t\t\t\t})\n\t\t\t)\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t\t// @ts-ignore\n\t\t\t\t.then((res) => {\n\t\t\t\t\tif (res.type.includes('fulfilled')) {\n\t\t\t\t\t\tgetBridgedFunctions().createSnackbar({\n\t\t\t\t\t\t\tkey: `edit`,\n\t\t\t\t\t\t\treplace: true,\n\t\t\t\t\t\t\ttype: 'info',\n\t\t\t\t\t\t\tlabel: t('messages.snackbar.message_move', 'Message successfully moved'),\n\t\t\t\t\t\t\tautoHideTimeout: 3000,\n\t\t\t\t\t\t\tactionLabel: t('action.goto_folder', 'GO TO FOLDER'),\n\t\t\t\t\t\t\tonActionClick: () => {\n\t\t\t\t\t\t\t\treplaceHistory(`/folder/${folder.id}`);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tgetBridgedFunctions().createSnackbar({\n\t\t\t\t\t\t\tkey: `edit`,\n\t\t\t\t\t\t\treplace: true,\n\t\t\t\t\t\t\ttype: 'error',\n\t\t\t\t\t\t\tlabel: t('label.error_try_again', 'Something went wrong, please try again'),\n\t\t\t\t\t\t\tautoHideTimeout: 3000,\n\t\t\t\t\t\t\thideButton: true\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t}\n\t};\n\n\tconst dragFolderDisable = useMemo(\n\t\t() =>\n\t\t\t[FOLDERS.INBOX, FOLDERS.TRASH, FOLDERS.SPAM, FOLDERS.SENT, FOLDERS.DRAFTS].includes(\n\t\t\t\tfolder.id\n\t\t\t) || folder.isLink, // Default folders and shared folders not allowed to drag\n\t\t[folder.id, folder.isLink]\n\t);\n\tconst { zimbraPrefGroupMailBy } = useUserSettings().prefs;\n\n\t/* NOTE: Need to comment out when need to sort as per the configured sort order */\n\t// const { zimbraPrefSortOrder, zimbraPrefGroupMailBy } = useUserSettings().prefs;\n\t// const sorting = useMemo(() => {\n\t// \tif (typeof zimbraPrefSortOrder === 'string') {\n\t// \t\treturn (\n\t// \t\t\tfind(zimbraPrefSortOrder?.split(','), (f) => f?.split(':')?.[0] === folder.id)?.split(\n\t// \t\t\t\t':'\n\t// \t\t\t)?.[1] ?? 'dateDesc'\n\t// \t\t);\n\t// \t}\n\t// \treturn 'dateDesc';\n\t// }, [zimbraPrefSortOrder, folder.id]) as 'dateDesc' | 'dateAsc';\n\n\tconst onClick = useCallback((): void => {\n\t\tpushHistory(`/folder/${folder.id}`);\n\t\tdispatch(\n\t\t\tsearch({\n\t\t\t\tfolderId: folder.id,\n\t\t\t\tlimit: 101,\n\t\t\t\tsortBy: 'dateDesc',\n\t\t\t\t// folder.id === FOLDERS.DRAFTS ? 'message' : zimbraPrefGroupMailBy\n\t\t\t\ttypes:\n\t\t\t\t\tfolder.id === FOLDERS.DRAFTS || typeof zimbraPrefGroupMailBy !== 'string'\n\t\t\t\t\t\t? 'message'\n\t\t\t\t\t\t: zimbraPrefGroupMailBy\n\t\t\t})\n\t\t);\n\t}, [dispatch, folder.id, zimbraPrefGroupMailBy]);\n\n\tconst accordionItem = useMemo(\n\t\t() => ({\n\t\t\t...item,\n\t\t\tlabel:\n\t\t\t\titem.id === FOLDERS.USER_ROOT\n\t\t\t\t\t? accountName\n\t\t\t\t\t: getFolderTranslatedName({ t, folderId: item.id, folderName: item.label }),\n\t\t\ticon: getFolderIconName(item),\n\t\t\ticonColor: getFolderIconColor(item),\n\t\t\t// open: openIds ? openIds.includes(folder.id) : false,\n\t\t\tbadgeCounter: badgeCount(item.id === FOLDERS.DRAFTS ? item?.folder.n : item?.folder?.u),\n\t\t\tbadgeType: item.id === FOLDERS.DRAFTS ? 'read' : 'unread',\n\t\t\tto: `/folder/${item.id}`,\n\t\t\ttextProps: { size: 'small' }\n\t\t}),\n\t\t[item, accountName, t]\n\t);\n\n\tconst dropdownItems = useFolderActions(item);\n\n\tconst statusIcon = useMemo(() => {\n\t\tconst RowWithIcon = (icon: string, color: string, tooltipText: string): JSX.Element => (\n\t\t\t<Padding left=\"small\">\n\t\t\t\t<Tooltip placement=\"right\" label={tooltipText}>\n\t\t\t\t\t<Row>\n\t\t\t\t\t\t<Icon icon={icon} color={color} size=\"medium\" />\n\t\t\t\t\t</Row>\n\t\t\t\t</Tooltip>\n\t\t\t</Padding>\n\t\t);\n\n\t\tif (folder.acl?.grant) {\n\t\t\tconst tooltipText = t('tooltip.folder_sharing_status', {\n\t\t\t\tcount: folder.acl.grant.length,\n\t\t\t\tdefaultValue_one: 'Shared with {{count}} person',\n\t\t\t\tdefaultValue: 'Shared with {{count}} people'\n\t\t\t});\n\t\t\treturn RowWithIcon('Shared', 'shared', tooltipText);\n\t\t}\n\t\tif (folder.isLink) {\n\t\t\tconst tooltipText = t('tooltip.folder_linked_status', 'Linked to me');\n\t\t\treturn RowWithIcon('Linked', 'linked', tooltipText);\n\t\t}\n\t\treturn '';\n\t}, [folder, t]);\n\n\t// hide folders where a share was provided and subsequently removed\n\tif (folder.broken) {\n\t\treturn <></>;\n\t}\n\n\treturn folder.id === FOLDERS.USER_ROOT || folder.oname === ROOT_NAME ? (\n\t\t<FittedRow>\n\t\t\t<Padding horizontal=\"small\">\n\t\t\t\t<Avatar label={accordionItem.label} colorLabel={accordionItem.iconColor} size=\"medium\" />\n\t\t\t</Padding>\n\t\t\t<Tooltip label={accordionItem.label} placement=\"right\" maxWidth=\"100%\">\n\t\t\t\t<AccordionItem item={accordionItem} />\n\t\t\t</Tooltip>\n\t\t</FittedRow>\n\t) : (\n\t\t<Drop\n\t\t\tacceptType={['message', 'conversation', 'folder']}\n\t\t\tonDrop={(data: OnDropActionProps): void => onDropAction(data)}\n\t\t\tonDragEnter={(data: OnDropActionProps): unknown => onDragEnterAction(data)}\n\t\t\toverlayAcceptComponent={<DropOverlayContainer folder={folder} />}\n\t\t\toverlayDenyComponent={<DropDenyOverlayContainer folder={folder} />}\n\t\t>\n\t\t\t<Drag\n\t\t\t\ttype=\"folder\"\n\t\t\t\tdata={folder}\n\t\t\t\tdragDisabled={dragFolderDisable}\n\t\t\t\tstyle={{ display: 'block' }}\n\t\t\t>\n\t\t\t\t<AppLink\n\t\t\t\t\tonClick={onClick}\n\t\t\t\t\tto={`/folder/${folder.id}`}\n\t\t\t\t\tstyle={{ width: '100%', height: '100%', textDecoration: 'none' }}\n\t\t\t\t>\n\t\t\t\t\t<Dropdown contextMenu items={dropdownItems} display=\"block\" width=\"100%\">\n\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t<Padding left=\"small\" />\n\t\t\t\t\t\t\t<Tooltip label={accordionItem.label} placement=\"right\" maxWidth=\"100%\">\n\t\t\t\t\t\t\t\t<AccordionItem item={accordionItem}>{statusIcon}</AccordionItem>\n\t\t\t\t\t\t\t</Tooltip>\n\t\t\t\t\t\t</Row>\n\t\t\t\t\t</Dropdown>\n\t\t\t\t</AppLink>\n\t\t\t</Drag>\n\t\t</Drop>\n\t);\n};\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/views/sidebar/accordion-custom-component.tsx b/src/views/sidebar/accordion-custom-component.tsx
+--- a/src/views/sidebar/accordion-custom-component.tsx	(revision 4adaba21c8889cfd3cf44adf6271b75e82f59433)
++++ b/src/views/sidebar/accordion-custom-component.tsx	(date 1661734947131)
+@@ -3,57 +3,48 @@
+  *
+  * SPDX-License-Identifier: AGPL-3.0-only
+  */
+-import React, { FC, useCallback, useContext, useMemo, useState } from 'react';
++import {
++	AccordionItem,
++	Avatar,
++	Container,
++	Drag,
++	Drop,
++	Dropdown,
++	Icon,
++	Padding,
++	Row,
++	Tooltip
++} from '@zextras/carbonio-design-system';
+ import {
+ 	AppLink,
++	Folder,
+ 	FOLDERS,
++	getBridgedFunctions,
++	pushHistory,
++	replaceHistory,
+ 	// eslint-disable-next-line @typescript-eslint/ban-ts-comment
+ 	// @ts-ignore
+ 	ROOT_NAME,
+-	replaceHistory,
+-	useUserSettings,
+-	getBridgedFunctions,
+ 	useUserAccount,
+-	pushHistory,
+-	AccordionFolder
++	useUserSettings
+ } from '@zextras/carbonio-shell-ui';
+-import styled from 'styled-components';
+-import {
+-	AccordionItem,
+-	Dropdown,
+-	Drag,
+-	Drop,
+-	Container,
+-	Tooltip,
+-	Avatar,
+-	Icon,
+-	Row,
+-	Padding,
+-	ModalManagerContext
+-} from '@zextras/carbonio-design-system';
+-import { find, startsWith } from 'lodash';
++import React, { FC, useCallback, useMemo } from 'react';
+ import { useTranslation } from 'react-i18next';
+ import { useDispatch } from 'react-redux';
+ import { useParams } from 'react-router-dom';
++import styled from 'styled-components';
+ import { convAction, msgAction, search } from '../../store/actions';
+ import { folderAction } from '../../store/actions/folder-action';
+-import { getFolderIconColor, getFolderIconName, getFolderTranslatedName } from './utils';
+-import { NewModal } from './new-modal';
+-import { MoveModal } from './move-modal';
+-import { EmptyModal } from './empty-modal';
+-import { DeleteModal } from './delete-modal';
+-import { EditModal } from './edit-modal';
+-import { SharesInfoModal } from './shares-info-modal';
+-import ShareFolderModal from './share-folder-modal';
+-import { FolderActionsType } from '../../commons/utils';
+ import { DataProps } from '../../types';
++import { useFolderActions } from './use-folder-actions';
++import { getFolderIconColor, getFolderIconName, getFolderTranslatedName } from './utils';
+ 
+ const FittedRow = styled(Row)`
+ 	max-width: calc(100% - (2 * ${({ theme }): string => theme.sizes.padding.small}));
+ 	height: 48px;
+ `;
+ 
+-const DropOverlayContainer = styled(Container)`
++export const DropOverlayContainer = styled(Container)`
+ 	position: absolute;
+ 	width: calc(248px - ${(props): number => (props.folder.level - 2) * 16}px);
+ 	height: 100%;
+@@ -62,8 +53,7 @@
+ 	border: 4px solid #d5e3f6;
+ 	opacity: 0.4;
+ `;
+-
+-const DropDenyOverlayContainer = styled(Container)`
++export const DropDenyOverlayContainer = styled(Container)`
+ 	position: absolute;
+ 	width: calc(248px - ${(props): number => (props.folder.level - 2) * 16}px);
+ 	height: 100%;
+@@ -72,304 +62,52 @@
+ 	border: 4px solid #d5e3f6;
+ 	opacity: 0.4;
+ `;
+-
+-type FolderActionsProps = {
+-	id: string;
+-	icon: string;
+-	label: string;
+-	click: (e: MouseEvent) => void;
+-	disabled?: boolean;
+-};
+-
+-const useFolderActions = (folder: AccordionFolder): Array<FolderActionsProps> => {
+-	const [t] = useTranslation();
+-	const dispatch = useDispatch();
+-	// eslint-disable-next-line @typescript-eslint/ban-types
+-	const createModal = useContext(ModalManagerContext) as Function;
+-	const [activeModal, setActiveModal] = useState('default');
+-	const [activeGrant, setActiveGrant] = useState({});
+-	const goBack = useCallback(() => {
+-		setActiveModal('default');
+-	}, [setActiveModal]);
+-
+-	const actions = useMemo(
+-		() => [
+-			{
+-				id: FolderActionsType.NEW,
+-				icon: 'FolderAddOutline',
+-				label: t('label.new_folder', 'New Folder'),
+-				click: (e: MouseEvent): void => {
+-					if (e) {
+-						e.stopPropagation();
+-					}
+-					const closeModal = createModal(
+-						{
+-							maxHeight: '90vh',
+-							children: (
+-								<>
+-									<NewModal folder={folder} onClose={(): void => closeModal()} />
+-								</>
+-							)
+-						},
+-						true
+-					);
+-				}
+-			},
+-			{
+-				id: FolderActionsType.MOVE,
+-				icon: 'MoveOutline',
+-				label: startsWith(folder.folder?.absFolderPath, '/Trash')
+-					? t('label.restore', 'Restore')
+-					: t('label.move', 'Move'),
+-				click: (e: MouseEvent): void => {
+-					if (e) {
+-						e.stopPropagation();
+-					}
+-					const closeModal = createModal(
+-						{
+-							maxHeight: '90vh',
+-							children: (
+-								<>
+-									<MoveModal folder={folder} onClose={(): void => closeModal()} />
+-								</>
+-							)
+-						},
+-						true
+-					);
+-				}
+-			},
+-			{
+-				id: FolderActionsType.EMPTY,
+-				icon: folder.id === FOLDERS.TRASH ? 'DeletePermanentlyOutline' : 'EmptyFolderOutline',
+-				label:
+-					folder.id === FOLDERS.TRASH
+-						? t('folder_panel.action.empty.trash', 'Empty Trash')
+-						: t('folder_panel.action.wipe.folder_panel', 'Wipe Folder'),
+-				disabled: folder.folder?.n === 0 && folder.folder?.children?.length === 0,
+-				click: (e: MouseEvent): void => {
+-					if (e) {
+-						e.stopPropagation();
+-					}
+-					const closeModal = createModal(
+-						{
+-							children: (
+-								<>
+-									<EmptyModal onClose={(): void => closeModal()} folder={folder} />
+-								</>
+-							)
+-						},
+-						true
+-					);
+-				}
+-			},
+-			{
+-				id: FolderActionsType.EDIT,
+-				icon: 'Edit2Outline',
+-				label: folder?.folder?.isLink
+-					? t('folder_panel.action.edit_properties', 'Edit Properties')
+-					: t('label.edit', 'Edit'),
+-				click: (e: MouseEvent): void => {
+-					if (e) {
+-						e.stopPropagation();
+-					}
+-					const closeModal = createModal(
+-						{
+-							maxHeight: '90vh',
+-							children: (
+-								<>
+-									<EditModal onClose={(): void => closeModal()} folder={folder} />
+-								</>
+-							)
+-						},
+-						true
+-					);
+-				}
+-			},
+-			{
+-				id: FolderActionsType.DELETE,
+-				icon: 'Trash2Outline',
+-				label: startsWith(folder.folder?.absFolderPath, '/Trash')
+-					? t('label.delete_permanently', 'Delete Permanently')
+-					: t('label.delete', 'Delete'),
+-				click: (e: MouseEvent): void => {
+-					if (e) {
+-						e.stopPropagation();
+-					}
+-					const closeModal = createModal(
+-						{
+-							children: (
+-								<>
+-									<DeleteModal onClose={(): void => closeModal()} folder={folder} />
+-								</>
+-							)
+-						},
+-						true
+-					);
+-				}
+-			},
+-			{
+-				id: FolderActionsType.SHARE,
+-				icon: 'ShareOutline',
+-				label: t('action.share_folder', 'Share folder'),
+-				click: (e: MouseEvent): void => {
+-					if (e) {
+-						e.stopPropagation();
+-					}
+-					const closeModal = createModal(
+-						{
+-							children: (
+-								<>
+-									<ShareFolderModal
+-										onClose={(): void => closeModal()}
+-										folder={folder}
+-										activeGrant={activeGrant}
+-										goBack={goBack}
+-									/>
+-								</>
+-							)
+-						},
+-						true
+-					);
+-				}
+-			},
+-			{
+-				id: FolderActionsType.REMOVE_FROM_LIST,
+-				icon: 'CloseOutline',
+-				label: t('label.remove_from_this_list', 'Remove from this list'),
+-				click: (e): void => {
+-					if (e) {
+-						e.stopPropagation();
+-						dispatch(folderAction({ folder: folder.folder, op: 'delete' }));
+-					}
+-				}
+-			},
+-			{
+-				id: FolderActionsType.SHARES_INFO,
+-				icon: 'InfoOutline',
+-				label: t('label.shares_info', `Shared folder's info`),
+-				click: (e): void => {
+-					if (e) {
+-						e.stopPropagation();
+-					}
+-					const closeModal = createModal(
+-						{
+-							children: (
+-								<>
+-									<SharesInfoModal onClose={(): void => closeModal()} folder={folder.folder} />
+-								</>
+-							)
+-						},
+-						true
+-					);
+-				}
+-			}
+-		],
+-		[activeGrant, createModal, dispatch, folder, goBack, t]
+-	);
+-
+-	const defaultFolderActions = useMemo(
+-		() =>
+-			actions.filter(
+-				(action) =>
+-					action.id !== FolderActionsType.SHARES_INFO &&
+-					action.id !== FolderActionsType.REMOVE_FROM_LIST
+-			),
+-		[actions]
+-	);
+-	const id =
+-		folder.id.indexOf(':') !== -1 ? folder.id.slice(folder.id.indexOf(':') + 1) : folder.id;
+-	switch (id) {
+-		// default folders
+-		case FOLDERS.INBOX:
+-		case FOLDERS.SENT:
+-		case FOLDERS.DRAFTS:
+-			return defaultFolderActions.map((action) =>
+-				action.id === FolderActionsType.MOVE || action.id === FolderActionsType.DELETE
+-					? { ...action, disabled: true }
+-					: action
+-			);
+-
+-		case FOLDERS.SPAM:
+-			return defaultFolderActions.map((action) =>
+-				action.id === FolderActionsType.NEW ||
+-				action.id === FolderActionsType.MOVE ||
+-				action.id === FolderActionsType.DELETE
+-					? { ...action, disabled: true }
+-					: action
+-			);
+-		case FOLDERS.TRASH:
+-			return defaultFolderActions.map((action) =>
+-				action.id === FolderActionsType.MOVE ||
+-				action.id === FolderActionsType.DELETE ||
+-				action.id === FolderActionsType.EDIT ||
+-				action.id === FolderActionsType.SHARE
+-					? { ...action, disabled: true }
+-					: action
+-			);
+-		// customizable folders
+-		default:
+-			return folder.folder?.isLink
+-				? actions.filter(
+-						(action) =>
+-							action.id === FolderActionsType.SHARES_INFO ||
+-							action.id === FolderActionsType.REMOVE_FROM_LIST ||
+-							action.id === FolderActionsType.EDIT
+-				  )
+-				: defaultFolderActions.map((action) => {
+-						if (
+-							startsWith(folder.folder?.absFolderPath, '/Trash') &&
+-							(action.id === FolderActionsType.NEW || action.id === FolderActionsType.EDIT)
+-						) {
+-							return { ...action, disabled: true };
+-						}
+-						return action;
+-				  });
+-	}
+-};
+-
+-type DragEnterAction =
++export type DragEnterAction =
+ 	| undefined
+ 	| {
+ 			success: false;
+ 	  };
+-
+-type OnDropActionProps = {
++export type OnDropActionProps = {
+ 	type: string;
+ 	data: DataProps;
+ };
+ 
+ const badgeCount = (v?: number): number | undefined => (v && v > 0 ? v : undefined);
+-export const AccordionCustomComponent: FC<{ item: AccordionFolder }> = ({ item }) => {
+-	const { folder } = item;
++
++const AccordionCustomComponentRaw: FC<{ item: Folder }> = ({ item }) => {
++	console.count('@@AccordionCustomComponent');
+ 	const accountName = useUserAccount().name;
+ 	const [t] = useTranslation();
+ 	const dispatch = useDispatch();
+ 	const { folderId } = useParams<{ folderId: string }>();
+ 
+-	const onDragEnterAction = (data: OnDropActionProps): DragEnterAction => {
+-		if (data.type === 'conversation' || data.type === 'message') {
+-			if (
+-				data.data.parentFolderId === folder.id || // same folder not allowed
+-				(data.data.parentFolderId === FOLDERS.INBOX && [5, 6].includes(Number(folder.id))) || // from inbox not allowed in draft and sent
+-				(data.data.parentFolderId === FOLDERS.DRAFTS && ![3].includes(Number(folder.id))) || // from draft only allowed in Trash
+-				(folder.id === FOLDERS.DRAFTS && data.data.parentFolderId !== FOLDERS.TRASH) || // only from Trash can move in Draft
+-				(folder.isLink && folder.perm?.indexOf('w') === -1) || // only if shared folder have write permission
+-				folder.id === FOLDERS.USER_ROOT ||
+-				folder.oname === ROOT_NAME
+-			) {
+-				return { success: false };
+-			}
+-		}
+-		if (data.type === 'folder') {
+-			if (
+-				folder.id === data.data.id || // same folder not allowed
+-				folder.isLink || //  shared folder not allowed
+-				[FOLDERS.DRAFTS, FOLDERS.SPAM].includes(folder.id) // cannot be moved inside Draft and Spam
+-			)
+-				return { success: false };
+-		}
+-		return undefined;
+-	};
++	const onDragEnterAction = useCallback(
++		(data: OnDropActionProps): DragEnterAction => {
++			if (data.type === 'conversation' || data.type === 'message') {
++				if (
++					data.data.parentFolderId === item.id || // same folder not allowed
++					(data.data.parentFolderId === FOLDERS.INBOX && [5, 6].includes(Number(item.id))) || // from inbox not allowed in draft and sent
++					(data.data.parentFolderId === FOLDERS.DRAFTS && ![3].includes(Number(item.id))) || // from draft only allowed in Trash
++					(item.id === FOLDERS.DRAFTS && data.data.parentFolderId !== FOLDERS.TRASH) || // only from Trash can move in Draft
++					(item.isLink && item.perm?.indexOf('w') === -1) || // only if shared folder have write permission
++					item.id === FOLDERS.USER_ROOT ||
++					(item.isLink && item.oname === ROOT_NAME)
++				) {
++					return { success: false };
++				}
++			}
++			if (data.type === 'folder') {
++				if (
++					item.id === data.data.id || // same folder not allowed
++					item.isLink || //  shared folder not allowed
++					[FOLDERS.DRAFTS, FOLDERS.SPAM].includes(item.id) // cannot be moved inside Draft and Spam
++				)
++					return { success: false };
++			}
++			return undefined;
++		},
++		[item]
++	);
+ 
+ 	const onDropAction = (data: OnDropActionProps): void => {
+ 		const dragEnterResponse = onDragEnterAction(data);
+@@ -384,7 +122,7 @@
+ 		}
+ 
+ 		if (data.type === 'folder') {
+-			dispatch(folderAction({ folder: data.data, l: folder.id || FOLDERS.USER_ROOT, op: 'move' }))
++			dispatch(folderAction({ folder: data.data, l: item.id || FOLDERS.USER_ROOT, op: 'move' }))
+ 				// eslint-disable-next-line @typescript-eslint/ban-ts-comment
+ 				// @ts-ignore
+ 				.then((res) => {
+@@ -411,7 +149,7 @@
+ 				convAction({
+ 					operation: `move`,
+ 					ids: convMsgsIds,
+-					parent: folder.id
++					parent: item.id
+ 				})
+ 			)
+ 				// eslint-disable-next-line @typescript-eslint/ban-ts-comment
+@@ -427,7 +165,7 @@
+ 							autoHideTimeout: 3000,
+ 							actionLabel: t('action.goto_folder', 'GO TO FOLDER'),
+ 							onActionClick: () => {
+-								replaceHistory(`/folder/${folder.id}`);
++								replaceHistory(`/folder/${item.id}`);
+ 							}
+ 						});
+ 					} else {
+@@ -446,7 +184,7 @@
+ 				msgAction({
+ 					operation: `move`,
+ 					ids: convMsgsIds,
+-					parent: folder.id
++					parent: item.id
+ 				})
+ 			)
+ 				// eslint-disable-next-line @typescript-eslint/ban-ts-comment
+@@ -461,7 +199,7 @@
+ 							autoHideTimeout: 3000,
+ 							actionLabel: t('action.goto_folder', 'GO TO FOLDER'),
+ 							onActionClick: () => {
+-								replaceHistory(`/folder/${folder.id}`);
++								replaceHistory(`/folder/${item.id}`);
+ 							}
+ 						});
+ 					} else {
+@@ -481,9 +219,9 @@
+ 	const dragFolderDisable = useMemo(
+ 		() =>
+ 			[FOLDERS.INBOX, FOLDERS.TRASH, FOLDERS.SPAM, FOLDERS.SENT, FOLDERS.DRAFTS].includes(
+-				folder.id
+-			) || folder.isLink, // Default folders and shared folders not allowed to drag
+-		[folder.id, folder.isLink]
++				item.id
++			) || item.isLink, // Default folders and shared folders not allowed to drag
++		[item.id, item.isLink]
+ 	);
+ 	const { zimbraPrefGroupMailBy } = useUserSettings().prefs;
+ 
+@@ -501,20 +239,20 @@
+ 	// }, [zimbraPrefSortOrder, folder.id]) as 'dateDesc' | 'dateAsc';
+ 
+ 	const onClick = useCallback((): void => {
+-		pushHistory(`/folder/${folder.id}`);
++		pushHistory(`/folder/${item.id}`);
+ 		dispatch(
+ 			search({
+-				folderId: folder.id,
++				folderId: item.id,
+ 				limit: 101,
+ 				sortBy: 'dateDesc',
+ 				// folder.id === FOLDERS.DRAFTS ? 'message' : zimbraPrefGroupMailBy
+ 				types:
+-					folder.id === FOLDERS.DRAFTS || typeof zimbraPrefGroupMailBy !== 'string'
++					item.id === FOLDERS.DRAFTS || typeof zimbraPrefGroupMailBy !== 'string'
+ 						? 'message'
+ 						: zimbraPrefGroupMailBy
+ 			})
+ 		);
+-	}, [dispatch, folder.id, zimbraPrefGroupMailBy]);
++	}, [dispatch, item.id, zimbraPrefGroupMailBy]);
+ 
+ 	const accordionItem = useMemo(
+ 		() => ({
+@@ -522,11 +260,11 @@
+ 			label:
+ 				item.id === FOLDERS.USER_ROOT
+ 					? accountName
+-					: getFolderTranslatedName({ t, folderId: item.id, folderName: item.label }),
++					: getFolderTranslatedName({ t, folderId: item.id, folderName: item.name }),
+ 			icon: getFolderIconName(item),
+ 			iconColor: getFolderIconColor(item),
+ 			// open: openIds ? openIds.includes(folder.id) : false,
+-			badgeCounter: badgeCount(item.id === FOLDERS.DRAFTS ? item?.folder.n : item?.folder?.u),
++			badgeCounter: badgeCount(item.id === FOLDERS.DRAFTS ? item?.n : item?.u),
+ 			badgeType: item.id === FOLDERS.DRAFTS ? 'read' : 'unread',
+ 			to: `/folder/${item.id}`,
+ 			textProps: { size: 'small' }
+@@ -547,27 +285,27 @@
+ 			</Padding>
+ 		);
+ 
+-		if (folder.acl?.grant) {
++		if (item.acl?.grant) {
+ 			const tooltipText = t('tooltip.folder_sharing_status', {
+-				count: folder.acl.grant.length,
++				count: item.acl.grant.length,
+ 				defaultValue_one: 'Shared with {{count}} person',
+ 				defaultValue: 'Shared with {{count}} people'
+ 			});
+ 			return RowWithIcon('Shared', 'shared', tooltipText);
+ 		}
+-		if (folder.isLink) {
++		if (item.isLink) {
+ 			const tooltipText = t('tooltip.folder_linked_status', 'Linked to me');
+ 			return RowWithIcon('Linked', 'linked', tooltipText);
+ 		}
+ 		return '';
+-	}, [folder, t]);
++	}, [item, t]);
+ 
+ 	// hide folders where a share was provided and subsequently removed
+-	if (folder.broken) {
++	if (item.isLink && item.broken) {
+ 		return <></>;
+ 	}
+ 
+-	return folder.id === FOLDERS.USER_ROOT || folder.oname === ROOT_NAME ? (
++	return item.id === FOLDERS.USER_ROOT || (item.isLink && item.oname === ROOT_NAME) ? (
+ 		<FittedRow>
+ 			<Padding horizontal="small">
+ 				<Avatar label={accordionItem.label} colorLabel={accordionItem.iconColor} size="medium" />
+@@ -581,18 +319,13 @@
+ 			acceptType={['message', 'conversation', 'folder']}
+ 			onDrop={(data: OnDropActionProps): void => onDropAction(data)}
+ 			onDragEnter={(data: OnDropActionProps): unknown => onDragEnterAction(data)}
+-			overlayAcceptComponent={<DropOverlayContainer folder={folder} />}
+-			overlayDenyComponent={<DropDenyOverlayContainer folder={folder} />}
++			overlayAcceptComponent={<DropOverlayContainer folder={item} />}
++			overlayDenyComponent={<DropDenyOverlayContainer folder={item} />}
+ 		>
+-			<Drag
+-				type="folder"
+-				data={folder}
+-				dragDisabled={dragFolderDisable}
+-				style={{ display: 'block' }}
+-			>
++			<Drag type="folder" data={item} dragDisabled={dragFolderDisable} style={{ display: 'block' }}>
+ 				<AppLink
+ 					onClick={onClick}
+-					to={`/folder/${folder.id}`}
++					to={`/folder/${item.id}`}
+ 					style={{ width: '100%', height: '100%', textDecoration: 'none' }}
+ 				>
+ 					<Dropdown contextMenu items={dropdownItems} display="block" width="100%">
+@@ -608,3 +341,7 @@
+ 		</Drop>
+ 	);
+ };
++
++const AccordionCustomComponent = React.memo(AccordionCustomComponentRaw);
++
++export default AccordionCustomComponent;
+Index: src/views/sidebar/share-folder-modal.tsx
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport React, { ChangeEvent, FC, useCallback, useContext, useMemo, useState } from 'react';\nimport {\n\tContainer,\n\tInput,\n\tSelect,\n\tText,\n\tCheckbox,\n\tRow,\n\tChipInput,\n\tPadding,\n\tSnackbarManagerContext\n} from '@zextras/carbonio-design-system';\nimport { useIntegratedComponent, useUserAccounts } from '@zextras/carbonio-shell-ui';\nimport { map, replace, split } from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { useDispatch } from 'react-redux';\nimport {\n\tShareCalendarWithOptions,\n\tfindLabel,\n\tShareCalendarRoleOptions\n} from '../../integrations/shared-invite-reply/parts/utils';\nimport { shareFolder } from '../../store/actions/share-folder';\nimport { sendShareNotification } from '../../store/actions/send-share-notification';\nimport ModalFooter from './commons/modal-footer';\nimport { ModalHeader } from './commons/modal-header';\nimport { capitalise } from './utils';\nimport { GranteeInfo } from './parts/edit/share-folder-properties';\nimport { ModalProps } from '../../types';\n\ntype ShareFolderModalProps = ModalProps & {\n\tgoBack: () => void;\n\teditMode?: boolean;\n\tactiveGrant: Partial<{ perm: string; d: string }>;\n};\n\nconst ShareFolderModal: FC<ShareFolderModalProps> = ({\n\tonClose,\n\tfolder,\n\tgoBack,\n\teditMode = false,\n\tactiveGrant\n}) => {\n\tconst [t] = useTranslation();\n\t// eslint-disable-next-line @typescript-eslint/ban-types\n\tconst dispatch = useDispatch() as Function;\n\t// eslint-disable-next-line @typescript-eslint/ban-types\n\tconst createSnackbar = useContext(SnackbarManagerContext) as Function;\n\tconst [ContactInput, integrationAvailable] = useIntegratedComponent('contact-input');\n\tconst shareCalendarWithOptions = useMemo(() => ShareCalendarWithOptions(t), [t]);\n\tconst shareCalendarRoleOptions = useMemo(() => ShareCalendarRoleOptions(t), [t]);\n\tconst [sendNotification, setSendNotification] = useState(false);\n\tconst [standardMessage, setStandardMessage] = useState('');\n\tconst [contacts, setContacts] = useState<any>([]);\n\tconst [shareWithUserType, setshareWithUserType] = useState('usr');\n\tconst [shareWithUserRole, setshareWithUserRole] = useState(editMode ? activeGrant.perm : 'r');\n\tconst userName = useMemo(() => replace(split(activeGrant?.d, '@')?.[0], '.', ' '), [activeGrant]);\n\tconst userNameCapitalise = useMemo(() => capitalise(userName), [userName]);\n\n\tconst accounts = useUserAccounts();\n\n\tconst title = useMemo(\n\t\t() =>\n\t\t\teditMode\n\t\t\t\t? `${t('label.edit_access', {\n\t\t\t\t\t\tname: userNameCapitalise,\n\t\t\t\t\t\tdefaultValue: \"Edit {{name}}'s access\"\n\t\t\t\t  })} `\n\t\t\t\t: `${t('label.share', 'Share')} ${folder.folder.name}`,\n\t\t[t, folder, editMode, userNameCapitalise]\n\t);\n\n\tconst onShareWithChange = useCallback((shareWith) => {\n\t\tsetshareWithUserType(shareWith);\n\t}, []);\n\n\tconst onShareRoleChange = useCallback((shareRole) => {\n\t\tsetshareWithUserRole(shareRole);\n\t}, []);\n\n\tconst onConfirm = useCallback(() => {\n\t\tdispatch(\n\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t// @ts-ignore\n\t\t\tshareFolder({\n\t\t\t\tsendNotification,\n\t\t\t\tstandardMessage,\n\t\t\t\tcontacts: editMode ? [{ email: activeGrant.d }] : contacts,\n\t\t\t\tshareWithUserType,\n\t\t\t\tshareWithUserRole,\n\t\t\t\tfolder: folder.folder,\n\t\t\t\taccounts\n\t\t\t})\n\t\t).then((res: { type: string }) => {\n\t\t\tif (res.type.includes('fulfilled')) {\n\t\t\t\tcreateSnackbar({\n\t\t\t\t\tkey: `share-${folder.id}`,\n\t\t\t\t\treplace: true,\n\t\t\t\t\thideButton: true,\n\t\t\t\t\ttype: 'info',\n\t\t\t\t\tlabel: editMode\n\t\t\t\t\t\t? t('snackbar.share_updated', '\"Access rights updated\"')\n\t\t\t\t\t\t: t('snackbar.folder_shared', 'Folder shared'),\n\t\t\t\t\tautoHideTimeout: 3000\n\t\t\t\t});\n\t\t\t\tsendNotification &&\n\t\t\t\t\tdispatch(\n\t\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\tsendShareNotification({\n\t\t\t\t\t\t\tsendNotification,\n\t\t\t\t\t\t\tstandardMessage,\n\t\t\t\t\t\t\tcontacts: editMode ? [{ email: activeGrant.d }] : contacts,\n\t\t\t\t\t\t\tshareWithUserType,\n\t\t\t\t\t\t\tshareWithUserRole,\n\t\t\t\t\t\t\tfolder: folder.folder,\n\t\t\t\t\t\t\taccounts\n\t\t\t\t\t\t})\n\t\t\t\t\t).then((res2: { type: string }) => {\n\t\t\t\t\t\tif (!res2.type.includes('fulfilled')) {\n\t\t\t\t\t\t\tcreateSnackbar({\n\t\t\t\t\t\t\t\tkey: `share-${folder.id}`,\n\t\t\t\t\t\t\t\treplace: true,\n\t\t\t\t\t\t\t\ttype: 'error',\n\t\t\t\t\t\t\t\thideButton: true,\n\t\t\t\t\t\t\t\tlabel: t('label.error_try_again', 'Something went wrong, please try again'),\n\t\t\t\t\t\t\t\tautoHideTimeout: 3000\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\tgoBack && goBack();\n\t\t\t}\n\t\t\tonClose();\n\t\t});\n\t}, [\n\t\tdispatch,\n\t\tsendNotification,\n\t\tstandardMessage,\n\t\teditMode,\n\t\tactiveGrant.d,\n\t\tcontacts,\n\t\tshareWithUserType,\n\t\tshareWithUserRole,\n\t\tfolder,\n\t\taccounts,\n\t\tonClose,\n\t\tcreateSnackbar,\n\t\tt,\n\t\tgoBack\n\t]);\n\n\tconst disableEdit = useMemo(\n\t\t() => activeGrant?.perm === shareWithUserRole,\n\t\t[activeGrant?.perm, shareWithUserRole]\n\t);\n\n\treturn (\n\t\t<>\n\t\t\t<Container\n\t\t\t\tmainAlignment=\"center\"\n\t\t\t\tcrossAlignment=\"flex-start\"\n\t\t\t\theight=\"fit\"\n\t\t\t\tpadding={{ vertical: 'small' }}\n\t\t\t>\n\t\t\t\t<ModalHeader title={title} onClose={onClose} />\n\t\t\t\t<Padding top=\"small\" />\n\t\t\t\t{!editMode && (\n\t\t\t\t\t<Container height=\"fit\">\n\t\t\t\t\t\t<Select\n\t\t\t\t\t\t\titems={shareCalendarWithOptions}\n\t\t\t\t\t\t\tbackground=\"gray5\"\n\t\t\t\t\t\t\tlabel={t('label.share_with', 'Share with')}\n\t\t\t\t\t\t\tonChange={onShareWithChange}\n\t\t\t\t\t\t\tdefaultSelection={{\n\t\t\t\t\t\t\t\tvalue: 'usr',\n\t\t\t\t\t\t\t\tlabel: findLabel(shareCalendarWithOptions, 'usr')\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Container>\n\t\t\t\t)}\n\t\t\t\t{editMode ? (\n\t\t\t\t\t<Container\n\t\t\t\t\t\torientation=\"horizontal\"\n\t\t\t\t\t\tmainAlignment=\"flex-end\"\n\t\t\t\t\t\tpadding={{ bottom: 'large', top: 'large' }}\n\t\t\t\t\t>\n\t\t\t\t\t\t<GranteeInfo grant={activeGrant} shareCalendarRoleOptions={shareCalendarRoleOptions} />\n\t\t\t\t\t</Container>\n\t\t\t\t) : (\n\t\t\t\t\t<Container height=\"fit\" padding={{ vertical: 'small' }}>\n\t\t\t\t\t\t{integrationAvailable ? (\n\t\t\t\t\t\t\t<ContactInput\n\t\t\t\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\t\t\tbackground=\"gray4\"\n\t\t\t\t\t\t\t\tplaceholder={t('share.recipients_address', 'Recipients’ e-mail addresses')}\n\t\t\t\t\t\t\t\tonChange={(ev: ChangeEvent<HTMLInputElement>): void => {\n\t\t\t\t\t\t\t\t\tsetContacts(ev);\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tdefaultValue={contacts}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<ChipInput\n\t\t\t\t\t\t\t\tbackgroundColor=\"gray5\"\n\t\t\t\t\t\t\t\tplaceholder={t('share.recipients_address', 'Recipients’ e-mail addresses')}\n\t\t\t\t\t\t\t\tonChange={(ev: ChangeEvent<HTMLInputElement>): void => {\n\t\t\t\t\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\t\t\t\tsetContacts(map(ev, (contact) => ({ email: contact.address })));\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tvalueKey=\"address\"\n\t\t\t\t\t\t\t\tgetChipLabel={(\n\t\t\t\t\t\t\t\t\tparticipant: Partial<{ fullName: string; name: string; address: string }>\n\t\t\t\t\t\t\t\t): string | undefined =>\n\t\t\t\t\t\t\t\t\tparticipant.fullName ?? participant.name ?? participant.address\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</Container>\n\t\t\t\t)}\n\n\t\t\t\t<Container height=\"fit\">\n\t\t\t\t\t<Select\n\t\t\t\t\t\titems={shareCalendarRoleOptions}\n\t\t\t\t\t\tbackground=\"gray5\"\n\t\t\t\t\t\tlabel={t('label.role', 'Role')}\n\t\t\t\t\t\tonChange={onShareRoleChange}\n\t\t\t\t\t\tdefaultSelection={{\n\t\t\t\t\t\t\tvalue: editMode ? activeGrant?.perm : 'r',\n\t\t\t\t\t\t\tlabel: findLabel(shareCalendarRoleOptions, editMode ? activeGrant?.perm : 'r')\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t</Container>\n\t\t\t\t<Container\n\t\t\t\t\theight=\"fit\"\n\t\t\t\t\tmainAlignment=\"flex-start\"\n\t\t\t\t\tcrossAlignment=\"flex-start\"\n\t\t\t\t\tpadding={{ vertical: 'medium' }}\n\t\t\t\t>\n\t\t\t\t\t<Checkbox\n\t\t\t\t\t\tvalue={sendNotification}\n\t\t\t\t\t\tdefaultChecked={sendNotification}\n\t\t\t\t\t\tonClick={(): void => setSendNotification(!sendNotification)}\n\t\t\t\t\t\tlabel={t('share.send_notification', 'Send a notification about this share')}\n\t\t\t\t\t/>\n\t\t\t\t</Container>\n\n\t\t\t\t<Container height=\"fit\">\n\t\t\t\t\t<Input\n\t\t\t\t\t\tlabel={t('share.standard_message', 'Add a note to the standard message')}\n\t\t\t\t\t\tvalue={standardMessage}\n\t\t\t\t\t\tonChange={(ev: ChangeEvent<HTMLInputElement>): void => {\n\t\t\t\t\t\t\tsetStandardMessage(ev.target.value);\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tdisabled={!sendNotification}\n\t\t\t\t\t\tbackgroundColor=\"gray5\"\n\t\t\t\t\t/>\n\t\t\t\t</Container>\n\t\t\t\t<Container\n\t\t\t\t\torientation=\"horizontal\"\n\t\t\t\t\tcrossAlignment=\"baseline\"\n\t\t\t\t\tmainAlignment=\"baseline\"\n\t\t\t\t\tpadding={{ all: 'small' }}\n\t\t\t\t>\n\t\t\t\t\t<Row padding={{ right: 'small' }}>\n\t\t\t\t\t\t<Text weight=\"bold\" size=\"small\" color=\"gray0\">\n\t\t\t\t\t\t\tNote:\n\t\t\t\t\t\t</Text>\n\t\t\t\t\t</Row>\n\t\t\t\t\t<Row padding={{ bottom: 'small' }}>\n\t\t\t\t\t\t<Text overflow=\"break-word\" size=\"small\" color=\"gray1\">\n\t\t\t\t\t\t\t{t(\n\t\t\t\t\t\t\t\t'share.share_note',\n\t\t\t\t\t\t\t\t'The standard message displays your name, the name of the shared item, pemissions granted to the recipients, and sign in information, if necessary.'\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</Text>\n\t\t\t\t\t</Row>\n\t\t\t\t</Container>\n\t\t\t</Container>\n\t\t\t<ModalFooter\n\t\t\t\tlabel={\n\t\t\t\t\teditMode ? t('action.edit_share', 'Edit Share') : t('action.share_folder', 'Share folder')\n\t\t\t\t}\n\t\t\t\tonConfirm={onConfirm}\n\t\t\t\tdisabled={editMode ? disableEdit : contacts.length < 1}\n\t\t\t\tsecondaryAction={goBack}\n\t\t\t\tsecondaryLabel={t('label.go_back', 'Go Back')}\n\t\t\t/>\n\t\t</>\n\t);\n};\n\nexport default ShareFolderModal;\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/views/sidebar/share-folder-modal.tsx b/src/views/sidebar/share-folder-modal.tsx
+--- a/src/views/sidebar/share-folder-modal.tsx	(revision 4adaba21c8889cfd3cf44adf6271b75e82f59433)
++++ b/src/views/sidebar/share-folder-modal.tsx	(date 1661285250000)
+@@ -70,7 +70,7 @@
+ 						name: userNameCapitalise,
+ 						defaultValue: "Edit {{name}}'s access"
+ 				  })} `
+-				: `${t('label.share', 'Share')} ${folder.folder.name}`,
++				: `${t('label.share', 'Share')} ${folder.name}`,
+ 		[t, folder, editMode, userNameCapitalise]
+ 	);
+ 
+@@ -92,7 +92,7 @@
+ 				contacts: editMode ? [{ email: activeGrant.d }] : contacts,
+ 				shareWithUserType,
+ 				shareWithUserRole,
+-				folder: folder.folder,
++				folder,
+ 				accounts
+ 			})
+ 		).then((res: { type: string }) => {
+@@ -117,7 +117,7 @@
+ 							contacts: editMode ? [{ email: activeGrant.d }] : contacts,
+ 							shareWithUserType,
+ 							shareWithUserRole,
+-							folder: folder.folder,
++							folder,
+ 							accounts
+ 						})
+ 					).then((res2: { type: string }) => {
+Index: src/views/sidebar/edit-modal.tsx
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport React, { FC, useCallback, useContext, useState } from 'react';\nimport { Container, SnackbarManagerContext } from '@zextras/carbonio-design-system';\nimport EditDefaultModal from './parts/edit/edit-default-modal';\nimport ShareFolderModal from './share-folder-modal';\nimport ShareRevokeModal from './parts/edit/share-revoke-modal';\nimport { Context } from './parts/edit/edit-context';\nimport { ModalProps } from '../../types';\n\nexport const EditModal: FC<ModalProps> = ({ folder, onClose }) => {\n\t// eslint-disable-next-line @typescript-eslint/ban-types\n\tconst createSnackbar = useContext(SnackbarManagerContext) as Function;\n\tconst [activeModal, setActiveModal] = useState('default');\n\tconst [activeGrant, setActiveGrant] = useState({});\n\tconst goBack = useCallback(() => {\n\t\tsetActiveModal('default');\n\t}, [setActiveModal]);\n\treturn (\n\t\t<Context.Provider value={{ activeModal, setActiveModal, activeGrant, setActiveGrant, onClose }}>\n\t\t\t<Container\n\t\t\t\tpadding={{ all: 'medium' }}\n\t\t\t\tmainAlignment=\"center\"\n\t\t\t\tcrossAlignment=\"flex-start\"\n\t\t\t\theight=\"fit\"\n\t\t\t>\n\t\t\t\t{activeModal === 'default' && (\n\t\t\t\t\t<EditDefaultModal folder={folder} onClose={onClose} setActiveModal={setActiveModal} />\n\t\t\t\t)}\n\n\t\t\t\t{activeModal === 'edit' && (\n\t\t\t\t\t<ShareFolderModal\n\t\t\t\t\t\tfolder={folder}\n\t\t\t\t\t\tactiveGrant={activeGrant}\n\t\t\t\t\t\tgoBack={goBack}\n\t\t\t\t\t\tonClose={onClose}\n\t\t\t\t\t\teditMode\n\t\t\t\t\t/>\n\t\t\t\t)}\n\n\t\t\t\t{activeModal === 'revoke' && (\n\t\t\t\t\t<ShareRevokeModal\n\t\t\t\t\t\tfolder={folder.folder}\n\t\t\t\t\t\tgoBack={goBack}\n\t\t\t\t\t\tgrant={activeGrant || folder?.folder.acl?.grant[0]}\n\t\t\t\t\t\tcreateSnackbar={createSnackbar}\n\t\t\t\t\t/>\n\t\t\t\t)}\n\t\t\t\t{activeModal === 'share' && (\n\t\t\t\t\t<ShareFolderModal\n\t\t\t\t\t\tfolder={folder}\n\t\t\t\t\t\tactiveGrant={activeGrant}\n\t\t\t\t\t\tonClose={onClose}\n\t\t\t\t\t\tgoBack={goBack}\n\t\t\t\t\t/>\n\t\t\t\t)}\n\t\t\t</Container>\n\t\t</Context.Provider>\n\t);\n};\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/views/sidebar/edit-modal.tsx b/src/views/sidebar/edit-modal.tsx
+--- a/src/views/sidebar/edit-modal.tsx	(revision 4adaba21c8889cfd3cf44adf6271b75e82f59433)
++++ b/src/views/sidebar/edit-modal.tsx	(date 1661285135000)
+@@ -43,9 +43,9 @@
+ 
+ 				{activeModal === 'revoke' && (
+ 					<ShareRevokeModal
+-						folder={folder.folder}
++						folder={folder}
+ 						goBack={goBack}
+-						grant={activeGrant || folder?.folder.acl?.grant[0]}
++						grant={activeGrant || folder?.acl?.grant[0]}
+ 						createSnackbar={createSnackbar}
+ 					/>
+ 				)}
+Index: src/views/sidebar/empty-modal.tsx
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport React, { FC, useCallback, useContext, useMemo } from 'react';\nimport { Text, Container, SnackbarManagerContext } from '@zextras/carbonio-design-system';\nimport { FOLDERS } from '@zextras/carbonio-shell-ui';\nimport { useTranslation } from 'react-i18next';\nimport { useDispatch } from 'react-redux';\nimport ModalFooter from './commons/modal-footer';\nimport { folderAction } from '../../store/actions/folder-action';\nimport { ModalHeader } from './commons/modal-header';\nimport { ModalProps } from '../../types';\n\nexport const EmptyModal: FC<ModalProps> = ({ folder, onClose }) => {\n\tconst [t] = useTranslation();\n\tconst dispatch = useDispatch();\n\t// eslint-disable-next-line @typescript-eslint/ban-types\n\tconst createSnackbar = useContext(SnackbarManagerContext) as Function;\n\n\tconst onConfirm = useCallback(() => {\n\t\tdispatch(folderAction({ folder: folder.folder, recursive: true, op: 'empty' }))\n\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t// @ts-ignore\n\t\t\t.then((res) => {\n\t\t\t\tif (res.type.includes('fulfilled')) {\n\t\t\t\t\tcreateSnackbar({\n\t\t\t\t\t\tkey: `trash`,\n\t\t\t\t\t\treplace: true,\n\t\t\t\t\t\ttype: 'info',\n\t\t\t\t\t\tlabel:\n\t\t\t\t\t\t\tfolder.id === FOLDERS.TRASH\n\t\t\t\t\t\t\t\t? t('messages.snackbar.folder_empty', 'Trash successfully emptied')\n\t\t\t\t\t\t\t\t: t('messages.snackbar.folder_wiped', 'Folder successfully wiped'),\n\t\t\t\t\t\tautoHideTimeout: 3000,\n\t\t\t\t\t\thideButton: true\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tcreateSnackbar({\n\t\t\t\t\t\tkey: `trash`,\n\t\t\t\t\t\treplace: true,\n\t\t\t\t\t\ttype: 'error',\n\t\t\t\t\t\tlabel: t('label.error_try_again', 'Something went wrong, please try again.'),\n\t\t\t\t\t\tautoHideTimeout: 3000,\n\t\t\t\t\t\thideButton: true\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\tonClose();\n\t}, [dispatch, folder, onClose, createSnackbar, t]);\n\n\tconst title = useMemo(\n\t\t() =>\n\t\t\tfolder.id === FOLDERS.TRASH\n\t\t\t\t? `${t('label.empty', 'Empty')} ${folder.folder?.name}`\n\t\t\t\t: `${t('label.wipe', 'Wipe')} ${folder.folder?.name}`,\n\t\t[folder.id, folder.folder?.name, t]\n\t);\n\treturn (\n\t\t<Container\n\t\t\tpadding={{ all: 'large' }}\n\t\t\tmainAlignment=\"center\"\n\t\t\tcrossAlignment=\"flex-start\"\n\t\t\theight=\"fit\"\n\t\t>\n\t\t\t<ModalHeader title={title} onClose={onClose} />\n\t\t\t<Container padding={{ top: 'large', bottom: 'large' }} crossAlignment=\"flex-start\">\n\t\t\t\t{folder.id === FOLDERS.TRASH ? (\n\t\t\t\t\t<Text overflow=\"break-word\">\n\t\t\t\t\t\t{t(\n\t\t\t\t\t\t\t'folder_panel.modal.empty.body.message1',\n\t\t\t\t\t\t\t'Do you want to empty the selected folder?'\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\t{t(\n\t\t\t\t\t\t\t'folder_panel.modal.empty.body.message2',\n\t\t\t\t\t\t\t'If you empty it, all the related content will be deleted permanently.'\n\t\t\t\t\t\t)}\n\t\t\t\t\t</Text>\n\t\t\t\t) : (\n\t\t\t\t\t<Text overflow=\"break-word\">\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t(t('folder_panel.modal.wipe.body.message1'),\n\t\t\t\t\t\t\t'Do you want to wipe the selected folder?')\n\t\t\t\t\t\t}\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\t{t(\n\t\t\t\t\t\t\t'folder_panel.modal.wipe.body.message2',\n\t\t\t\t\t\t\t'If you wipe it, all the related content will be deleted permanently.'\n\t\t\t\t\t\t)}\n\t\t\t\t\t</Text>\n\t\t\t\t)}\n\t\t\t</Container>\n\n\t\t\t<ModalFooter\n\t\t\t\tonConfirm={onConfirm}\n\t\t\t\tlabel={folder.id === FOLDERS.TRASH ? t('label.empty', 'Empty') : t('label.wipe', 'Wipe')}\n\t\t\t\tcolor=\"error\"\n\t\t\t/>\n\t\t</Container>\n\t);\n};\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/views/sidebar/empty-modal.tsx b/src/views/sidebar/empty-modal.tsx
+--- a/src/views/sidebar/empty-modal.tsx	(revision 4adaba21c8889cfd3cf44adf6271b75e82f59433)
++++ b/src/views/sidebar/empty-modal.tsx	(date 1661285111000)
+@@ -20,7 +20,7 @@
+ 	const createSnackbar = useContext(SnackbarManagerContext) as Function;
+ 
+ 	const onConfirm = useCallback(() => {
+-		dispatch(folderAction({ folder: folder.folder, recursive: true, op: 'empty' }))
++		dispatch(folderAction({ folder, recursive: true, op: 'empty' }))
+ 			// eslint-disable-next-line @typescript-eslint/ban-ts-comment
+ 			// @ts-ignore
+ 			.then((res) => {
+@@ -53,9 +53,9 @@
+ 	const title = useMemo(
+ 		() =>
+ 			folder.id === FOLDERS.TRASH
+-				? `${t('label.empty', 'Empty')} ${folder.folder?.name}`
+-				: `${t('label.wipe', 'Wipe')} ${folder.folder?.name}`,
+-		[folder.id, folder.folder?.name, t]
++				? `${t('label.empty', 'Empty')} ${folder.name}`
++				: `${t('label.wipe', 'Wipe')} ${folder.name}`,
++		[folder.id, folder.name, t]
+ 	);
+ 	return (
+ 		<Container
+Index: src/views/sidebar/shares-info-modal.jsx
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/views/sidebar/shares-info-modal.jsx b/src/views/sidebar/shares-info-modal.tsx
+rename from src/views/sidebar/shares-info-modal.jsx
+rename to src/views/sidebar/shares-info-modal.tsx
+--- a/src/views/sidebar/shares-info-modal.jsx	(revision 4adaba21c8889cfd3cf44adf6271b75e82f59433)
++++ b/src/views/sidebar/shares-info-modal.tsx	(date 1661185276000)
+@@ -3,12 +3,19 @@
+  *
+  * SPDX-License-Identifier: AGPL-3.0-only
+  */
+-import React from 'react';
++import React, { FC } from 'react';
++import { Folder } from '@zextras/carbonio-shell-ui';
+ import { useTranslation } from 'react-i18next';
+ import { Container, Icon, Row, Text } from '@zextras/carbonio-design-system';
+ import { ModalHeader } from './commons/modal-header';
+ 
+-export const ShareInfoRow = ({ icon, label, text }) => (
++type ShareInfoRowProps = {
++	icon: string;
++	label: string;
++	text: string | undefined;
++};
++
++export const ShareInfoRow: FC<ShareInfoRowProps> = ({ icon, label, text }) => (
+ 	<Row width="fill" mainAlignment="flex-start" padding={{ all: 'small' }}>
+ 		<Row padding={{ right: 'small' }}>
+ 			<Icon icon={icon} />
+@@ -22,7 +29,12 @@
+ 	</Row>
+ );
+ 
+-export const SharesInfoModal = ({ onClose, folder }) => {
++type SharesInfoModalProps = {
++	onClose: () => void;
++	folder: Folder;
++};
++
++export const SharesInfoModal: FC<SharesInfoModalProps> = ({ onClose, folder }) => {
+ 	const [t] = useTranslation();
+ 
+ 	const text = (/r/.test(folder.perm || '') ? `${t('label.read', 'Read')}` : '')
+@@ -50,7 +62,7 @@
+ 			<ShareInfoRow
+ 				icon="PersonOutline"
+ 				label={`${t('label.owner', 'Owner: ')}`}
+-				text={folder.owner}
++				text={folder.isLink ? folder?.owner : ''}
+ 			/>
+ 			<ShareInfoRow
+ 				icon="MailModOutline"
+@@ -65,7 +77,7 @@
+ 			<ShareInfoRow
+ 				icon="EmailOutline"
+ 				label={`${t('label.messages', 'Messages')}`}
+-				text={folder.n}
++				text={String(folder.n)}
+ 			/>
+ 		</Container>
+ 	);
+Index: src/types/index.d.ts
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nexport * from './conversations';\nexport * from './editor';\nexport * from './filters';\nexport * from './folder';\nexport * from './messages';\nexport * from './participant';\nexport * from './search';\nexport * from './share';\nexport * from './soap';\nexport * from './state';\nexport * from './tags';\nexport * from './utils';\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/types/index.d.ts b/src/types/index.d.ts
+--- a/src/types/index.d.ts	(revision 4adaba21c8889cfd3cf44adf6271b75e82f59433)
++++ b/src/types/index.d.ts	(date 1661442885000)
+@@ -4,6 +4,7 @@
+  * SPDX-License-Identifier: AGPL-3.0-only
+  */
+ 
++export * from './actions';
+ export * from './conversations';
+ export * from './editor';
+ export * from './filters';
+Index: src/views/sidebar/sidebar.tsx
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport React, { useRef, FC, useContext, useMemo, useCallback, useEffect, useState } from 'react';\nimport {\n\tAccordionFolder,\n\tuseFoldersAccordionByView,\n\tuseLocalStorage\n} from '@zextras/carbonio-shell-ui';\nimport { Accordion, Container, Button, ModalManagerContext } from '@zextras/carbonio-design-system';\nimport { Route, Switch, useRouteMatch, useParams } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport { filter, isEqual, map, uniqWith } from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport CollapsedSideBarItems from './collapsed-sidebar-items';\nimport { FOLDER_VIEW } from '../../constants';\nimport { AccordionCustomComponent } from './accordion-custom-component';\nimport { getShareInfo } from '../../store/actions/get-share-info';\nimport { ResFolder } from '../../types';\nimport { SharesModal } from './shares-modal';\nimport useGetTagsAccordion from '../../hooks/use-get-tags-accordions';\n\ntype SidebarComponentProps = {\n\taccordions: Array<AccordionFolder>;\n\topenIds: Array<string>;\n};\n\nconst ButtonFindShares: FC = () => {\n\tconst [t] = useTranslation();\n\tconst dispatch = useDispatch();\n\t// eslint-disable-next-line @typescript-eslint/ban-types\n\tconst createModal = useContext(ModalManagerContext) as Function;\n\n\tconst openFindShares = useCallback(\n\t\t(ev: MouseEvent): void => {\n\t\t\tev.stopPropagation();\n\t\t\tdispatch(getShareInfo())\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t\t// @ts-ignore\n\t\t\t\t.then((res: any) => {\n\t\t\t\t\tif (res.type.includes('fulfilled') && res.payload?.share?.length > 0) {\n\t\t\t\t\t\tconst resFolders: Array<ResFolder> = uniqWith(\n\t\t\t\t\t\t\tfilter(res.payload.share, ['view', 'message']),\n\t\t\t\t\t\t\tisEqual\n\t\t\t\t\t\t);\n\t\t\t\t\t\tconst closeModal = createModal(\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tchildren: <SharesModal folders={resFolders} onClose={(): void => closeModal()} />\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\ttrue\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t},\n\t\t[createModal, dispatch]\n\t);\n\n\treturn (\n\t\t<Container padding={{ horizontal: 'medium', vertical: 'small' }}>\n\t\t\t<Button\n\t\t\t\ttype=\"outlined\"\n\t\t\t\tlabel={t('label.find_shares', 'Find shares')}\n\t\t\t\tcolor=\"primary\"\n\t\t\t\tsize=\"fill\"\n\t\t\t\tonClick={openFindShares}\n\t\t\t/>\n\t\t</Container>\n\t);\n};\n\nconst SidebarComponent: FC<SidebarComponentProps> = ({ accordions, openIds }) => {\n\tconst sidebarRef = useRef<HTMLInputElement>(null);\n\tconst { folderId } = useParams<{ folderId: string }>();\n\tconst tagsAccordionItems = useGetTagsAccordion();\n\tconst [disableTransition, setDisableTransition] = useState(true);\n\tconst [t] = useTranslation();\n\tconst accordionsWithFindShare = useMemo(() => {\n\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t// @ts-ignore\n\t\taccordions[0]?.items?.push({\n\t\t\tid: 'find_shares',\n\t\t\tlabel: t('label.find_shares', 'Find shares'),\n\t\t\tCustomComponent: ButtonFindShares,\n\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t// @ts-ignore\n\t\t\tdisableHover: true\n\t\t});\n\t\treturn map(accordions, (item) => ({ ...item, background: 'gray4' }));\n\t}, [accordions, t]);\n\n\tuseEffect(() => {\n\t\tsetDisableTransition(false);\n\t}, []);\n\n\treturn (\n\t\t<Container orientation=\"vertical\" height=\"fit\">\n\t\t\t<Accordion\n\t\t\t\topenIds={openIds}\n\t\t\t\tref={sidebarRef}\n\t\t\t\titems={accordionsWithFindShare}\n\t\t\t\tactiveId={folderId}\n\t\t\t\tdisableTransition={disableTransition}\n\t\t\t/>\n\t\t\t<Accordion items={[tagsAccordionItems]} />\n\t\t</Container>\n\t);\n};\n\ntype SidebarProps = {\n\texpanded: boolean;\n};\n\nconst Sidebar: FC<SidebarProps> = ({ expanded }) => {\n\tconst { path } = useRouteMatch();\n\tconst [openIds, setOpenIds] = useLocalStorage<Array<string>>('open_mails_folders', []);\n\n\tconst additionalProps = (item: AccordionFolder): Record<string, any> => ({\n\t\tonOpen: () => setOpenIds((s: Array<string>) => (s.includes(item.id) ? s : [...s, item.id])),\n\t\tonClose: () => setOpenIds((s: Array<string>) => s.filter((id: string) => id !== item.id))\n\t});\n\n\tconst accordions = useFoldersAccordionByView(\n\t\tFOLDER_VIEW.message,\n\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t// @ts-ignore\n\t\tAccordionCustomComponent,\n\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t// @ts-ignore\n\t\tadditionalProps\n\t);\n\n\treturn (\n\t\t<>\n\t\t\t{expanded ? (\n\t\t\t\t<>\n\t\t\t\t\t<Switch>\n\t\t\t\t\t\t<Route path={`${path}/folder/:folderId/:type?/:itemId?`}>\n\t\t\t\t\t\t\t<SidebarComponent accordions={accordions} openIds={openIds} />\n\t\t\t\t\t\t</Route>\n\t\t\t\t\t</Switch>\n\t\t\t\t</>\n\t\t\t) : (\n\t\t\t\taccordions[0].items.map((folder, index: number) => (\n\t\t\t\t\t<CollapsedSideBarItems key={index} folder={folder} />\n\t\t\t\t))\n\t\t\t)}\n\t\t</>\n\t);\n};\n\nexport default Sidebar;\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/views/sidebar/sidebar.tsx b/src/views/sidebar/sidebar.tsx
+--- a/src/views/sidebar/sidebar.tsx	(revision 4adaba21c8889cfd3cf44adf6271b75e82f59433)
++++ b/src/views/sidebar/sidebar.tsx	(date 1661498473523)
+@@ -3,106 +3,42 @@
+  *
+  * SPDX-License-Identifier: AGPL-3.0-only
+  */
+-import React, { useRef, FC, useContext, useMemo, useCallback, useEffect, useState } from 'react';
+-import {
+-	AccordionFolder,
+-	useFoldersAccordionByView,
+-	useLocalStorage
+-} from '@zextras/carbonio-shell-ui';
+-import { Accordion, Container, Button, ModalManagerContext } from '@zextras/carbonio-design-system';
+-import { Route, Switch, useRouteMatch, useParams } from 'react-router-dom';
+-import { useDispatch } from 'react-redux';
+-import { filter, isEqual, map, uniqWith } from 'lodash';
++
++import { Folder, useFoldersByView } from '@zextras/carbonio-shell-ui';
++import { Accordion, Container } from '@zextras/carbonio-design-system';
++import { map } from 'lodash';
++import React, { FC, useMemo } from 'react';
+ import { useTranslation } from 'react-i18next';
+-import CollapsedSideBarItems from './collapsed-sidebar-items';
+ import { FOLDER_VIEW } from '../../constants';
+-import { AccordionCustomComponent } from './accordion-custom-component';
+-import { getShareInfo } from '../../store/actions/get-share-info';
+-import { ResFolder } from '../../types';
+-import { SharesModal } from './shares-modal';
+ import useGetTagsAccordion from '../../hooks/use-get-tags-accordions';
++import CollapsedSideBarItems from './collapsed-sidebar-items';
++import { AccordionMui } from './accordion-mui';
+ 
+ type SidebarComponentProps = {
+-	accordions: Array<AccordionFolder>;
+-	openIds: Array<string>;
+-};
+-
+-const ButtonFindShares: FC = () => {
+-	const [t] = useTranslation();
+-	const dispatch = useDispatch();
+-	// eslint-disable-next-line @typescript-eslint/ban-types
+-	const createModal = useContext(ModalManagerContext) as Function;
+-
+-	const openFindShares = useCallback(
+-		(ev: MouseEvent): void => {
+-			ev.stopPropagation();
+-			dispatch(getShareInfo())
+-				// eslint-disable-next-line @typescript-eslint/ban-ts-comment
+-				// @ts-ignore
+-				.then((res: any) => {
+-					if (res.type.includes('fulfilled') && res.payload?.share?.length > 0) {
+-						const resFolders: Array<ResFolder> = uniqWith(
+-							filter(res.payload.share, ['view', 'message']),
+-							isEqual
+-						);
+-						const closeModal = createModal(
+-							{
+-								children: <SharesModal folders={resFolders} onClose={(): void => closeModal()} />
+-							},
+-							true
+-						);
+-					}
+-				});
+-		},
+-		[createModal, dispatch]
+-	);
+-
+-	return (
+-		<Container padding={{ horizontal: 'medium', vertical: 'small' }}>
+-			<Button
+-				type="outlined"
+-				label={t('label.find_shares', 'Find shares')}
+-				color="primary"
+-				size="fill"
+-				onClick={openFindShares}
+-			/>
+-		</Container>
+-	);
++	accordions: Array<Folder>;
+ };
+ 
+-const SidebarComponent: FC<SidebarComponentProps> = ({ accordions, openIds }) => {
+-	const sidebarRef = useRef<HTMLInputElement>(null);
+-	const { folderId } = useParams<{ folderId: string }>();
++const SidebarComponent: FC<SidebarComponentProps> = ({ accordions }) => {
++	console.count('@@SidebarComponent');
++	// const { folderId } = useParams<{ folderId: string }>();
+ 	const tagsAccordionItems = useGetTagsAccordion();
+-	const [disableTransition, setDisableTransition] = useState(true);
++	console.log('@@tagsAccordionItems', tagsAccordionItems);
+ 	const [t] = useTranslation();
+ 	const accordionsWithFindShare = useMemo(() => {
+ 		// eslint-disable-next-line @typescript-eslint/ban-ts-comment
+ 		// @ts-ignore
+-		accordions[0]?.items?.push({
++		accordions[0]?.children?.push({
+ 			id: 'find_shares',
+-			label: t('label.find_shares', 'Find shares'),
+-			CustomComponent: ButtonFindShares,
+ 			// eslint-disable-next-line @typescript-eslint/ban-ts-comment
+ 			// @ts-ignore
+ 			disableHover: true
+ 		});
+ 		return map(accordions, (item) => ({ ...item, background: 'gray4' }));
+ 	}, [accordions, t]);
+-
+-	useEffect(() => {
+-		setDisableTransition(false);
+-	}, []);
+-
++	console.log('@@accordionsWithFindShare', accordionsWithFindShare);
+ 	return (
+ 		<Container orientation="vertical" height="fit">
+-			<Accordion
+-				openIds={openIds}
+-				ref={sidebarRef}
+-				items={accordionsWithFindShare}
+-				activeId={folderId}
+-				disableTransition={disableTransition}
+-			/>
++			<AccordionMui accordions={accordionsWithFindShare} />
+ 			<Accordion items={[tagsAccordionItems]} />
+ 		</Container>
+ 	);
+@@ -112,37 +48,18 @@
+ 	expanded: boolean;
+ };
+ 
++const MemoSidebar: FC<SidebarComponentProps> = React.memo(SidebarComponent);
++
+ const Sidebar: FC<SidebarProps> = ({ expanded }) => {
+-	const { path } = useRouteMatch();
+-	const [openIds, setOpenIds] = useLocalStorage<Array<string>>('open_mails_folders', []);
+-
+-	const additionalProps = (item: AccordionFolder): Record<string, any> => ({
+-		onOpen: () => setOpenIds((s: Array<string>) => (s.includes(item.id) ? s : [...s, item.id])),
+-		onClose: () => setOpenIds((s: Array<string>) => s.filter((id: string) => id !== item.id))
+-	});
+-
+-	const accordions = useFoldersAccordionByView(
+-		FOLDER_VIEW.message,
+-		// eslint-disable-next-line @typescript-eslint/ban-ts-comment
+-		// @ts-ignore
+-		AccordionCustomComponent,
+-		// eslint-disable-next-line @typescript-eslint/ban-ts-comment
+-		// @ts-ignore
+-		additionalProps
+-	);
+-
++	const accordions = useFoldersByView(FOLDER_VIEW.message);
++	console.log('@@@@accordions', accordions);
++	console.count('@@Sidebar');
+ 	return (
+ 		<>
+ 			{expanded ? (
+-				<>
+-					<Switch>
+-						<Route path={`${path}/folder/:folderId/:type?/:itemId?`}>
+-							<SidebarComponent accordions={accordions} openIds={openIds} />
+-						</Route>
+-					</Switch>
+-				</>
++				<MemoSidebar accordions={accordions} />
+ 			) : (
+-				accordions[0].items.map((folder, index: number) => (
++				accordions.map((folder, index: number) => (
+ 					<CollapsedSideBarItems key={index} folder={folder} />
+ 				))
+ 			)}
+Index: src/views/sidebar/new-modal.tsx
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport React, {\n\tChangeEvent,\n\tFC,\n\tuseCallback,\n\tuseContext,\n\tuseEffect,\n\tuseLayoutEffect,\n\tuseMemo,\n\tuseRef,\n\tuseState\n} from 'react';\nimport {\n\tContainer,\n\tInput,\n\tText,\n\tPadding,\n\tAccordion,\n\tSnackbarManagerContext\n} from '@zextras/carbonio-design-system';\n\nimport { cloneDeep, filter, includes, startsWith } from 'lodash';\nimport { nanoid } from '@reduxjs/toolkit';\nimport {\n\tAccordionFolder,\n\tFOLDERS,\n\tuseFoldersAccordionByView,\n\tuseUserAccount\n} from '@zextras/carbonio-shell-ui';\nimport { useTranslation } from 'react-i18next';\nimport { useDispatch } from 'react-redux';\nimport styled from 'styled-components';\nimport { useParams } from 'react-router-dom';\nimport ModalFooter from './commons/modal-footer';\nimport { ModalHeader } from './commons/modal-header';\nimport { createFolder } from '../../store/actions/create-folder';\nimport { FOLDER_VIEW } from '../../constants';\nimport ModalAccordionCustomComponent from './parts/edit/modal-accordion-custom-component';\nimport { ModalProps } from '../../types';\nimport { getFolderTranslatedName, translatedSystemFolders } from './utils';\n\nconst ContainerEl = styled(Container)`\n\toverflow-y: auto;\n\tdisplay: block;\n`;\n\nexport const NewModal: FC<ModalProps> = ({ folder, onClose }) => {\n\tconst [t] = useTranslation();\n\tconst dispatch = useDispatch();\n\t// eslint-disable-next-line @typescript-eslint/ban-types\n\tconst createSnackbar = useContext(SnackbarManagerContext) as Function;\n\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t// @ts-ignore\n\tconst folders = useFoldersAccordionByView(FOLDER_VIEW.message, null);\n\tconst [inputValue, setInputValue] = useState('');\n\tconst [searchString, setSearchString] = useState('');\n\tconst [folderDestination, setFolderDestination] = useState<AccordionFolder | undefined>(folder);\n\tconst [disabled, setDisabled] = useState(true);\n\tconst [hasError, setHasError] = useState(false);\n\tconst [label, setLabel] = useState(t('folder_panel.modal.new.input.name', 'Enter Folder Name'));\n\tconst { folderId } = useParams<{ folderId: string }>();\n\tconst accountName = useUserAccount().name;\n\tconst accordionRef = useRef<HTMLDivElement>();\n\tconst [accordionWidth, setAccordionWidth] = useState<number>();\n\n\tuseLayoutEffect(() => {\n\t\tconst calculateAvailableWidth = (): void => {\n\t\t\tif (accordionRef && accordionRef.current) {\n\t\t\t\tsetAccordionWidth(accordionRef?.current?.clientWidth);\n\t\t\t}\n\t\t};\n\t\twindow.addEventListener('resize', calculateAvailableWidth);\n\t\treturn (): void => window.removeEventListener('resize', calculateAvailableWidth);\n\t}, [accordionRef]);\n\n\tconst showWarning = useMemo(\n\t\t() => includes(translatedSystemFolders(t), inputValue),\n\t\t[t, inputValue]\n\t);\n\n\tconst flattenFolders = useCallback(\n\t\t(arr: Array<AccordionFolder>): Array<AccordionFolder> => {\n\t\t\tconst result: Array<AccordionFolder> = [];\n\t\t\tarr.forEach((item) => {\n\t\t\t\tconst { items } = item;\n\t\t\t\tif (\n\t\t\t\t\titem.folder.id !== FOLDERS.TRASH &&\n\t\t\t\t\titem.folder.id !== FOLDERS.SPAM &&\n\t\t\t\t\t!startsWith(item.folder.absFolderPath, '/Trash')\n\t\t\t\t)\n\t\t\t\t\tresult.push({\n\t\t\t\t\t\t...item,\n\t\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\tCustomComponent: ModalAccordionCustomComponent,\n\t\t\t\t\t\tonClick: () => {\n\t\t\t\t\t\t\tsetFolderDestination(item);\n\t\t\t\t\t\t},\n\t\t\t\t\t\tbackground:\n\t\t\t\t\t\t\ttypeof folderDestination !== 'undefined' && folderDestination.id === item.folder.id\n\t\t\t\t\t\t\t\t? 'highlight'\n\t\t\t\t\t\t\t\t: undefined,\n\t\t\t\t\t\tlabel:\n\t\t\t\t\t\t\titem.folder.id === FOLDERS.USER_ROOT\n\t\t\t\t\t\t\t\t? accountName\n\t\t\t\t\t\t\t\t: getFolderTranslatedName({\n\t\t\t\t\t\t\t\t\t\tt,\n\t\t\t\t\t\t\t\t\t\tfolderId: item.folder.id,\n\t\t\t\t\t\t\t\t\t\tfolderName: item.folder.name\n\t\t\t\t\t\t\t\t  }),\n\t\t\t\t\t\tactiveId: item.folder.id === folderId,\n\t\t\t\t\t\taccordionWidth,\n\t\t\t\t\t\titems: []\n\t\t\t\t\t});\n\t\t\t\tif (items) result.push(...flattenFolders(items));\n\t\t\t});\n\t\t\treturn result;\n\t\t},\n\t\t[folderDestination, accountName, t, folderId, accordionWidth]\n\t);\n\n\tconst getFolderRootName = useCallback((_folder: AccordionFolder): string => {\n\t\tlet result = _folder.folder;\n\t\twhile (result.parent?.parent) {\n\t\t\tresult = result.parent;\n\t\t}\n\t\treturn result.owner || result.parent?.name || result.name;\n\t}, []);\n\n\tconst filteredFolders = useMemo(\n\t\t() => folders.filter((item) => item.label === getFolderRootName(folder)),\n\t\t[folders, getFolderRootName, folder]\n\t);\n\n\tconst flattenedFolders = useMemo(\n\t\t() => flattenFolders(filteredFolders),\n\t\t[filteredFolders, flattenFolders]\n\t);\n\n\tuseEffect(() => {\n\t\tif (!folderDestination || !inputValue.length || showWarning) {\n\t\t\tsetDisabled(true);\n\t\t\treturn;\n\t\t}\n\t\tconst value = !!filter(folderDestination.folder.children, (item) => item.name === inputValue)\n\t\t\t.length;\n\t\tif (value) {\n\t\t\tsetLabel(t('folder_panel.modal.new.input.name_exist', 'Name already exists in this path'));\n\t\t} else {\n\t\t\tsetLabel(t('folder_panel.modal.new.input.name', 'Enter Folder Name'));\n\t\t}\n\t\tsetHasError(value);\n\t\tsetDisabled(value);\n\t}, [folderDestination, inputValue, showWarning, t]);\n\n\tconst filteredFromUserInput = useMemo(\n\t\t() =>\n\t\t\tfilter(flattenedFolders, (item) => {\n\t\t\t\tconst folderName = item.label.toLowerCase();\n\t\t\t\treturn startsWith(folderName, searchString.toLowerCase());\n\t\t\t}),\n\t\t[flattenedFolders, searchString]\n\t);\n\n\tconst onConfirm = useCallback(() => {\n\t\tdispatch(createFolder({ parentFolder: folderDestination, name: inputValue, id: nanoid() }))\n\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t// @ts-ignore\n\t\t\t.then((res: unknown & { type: string }) => {\n\t\t\t\tif (res.type.includes('fulfilled')) {\n\t\t\t\t\tcreateSnackbar({\n\t\t\t\t\t\tkey: `edit`,\n\t\t\t\t\t\treplace: true,\n\t\t\t\t\t\ttype: 'success',\n\t\t\t\t\t\tlabel: t('messages.snackbar.folder_created', 'New folder created'),\n\t\t\t\t\t\tautoHideTimeout: 3000,\n\t\t\t\t\t\thideButton: true\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tcreateSnackbar({\n\t\t\t\t\t\tkey: `edit`,\n\t\t\t\t\t\treplace: true,\n\t\t\t\t\t\ttype: 'error',\n\t\t\t\t\t\tlabel: t('label.error_try_again', 'Something went wrong, please try again'),\n\t\t\t\t\t\tautoHideTimeout: 3000,\n\t\t\t\t\t\thideButton: true\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\tsetSearchString('');\n\t\tsetInputValue('');\n\t\tsetLabel(t('folder_panel.modal.new.input.name', 'Enter Folder Name'));\n\t\tsetFolderDestination(undefined);\n\t\tsetHasError(false);\n\t\tonClose();\n\t}, [dispatch, folderDestination, inputValue, t, onClose, createSnackbar]);\n\n\treturn folder ? (\n\t\t<Container\n\t\t\tpadding={{ all: 'large' }}\n\t\t\tmainAlignment=\"center\"\n\t\t\tcrossAlignment=\"flex-start\"\n\t\t\theight=\"fit\"\n\t\t>\n\t\t\t<ModalHeader\n\t\t\t\ttitle={t('folder_panel.modal.new.title', 'Create a new folder')}\n\t\t\t\tonClose={onClose}\n\t\t\t/>\n\t\t\t<Container mainAlignment=\"center\" crossAlignment=\"flex-start\" height=\"fit\">\n\t\t\t\t<Input\n\t\t\t\t\tlabel={label}\n\t\t\t\t\tbackgroundColor=\"gray5\"\n\t\t\t\t\thasError={hasError}\n\t\t\t\t\tdefaultValue={inputValue}\n\t\t\t\t\tonChange={(e: ChangeEvent<HTMLInputElement>): void => setInputValue(e.target.value)}\n\t\t\t\t/>\n\t\t\t\t{showWarning && (\n\t\t\t\t\t<Padding all=\"small\">\n\t\t\t\t\t\t<Text size=\"small\" color=\"error\">\n\t\t\t\t\t\t\t{`${t(\n\t\t\t\t\t\t\t\t'folder.modal.edit.rename_warning',\n\t\t\t\t\t\t\t\t'You cannot rename a folder as a system one.'\n\t\t\t\t\t\t\t)}`}\n\t\t\t\t\t\t</Text>\n\t\t\t\t\t</Padding>\n\t\t\t\t)}\n\t\t\t\t<Input\n\t\t\t\t\tlabel={t('label.filter_folders', 'Filter folders')}\n\t\t\t\t\tbackgroundColor=\"gray5\"\n\t\t\t\t\tvalue={searchString}\n\t\t\t\t\tonChange={(e: ChangeEvent<HTMLInputElement>): void => setSearchString(e.target.value)}\n\t\t\t\t/>\n\t\t\t\t<ContainerEl\n\t\t\t\t\torientation=\"vertical\"\n\t\t\t\t\tmainAlignment=\"flex-start\"\n\t\t\t\t\tminHeight=\"30vh\"\n\t\t\t\t\tmaxHeight=\"60vh\"\n\t\t\t\t>\n\t\t\t\t\t<Accordion\n\t\t\t\t\t\tref={accordionRef}\n\t\t\t\t\t\tbackground=\"gray6\"\n\t\t\t\t\t\titems={filteredFromUserInput}\n\t\t\t\t\t\tstyle={{ overflowY: 'hidden' }}\n\t\t\t\t\t/>\n\t\t\t\t</ContainerEl>\n\t\t\t\t<ModalFooter\n\t\t\t\t\tonConfirm={onConfirm}\n\t\t\t\t\tsecondaryAction={onClose}\n\t\t\t\t\tlabel={t('label.create_and_move', 'Create and move')}\n\t\t\t\t\tdisabled={disabled}\n\t\t\t\t/>\n\t\t\t</Container>\n\t\t</Container>\n\t) : (\n\t\t<></>\n\t);\n};\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/views/sidebar/new-modal.tsx b/src/views/sidebar/new-modal.tsx
+--- a/src/views/sidebar/new-modal.tsx	(revision 4adaba21c8889cfd3cf44adf6271b75e82f59433)
++++ b/src/views/sidebar/new-modal.tsx	(date 1661281926000)
+@@ -23,14 +23,9 @@
+ 	SnackbarManagerContext
+ } from '@zextras/carbonio-design-system';
+ 
+-import { cloneDeep, filter, includes, startsWith } from 'lodash';
++import { filter, includes, startsWith } from 'lodash';
+ import { nanoid } from '@reduxjs/toolkit';
+-import {
+-	AccordionFolder,
+-	FOLDERS,
+-	useFoldersAccordionByView,
+-	useUserAccount
+-} from '@zextras/carbonio-shell-ui';
++import { Folder, FOLDERS, useFoldersByView, useUserAccount } from '@zextras/carbonio-shell-ui';
+ import { useTranslation } from 'react-i18next';
+ import { useDispatch } from 'react-redux';
+ import styled from 'styled-components';
+@@ -55,10 +50,10 @@
+ 	const createSnackbar = useContext(SnackbarManagerContext) as Function;
+ 	// eslint-disable-next-line @typescript-eslint/ban-ts-comment
+ 	// @ts-ignore
+-	const folders = useFoldersAccordionByView(FOLDER_VIEW.message, null);
++	const folders = useFoldersByView(FOLDER_VIEW.message);
+ 	const [inputValue, setInputValue] = useState('');
+ 	const [searchString, setSearchString] = useState('');
+-	const [folderDestination, setFolderDestination] = useState<AccordionFolder | undefined>(folder);
++	const [folderDestination, setFolderDestination] = useState<Folder | undefined>(folder);
+ 	const [disabled, setDisabled] = useState(true);
+ 	const [hasError, setHasError] = useState(false);
+ 	const [label, setLabel] = useState(t('folder_panel.modal.new.input.name', 'Enter Folder Name'));
+@@ -83,14 +78,13 @@
+ 	);
+ 
+ 	const flattenFolders = useCallback(
+-		(arr: Array<AccordionFolder>): Array<AccordionFolder> => {
+-			const result: Array<AccordionFolder> = [];
++		(arr: Array<Folder>): Array<Folder> => {
++			const result: Array<Folder> = [];
+ 			arr.forEach((item) => {
+-				const { items } = item;
+ 				if (
+-					item.folder.id !== FOLDERS.TRASH &&
+-					item.folder.id !== FOLDERS.SPAM &&
+-					!startsWith(item.folder.absFolderPath, '/Trash')
++					item.id !== FOLDERS.TRASH &&
++					item.id !== FOLDERS.SPAM &&
++					!startsWith(item.absFolderPath, '/Trash')
+ 				)
+ 					result.push({
+ 						...item,
+@@ -101,38 +95,38 @@
+ 							setFolderDestination(item);
+ 						},
+ 						background:
+-							typeof folderDestination !== 'undefined' && folderDestination.id === item.folder.id
++							typeof folderDestination !== 'undefined' && folderDestination.id === item.id
+ 								? 'highlight'
+ 								: undefined,
+ 						label:
+-							item.folder.id === FOLDERS.USER_ROOT
++							item.id === FOLDERS.USER_ROOT
+ 								? accountName
+ 								: getFolderTranslatedName({
+ 										t,
+-										folderId: item.folder.id,
+-										folderName: item.folder.name
++										folderId: item.id,
++										folderName: item.name
+ 								  }),
+-						activeId: item.folder.id === folderId,
++						activeId: item.id === folderId,
+ 						accordionWidth,
+ 						items: []
+ 					});
+-				if (items) result.push(...flattenFolders(items));
++				if (item.children.length > 0) result.push(...flattenFolders(item.children));
+ 			});
+ 			return result;
+ 		},
+ 		[folderDestination, accountName, t, folderId, accordionWidth]
+ 	);
+ 
+-	const getFolderRootName = useCallback((_folder: AccordionFolder): string => {
+-		let result = _folder.folder;
++	const getFolderRootName = useCallback((_folder: Folder): string => {
++		let result = _folder;
+ 		while (result.parent?.parent) {
+ 			result = result.parent;
+ 		}
+-		return result.owner || result.parent?.name || result.name;
++		return (result.isLink && result.owner) || result.parent?.name || result.name;
+ 	}, []);
+ 
+ 	const filteredFolders = useMemo(
+-		() => folders.filter((item) => item.label === getFolderRootName(folder)),
++		() => folders.filter((item: Folder) => item.name === getFolderRootName(folder)),
+ 		[folders, getFolderRootName, folder]
+ 	);
+ 
+@@ -146,8 +140,7 @@
+ 			setDisabled(true);
+ 			return;
+ 		}
+-		const value = !!filter(folderDestination.folder.children, (item) => item.name === inputValue)
+-			.length;
++		const value = !!filter(folderDestination.children, (item) => item.name === inputValue).length;
+ 		if (value) {
+ 			setLabel(t('folder_panel.modal.new.input.name_exist', 'Name already exists in this path'));
+ 		} else {
+@@ -160,7 +153,7 @@
+ 	const filteredFromUserInput = useMemo(
+ 		() =>
+ 			filter(flattenedFolders, (item) => {
+-				const folderName = item.label.toLowerCase();
++				const folderName = item.name.toLowerCase();
+ 				return startsWith(folderName, searchString.toLowerCase());
+ 			}),
+ 		[flattenedFolders, searchString]
+Index: src/views/sidebar/move-modal.tsx
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport React, {\n\tChangeEvent,\n\tFC,\n\tuseCallback,\n\tuseContext,\n\tuseLayoutEffect,\n\tuseMemo,\n\tuseRef,\n\tuseState\n} from 'react';\nimport {\n\tInput,\n\tText,\n\tContainer,\n\tAccordion,\n\tPadding,\n\tButton,\n\tSnackbarManagerContext\n} from '@zextras/carbonio-design-system';\nimport { cloneDeep, filter, startsWith } from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { useDispatch } from 'react-redux';\nimport {\n\tAccordionFolder,\n\tFolder,\n\tFOLDERS,\n\tuseFoldersAccordionByView,\n\tuseUserAccount\n} from '@zextras/carbonio-shell-ui';\nimport { useParams } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { folderAction } from '../../store/actions/folder-action';\nimport ModalFooter from './commons/modal-footer';\nimport { ModalHeader } from './commons/modal-header';\nimport { FOLDER_VIEW } from '../../constants';\nimport ModalAccordionCustomComponent from './parts/edit/modal-accordion-custom-component';\nimport { ModalProps } from '../../types';\nimport { getFolderTranslatedName } from './utils';\n\nconst ContainerEl = styled(Container)`\n\toverflow-y: auto;\n\tdisplay: block;\n`;\n\nexport const MoveModal: FC<ModalProps> = ({ folder, onClose }) => {\n\tconst [t] = useTranslation();\n\tconst dispatch = useDispatch();\n\t// eslint-disable-next-line @typescript-eslint/ban-types\n\tconst createSnackbar = useContext(SnackbarManagerContext) as Function;\n\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t// @ts-ignore\n\tconst folders = useFoldersAccordionByView(FOLDER_VIEW.message, null);\n\tconst [searchString, setSearchString] = useState('');\n\tconst [folderDestination, setFolderDestination] = useState<Folder | undefined>(folder.folder);\n\tconst { folderId } = useParams<{ folderId: string }>();\n\tconst accountName = useUserAccount().name;\n\tconst accordionRef = useRef<HTMLDivElement>();\n\tconst [accordionWidth, setAccordionWidth] = useState<number>();\n\n\tuseLayoutEffect(() => {\n\t\tconst calculateAvailableWidth = (): void => {\n\t\t\tif (accordionRef && accordionRef.current) {\n\t\t\t\tsetAccordionWidth(accordionRef?.current?.clientWidth);\n\t\t\t}\n\t\t};\n\t\twindow.addEventListener('resize', calculateAvailableWidth);\n\t\treturn (): void => window.removeEventListener('resize', calculateAvailableWidth);\n\t}, [accordionRef]);\n\n\tconst flattenFolders = useCallback(\n\t\t(arr: Array<AccordionFolder>): Array<AccordionFolder> => {\n\t\t\tconst result: Array<AccordionFolder> = [];\n\t\t\tarr.forEach((item) => {\n\t\t\t\tconst { items } = item;\n\t\t\t\tif (\n\t\t\t\t\titem.folder.id !== FOLDERS.TRASH &&\n\t\t\t\t\titem.folder.id !== FOLDERS.SPAM &&\n\t\t\t\t\t!startsWith(item.folder.absFolderPath, '/Trash')\n\t\t\t\t)\n\t\t\t\t\tresult.push({\n\t\t\t\t\t\t...item,\n\t\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\tCustomComponent: ModalAccordionCustomComponent,\n\t\t\t\t\t\tonClick: () => {\n\t\t\t\t\t\t\tsetFolderDestination(item.folder);\n\t\t\t\t\t\t},\n\t\t\t\t\t\tbackground:\n\t\t\t\t\t\t\ttypeof folderDestination !== 'undefined' && folderDestination.id === item.folder.id\n\t\t\t\t\t\t\t\t? 'highlight'\n\t\t\t\t\t\t\t\t: undefined,\n\t\t\t\t\t\tlabel:\n\t\t\t\t\t\t\titem.folder.id === FOLDERS.USER_ROOT\n\t\t\t\t\t\t\t\t? accountName\n\t\t\t\t\t\t\t\t: getFolderTranslatedName({\n\t\t\t\t\t\t\t\t\t\tt,\n\t\t\t\t\t\t\t\t\t\tfolderId: item.folder.id,\n\t\t\t\t\t\t\t\t\t\tfolderName: item.folder.name\n\t\t\t\t\t\t\t\t  }),\n\t\t\t\t\t\tactiveId: item.folder.id === folderId,\n\t\t\t\t\t\taccordionWidth,\n\t\t\t\t\t\titems: []\n\t\t\t\t\t});\n\t\t\t\tif (items) result.push(...flattenFolders(items));\n\t\t\t});\n\t\t\treturn result;\n\t\t},\n\t\t[folderDestination, accountName, t, folderId, accordionWidth]\n\t);\n\tconst getFolderRootName = (_folder: AccordionFolder): string => {\n\t\tlet result = cloneDeep(_folder.folder);\n\t\twhile (result.parent?.parent) {\n\t\t\tresult = result.parent;\n\t\t}\n\t\treturn result.owner || result.parent?.name || result.name;\n\t};\n\n\tconst filteredFolders = folders.filter((item) => item.label === getFolderRootName(folder));\n\n\tconst flattenedFolders = useMemo(\n\t\t() => flattenFolders(filteredFolders),\n\t\t[filteredFolders, flattenFolders]\n\t);\n\n\tconst filteredFromUserInput = useMemo(\n\t\t() =>\n\t\t\tfilter(flattenedFolders, (item) => {\n\t\t\t\tconst folderName = item.label.toLowerCase();\n\t\t\t\treturn startsWith(folderName, searchString.toLowerCase());\n\t\t\t}),\n\t\t[flattenedFolders, searchString]\n\t);\n\n\tconst onConfirm = useCallback(() => {\n\t\tconst restoreFolder = (): void =>\n\t\t\tdispatch(folderAction({ folder: folder.folder, l: folder.folder.l, op: 'move' }))\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t\t// @ts-ignore\n\t\t\t\t.then((res) => {\n\t\t\t\t\tif (res.type.includes('fulfilled')) {\n\t\t\t\t\t\tcreateSnackbar({\n\t\t\t\t\t\t\tkey: `move-folder`,\n\t\t\t\t\t\t\treplace: true,\n\t\t\t\t\t\t\ttype: 'success',\n\t\t\t\t\t\t\tlabel: t('messages.snackbar.folder_restored', 'Folder restored'),\n\t\t\t\t\t\t\tautoHideTimeout: 3000,\n\t\t\t\t\t\t\thideButton: true\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcreateSnackbar({\n\t\t\t\t\t\t\tkey: `move`,\n\t\t\t\t\t\t\treplace: true,\n\t\t\t\t\t\t\ttype: 'error',\n\t\t\t\t\t\t\tlabel: t('label.error_try_again', 'Something went wrong, please try again'),\n\t\t\t\t\t\t\tautoHideTimeout: 3000,\n\t\t\t\t\t\t\thideButton: true\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\tif (\n\t\t\tfolderDestination?.id !== folder.folder?.l &&\n\t\t\t!startsWith(folderDestination?.absFolderPath, folder.folder?.absFolderPath)\n\t\t) {\n\t\t\t// if (folderDestination?.id !== folder.id && folderDestination?.l !== folder.folder?.l) {\n\t\t\tdispatch(\n\t\t\t\tfolderAction({\n\t\t\t\t\tfolder: folder.folder,\n\t\t\t\t\tl: folderDestination?.id || FOLDERS.USER_ROOT,\n\t\t\t\t\top: 'move'\n\t\t\t\t})\n\t\t\t)\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t\t// @ts-ignore\n\t\t\t\t.then((res) => {\n\t\t\t\t\tif (res.type.includes('fulfilled')) {\n\t\t\t\t\t\tcreateSnackbar({\n\t\t\t\t\t\t\tkey: `move`,\n\t\t\t\t\t\t\treplace: true,\n\t\t\t\t\t\t\ttype: 'success',\n\t\t\t\t\t\t\tlabel: t('messages.snackbar.folder_moved', 'Folder successfully moved'),\n\t\t\t\t\t\t\tautoHideTimeout: 5000,\n\t\t\t\t\t\t\thideButton: false,\n\t\t\t\t\t\t\tactionLabel: 'Undo',\n\t\t\t\t\t\t\tonActionClick: () => restoreFolder()\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcreateSnackbar({\n\t\t\t\t\t\t\tkey: `move`,\n\t\t\t\t\t\t\treplace: true,\n\t\t\t\t\t\t\ttype: 'error',\n\t\t\t\t\t\t\tlabel: t('label.error_try_again', 'Something went wrong, please try again.'),\n\t\t\t\t\t\t\tautoHideTimeout: 3000\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t}\n\n\t\tsetFolderDestination(undefined);\n\t\tsetSearchString('');\n\t\tonClose();\n\t}, [folderDestination, folder, onClose, dispatch, createSnackbar, t]);\n\n\treturn folder ? (\n\t\t<Container\n\t\t\tpadding={{ all: 'large' }}\n\t\t\tmainAlignment=\"center\"\n\t\t\tcrossAlignment=\"flex-start\"\n\t\t\theight=\"fit\"\n\t\t>\n\t\t\t<ModalHeader onClose={onClose} title={`${t('label.move', 'Move')} ${folder.folder?.name}`} />\n\t\t\t<Container\n\t\t\t\tpadding={{ all: 'small' }}\n\t\t\t\tmainAlignment=\"center\"\n\t\t\t\tcrossAlignment=\"flex-start\"\n\t\t\t\theight=\"fit\"\n\t\t\t>\n\t\t\t\t<Container padding={{ all: 'small' }} mainAlignment=\"center\" crossAlignment=\"flex-start\">\n\t\t\t\t\t<Text overflow=\"break-word\">\n\t\t\t\t\t\t{t(\n\t\t\t\t\t\t\t'folder_panel.modal.move.body.message1',\n\t\t\t\t\t\t\t'Select a folder to move the considered one to:'\n\t\t\t\t\t\t)}\n\t\t\t\t\t</Text>\n\t\t\t\t</Container>\n\t\t\t\t<Input\n\t\t\t\t\tinputName={folder.folder?.name}\n\t\t\t\t\tlabel={t('label.filter_folders', 'Filter folders')}\n\t\t\t\t\tbackgroundColor=\"gray5\"\n\t\t\t\t\tvalue={searchString}\n\t\t\t\t\tonChange={(e: ChangeEvent<HTMLInputElement>): void => setSearchString(e.target.value)}\n\t\t\t\t/>\n\t\t\t\t<Padding vertical=\"medium\" />\n\t\t\t\t<ContainerEl\n\t\t\t\t\torientation=\"vertical\"\n\t\t\t\t\tmainAlignment=\"flex-start\"\n\t\t\t\t\tminHeight=\"30vh\"\n\t\t\t\t\tmaxHeight=\"60vh\"\n\t\t\t\t>\n\t\t\t\t\t<Accordion\n\t\t\t\t\t\tbackground=\"gray6\"\n\t\t\t\t\t\titems={filteredFromUserInput}\n\t\t\t\t\t\tstyle={{ overflowY: 'hidden' }}\n\t\t\t\t\t/>\n\t\t\t\t</ContainerEl>\n\n\t\t\t\t<Container\n\t\t\t\t\tpadding={{ top: 'medium', bottom: 'medium' }}\n\t\t\t\t\tmainAlignment=\"center\"\n\t\t\t\t\tcrossAlignment=\"flex-start\"\n\t\t\t\t>\n\t\t\t\t\t<Button type=\"ghost\" label={t('label.new_folder', 'New Folder')} color=\"primary\" />\n\t\t\t\t</Container>\n\t\t\t\t<ModalFooter\n\t\t\t\t\tonConfirm={onConfirm}\n\t\t\t\t\tsecondaryAction={onClose}\n\t\t\t\t\tlabel={t('label.move', 'Move')}\n\t\t\t\t\tsecondaryLabel={t('label.cancel', 'Cancel')}\n\t\t\t\t\tdisabled={typeof folderDestination === 'undefined'}\n\t\t\t\t/>\n\t\t\t</Container>\n\t\t</Container>\n\t) : (\n\t\t<></>\n\t);\n};\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/views/sidebar/move-modal.tsx b/src/views/sidebar/move-modal.tsx
+--- a/src/views/sidebar/move-modal.tsx	(revision 4adaba21c8889cfd3cf44adf6271b75e82f59433)
++++ b/src/views/sidebar/move-modal.tsx	(date 1661283768000)
+@@ -25,13 +25,7 @@
+ import { cloneDeep, filter, startsWith } from 'lodash';
+ import { useTranslation } from 'react-i18next';
+ import { useDispatch } from 'react-redux';
+-import {
+-	AccordionFolder,
+-	Folder,
+-	FOLDERS,
+-	useFoldersAccordionByView,
+-	useUserAccount
+-} from '@zextras/carbonio-shell-ui';
++import { Folder, FOLDERS, useFoldersByView, useUserAccount } from '@zextras/carbonio-shell-ui';
+ import { useParams } from 'react-router-dom';
+ import styled from 'styled-components';
+ import { folderAction } from '../../store/actions/folder-action';
+@@ -54,9 +48,9 @@
+ 	const createSnackbar = useContext(SnackbarManagerContext) as Function;
+ 	// eslint-disable-next-line @typescript-eslint/ban-ts-comment
+ 	// @ts-ignore
+-	const folders = useFoldersAccordionByView(FOLDER_VIEW.message, null);
++	const folders = useFoldersByView(FOLDER_VIEW.message);
+ 	const [searchString, setSearchString] = useState('');
+-	const [folderDestination, setFolderDestination] = useState<Folder | undefined>(folder.folder);
++	const [folderDestination, setFolderDestination] = useState<Folder | undefined>(folder);
+ 	const { folderId } = useParams<{ folderId: string }>();
+ 	const accountName = useUserAccount().name;
+ 	const accordionRef = useRef<HTMLDivElement>();
+@@ -73,14 +67,13 @@
+ 	}, [accordionRef]);
+ 
+ 	const flattenFolders = useCallback(
+-		(arr: Array<AccordionFolder>): Array<AccordionFolder> => {
+-			const result: Array<AccordionFolder> = [];
++		(arr: Array<Folder>): Array<Folder> => {
++			const result: Array<Folder> = [];
+ 			arr.forEach((item) => {
+-				const { items } = item;
+ 				if (
+-					item.folder.id !== FOLDERS.TRASH &&
+-					item.folder.id !== FOLDERS.SPAM &&
+-					!startsWith(item.folder.absFolderPath, '/Trash')
++					item.id !== FOLDERS.TRASH &&
++					item.id !== FOLDERS.SPAM &&
++					!startsWith(item.absFolderPath, '/Trash')
+ 				)
+ 					result.push({
+ 						...item,
+@@ -88,39 +81,39 @@
+ 						// @ts-ignore
+ 						CustomComponent: ModalAccordionCustomComponent,
+ 						onClick: () => {
+-							setFolderDestination(item.folder);
++							setFolderDestination(item);
+ 						},
+ 						background:
+-							typeof folderDestination !== 'undefined' && folderDestination.id === item.folder.id
++							typeof folderDestination !== 'undefined' && folderDestination.id === item.id
+ 								? 'highlight'
+ 								: undefined,
+ 						label:
+-							item.folder.id === FOLDERS.USER_ROOT
++							item.id === FOLDERS.USER_ROOT
+ 								? accountName
+ 								: getFolderTranslatedName({
+ 										t,
+-										folderId: item.folder.id,
+-										folderName: item.folder.name
++										folderId: item.id,
++										folderName: item.name
+ 								  }),
+-						activeId: item.folder.id === folderId,
++						activeId: item.id === folderId,
+ 						accordionWidth,
+ 						items: []
+ 					});
+-				if (items) result.push(...flattenFolders(items));
++				if (item.children) result.push(...flattenFolders(item.children));
+ 			});
+ 			return result;
+ 		},
+ 		[folderDestination, accountName, t, folderId, accordionWidth]
+ 	);
+-	const getFolderRootName = (_folder: AccordionFolder): string => {
+-		let result = cloneDeep(_folder.folder);
++	const getFolderRootName = (_folder: Folder): string => {
++		let result = cloneDeep(_folder);
+ 		while (result.parent?.parent) {
+ 			result = result.parent;
+ 		}
+-		return result.owner || result.parent?.name || result.name;
++		return (result.isLink && result.owner) || result.parent?.name || result.name;
+ 	};
+ 
+-	const filteredFolders = folders.filter((item) => item.label === getFolderRootName(folder));
++	const filteredFolders = folders.filter((item) => item.name === getFolderRootName(folder));
+ 
+ 	const flattenedFolders = useMemo(
+ 		() => flattenFolders(filteredFolders),
+@@ -130,7 +123,7 @@
+ 	const filteredFromUserInput = useMemo(
+ 		() =>
+ 			filter(flattenedFolders, (item) => {
+-				const folderName = item.label.toLowerCase();
++				const folderName = item.name.toLowerCase();
+ 				return startsWith(folderName, searchString.toLowerCase());
+ 			}),
+ 		[flattenedFolders, searchString]
+@@ -138,7 +131,7 @@
+ 
+ 	const onConfirm = useCallback(() => {
+ 		const restoreFolder = (): void =>
+-			dispatch(folderAction({ folder: folder.folder, l: folder.folder.l, op: 'move' }))
++			dispatch(folderAction({ folder, l: folder.l, op: 'move' }))
+ 				// eslint-disable-next-line @typescript-eslint/ban-ts-comment
+ 				// @ts-ignore
+ 				.then((res) => {
+@@ -164,13 +157,13 @@
+ 				});
+ 
+ 		if (
+-			folderDestination?.id !== folder.folder?.l &&
+-			!startsWith(folderDestination?.absFolderPath, folder.folder?.absFolderPath)
++			folderDestination?.id !== folder.l &&
++			!startsWith(folderDestination?.absFolderPath, folder.absFolderPath)
+ 		) {
+ 			// if (folderDestination?.id !== folder.id && folderDestination?.l !== folder.folder?.l) {
+ 			dispatch(
+ 				folderAction({
+-					folder: folder.folder,
++					folder,
+ 					l: folderDestination?.id || FOLDERS.USER_ROOT,
+ 					op: 'move'
+ 				})
+@@ -213,7 +206,7 @@
+ 			crossAlignment="flex-start"
+ 			height="fit"
+ 		>
+-			<ModalHeader onClose={onClose} title={`${t('label.move', 'Move')} ${folder.folder?.name}`} />
++			<ModalHeader onClose={onClose} title={`${t('label.move', 'Move')} ${folder.name}`} />
+ 			<Container
+ 				padding={{ all: 'small' }}
+ 				mainAlignment="center"
+@@ -229,7 +222,7 @@
+ 					</Text>
+ 				</Container>
+ 				<Input
+-					inputName={folder.folder?.name}
++					inputName={folder.name}
+ 					label={t('label.filter_folders', 'Filter folders')}
+ 					backgroundColor="gray5"
+ 					value={searchString}
+Index: src/views/sidebar/parts/edit/edit-default-modal.tsx
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport React, { useState, useMemo, useCallback, useEffect, FC, useContext } from 'react';\nimport { Container, SnackbarManagerContext } from '@zextras/carbonio-design-system';\nimport { FOLDERS } from '@zextras/carbonio-shell-ui';\nimport { filter, includes, isEmpty } from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { useDispatch } from 'react-redux';\nimport ModalFooter from '../../commons/modal-footer';\nimport { ModalHeader } from '../../commons/modal-header';\nimport { folderAction } from '../../../../store/actions/folder-action';\nimport NameInputRow from './name-input';\nimport FolderDetails from './folder-details';\nimport RetentionPolicies from './retention-policies';\nimport { ShareFolderProperties } from './share-folder-properties';\nimport { translatedSystemFolders } from '../../utils';\nimport { ModalProps } from '../../../../types';\n\nconst retentionPeriod = [\n\t{\n\t\tlabel: 'Days',\n\t\tvalue: 'd'\n\t},\n\t{\n\t\tlabel: 'Weeks',\n\t\tvalue: 'w'\n\t},\n\t{\n\t\tlabel: 'Months',\n\t\tvalue: 'm'\n\t},\n\t{\n\t\tlabel: 'Years',\n\t\tvalue: 'y'\n\t}\n];\nconst numberRegex = /^\\d+$/;\n\ntype EditModalProps = ModalProps & {\n\tsetActiveModal: (modal: string) => void;\n};\n\nconst EditDefaultModal: FC<EditModalProps> = ({ folder, onClose, setActiveModal }) => {\n\tconst [t] = useTranslation();\n\tconst dispatch = useDispatch();\n\t// eslint-disable-next-line @typescript-eslint/ban-types\n\tconst createSnackbar = useContext(SnackbarManagerContext) as Function;\n\n\tconst [inputValue, setInputValue] = useState(folder.folder?.name);\n\tconst [showPolicy, setShowPolicy] = useState(false);\n\tconst [rtnValue, setRtnValue] = useState<number | string>(0);\n\tconst [purgeValue, setPurgeValue] = useState<number | string>(0);\n\tconst [rtnYear, setRtnYear] = useState('d');\n\tconst [dspYear, setDspYear] = useState('d');\n\tconst [rtnRange, setRtnRange] = useState('');\n\tconst [dspRange, setDspRange] = useState<string>('');\n\tconst [dsblMsgDis, setDsblMsgDis] = useState(false);\n\tconst [dsblMsgRet, setDsblMsgRet] = useState(false);\n\tconst [emptyRtnValue, setEmptyRtnValue] = useState(false);\n\tconst [emptyDisValue, setEmptyDisValue] = useState(false);\n\tconst [folderColor, setFolderColor] = useState(folder.folder?.color);\n\n\tuseEffect(() => {\n\t\tif (\n\t\t\tfolder.folder?.retentionPolicy &&\n\t\t\tfolder.folder?.retentionPolicy?.length &&\n\t\t\tfolder.folder?.retentionPolicy[0].keep !== undefined &&\n\t\t\tfolder.folder?.retentionPolicy[0].keep &&\n\t\t\tObject.keys(folder.folder?.retentionPolicy[0].keep[0]).length !== 0\n\t\t) {\n\t\t\tconst lifetime = folder.folder?.retentionPolicy[0]?.keep[0]?.policy[0]?.lifetime;\n\t\t\t// eslint-disable-next-line radix\n\t\t\tconst d = parseInt(lifetime);\n\t\t\tsetDsblMsgRet(true);\n\t\t\tsetShowPolicy(true);\n\n\t\t\tif (d % 365 === 0) {\n\t\t\t\tsetRtnYear('y');\n\t\t\t\tsetRtnValue(d / 365);\n\t\t\t\tsetRtnRange('Years');\n\t\t\t} else if (d % 31 === 0) {\n\t\t\t\tsetRtnYear('m');\n\t\t\t\tsetRtnValue(d / 31);\n\t\t\t\tsetRtnRange('Months');\n\t\t\t} else if (d % 7 === 0) {\n\t\t\t\tsetRtnYear('w');\n\t\t\t\tsetRtnValue(d / 7);\n\t\t\t\tsetRtnRange('Weeks');\n\t\t\t} else {\n\t\t\t\tsetRtnYear('d');\n\t\t\t\tsetRtnValue(d);\n\t\t\t\tsetRtnRange('Days');\n\t\t\t}\n\t\t} else {\n\t\t\tsetRtnYear('d');\n\t\t\tsetRtnRange('Days');\n\t\t}\n\n\t\tif (\n\t\t\tfolder.folder?.retentionPolicy &&\n\t\t\tfolder.folder?.retentionPolicy.length &&\n\t\t\tfolder.folder?.retentionPolicy[0].purge !== undefined &&\n\t\t\tfolder.folder?.retentionPolicy[0].purge &&\n\t\t\tObject.keys(folder.folder?.retentionPolicy[0].purge[0]).length !== 0\n\t\t) {\n\t\t\tconst lifetime = folder.folder?.retentionPolicy[0]?.purge[0]?.policy[0]?.lifetime;\n\t\t\t// eslint-disable-next-line radix\n\t\t\tconst d = parseInt(lifetime);\n\t\t\tsetDsblMsgDis(true);\n\t\t\tsetShowPolicy(true);\n\n\t\t\tif (d % 365 === 0) {\n\t\t\t\tsetDspYear('y');\n\t\t\t\tsetPurgeValue(d / 365);\n\t\t\t\tsetDspRange('Years');\n\t\t\t} else if (d % 31 === 0) {\n\t\t\t\tsetDspYear('m');\n\t\t\t\tsetPurgeValue(d / 31);\n\t\t\t\tsetDspRange('Months');\n\t\t\t} else if (d % 7 === 0) {\n\t\t\t\tsetDspYear('w');\n\t\t\t\tsetPurgeValue(d / 7);\n\t\t\t\tsetDspRange('Weeks');\n\t\t\t} else {\n\t\t\t\tsetDspYear('d');\n\t\t\t\tsetPurgeValue(d);\n\t\t\t\tsetDspRange('Days');\n\t\t\t}\n\t\t} else {\n\t\t\tsetDspYear('d');\n\t\t\tsetDspRange('Days');\n\t\t}\n\t}, [folder.folder?.retentionPolicy]);\n\n\tconst showWarning = useMemo(\n\t\t() =>\n\t\t\tincludes(\n\t\t\t\tfilter(translatedSystemFolders, (f) => f !== folder.folder?.name),\n\t\t\t\tinputValue\n\t\t\t),\n\t\t[inputValue, folder]\n\t);\n\tconst inpDisable = useMemo(\n\t\t() =>\n\t\t\tincludes(\n\t\t\t\t[FOLDERS.INBOX, FOLDERS.TRASH, FOLDERS.SPAM, FOLDERS.SENT, FOLDERS.DRAFTS],\n\t\t\t\tfolder.id\n\t\t\t),\n\t\t[folder]\n\t);\n\tconst disableSubmit = useMemo(() => showWarning || emptyRtnValue, [showWarning, emptyRtnValue]);\n\n\tconst onConfirm = useCallback(() => {\n\t\tlet submit = true;\n\t\tif (dsblMsgRet) {\n\t\t\tsubmit = false;\n\t\t\tif (rtnValue && numberRegex.test(rtnValue.toString())) {\n\t\t\t\tsubmit = true;\n\t\t\t} else {\n\t\t\t\tsetEmptyRtnValue(true);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tif (dsblMsgDis) {\n\t\t\tsubmit = false;\n\t\t\tif (purgeValue && numberRegex.test(purgeValue.toString())) {\n\t\t\t\tsubmit = true;\n\t\t\t} else {\n\t\t\t\tsetEmptyDisValue(true);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (inputValue && submit) {\n\t\t\tlet lt = 1;\n\t\t\tlet pr = 1;\n\n\t\t\tif (rtnYear === 'w') lt = Number(rtnValue) * 7;\n\t\t\telse if (rtnYear === 'm') lt = Number(rtnValue) * 31;\n\t\t\telse if (rtnYear === 'y') lt = Number(rtnValue) * 365;\n\t\t\telse lt = Number(rtnValue);\n\n\t\t\tif (dspYear === 'w') pr = Number(purgeValue) * 7;\n\t\t\telse if (dspYear === 'm') pr = Number(purgeValue) * 31;\n\t\t\telse if (dspYear === 'y') pr = Number(purgeValue) * 365;\n\t\t\telse pr = Number(purgeValue);\n\n\t\t\tdispatch(\n\t\t\t\tfolderAction({\n\t\t\t\t\tfolder: {\n\t\t\t\t\t\t...folder.folder,\n\t\t\t\t\t\tparent: folder.folder?.l,\n\t\t\t\t\t\tpath: folder.folder?.absFolderPath,\n\t\t\t\t\t\tabsParent: '2',\n\t\t\t\t\t\tchildren: []\n\t\t\t\t\t},\n\t\t\t\t\tname: inputValue,\n\t\t\t\t\top: 'update',\n\t\t\t\t\tcolor: folderColor,\n\t\t\t\t\tretentionPolicy:\n\t\t\t\t\t\tdsblMsgRet || dsblMsgDis || folder?.folder.retentionPolicy\n\t\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\t\tkeep: dsblMsgRet\n\t\t\t\t\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\t\t\t\t\tpolicy: {\n\t\t\t\t\t\t\t\t\t\t\t\t\tlifetime: `${lt}d`,\n\t\t\t\t\t\t\t\t\t\t\t\t\ttype: 'user'\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t\t\t: {},\n\t\t\t\t\t\t\t\t\tpurge: dsblMsgDis\n\t\t\t\t\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\t\t\t\t\tpolicy: {\n\t\t\t\t\t\t\t\t\t\t\t\t\tlifetime: `${pr}d`,\n\t\t\t\t\t\t\t\t\t\t\t\t\ttype: 'user'\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t\t\t: {}\n\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t: {}\n\t\t\t\t})\n\t\t\t)\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t\t// @ts-ignore\n\t\t\t\t.then((res) => {\n\t\t\t\t\tif (res.type.includes('fulfilled')) {\n\t\t\t\t\t\tcreateSnackbar({\n\t\t\t\t\t\t\tkey: `edit`,\n\t\t\t\t\t\t\treplace: true,\n\t\t\t\t\t\t\ttype: 'info',\n\t\t\t\t\t\t\thideButton: true,\n\t\t\t\t\t\t\tlabel: t('messages.snackbar.folder_edited', 'Changes correctly saved'),\n\t\t\t\t\t\t\tautoHideTimeout: 3000\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcreateSnackbar({\n\t\t\t\t\t\t\tkey: `edit`,\n\t\t\t\t\t\t\treplace: true,\n\t\t\t\t\t\t\ttype: 'error',\n\t\t\t\t\t\t\thideButton: true,\n\t\t\t\t\t\t\tlabel: t('label.error_try_again', 'Something went wrong, please try again'),\n\t\t\t\t\t\t\tautoHideTimeout: 3000\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t}\n\t\tsetInputValue('');\n\t\tonClose();\n\t}, [\n\t\tdsblMsgRet,\n\t\tdsblMsgDis,\n\t\tinputValue,\n\t\tonClose,\n\t\trtnValue,\n\t\tpurgeValue,\n\t\trtnYear,\n\t\tdspYear,\n\t\tdispatch,\n\t\tfolder,\n\t\tfolderColor,\n\t\tcreateSnackbar,\n\t\tt\n\t]);\n\n\treturn (\n\t\t<>\n\t\t\t<ModalHeader\n\t\t\t\tonClose={onClose}\n\t\t\t\ttitle={`${t('label.edit_folder_properties', {\n\t\t\t\t\tname: folder.folder?.name,\n\t\t\t\t\tdefaultValue: 'Edit {{name}} properties'\n\t\t\t\t})}`}\n\t\t\t/>\n\n\t\t\t<NameInputRow\n\t\t\t\tshowWarning={showWarning}\n\t\t\t\tsetInputValue={setInputValue}\n\t\t\t\tinputValue={inputValue}\n\t\t\t\tinpDisable={inpDisable}\n\t\t\t\tfolderColor={folderColor}\n\t\t\t\tsetFolderColor={setFolderColor}\n\t\t\t/>\n\t\t\t<Container mainAlignment=\"flex-start\" crossAlignment=\"flex-start\" padding={{ top: 'medium' }}>\n\t\t\t\t<FolderDetails folder={folder} />\n\n\t\t\t\t{!isEmpty(folder?.folder.acl) && !folder.folder?.owner && (\n\t\t\t\t\t<ShareFolderProperties\n\t\t\t\t\t\tfolder={folder}\n\t\t\t\t\t\tsetfolder={(): null => null}\n\t\t\t\t\t\ttotalAppointments={folder.folder?.n}\n\t\t\t\t\t\tsetActiveModal={setActiveModal}\n\t\t\t\t\t/>\n\t\t\t\t)}\n\t\t\t\t<RetentionPolicies\n\t\t\t\t\tsetShowPolicy={setShowPolicy}\n\t\t\t\t\temptyRtnValue={emptyRtnValue}\n\t\t\t\t\tsetEmptyRtnValue={setEmptyRtnValue}\n\t\t\t\t\tshowPolicy={showPolicy}\n\t\t\t\t\tdsblMsgRet={dsblMsgRet}\n\t\t\t\t\tsetDsblMsgRet={setDsblMsgRet}\n\t\t\t\t\tsetRtnValue={setRtnValue}\n\t\t\t\t\trtnValue={rtnValue}\n\t\t\t\t\tretentionPeriod={retentionPeriod}\n\t\t\t\t\tsetRtnYear={setRtnYear}\n\t\t\t\t\tdsblMsgDis={dsblMsgDis}\n\t\t\t\t\temptyDisValue={emptyDisValue}\n\t\t\t\t\tsetEmptyDisValue={setEmptyDisValue}\n\t\t\t\t\tsetDsblMsgDis={setDsblMsgDis}\n\t\t\t\t\tsetPurgeValue={setPurgeValue}\n\t\t\t\t\tsetDspYear={setDspYear}\n\t\t\t\t\trtnYear={rtnYear}\n\t\t\t\t\trtnRange={rtnRange}\n\t\t\t\t\tdspYear={dspYear}\n\t\t\t\t\tdspRange={dspRange}\n\t\t\t\t\tpurgeValue={purgeValue}\n\t\t\t\t/>\n\t\t\t</Container>\n\n\t\t\t<ModalFooter\n\t\t\t\tonConfirm={onConfirm}\n\t\t\t\tlabel={t('label.edit', 'Edit')}\n\t\t\t\tsecondaryAction={(): void => setActiveModal('share')}\n\t\t\t\tsecondaryLabel={t('folder.modal.edit.add_share', 'Add Share')}\n\t\t\t\tdisabled={disableSubmit}\n\t\t\t\tsecondaryBtnType=\"outlined\"\n\t\t\t\tsecondaryColor=\"primary\"\n\t\t\t/>\n\t\t</>\n\t);\n};\n\nexport default EditDefaultModal;\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/views/sidebar/parts/edit/edit-default-modal.tsx b/src/views/sidebar/parts/edit/edit-default-modal.tsx
+--- a/src/views/sidebar/parts/edit/edit-default-modal.tsx	(revision 4adaba21c8889cfd3cf44adf6271b75e82f59433)
++++ b/src/views/sidebar/parts/edit/edit-default-modal.tsx	(date 1661519096633)
+@@ -5,7 +5,7 @@
+  */
+ import React, { useState, useMemo, useCallback, useEffect, FC, useContext } from 'react';
+ import { Container, SnackbarManagerContext } from '@zextras/carbonio-design-system';
+-import { FOLDERS } from '@zextras/carbonio-shell-ui';
++import { Folder, FOLDERS } from '@zextras/carbonio-shell-ui';
+ import { filter, includes, isEmpty } from 'lodash';
+ import { useTranslation } from 'react-i18next';
+ import { useDispatch } from 'react-redux';
+@@ -49,7 +49,7 @@
+ 	// eslint-disable-next-line @typescript-eslint/ban-types
+ 	const createSnackbar = useContext(SnackbarManagerContext) as Function;
+ 
+-	const [inputValue, setInputValue] = useState(folder.folder?.name);
++	const [inputValue, setInputValue] = useState(folder.name);
+ 	const [showPolicy, setShowPolicy] = useState(false);
+ 	const [rtnValue, setRtnValue] = useState<number | string>(0);
+ 	const [purgeValue, setPurgeValue] = useState<number | string>(0);
+@@ -61,17 +61,19 @@
+ 	const [dsblMsgRet, setDsblMsgRet] = useState(false);
+ 	const [emptyRtnValue, setEmptyRtnValue] = useState(false);
+ 	const [emptyDisValue, setEmptyDisValue] = useState(false);
+-	const [folderColor, setFolderColor] = useState(folder.folder?.color);
++	const [folderColor, setFolderColor] = useState(folder.color);
+ 
+ 	useEffect(() => {
+ 		if (
+-			folder.folder?.retentionPolicy &&
+-			folder.folder?.retentionPolicy?.length &&
+-			folder.folder?.retentionPolicy[0].keep !== undefined &&
+-			folder.folder?.retentionPolicy[0].keep &&
+-			Object.keys(folder.folder?.retentionPolicy[0].keep[0]).length !== 0
++			folder.retentionPolicy &&
++			folder.retentionPolicy?.length &&
++			folder.retentionPolicy[0].keep !== undefined &&
++			folder.retentionPolicy[0].keep &&
++			Object.keys(folder.retentionPolicy[0].keep[0]).length !== 0
+ 		) {
+-			const lifetime = folder.folder?.retentionPolicy[0]?.keep[0]?.policy[0]?.lifetime;
++			// eslint-disable-next-line @typescript-eslint/ban-ts-comment
++			// @ts-ignore
++			const lifetime = folder.retentionPolicy[0]?.keep[0]?.policy[0]?.lifetime;
+ 			// eslint-disable-next-line radix
+ 			const d = parseInt(lifetime);
+ 			setDsblMsgRet(true);
+@@ -100,15 +102,16 @@
+ 		}
+ 
+ 		if (
+-			folder.folder?.retentionPolicy &&
+-			folder.folder?.retentionPolicy.length &&
+-			folder.folder?.retentionPolicy[0].purge !== undefined &&
+-			folder.folder?.retentionPolicy[0].purge &&
+-			Object.keys(folder.folder?.retentionPolicy[0].purge[0]).length !== 0
++			folder.retentionPolicy &&
++			folder.retentionPolicy.length &&
++			folder.retentionPolicy[0].purge !== undefined &&
++			folder.retentionPolicy[0].purge &&
++			Object.keys(folder.retentionPolicy[0].purge[0]).length !== 0
+ 		) {
+-			const lifetime = folder.folder?.retentionPolicy[0]?.purge[0]?.policy[0]?.lifetime;
+-			// eslint-disable-next-line radix
+-			const d = parseInt(lifetime);
++			// eslint-disable-next-line @typescript-eslint/ban-ts-comment
++			// @ts-ignore
++			const lifetime = folder.retentionPolicy[0]?.purge[0]?.policy[0]?.lifetime;
++			const d = parseInt(lifetime, 10);
+ 			setDsblMsgDis(true);
+ 			setShowPolicy(true);
+ 
+@@ -133,12 +136,12 @@
+ 			setDspYear('d');
+ 			setDspRange('Days');
+ 		}
+-	}, [folder.folder?.retentionPolicy]);
++	}, [folder.retentionPolicy]);
+ 
+ 	const showWarning = useMemo(
+ 		() =>
+ 			includes(
+-				filter(translatedSystemFolders, (f) => f !== folder.folder?.name),
++				filter(translatedSystemFolders, (f) => f !== folder.name),
+ 				inputValue
+ 			),
+ 		[inputValue, folder]
+@@ -191,17 +194,17 @@
+ 			dispatch(
+ 				folderAction({
+ 					folder: {
+-						...folder.folder,
+-						parent: folder.folder?.l,
+-						path: folder.folder?.absFolderPath,
++						...folder,
++						parent: folder.l || '',
++						path: folder.absFolderPath,
+ 						absParent: '2',
+ 						children: []
+ 					},
+ 					name: inputValue,
+ 					op: 'update',
+-					color: folderColor,
++					color: Number(folderColor),
+ 					retentionPolicy:
+-						dsblMsgRet || dsblMsgDis || folder?.folder.retentionPolicy
++						dsblMsgRet || dsblMsgDis || folder?.retentionPolicy
+ 							? {
+ 									keep: dsblMsgRet
+ 										? {
+@@ -270,7 +273,7 @@
+ 			<ModalHeader
+ 				onClose={onClose}
+ 				title={`${t('label.edit_folder_properties', {
+-					name: folder.folder?.name,
++					name: folder.name,
+ 					defaultValue: 'Edit {{name}} properties'
+ 				})}`}
+ 			/>
+@@ -280,17 +283,17 @@
+ 				setInputValue={setInputValue}
+ 				inputValue={inputValue}
+ 				inpDisable={inpDisable}
+-				folderColor={folderColor}
++				folderColor={String(folderColor)}
+ 				setFolderColor={setFolderColor}
+ 			/>
+ 			<Container mainAlignment="flex-start" crossAlignment="flex-start" padding={{ top: 'medium' }}>
+ 				<FolderDetails folder={folder} />
+ 
+-				{!isEmpty(folder?.folder.acl) && !folder.folder?.owner && (
++				{!isEmpty(folder?.acl) && folder.isLink && !folder.owner && (
+ 					<ShareFolderProperties
+ 						folder={folder}
+ 						setfolder={(): null => null}
+-						totalAppointments={folder.folder?.n}
++						totalAppointments={folder.n}
+ 						setActiveModal={setActiveModal}
+ 					/>
+ 				)}
+Index: src/views/sidebar/parts/edit/modal-accordion-custom-component.tsx
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport React, { FC, useLayoutEffect, useMemo, useRef, useState } from 'react';\nimport { Padding, Row, Icon, Container, TextWithTooltip } from '@zextras/carbonio-design-system';\n\nimport { AccordionFolder } from '@zextras/carbonio-shell-ui';\nimport { useTranslation } from 'react-i18next';\nimport { indexOf, lastIndexOf, min } from 'lodash';\nimport { getFolderIconColor, getFolderIconName, getSystemFolderTranslatedName } from '../../utils';\nimport { Crumb } from '../../../../types';\nimport { Breadcrumbs } from './breadcrumbs';\n\nconst ModalAccordionCustomComponent: FC<{\n\titem: AccordionFolder;\n}> = (folder) => {\n\tconst { item } = folder;\n\tconst [t] = useTranslation();\n\tconst systemFolder = useMemo(() => {\n\t\tlet result = '';\n\t\tif (item.folder.absFolderPath) {\n\t\t\tresult =\n\t\t\t\titem.folder.absFolderPath.indexOf('/', 1) === -1\n\t\t\t\t\t? item.folder.absFolderPath.slice(1, item.folder.absFolderPath.indexOf('/', 0))\n\t\t\t\t\t: item.folder.absFolderPath.slice(1, item.folder.absFolderPath.indexOf('/', 1));\n\t\t}\n\t\treturn result;\n\t}, [item.folder.absFolderPath]);\n\tconst translatedSystemFolder = getSystemFolderTranslatedName({ t, folderName: systemFolder });\n\tconst factor = 10;\n\tconst path = useMemo(\n\t\t() =>\n\t\t\titem.folder.absFolderPath &&\n\t\t\titem.folder.absFolderPath\n\t\t\t\t.slice(\n\t\t\t\t\titem.folder.absFolderPath.indexOf('/', 1) + 1,\n\t\t\t\t\titem.folder.absFolderPath.lastIndexOf('/')\n\t\t\t\t)\n\t\t\t\t.split('/'),\n\t\t[item.folder.absFolderPath]\n\t);\n\tconst targetFolder = useMemo(\n\t\t() => item.label || item.folder.name,\n\t\t[item.label, item.folder.name]\n\t);\n\tconst targetFolderWidth = useMemo(\n\t\t() => min([targetFolder.length * factor + 18, 150]) || 0,\n\t\t[targetFolder.length]\n\t);\n\tconst containerRef = useRef<HTMLDivElement>();\n\tconst [availableWidth, setAvailableWidth] = useState(\n\t\t(containerRef?.current?.clientWidth || 405) - targetFolderWidth\n\t);\n\tconst iconName = getFolderIconName(item);\n\tconst iconColor = getFolderIconColor(item);\n\n\tconst fullPath = useMemo(\n\t\t() => (path ? [translatedSystemFolder, ...path].join(' / ') : ''),\n\t\t[path, translatedSystemFolder]\n\t);\n\n\tuseLayoutEffect(() => {\n\t\tconst calculateAvailableWidth = (): void => {\n\t\t\tif (containerRef && containerRef.current) {\n\t\t\t\tsetAvailableWidth(containerRef?.current?.clientWidth || 0 - targetFolderWidth);\n\t\t\t}\n\t\t};\n\t\twindow.addEventListener('resize', calculateAvailableWidth);\n\t\treturn (): void => window.removeEventListener('resize', calculateAvailableWidth);\n\t}, [containerRef?.current?.clientWidth, targetFolderWidth]);\n\n\tconst crumbs: Array<Crumb> | undefined = useMemo(() => {\n\t\tconst result = [];\n\t\tlet exitLoop = false;\n\t\tlet stringRemainingWidth = availableWidth;\n\t\twhile (\n\t\t\t!(\n\t\t\t\texitLoop !== false ||\n\t\t\t\titem.folder.parent?.absFolderPath === '/' ||\n\t\t\t\t(item.folder.parent?.isLink === true &&\n\t\t\t\t\titem.folder.parent?.absFolderPath.lastIndexOf('/', 1) !== -1)\n\t\t\t)\n\t\t) {\n\t\t\tconst value = item.folder.absFolderPath.slice(\n\t\t\t\tlastIndexOf(item.folder.absFolderPath, '/') + 1\n\t\t\t);\n\t\t\tstringRemainingWidth -= item.folder.name.length * factor + 18;\n\t\t\tif (value !== '' && stringRemainingWidth > 0) {\n\t\t\t\tresult.push({\n\t\t\t\t\tlabel: value,\n\t\t\t\t\ttooltip: ''\n\t\t\t\t});\n\t\t\t\titem.folder = item.folder.parent;\n\t\t\t} else {\n\t\t\t\tresult.push({\n\t\t\t\t\tlabel: '...',\n\t\t\t\t\ttooltip: item.folder.absFolderPath.slice(indexOf(item.folder.absFolderPath, '/', 2) + 1)\n\t\t\t\t});\n\t\t\t\texitLoop = true;\n\t\t\t}\n\t\t}\n\t\tif (translatedSystemFolder) {\n\t\t\tresult.push({ label: translatedSystemFolder, tooltip: '' });\n\t\t}\n\t\tresult.shift();\n\t\treturn result.reverse();\n\t}, [availableWidth, item, translatedSystemFolder]);\n\treturn (\n\t\t<Container\n\t\t\tref={containerRef}\n\t\t\twidth=\"fill\"\n\t\t\tmain-alignment=\"flex-start\"\n\t\t\torientation=\"vertical\"\n\t\t\tcrossAlignment=\"flex-start\"\n\t\t>\n\t\t\t<Padding all=\"medium\">\n\t\t\t\t<Row orientation=\"horizontal\" width=\"fill\" crossAlignment=\"flex-start\">\n\t\t\t\t\t<Icon color={iconColor} icon={iconName || 'FolderOutline'} size=\"large\" />\n\t\t\t\t\t<Padding right=\"medium\" />\n\t\t\t\t\t{crumbs?.length > 0 && <Breadcrumbs breadcrumbs={crumbs} />}\n\t\t\t\t\t<Container width=\"fit\" maxWidth={availableWidth - fullPath.length + item.label.length}>\n\t\t\t\t\t\t<TextWithTooltip overflow=\"ellipsis\">&nbsp;{item.label}</TextWithTooltip>\n\t\t\t\t\t</Container>\n\t\t\t\t</Row>\n\t\t\t</Padding>\n\t\t</Container>\n\t);\n};\n\nexport default ModalAccordionCustomComponent;\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/views/sidebar/parts/edit/modal-accordion-custom-component.tsx b/src/views/sidebar/parts/edit/modal-accordion-custom-component.tsx
+--- a/src/views/sidebar/parts/edit/modal-accordion-custom-component.tsx	(revision 4adaba21c8889cfd3cf44adf6271b75e82f59433)
++++ b/src/views/sidebar/parts/edit/modal-accordion-custom-component.tsx	(date 1661441940000)
+@@ -6,7 +6,7 @@
+ import React, { FC, useLayoutEffect, useMemo, useRef, useState } from 'react';
+ import { Padding, Row, Icon, Container, TextWithTooltip } from '@zextras/carbonio-design-system';
+ 
+-import { AccordionFolder } from '@zextras/carbonio-shell-ui';
++import { Folder } from '@zextras/carbonio-shell-ui';
+ import { useTranslation } from 'react-i18next';
+ import { indexOf, lastIndexOf, min } from 'lodash';
+ import { getFolderIconColor, getFolderIconName, getSystemFolderTranslatedName } from '../../utils';
+@@ -14,37 +14,30 @@
+ import { Breadcrumbs } from './breadcrumbs';
+ 
+ const ModalAccordionCustomComponent: FC<{
+-	item: AccordionFolder;
+-}> = (folder) => {
+-	const { item } = folder;
++	item: Folder;
++}> = ({ item }) => {
+ 	const [t] = useTranslation();
+ 	const systemFolder = useMemo(() => {
+ 		let result = '';
+-		if (item.folder.absFolderPath) {
++		if (item.absFolderPath) {
+ 			result =
+-				item.folder.absFolderPath.indexOf('/', 1) === -1
+-					? item.folder.absFolderPath.slice(1, item.folder.absFolderPath.indexOf('/', 0))
+-					: item.folder.absFolderPath.slice(1, item.folder.absFolderPath.indexOf('/', 1));
++				item.absFolderPath.indexOf('/', 1) === -1
++					? item.absFolderPath.slice(1, item.absFolderPath.indexOf('/', 0))
++					: item.absFolderPath.slice(1, item.absFolderPath.indexOf('/', 1));
+ 		}
+ 		return result;
+-	}, [item.folder.absFolderPath]);
++	}, [item.absFolderPath]);
+ 	const translatedSystemFolder = getSystemFolderTranslatedName({ t, folderName: systemFolder });
+ 	const factor = 10;
+ 	const path = useMemo(
+ 		() =>
+-			item.folder.absFolderPath &&
+-			item.folder.absFolderPath
+-				.slice(
+-					item.folder.absFolderPath.indexOf('/', 1) + 1,
+-					item.folder.absFolderPath.lastIndexOf('/')
+-				)
++			item.absFolderPath &&
++			item.absFolderPath
++				.slice(item.absFolderPath.indexOf('/', 1) + 1, item.absFolderPath.lastIndexOf('/'))
+ 				.split('/'),
+-		[item.folder.absFolderPath]
++		[item.absFolderPath]
+ 	);
+-	const targetFolder = useMemo(
+-		() => item.label || item.folder.name,
+-		[item.label, item.folder.name]
+-	);
++	const targetFolder = useMemo(() => item.name, [item.name]);
+ 	const targetFolderWidth = useMemo(
+ 		() => min([targetFolder.length * factor + 18, 150]) || 0,
+ 		[targetFolder.length]
+@@ -77,26 +70,26 @@
+ 		let stringRemainingWidth = availableWidth;
+ 		while (
+ 			!(
+-				exitLoop !== false ||
+-				item.folder.parent?.absFolderPath === '/' ||
+-				(item.folder.parent?.isLink === true &&
+-					item.folder.parent?.absFolderPath.lastIndexOf('/', 1) !== -1)
++				exitLoop ||
++				item.parent?.absFolderPath === '/' ||
++				(item.parent?.isLink === true && item.parent?.absFolderPath?.lastIndexOf('/', 1) !== -1)
+ 			)
+ 		) {
+-			const value = item.folder.absFolderPath.slice(
+-				lastIndexOf(item.folder.absFolderPath, '/') + 1
+-			);
+-			stringRemainingWidth -= item.folder.name.length * factor + 18;
++			const value = item.absFolderPath?.slice(lastIndexOf(item.absFolderPath, '/') + 1);
++			stringRemainingWidth -= item.name.length * factor + 18;
+ 			if (value !== '' && stringRemainingWidth > 0) {
+ 				result.push({
+ 					label: value,
+ 					tooltip: ''
+ 				});
+-				item.folder = item.folder.parent;
++				if (item.parent) {
++					// eslint-disable-next-line no-param-reassign
++					item = item.parent;
++				}
+ 			} else {
+ 				result.push({
+ 					label: '...',
+-					tooltip: item.folder.absFolderPath.slice(indexOf(item.folder.absFolderPath, '/', 2) + 1)
++					tooltip: item.absFolderPath?.slice(indexOf(item.absFolderPath, '/', 2) + 1)
+ 				});
+ 				exitLoop = true;
+ 			}
+@@ -119,9 +112,9 @@
+ 				<Row orientation="horizontal" width="fill" crossAlignment="flex-start">
+ 					<Icon color={iconColor} icon={iconName || 'FolderOutline'} size="large" />
+ 					<Padding right="medium" />
+-					{crumbs?.length > 0 && <Breadcrumbs breadcrumbs={crumbs} />}
+-					<Container width="fit" maxWidth={availableWidth - fullPath.length + item.label.length}>
+-						<TextWithTooltip overflow="ellipsis">&nbsp;{item.label}</TextWithTooltip>
++					{crumbs && crumbs?.length > 0 && <Breadcrumbs breadcrumbs={crumbs} />}
++					<Container width="fit" maxWidth={availableWidth - fullPath.length + item.name.length}>
++						<TextWithTooltip overflow="ellipsis">&nbsp;{item.name}</TextWithTooltip>
+ 					</Container>
+ 				</Row>
+ 			</Padding>
+Index: src/views/sidebar/parts/edit/folder-details.tsx
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport React, { FC } from 'react';\nimport { Container, Row, Padding, Text, Divider } from '@zextras/carbonio-design-system';\nimport { useTranslation } from 'react-i18next';\nimport { AccordionFolder } from '@zextras/carbonio-shell-ui';\n\nconst bytesToSize = (bytes: number): string => {\n\tconst sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\n\tif (bytes === 0) return '0 Byte';\n\tconst i = Math.floor(Math.log(bytes) / Math.log(1024));\n\treturn `${Math.round(bytes / 1024 ** i)} ${sizes[i]}`;\n};\n\nconst FolderDetails: FC<{ folder: AccordionFolder }> = ({ folder }) => {\n\tconst [t] = useTranslation();\n\treturn (\n\t\t<>\n\t\t\t<Container\n\t\t\t\tmainAlignment=\"flex-start\"\n\t\t\t\tpadding={{ all: 'small' }}\n\t\t\t\tcrossAlignment=\"flex-start\"\n\t\t\t\ttakeAvailableSpace\n\t\t\t\twidth=\"100%\"\n\t\t\t\torientation=\"horizontal\"\n\t\t\t>\n\t\t\t\t<Row orientation=\"vertical\" width=\"33.33%\" crossAlignment=\"flex-start\">\n\t\t\t\t\t<Text size=\"small\" color=\"secondary\">\n\t\t\t\t\t\t{t('label.type', 'Type')}\n\t\t\t\t\t</Text>\n\t\t\t\t\t<Padding top=\"extrasmall\" />\n\t\t\t\t\t<Text>{t('label.mail_folder', 'E-mail folder')}</Text>\n\t\t\t\t</Row>\n\t\t\t\t<Row orientation=\"vertical\" width=\"33.33%\" crossAlignment=\"flex-start\">\n\t\t\t\t\t<Text size=\"small\" color=\"secondary\">\n\t\t\t\t\t\t{t('label.messages', 'Messages')}\n\t\t\t\t\t</Text>\n\t\t\t\t\t<Padding top=\"extrasmall\" />\n\t\t\t\t\t<Text>{folder.folder?.n}</Text>\n\t\t\t\t</Row>\n\t\t\t\t<Row orientation=\"vertical\" width=\"33.33%\" crossAlignment=\"flex-start\">\n\t\t\t\t\t<Text size=\"small\" color=\"secondary\">\n\t\t\t\t\t\tSize{t('label.size', 'Size')}\n\t\t\t\t\t</Text>\n\t\t\t\t\t<Padding top=\"extrasmall\" />\n\t\t\t\t\t<Text>{bytesToSize(folder.folder?.s || 0)}</Text>\n\t\t\t\t</Row>\n\t\t\t</Container>\n\t\t\t<Divider />\n\t\t\t<Padding bottom=\"medium\" />\n\t\t</>\n\t);\n};\n\nexport default FolderDetails;\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/views/sidebar/parts/edit/folder-details.tsx b/src/views/sidebar/parts/edit/folder-details.tsx
+--- a/src/views/sidebar/parts/edit/folder-details.tsx	(revision 4adaba21c8889cfd3cf44adf6271b75e82f59433)
++++ b/src/views/sidebar/parts/edit/folder-details.tsx	(date 1661441819000)
+@@ -6,7 +6,7 @@
+ import React, { FC } from 'react';
+ import { Container, Row, Padding, Text, Divider } from '@zextras/carbonio-design-system';
+ import { useTranslation } from 'react-i18next';
+-import { AccordionFolder } from '@zextras/carbonio-shell-ui';
++import { Folder } from '@zextras/carbonio-shell-ui';
+ 
+ const bytesToSize = (bytes: number): string => {
+ 	const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
+@@ -15,7 +15,7 @@
+ 	return `${Math.round(bytes / 1024 ** i)} ${sizes[i]}`;
+ };
+ 
+-const FolderDetails: FC<{ folder: AccordionFolder }> = ({ folder }) => {
++const FolderDetails: FC<{ folder: Folder }> = ({ folder }) => {
+ 	const [t] = useTranslation();
+ 	return (
+ 		<>
+@@ -39,14 +39,14 @@
+ 						{t('label.messages', 'Messages')}
+ 					</Text>
+ 					<Padding top="extrasmall" />
+-					<Text>{folder.folder?.n}</Text>
++					<Text>{folder.n}</Text>
+ 				</Row>
+ 				<Row orientation="vertical" width="33.33%" crossAlignment="flex-start">
+ 					<Text size="small" color="secondary">
+ 						Size{t('label.size', 'Size')}
+ 					</Text>
+ 					<Padding top="extrasmall" />
+-					<Text>{bytesToSize(folder.folder?.s || 0)}</Text>
++					<Text>{bytesToSize(folder.s || 0)}</Text>
+ 				</Row>
+ 			</Container>
+ 			<Divider />
+Index: .idea/aws.xml
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/.idea/aws.xml b/.idea/aws.xml
+new file mode 100644
+--- /dev/null	(date 1661734013891)
++++ b/.idea/aws.xml	(date 1661734013891)
+@@ -0,0 +1,11 @@
++<?xml version="1.0" encoding="UTF-8"?>
++<project version="4">
++  <component name="accountSettings">
++    <option name="activeRegion" value="us-east-1" />
++    <option name="recentlyUsedRegions">
++      <list>
++        <option value="us-east-1" />
++      </list>
++    </option>
++  </component>
++</project>
+\ No newline at end of file
+Index: package.json
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>{\n\t\"name\": \"carbonio-mails-ui\",\n\t\"version\": \"0.1.29\",\n\t\"description\": \"Mails module for Zextras Carbonio\",\n\t\"main\": \"src/app.jsx\",\n\t\"scripts\": {\n\t\t\"build\": \"sdk build\",\n\t\t\"deploy\": \"sdk deploy\",\n\t\t\"start\": \"sdk watch\",\n\t\t\"postinstall\": \"is-ci || husky install\",\n\t\t\"prepublishOnly\": \"pinst --disable\",\n\t\t\"postpublish\": \"pinst --enable\",\n\t\t\"type-check\": \"tsc --noEmit\",\n\t\t\"type-check:watch\": \"npm run type-check -- --watch\",\n\t\t\"lint\": \"eslint --ext .js,.jsx,.ts,.tsx --resolve-plugins-relative-to node_modules/@zextras/carbonio-ui-configs src\",\n\t\t\"test\": \"echo jest\"\n\t},\n\t\"files\": [\n\t\t\"src/types/\"\n\t],\n\t\"types\": \"./src/types/index.d.ts\",\n\t\"keywords\": [],\n\t\"author\": \"Zextras DL Team <https://www.zextras.com/carbonio/>\",\n\t\"maintainers\": [\n\t\t\"Matteo Dal Zovo <matteo.dalzovo@zextras.com>\",\n\t\t\"Gabriele Marino <gabriele.marino@zextras.com>\",\n\t\t\"Abhishek Kumar <abhishek.kumar@zextras.com>\",\n\t\t\"Giuliano Caregnato <giuliano.caregnato@zextras.com>\",\n\t\t\"Dhaval Dodiya <dhaval.dodiya@zextras.com>\"\n\t],\n\t\"license\": \"AGPL-3.0-only\",\n\t\"devDependencies\": {\n\t\t\"@babel/core\": \"7.16.0\",\n\t\t\"@babel/plugin-proposal-class-properties\": \"7.16.0\",\n\t\t\"@babel/plugin-transform-runtime\": \"7.16.4\",\n\t\t\"@babel/preset-env\": \"7.16.4\",\n\t\t\"@babel/preset-react\": \"7.16.0\",\n\t\t\"@babel/preset-typescript\": \"7.16.0\",\n\t\t\"@commitlint/cli\": \"14.1.0\",\n\t\t\"@commitlint/config-conventional\": \"14.1.0\",\n\t\t\"@types/history\": \"4.7.9\",\n\t\t\"@types/lodash\": \"4.14.177\",\n\t\t\"@types/react\": \"17.0.36\",\n\t\t\"@types/react-dom\": \"17.0.11\",\n\t\t\"@types/react-redux\": \"7.1.20\",\n\t\t\"@types/react-router-dom\": \"5.3.2\",\n\t\t\"@types/styled-components\": \"^5.1.15\",\n\t\t\"@zextras/carbonio-ui-configs\": \"^0.1.11\",\n\t\t\"@zextras/carbonio-ui-sdk\": \"1.3.1\",\n\t\t\"babel-jest\": \"27.3.1\",\n\t\t\"babel-plugin-i18next-extract\": \"0.8.3\",\n\t\t\"babel-plugin-styled-components\": \"2.0.1\",\n\t\t\"eslint-plugin-notice\": \"^0.9.10\",\n\t\t\"husky\": \"^5.2.0\",\n\t\t\"is-ci\": \"3.0.1\",\n\t\t\"pinst\": \"2.1.6\"\n\t},\n\t\"dependencies\": {\n\t\t\"@reduxjs/toolkit\": \"1.6.2\",\n\t\t\"@zextras/carbonio-design-system\": \"^0.3.7\",\n\t\t\"@zextras/carbonio-shell-ui\": \"^0.4.30\",\n\t\t\"@zextras/carbonio-ui-preview\": \"^0.1.5\",\n\t\t\"core-js\": \"3.19.1\",\n\t\t\"i18next\": \"^21.5.4\",\n\t\t\"immer\": \"7.0.14\",\n\t\t\"lodash\": \"4.17.21\",\n\t\t\"moment\": \"2.29.1\",\n\t\t\"path-browserify\": \"^1.0.1\",\n\t\t\"prop-types\": \"15.7.2\",\n\t\t\"react\": \"17.0.2\",\n\t\t\"react-dom\": \"17.0.2\",\n\t\t\"react-hook-form\": \"^6.15.8\",\n\t\t\"react-i18next\": \"11.14.3\",\n\t\t\"react-redux\": \"7.2.6\",\n\t\t\"react-router-dom\": \"^5.3.0\",\n\t\t\"styled-components\": \"5.3.3\",\n\t\t\"uuid\": \"^8.3.2\"\n\t},\n\t\"browserslist\": [\n\t\t\">1%\",\n\t\t\"last 1 version\",\n\t\t\"Firefox ESR\",\n\t\t\"not dead\"\n\t],\n\t\"carbonio\": {\n\t\t\"translations_repository\": \"git@bitbucket.org:zextras/com_zextras_zapp_mails.git\",\n\t\t\"name\": \"carbonio-mails-ui\",\n\t\t\"priority\": 5,\n\t\t\"type\": \"carbonio\",\n\t\t\"attrKey\": \"zimbraFeatureMailEnabled\",\n\t\t\"display\": \"Mails\",\n\t\t\"icon\": \"MailModOutline\",\n\t\t\"sentryDsn\": \"https://90672cc95a43460485b50717c4be69ab@feedback.zextras.tools/7\"\n\t}\n}\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/package.json b/package.json
+--- a/package.json	(revision 4adaba21c8889cfd3cf44adf6271b75e82f59433)
++++ b/package.json	(date 1661456034192)
+@@ -56,6 +56,10 @@
+ 		"pinst": "2.1.6"
+ 	},
+ 	"dependencies": {
++		"@emotion/react": "^11.10.0",
++		"@emotion/styled": "^11.10.0",
++		"@mui/icons-material": "^5.10.2",
++		"@mui/material": "^5.10.2",
+ 		"@reduxjs/toolkit": "1.6.2",
+ 		"@zextras/carbonio-design-system": "^0.3.7",
+ 		"@zextras/carbonio-shell-ui": "^0.4.30",
+Index: src/hooks/use-get-tags-accordions.tsx
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>/*\n * SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport React, { FC, useCallback, useContext, useMemo } from 'react';\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nimport { useTags, ZIMBRA_STANDARD_COLORS, runSearch } from '@zextras/carbonio-shell-ui';\nimport {\n\tAccordionItem,\n\tDropdown,\n\tRow,\n\tIcon,\n\tPadding,\n\tTooltip,\n\tModalManagerContext\n} from '@zextras/carbonio-design-system';\nimport { reduce } from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { createTag, useGetTagsActions } from '../ui-actions/tag-actions';\nimport { ItemType, TagsAccordionItems } from '../types';\n\ntype ItemProps = {\n\titem: ItemType;\n};\n\nconst CustomComp: FC<ItemProps> = (props) => {\n\tconst [t] = useTranslation();\n\tconst actions = useGetTagsActions({ tag: props?.item, t });\n\n\tconst triggerSearch = useCallback(\n\t\t() =>\n\t\t\trunSearch(\n\t\t\t\t[\n\t\t\t\t\t{\n\t\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\tavatarBackground: ZIMBRA_STANDARD_COLORS[props?.item?.color || 0].hex,\n\t\t\t\t\t\tavatarIcon: 'Tag',\n\t\t\t\t\t\tbackground: 'gray2',\n\t\t\t\t\t\thasAvatar: true,\n\t\t\t\t\t\tisGeneric: false,\n\t\t\t\t\t\tisQueryFilter: true,\n\t\t\t\t\t\tlabel: `tag:${props?.item?.name}`,\n\t\t\t\t\t\tvalue: `tag:\"${props?.item?.name}\"`\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t'mails'\n\t\t\t),\n\t\t[props?.item?.color, props?.item?.name]\n\t);\n\n\treturn (\n\t\t<Dropdown contextMenu items={actions} display=\"block\" width=\"fit\" onClick={triggerSearch}>\n\t\t\t<Row mainAlignment=\"flex-start\" height=\"fit\" padding={{ left: 'large' }} takeAvailableSpace>\n\t\t\t\t<Icon\n\t\t\t\t\tsize=\"large\"\n\t\t\t\t\ticon=\"Tag\"\n\t\t\t\t\tcustomColor={ZIMBRA_STANDARD_COLORS[props?.item?.color ?? 0].hex}\n\t\t\t\t/>\n\n\t\t\t\t<Padding right=\"large\" />\n\t\t\t\t<Tooltip label={props?.item?.name} placement=\"right\" maxWidth=\"100%\">\n\t\t\t\t\t<AccordionItem {...props} height={40} />\n\t\t\t\t</Tooltip>\n\t\t\t</Row>\n\t\t</Dropdown>\n\t);\n};\n\nexport const TagLabel: FC<ItemType> = (props) => {\n\tconst createModal = useContext(ModalManagerContext) as () => () => void;\n\tconst [t] = useTranslation();\n\treturn (\n\t\t<Dropdown contextMenu display=\"block\" width=\"fit\" items={[createTag({ t, createModal })]}>\n\t\t\t<Row mainAlignment=\"flex-start\" padding={{ horizontal: 'large' }} takeAvailableSpace>\n\t\t\t\t<Icon size=\"large\" icon=\"TagsMoreOutline\" /> <Padding right=\"large\" />\n\t\t\t\t<AccordionItem {...props} height={40} />\n\t\t\t</Row>\n\t\t</Dropdown>\n\t);\n};\n\nconst useGetTagsAccordion = (): TagsAccordionItems => {\n\tconst tagsFromStore = useTags();\n\tconst [t] = useTranslation();\n\n\treturn useMemo(\n\t\t() => ({\n\t\t\tid: 'Tags',\n\t\t\tlabel: t('label.tags', 'Tags'),\n\t\t\tdivider: true,\n\t\t\tactive: false,\n\t\t\topen: false,\n\t\t\tonClick: (e: Event): void => {\n\t\t\t\te.stopPropagation();\n\t\t\t},\n\t\t\tCustomComponent: TagLabel,\n\t\t\titems: reduce(\n\t\t\t\ttagsFromStore,\n\t\t\t\t(acc: Array<ItemType>, v) => {\n\t\t\t\t\tconst item = {\n\t\t\t\t\t\tid: v.id,\n\t\t\t\t\t\tactive: false,\n\t\t\t\t\t\tcolor: v.color || 0,\n\t\t\t\t\t\tdivider: false,\n\t\t\t\t\t\tlabel: v.name,\n\t\t\t\t\t\tname: v.name,\n\t\t\t\t\t\topen: false,\n\t\t\t\t\t\tCustomComponent: CustomComp\n\t\t\t\t\t};\n\t\t\t\t\tacc.push(item);\n\t\t\t\t\treturn acc;\n\t\t\t\t},\n\t\t\t\t[]\n\t\t\t)\n\t\t}),\n\t\t[t, tagsFromStore]\n\t);\n};\n\nexport default useGetTagsAccordion;\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/hooks/use-get-tags-accordions.tsx b/src/hooks/use-get-tags-accordions.tsx
+--- a/src/hooks/use-get-tags-accordions.tsx	(revision 4adaba21c8889cfd3cf44adf6271b75e82f59433)
++++ b/src/hooks/use-get-tags-accordions.tsx	(date 1661495431026)
+@@ -84,6 +84,7 @@
+ 
+ const useGetTagsAccordion = (): TagsAccordionItems => {
+ 	const tagsFromStore = useTags();
++	console.log('@@tagsFromStore', tagsFromStore);
+ 	const [t] = useTranslation();
+ 
+ 	return useMemo(
+Index: .idea/shelf/fix__shared_with_information_on_edit_folder_modal.xml
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/.idea/shelf/fix__shared_with_information_on_edit_folder_modal.xml b/.idea/shelf/fix__shared_with_information_on_edit_folder_modal.xml
+new file mode 100644
+--- /dev/null	(date 1661734013825)
++++ b/.idea/shelf/fix__shared_with_information_on_edit_folder_modal.xml	(date 1661734013825)
+@@ -0,0 +1,4 @@
++<changelist name="fix__shared_with_information_on_edit_folder_modal" date="1660292803725" recycled="false">
++  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/fix__shared_with_information_on_edit_folder_modal/shelved.patch" />
++  <option name="DESCRIPTION" value="fix: shared with information on edit folder modal" />
++</changelist>
+\ No newline at end of file
+Index: src/views/sidebar/use-folder-actions.tsx
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/views/sidebar/use-folder-actions.tsx b/src/views/sidebar/use-folder-actions.tsx
+new file mode 100644
+--- /dev/null	(date 1661441799000)
++++ b/src/views/sidebar/use-folder-actions.tsx	(date 1661441799000)
+@@ -0,0 +1,302 @@
++/*
++ * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>
++ *
++ * SPDX-License-Identifier: AGPL-3.0-only
++ */
++
++import React, { useCallback, useContext, useMemo, useState } from 'react';
++import { ModalManagerContext } from '@zextras/carbonio-design-system';
++import { Folder, FOLDERS } from '@zextras/carbonio-shell-ui';
++import { startsWith } from 'lodash';
++import { useTranslation } from 'react-i18next';
++import { useDispatch } from 'react-redux';
++import { FolderActionsType } from '../../commons/utils';
++import { folderAction } from '../../store/actions/folder-action';
++import { DeleteModal } from './delete-modal';
++import { EditModal } from './edit-modal';
++import { EmptyModal } from './empty-modal';
++import { MoveModal } from './move-modal';
++import { NewModal } from './new-modal';
++import ShareFolderModal from './share-folder-modal';
++import { SharesInfoModal } from './shares-info-modal';
++
++type FolderActionsProps = {
++	id: string;
++	icon: string;
++	label: string;
++	click: (e: MouseEvent) => void;
++	disabled?: boolean;
++};
++export const useFolderActions = (folder: Folder): Array<FolderActionsProps> => {
++	console.time('@@useFolderActions');
++	const [t] = useTranslation();
++	const dispatch = useDispatch();
++	// eslint-disable-next-line @typescript-eslint/ban-types
++	const createModal = useContext(ModalManagerContext) as Function;
++	const [activeModal, setActiveModal] = useState('default');
++	const [activeGrant, setActiveGrant] = useState({});
++	const goBack = useCallback(() => {
++		setActiveModal('default');
++	}, [setActiveModal]);
++
++	// const newFolder = useCallback(
++	// 	(_folder, _createModal, t) => ({
++	// 		id: FolderActionsType.NEW,
++	// 		icon: 'FolderAddOutline',
++	// 		label: t('label.new_folder', 'New Folder'),
++	// 		click: (e: MouseEvent): void => {
++	// 			if (e) {
++	// 				e.stopPropagation();
++	// 			}
++	// 			const closeModal = createModal(
++	// 				{
++	// 					maxHeight: '90vh',
++	// 					children: (
++	// 						<>
++	// 							<NewModal folder={_folder} onClose={(): void => closeModal()} />
++	// 						</>
++	// 					)
++	// 				},
++	// 				true
++	// 			);
++	// 		}
++	// 	}),
++	// 	[folder, createModal, t]
++	// );
++
++	const actions = useMemo(
++		() => [
++			{
++				id: FolderActionsType.NEW,
++				icon: 'FolderAddOutline',
++				label: t('label.new_folder', 'New Folder'),
++				click: (e: MouseEvent): void => {
++					if (e) {
++						e.stopPropagation();
++					}
++					const closeModal = createModal(
++						{
++							maxHeight: '90vh',
++							children: (
++								<>
++									<NewModal folder={folder} onClose={(): void => closeModal()} />
++								</>
++							)
++						},
++						true
++					);
++				}
++			},
++			{
++				id: FolderActionsType.MOVE,
++				icon: 'MoveOutline',
++				label: startsWith(folder.absFolderPath, '/Trash')
++					? t('label.restore', 'Restore')
++					: t('label.move', 'Move'),
++				click: (e: MouseEvent): void => {
++					if (e) {
++						e.stopPropagation();
++					}
++					const closeModal = createModal(
++						{
++							maxHeight: '90vh',
++							children: (
++								<>
++									<MoveModal folder={folder} onClose={(): void => closeModal()} />
++								</>
++							)
++						},
++						true
++					);
++				}
++			},
++			{
++				id: FolderActionsType.EMPTY,
++				icon: folder.id === FOLDERS.TRASH ? 'DeletePermanentlyOutline' : 'EmptyFolderOutline',
++				label:
++					folder.id === FOLDERS.TRASH
++						? t('folder_panel.action.empty.trash', 'Empty Trash')
++						: t('folder_panel.action.wipe.folder_panel', 'Wipe Folder'),
++				disabled: folder.n === 0 && folder.children?.length === 0,
++				click: (e: MouseEvent): void => {
++					if (e) {
++						e.stopPropagation();
++					}
++					const closeModal = createModal(
++						{
++							children: (
++								<>
++									<EmptyModal onClose={(): void => closeModal()} folder={folder} />
++								</>
++							)
++						},
++						true
++					);
++				}
++			},
++			{
++				id: FolderActionsType.EDIT,
++				icon: 'Edit2Outline',
++				label: folder.isLink
++					? t('folder_panel.action.edit_properties', 'Edit Properties')
++					: t('label.edit', 'Edit'),
++				click: (e: MouseEvent): void => {
++					if (e) {
++						e.stopPropagation();
++					}
++					const closeModal = createModal(
++						{
++							maxHeight: '90vh',
++							children: (
++								<>
++									<EditModal onClose={(): void => closeModal()} folder={folder} />
++								</>
++							)
++						},
++						true
++					);
++				}
++			},
++			{
++				id: FolderActionsType.DELETE,
++				icon: 'Trash2Outline',
++				label: startsWith(folder.absFolderPath, '/Trash')
++					? t('label.delete_permanently', 'Delete Permanently')
++					: t('label.delete', 'Delete'),
++				click: (e: MouseEvent): void => {
++					if (e) {
++						e.stopPropagation();
++					}
++					const closeModal = createModal(
++						{
++							children: (
++								<>
++									<DeleteModal onClose={(): void => closeModal()} folder={folder} />
++								</>
++							)
++						},
++						true
++					);
++				}
++			},
++			{
++				id: FolderActionsType.SHARE,
++				icon: 'ShareOutline',
++				label: t('action.share_folder', 'Share folder'),
++				click: (e: MouseEvent): void => {
++					if (e) {
++						e.stopPropagation();
++					}
++					const closeModal = createModal(
++						{
++							children: (
++								<>
++									<ShareFolderModal
++										onClose={(): void => closeModal()}
++										folder={folder}
++										activeGrant={activeGrant}
++										goBack={goBack}
++									/>
++								</>
++							)
++						},
++						true
++					);
++				}
++			},
++			{
++				id: FolderActionsType.REMOVE_FROM_LIST,
++				icon: 'CloseOutline',
++				label: t('label.remove_from_this_list', 'Remove from this list'),
++				click: (e): void => {
++					if (e) {
++						e.stopPropagation();
++						dispatch(folderAction({ folder, op: 'delete' }));
++					}
++				}
++			},
++			{
++				id: FolderActionsType.SHARES_INFO,
++				icon: 'InfoOutline',
++				label: t('label.shares_info', `Shared folder's info`),
++				click: (e): void => {
++					if (e) {
++						e.stopPropagation();
++					}
++					const closeModal = createModal(
++						{
++							children: (
++								<>
++									<SharesInfoModal onClose={(): void => closeModal()} folder={folder} />
++								</>
++							)
++						},
++						true
++					);
++				}
++			}
++		],
++		[activeGrant, createModal, dispatch, folder, goBack, t]
++	);
++
++	const defaultFolderActions = useMemo(
++		() =>
++			actions.filter(
++				(action) =>
++					action.id !== FolderActionsType.SHARES_INFO &&
++					action.id !== FolderActionsType.REMOVE_FROM_LIST
++			),
++		[actions]
++	);
++	const id =
++		folder.id.indexOf(':') !== -1 ? folder.id.slice(folder.id.indexOf(':') + 1) : folder.id;
++
++	console.count('@@folderActions');
++	switch (id) {
++		// default folders
++		case FOLDERS.INBOX:
++		case FOLDERS.SENT:
++		case FOLDERS.DRAFTS:
++			return defaultFolderActions.map((action) =>
++				action.id === FolderActionsType.MOVE || action.id === FolderActionsType.DELETE
++					? { ...action, disabled: true }
++					: action
++			);
++
++		case FOLDERS.SPAM:
++			return defaultFolderActions.map((action) =>
++				action.id === FolderActionsType.NEW ||
++				action.id === FolderActionsType.MOVE ||
++				action.id === FolderActionsType.DELETE
++					? { ...action, disabled: true }
++					: action
++			);
++		case FOLDERS.TRASH:
++			return defaultFolderActions.map((action) =>
++				action.id === FolderActionsType.MOVE ||
++				action.id === FolderActionsType.DELETE ||
++				action.id === FolderActionsType.EDIT ||
++				action.id === FolderActionsType.SHARE
++					? { ...action, disabled: true }
++					: action
++			);
++		// customizable folders
++		default:
++			return folder.isLink
++				? actions.filter(
++						(action) =>
++							action.id === FolderActionsType.SHARES_INFO ||
++							action.id === FolderActionsType.REMOVE_FROM_LIST ||
++							action.id === FolderActionsType.EDIT
++				  )
++				: defaultFolderActions.map((action) => {
++						if (
++							startsWith(folder.absFolderPath, '/Trash') &&
++							(action.id === FolderActionsType.NEW || action.id === FolderActionsType.EDIT)
++						) {
++							return { ...action, disabled: true };
++						}
++						return action;
++				  });
++	}
++};
+Index: src/types/share/index.d.ts
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { Dispatch } from '@reduxjs/toolkit';\n\nexport type ShareCalendarModalProps = {\n\topenModal: () => void;\n\tsetModal: (a: any) => void;\n\tdispatch: Dispatch;\n\tt: (...args: any[]) => string;\n\ttoggleSnackbar: () => void;\n\tfolder: string;\n\tfolders: any;\n\tallCalendars: any;\n};\n\nexport type ShareFolderModalProps = {\n\topenModal: () => void;\n\tsetModal: (a: any) => void;\n\tdispatch: Dispatch;\n\tt: (...args: any[]) => string;\n\tcreateSnackbar: (obj: any) => void;\n\tfolder: any;\n\tfolders: any;\n\tallFolders: any;\n};\n\nexport type ResponseActionsProps = {\n\tdispatch: Dispatch;\n\tt: (...args: any[]) => string;\n\tcreateSnackbar: any;\n\tzid: string;\n\tview: string;\n\trid: string;\n\tmsgId: string;\n\tsharedCalendarName: string;\n\tgrantee: string;\n\towner: string;\n\trole: string;\n\tallowedActions: string;\n\tparticipants: any;\n};\n\nexport type ReplyShareParameters = {\n\tdata: any;\n};\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/types/share/index.d.ts b/src/types/share/index.d.ts
+--- a/src/types/share/index.d.ts	(revision 4adaba21c8889cfd3cf44adf6271b75e82f59433)
++++ b/src/types/share/index.d.ts	(date 1661519394163)
+@@ -47,3 +47,28 @@
+ export type ReplyShareParameters = {
+ 	data: any;
+ };
++
++export type GranteeInfoProps = {
++	grant: Grant;
++	shareCalendarRoleOptions: ShareCalendarRoleOptions;
++	hovered?: boolean;
++};
++
++export type GranteeProps = {
++	grant: Grant;
++	folder: FolderType;
++	onMouseLeave?: () => void;
++	onMouseEnter?: () => void;
++	setActiveModal: (modal: string) => void;
++	shareCalendarRoleOptions: ShareCalendarRoleOptions;
++};
++
++export type ShareFolderPropertiesProps = {
++	folder: FolderType;
++	setActiveModal;
++};
++
++export type ShareCalendarRoleOptions = {
++	label: string;
++	value: string;
++};
+Index: src/views/sidebar/button-find-shares.tsx
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/views/sidebar/button-find-shares.tsx b/src/views/sidebar/button-find-shares.tsx
+new file mode 100644
+--- /dev/null	(date 1661435381000)
++++ b/src/views/sidebar/button-find-shares.tsx	(date 1661435381000)
+@@ -0,0 +1,57 @@
++/*
++ * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>
++ *
++ * SPDX-License-Identifier: AGPL-3.0-only
++ */
++
++import React, { FC, useCallback, useContext } from 'react';
++import { Button, ModalManagerContext, Container } from '@zextras/carbonio-design-system';
++import { filter, isEqual, uniqWith } from 'lodash';
++import { useTranslation } from 'react-i18next';
++import { useDispatch } from 'react-redux';
++import { getShareInfo } from '../../store/actions/get-share-info';
++import { ResFolder } from '../../types';
++import { SharesModal } from './shares-modal';
++
++export const ButtonFindShares: FC = () => {
++	const [t] = useTranslation();
++	const dispatch = useDispatch();
++	// eslint-disable-next-line @typescript-eslint/ban-types
++	const createModal = useContext(ModalManagerContext) as Function;
++
++	const openFindShares = useCallback(
++		(ev: MouseEvent): void => {
++			ev.stopPropagation();
++			dispatch(getShareInfo())
++				// eslint-disable-next-line @typescript-eslint/ban-ts-comment
++				// @ts-ignore
++				.then((res: any) => {
++					if (res.type.includes('fulfilled') && res.payload?.share?.length > 0) {
++						const resFolders: Array<ResFolder> = uniqWith(
++							filter(res.payload.share, ['view', 'message']),
++							isEqual
++						);
++						const closeModal = createModal(
++							{
++								children: <SharesModal folders={resFolders} onClose={(): void => closeModal()} />
++							},
++							true
++						);
++					}
++				});
++		},
++		[createModal, dispatch]
++	);
++
++	return (
++		<Container padding={{ horizontal: 'medium', vertical: 'small' }}>
++			<Button
++				type="outlined"
++				label={t('label.find_shares', 'Find shares')}
++				color="primary"
++				size="fill"
++				onClick={openFindShares}
++			/>
++		</Container>
++	);
++};
+Index: src/views/sidebar/accordion-mui.tsx
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/views/sidebar/accordion-mui.tsx b/src/views/sidebar/accordion-mui.tsx
+new file mode 100644
+--- /dev/null	(date 1661498558173)
++++ b/src/views/sidebar/accordion-mui.tsx	(date 1661498558173)
+@@ -0,0 +1,62 @@
++/*
++ * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>
++ *
++ * SPDX-License-Identifier: AGPL-3.0-only
++ */
++
++import ExpandMoreIcon from '@mui/icons-material/ExpandMore';
++import Accordion from '@mui/material/Accordion';
++import AccordionDetails from '@mui/material/AccordionDetails';
++import AccordionSummary from '@mui/material/AccordionSummary';
++import Container from '@mui/material/Container';
++import { Folder } from '@zextras/carbonio-shell-ui';
++import React, { FC, SyntheticEvent, useRef } from 'react';
++import { useLocalStorage } from '../../hooks/use-local-storage';
++import AccordionCustomComponent from './accordion-custom-component';
++import { ButtonFindShares } from './button-find-shares';
++
++export const AccordionMui: FC<{ accordions: Array<Folder> }> = ({ accordions }) => {
++	const [openIds, setOpenIds] = useLocalStorage<Array<string>>('open_mails_folders', []);
++	const sidebarRef = useRef<HTMLInputElement>(null);
++	const onChange = (accordion: Folder) => (event: SyntheticEvent, isExpanded: boolean) => {
++		if (isExpanded) {
++			setOpenIds((state: Array<string>) =>
++				state.includes(accordion.id) ? state : [...state, accordion.id]
++			);
++		} else {
++			setOpenIds((state: Array<string>) => state.filter((id) => id !== accordion.id));
++		}
++	};
++	return (
++		<Container disableGutters sx={{ backgroundColor: 'red', width: '100%' }}>
++			{accordions.map((accordion) =>
++				accordion.id === 'find_shares' ? (
++					<ButtonFindShares />
++				) : (
++					<div key={accordion.id} ref={sidebarRef}>
++						<Accordion
++							disableGutters
++							onChange={onChange(accordion)}
++							TransitionProps={{ unmountOnExit: true }}
++							sx={{ padding: '0px' }}
++							expanded={openIds.includes(accordion.id)}
++						>
++							<AccordionSummary
++								expandIcon={accordion.children.length > 0 && <ExpandMoreIcon />}
++								aria-controls="panel1a-content"
++								id={accordion.id}
++							>
++								<AccordionCustomComponent item={accordion} />
++							</AccordionSummary>
++							{accordion.children.length > 0 && (
++								<AccordionDetails>
++									<AccordionMui accordions={accordion.children} />
++								</AccordionDetails>
++							)}
++						</Accordion>
++					</div>
++				)
++			)}
++		</Container>
++	);
++};
+Index: src/commons/utils.tsx
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport moment from 'moment';\nimport { find, isArray } from 'lodash';\nimport { TFunction } from 'react-i18next';\nimport { Account } from '@zextras/carbonio-shell-ui';\nimport { Participant } from '../types/participant';\n\nexport const getTimeLabel = (date: number): string => {\n\tconst momentDate = moment(date);\n\tif (momentDate.isSame(new Date(), 'day')) {\n\t\treturn momentDate.format('LT');\n\t}\n\tif (momentDate.isSame(new Date(), 'week')) {\n\t\treturn momentDate.format('dddd, LT');\n\t}\n\tif (momentDate.isSame(new Date(), 'month')) {\n\t\treturn momentDate.format('DD MMMM');\n\t}\n\treturn momentDate.format('DD/MM/YYYY');\n};\n\nexport const participantToString = (\n\tparticipant: Participant | undefined,\n\tt: TFunction,\n\taccounts: Array<Account>\n): string => {\n\tconst me = find(accounts, ['name', participant?.address]);\n\tif (me) {\n\t\treturn t('label.me', 'Me');\n\t}\n\treturn participant?.fullName || participant?.name || participant?.address || '';\n};\n\nexport const isAvailableInTrusteeList = (\n\ttrusteeList: Array<string> | string,\n\taddress: string\n): boolean => {\n\tlet trusteeAddress: Array<string> = [];\n\tlet availableInTrusteeList = false;\n\tif (trusteeList) {\n\t\ttrusteeAddress = isArray(trusteeList) ? trusteeList : trusteeList.split(',');\n\t}\n\tif (trusteeAddress.length > 0) {\n\t\tconst domain = address.substring(address.lastIndexOf('@') + 1);\n\t\ttrusteeAddress.forEach((ta) => {\n\t\t\tif (ta === domain || ta === address) {\n\t\t\t\tavailableInTrusteeList = true;\n\t\t\t}\n\t\t});\n\t}\n\treturn availableInTrusteeList;\n};\n\n// eslint-disable-next-line no-shadow\nexport enum LineType {\n\tORIG_UNKNOWN = 'UNKNOWN',\n\tORIG_QUOTED = 'QUOTED',\n\tORIG_SEP_STRONG = 'SEP_STRONG',\n\tORIG_WROTE_STRONG = 'WROTE_STRONG',\n\tORIG_WROTE_WEAK = 'WROTE_WEAK',\n\tORIG_HEADER = 'HEADER',\n\tORIG_LINE = 'LINE',\n\tHTML_SEP_ID = 'zwchr',\n\tNOTES_SEPARATOR = '*~*~*~*~*~*~*~*~*~*'\n}\n\n// eslint-disable-next-line no-shadow\nexport enum FolderActionsType {\n\tNEW = 'new',\n\tMOVE = 'move',\n\tDELETE = 'delete',\n\tEDIT = 'edit',\n\tEMPTY = 'empty',\n\tREMOVE_FROM_LIST = 'removeFromList',\n\tSHARES_INFO = 'sharesInfo',\n\tSHARE = 'share'\n}\n\n// eslint-disable-next-line no-shadow\nexport enum ParticipantRole {\n\tFROM = 'f',\n\tTO = 't',\n\tCARBON_COPY = 'c',\n\tBLIND_CARBON_COPY = 'b',\n\tREPLY_TO = 'r',\n\tSENDER = 's',\n\tREAD_RECEIPT_NOTIFICATION = 'n',\n\tRESENT_FROM = 'rf'\n}\n\n// eslint-disable-next-line no-shadow\nexport enum ActionsType {\n\tNEW = 'new',\n\tEDIT_AS_DRAFT = 'editAsDraft',\n\tEDIT_AS_NEW = 'editAsNew',\n\tREPLY = 'reply',\n\tREPLY_ALL = 'replyAll',\n\tFORWARD = 'forward',\n\tMAIL_TO = 'mailTo',\n\tCOMPOSE = 'compose',\n\tPREFILL_COMPOSE = 'prefillCompose'\n}\n\n// eslint-disable-next-line no-shadow\nexport enum TagsActionsType {\n\tNEW = 'new',\n\tDELETE = 'delete',\n\tEDIT = 'edit',\n\tApply = 'apply'\n}\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/commons/utils.tsx b/src/commons/utils.tsx
+--- a/src/commons/utils.tsx	(revision 4adaba21c8889cfd3cf44adf6271b75e82f59433)
++++ b/src/commons/utils.tsx	(date 1660294413000)
+@@ -112,3 +112,12 @@
+ 	EDIT = 'edit',
+ 	Apply = 'apply'
+ }
++
++// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
++export const omitBy = (obj: any, check: (arg: unknown) => boolean): any => {
++	// eslint-disable-next-line no-param-reassign
++	obj = { ...obj };
++	// eslint-disable-next-line no-param-reassign
++	Object.entries(obj).forEach(([key, value]) => check(value) && delete obj[key]);
++	return obj;
++};
+Index: src/types/utils/index.d.ts
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport { AccordionFolder } from '@zextras/carbonio-shell-ui';\nimport { TFunction } from 'react-i18next';\n\nexport type ModalFooterProps = {\n\tmainAlignment?: string | undefined;\n\tcrossAlignment?: string | undefined;\n\tpadding?: Record<string, string> | undefined;\n\tonConfirm: (a: string) => void;\n\tsecondaryAction?: () => void | undefined;\n\tlabel: string;\n\tsecondaryLabel?: string | undefined;\n\tdisabled?: boolean | undefined;\n\tsecondaryDisabled?: boolean | undefined;\n\tbackground?: string | undefined;\n\tsecondarybackground?: string | undefined;\n\tcolor?: string | undefined;\n\tsecondaryColor?: string | undefined;\n\tsize?: string | undefined;\n\tprimaryBtnType?: string | undefined;\n\tsecondaryBtnType?: string | undefined;\n\tshowDivider?: boolean;\n\ttooltip?: string;\n\tsecondaryTooltip?: string;\n\tpaddingTop?: string;\n};\n\nexport type SnackbarArgumentType = {\n\tkey: string;\n\treplace: boolean;\n\ttype: string;\n\tlabel: string;\n\tautoHideTimeout: number;\n\thideButton?: boolean;\n\tactionLabel?: string;\n\tonActionClick?: TFunction;\n};\n\nexport type CreateSnackbar = (arg: {\n\tkey: string;\n\treplace?: boolean;\n\ttype: string;\n\thideButton?: boolean;\n\tlabel: string;\n\tautoHideTimeout: number;\n\tactionLabel?: string;\n\tonActionClick?: () => void;\n}) => void;\n\nexport type ModalProps = {\n\tfolder: AccordionFolder;\n\tonClose: () => void;\n};\n\nexport type Crumb = {\n\tlabel: string;\n\ttooltip: string;\n};\n\nexport type ResFolder = AccordionFolder &\n\tPartial<{\n\t\tfolderId: number;\n\t\tfolderPath: string;\n\t\tfolderUuid: string;\n\t\tgranteeId: string;\n\t\tgranteeName: string;\n\t\tgranteeType: string;\n\t\tmid: string;\n\t\townerEmail: string;\n\t\townerId: string;\n\t\townerName: string;\n\t\trights: string;\n\t\tview: string;\n\t}>;\n\nexport type DataProps = {\n\tid: string;\n\tdate: number;\n\tmsgCount: number;\n\tunreadMsgCount: number;\n\tmessages: [\n\t\t{\n\t\t\tid: string;\n\t\t\tparent: string;\n\t\t\tdate: number;\n\t\t}\n\t];\n\tparticipants: [\n\t\t{\n\t\t\ttype: string;\n\t\t\taddress: string;\n\t\t\tname: string;\n\t\t\tfullName: string;\n\t\t},\n\t\t{\n\t\t\ttype: string;\n\t\t\taddress: string;\n\t\t\tname: string;\n\t\t}\n\t];\n\tsubject: string;\n\tfragment: string;\n\tread: false;\n\tattachment: false;\n\tflagged: false;\n\turgent: false;\n\tparentFolderId: string;\n\tselectedIDs: Array<string>;\n};\n\nexport type TextReadValuesProps = {\n\tcolor: string;\n\tweight: string;\n\tbadge: 'unread' | 'read';\n};\n\nexport type CreateSnackbarProps = {\n\tkey: string;\n\treplace: boolean;\n\ttype: string;\n\tlabel: string;\n\tautoHideTimeout: number;\n\thideButton: boolean;\n};\n\nexport type CreateSnackbar = (arg: {\n\tkey: string;\n\treplace?: boolean;\n\ttype: string;\n\thideButton?: boolean;\n\tlabel: string;\n\tautoHideTimeout: number;\n\tactionLabel?: string;\n\tonActionClick?: () => void;\n}) => void;\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/types/utils/index.d.ts b/src/types/utils/index.d.ts
+--- a/src/types/utils/index.d.ts	(revision 4adaba21c8889cfd3cf44adf6271b75e82f59433)
++++ b/src/types/utils/index.d.ts	(date 1661441508000)
+@@ -3,7 +3,7 @@
+  *
+  * SPDX-License-Identifier: AGPL-3.0-only
+  */
+-import { AccordionFolder } from '@zextras/carbonio-shell-ui';
++import { Folder } from '@zextras/carbonio-shell-ui';
+ import { TFunction } from 'react-i18next';
+ 
+ export type ModalFooterProps = {
+@@ -52,7 +52,7 @@
+ }) => void;
+ 
+ export type ModalProps = {
+-	folder: AccordionFolder;
++	folder: Folder;
+ 	onClose: () => void;
+ };
+ 
+@@ -61,7 +61,7 @@
+ 	tooltip: string;
+ };
+ 
+-export type ResFolder = AccordionFolder &
++export type ResFolder = Folder &
+ 	Partial<{
+ 		folderId: number;
+ 		folderPath: string;
+Index: src/types/folder/index.d.ts
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>/*\n * SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nexport type FolderType = {\n\tid: string;\n\tuuid: string;\n\tname: string;\n\tpath: string | undefined;\n\tparent: string;\n\tparentUuid: string;\n\tunreadCount: number;\n\tsize: number;\n\titemsCount: number;\n\tsynced: boolean;\n\tabsParent: string;\n\titems: FolderType[];\n\tlevel: number;\n\tto: string;\n\tcolor: string;\n\trgb: string;\n\trid?: string;\n\tisSharedFolder?: boolean;\n\tisShared?: boolean;\n\towner?: string;\n\tzid?: string;\n\tacl?: unknown;\n\tperm?: string;\n\tretentionPolicy?: unknown;\n};\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/types/folder/index.d.ts b/src/types/folder/index.d.ts
+--- a/src/types/folder/index.d.ts	(revision 4adaba21c8889cfd3cf44adf6271b75e82f59433)
++++ b/src/types/folder/index.d.ts	(date 1661518102009)
+@@ -29,4 +29,5 @@
+ 	acl?: unknown;
+ 	perm?: string;
+ 	retentionPolicy?: unknown;
++	children?: Array<unknown>;
+ };
+Index: src/store/actions/conv-action.ts
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport { createAsyncThunk } from '@reduxjs/toolkit';\nimport { soapFetch } from '@zextras/carbonio-shell-ui';\nimport { isNil, omitBy } from 'lodash';\nimport {\n\tConvActionParameters,\n\tConvActionRequest,\n\tConvActionResponse,\n\tConvActionResult\n} from '../../types';\n\nexport const convAction = createAsyncThunk<ConvActionResult, ConvActionParameters>(\n\t'convAction',\n\tasync ({ ids, operation, parent, tagName }) => {\n\t\tconst { action } = (await soapFetch<ConvActionRequest, ConvActionResponse>('ConvAction', {\n\t\t\t_jsns: 'urn:zimbraMail',\n\n\t\t\taction: omitBy(\n\t\t\t\t{\n\t\t\t\t\tid: ids.join(','),\n\t\t\t\t\top: operation,\n\t\t\t\t\tl: parent,\n\t\t\t\t\ttn: tagName\n\t\t\t\t},\n\t\t\t\tisNil\n\t\t\t)\n\t\t})) as ConvActionResponse;\n\t\treturn {\n\t\t\tids: action.id.split(','),\n\t\t\toperation: action.op\n\t\t};\n\t}\n);\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/store/actions/conv-action.ts b/src/store/actions/conv-action.ts
+--- a/src/store/actions/conv-action.ts	(revision 4adaba21c8889cfd3cf44adf6271b75e82f59433)
++++ b/src/store/actions/conv-action.ts	(date 1660294413000)
+@@ -6,6 +6,7 @@
+ import { createAsyncThunk } from '@reduxjs/toolkit';
+ import { soapFetch } from '@zextras/carbonio-shell-ui';
+ import { isNil, omitBy } from 'lodash';
++// import { omitBy } from '../../commons/utils';
+ import {
+ 	ConvActionParameters,
+ 	ConvActionRequest,
+Index: src/store/utils.ts
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport { max, map, filter, find, reduce, some, merge, isNil, omitBy } from 'lodash';\nimport { FolderType, MailsFolderMap, FoldersStateType } from '../types';\n\nexport function findDepth(subFolder: FolderType, depth = 1): number {\n\tif (subFolder && subFolder.items && subFolder.items.length) {\n\t\treturn <number>max(map(subFolder.items, (item) => findDepth(item, depth + 1)));\n\t}\n\treturn depth;\n}\n\nexport function calcFolderItems(\n\tfolders: MailsFolderMap,\n\tsubFolders: FolderType | undefined,\n\tid: string\n): FolderType[] {\n\treturn map(\n\t\tfilter(folders, (item) => item.parent === id),\n\t\t(item) => ({\n\t\t\t...item,\n\t\t\titems: calcFolderItems(folders, subFolders, item.id),\n\t\t\tto: `/folder/${item.id}`\n\t\t})\n\t);\n}\n\nexport function calcFolderAbsParentLevelAndPath(\n\tfolders: MailsFolderMap,\n\tsubFolder: FolderType | undefined,\n\tpath = subFolder && subFolder.name,\n\tlevel = 1\n): { absParent: string; level: number; path: string | undefined } | undefined {\n\tif (!subFolder) return undefined;\n\tconst nextFolder = find(folders, (item) => item.id === subFolder.parent);\n\tconst nextPath = `${nextFolder ? nextFolder.name : ''}/${path}`;\n\treturn (\n\t\tcalcFolderAbsParentLevelAndPath(folders, nextFolder, nextPath, level + 1) || {\n\t\t\tabsParent: level > 1 ? subFolder.id : subFolder.parent,\n\t\t\tlevel,\n\t\t\tpath\n\t\t}\n\t);\n}\n\n// replaced lodash \"reduce\" method with vanilla JS in order to decrease iterations and improve performance\nexport function updateFolders(state: FoldersStateType, folders: FolderType[]): void {\n\tstate.folders = Object.values(state.folders).reduce((acc, item) => {\n\t\tconst newFolder = omitBy(\n\t\t\tObject.values(folders).find((c) => c.id === item.id),\n\t\t\tisNil\n\t\t);\n\t\tconst toRet = newFolder ? { ...item, ...newFolder } : item;\n\n\t\treturn {\n\t\t\t...acc,\n\t\t\t[toRet.id]: {\n\t\t\t\t...toRet\n\t\t\t}\n\t\t};\n\t}, {});\n}\n\nexport function updateFolderInStore(state: FoldersStateType, folders: FolderType[]): void {\n\tstate.folders = reduce(\n\t\tstate.folders,\n\t\t(acc, item) => {\n\t\t\tconst toRet = find(folders, (c) => c.id === item.id) || item;\n\n\t\t\tconst items = calcFolderItems(state.folders, toRet, toRet.id);\n\t\t\tconst moreParams = calcFolderAbsParentLevelAndPath(state.folders, toRet);\n\t\t\treturn {\n\t\t\t\t...acc,\n\t\t\t\t[toRet.id]: {\n\t\t\t\t\t...toRet,\n\t\t\t\t\t...moreParams,\n\t\t\t\t\tdepth: findDepth({ ...toRet, items }),\n\t\t\t\t\titems,\n\t\t\t\t\tpath: moreParams ? `/${moreParams.path}` : undefined\n\t\t\t\t}\n\t\t\t};\n\t\t},\n\t\t{}\n\t);\n}\n\nexport function updatePartialFolderInStore(state: FoldersStateType, folders: FolderType[]): void {\n\tstate.folders = reduce(\n\t\tstate.folders,\n\t\t(acc, item) => {\n\t\t\tconst itemToUpdate = find(folders, (c) => c.id === item.id);\n\t\t\tconst toRet = merge(item, itemToUpdate ?? {});\n\n\t\t\tconst items = calcFolderItems(state.folders, toRet, toRet.id);\n\t\t\tconst moreParams = calcFolderAbsParentLevelAndPath(state.folders, toRet);\n\t\t\treturn {\n\t\t\t\t...acc,\n\t\t\t\t[toRet.id]: {\n\t\t\t\t\t...toRet,\n\t\t\t\t\t...moreParams,\n\t\t\t\t\tdepth: findDepth({ ...toRet, items }),\n\t\t\t\t\titems,\n\t\t\t\t\tpath: moreParams ? `/${moreParams.path}` : undefined\n\t\t\t\t}\n\t\t\t};\n\t\t},\n\t\t{}\n\t);\n}\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport function addFoldersToStore(state: FoldersStateType, folders: any): void {\n\tstate.folders = reduce(folders, (acc, v, k) => ({ ...acc, [v.id]: v }), state.folders);\n}\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport function removeFoldersFromStore(state: FoldersStateType, idsToDelete: any): void {\n\t// state.folders = omit(state.folders, idsToDelete); Maybe?\n\tstate.folders = reduce(\n\t\tstate.folders,\n\t\t(acc, v, k) => {\n\t\t\tconst value = some(idsToDelete, (cid) => cid === v.id);\n\t\t\treturn value ? { ...acc } : { ...acc, [v.id]: v };\n\t\t},\n\t\t{} as MailsFolderMap\n\t);\n}\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/store/utils.ts b/src/store/utils.ts
+--- a/src/store/utils.ts	(revision 4adaba21c8889cfd3cf44adf6271b75e82f59433)
++++ b/src/store/utils.ts	(date 1660294413000)
+@@ -3,7 +3,7 @@
+  *
+  * SPDX-License-Identifier: AGPL-3.0-only
+  */
+-import { max, map, filter, find, reduce, some, merge, isNil, omitBy } from 'lodash';
++import { max, map, filter, find, reduce, omitBy, some, merge, isNil } from 'lodash';
+ import { FolderType, MailsFolderMap, FoldersStateType } from '../types';
+ 
+ export function findDepth(subFolder: FolderType, depth = 1): number {
+Index: src/store/actions/get-conv.ts
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport { createAsyncThunk } from '@reduxjs/toolkit';\nimport { soapFetch } from '@zextras/carbonio-shell-ui';\nimport { map } from 'lodash';\nimport { normalizeConversation } from '../../normalizations/normalize-conversation';\nimport { normalizeMailMessageFromSoap } from '../../normalizations/normalize-message';\nimport {\n\tConversation,\n\tGetConvParameters,\n\tGetConvRequest,\n\tGetConvResponse,\n\tIncompleteMessage\n} from '../../types';\n\nexport const getConv = createAsyncThunk<\n\t{ conversation: Partial<Conversation>; messages: Array<IncompleteMessage> },\n\tGetConvParameters\n>(\n\t'conversations/getConv',\n\tasync ({ conversationId, fetch = 'all' }) => {\n\t\tconst result = (await soapFetch<GetConvRequest, GetConvResponse>('GetConv', {\n\t\t\t_jsns: 'urn:zimbraMail',\n\t\t\tc: {\n\t\t\t\tid: conversationId,\n\t\t\t\thtml: 1,\n\t\t\t\tneedExp: 1,\n\t\t\t\tfetch\n\t\t\t}\n\t\t})) as GetConvResponse;\n\t\tconst conversation = normalizeConversation(result.c[0]);\n\t\tconst messages = map(result.c[0].m, (item) =>\n\t\t\tnormalizeMailMessageFromSoap(item, false)\n\t\t) as unknown as Array<IncompleteMessage>;\n\t\treturn { conversation, messages };\n\t},\n\t{\n\t\tcondition: ({ folderId, conversationId }: GetConvParameters, { getState }: any) => {\n\t\t\tif (!folderId) return true;\n\t\t\treturn (\n\t\t\t\tgetState().conversations?.expandedStatus[conversationId] !== 'complete' &&\n\t\t\t\tgetState().conversations?.expandedStatus[conversationId] !== 'pending'\n\t\t\t);\n\t\t}\n\t}\n);\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/store/actions/get-conv.ts b/src/store/actions/get-conv.ts
+--- a/src/store/actions/get-conv.ts	(revision 4adaba21c8889cfd3cf44adf6271b75e82f59433)
++++ b/src/store/actions/get-conv.ts	(date 1660294413000)
+@@ -4,7 +4,7 @@
+  * SPDX-License-Identifier: AGPL-3.0-only
+  */
+ import { createAsyncThunk } from '@reduxjs/toolkit';
+-import { soapFetch } from '@zextras/carbonio-shell-ui';
++import { getTags, soapFetch } from '@zextras/carbonio-shell-ui';
+ import { map } from 'lodash';
+ import { normalizeConversation } from '../../normalizations/normalize-conversation';
+ import { normalizeMailMessageFromSoap } from '../../normalizations/normalize-message';
+@@ -31,7 +31,8 @@
+ 				fetch
+ 			}
+ 		})) as GetConvResponse;
+-		const conversation = normalizeConversation(result.c[0]);
++		const tags = getTags();
++		const conversation = normalizeConversation({ c: result.c[0], tags });
+ 		const messages = map(result.c[0].m, (item) =>
+ 			normalizeMailMessageFromSoap(item, false)
+ 		) as unknown as Array<IncompleteMessage>;
+Index: src/normalizations/normalize-message.ts
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport { getTags } from '@zextras/carbonio-shell-ui';\nimport { filter, find, isNil, map, omitBy, reduce } from 'lodash';\nimport { ParticipantRole } from '../commons/utils';\nimport {\n\tIncompleteMessage,\n\tMailMessagePart,\n\tSoapEmailParticipantRole,\n\tSoapMailParticipant,\n\tParticipant,\n\tSoapIncompleteMessage,\n\tSoapMailMessagePart\n} from '../types';\n\nexport function normalizeMailPartMapFn(v: SoapMailMessagePart): MailMessagePart {\n\tconst ret: MailMessagePart = {\n\t\tcontentType: v.ct,\n\t\tsize: v.s || 0,\n\t\tname: v.part,\n\t\tdisposition: v.cd\n\t};\n\tif (v.mp) {\n\t\tret.parts = map(v.mp || [], normalizeMailPartMapFn);\n\t}\n\tif (v.filename) ret.filename = v.filename;\n\tif (v.content) ret.content = v.content;\n\tif (v.ci) ret.ci = v.ci;\n\tif (v.cd) ret.disposition = v.cd;\n\treturn ret;\n}\n\nfunction findBodyPart(\n\tmp: Array<SoapMailMessagePart>,\n\tacc: { contentType: string; content: string },\n\tid: string\n): { contentType: string; content: string } {\n\tconst bodyPart = reduce(\n\t\tmp,\n\t\t(found, part) => {\n\t\t\tif (part.mp) return findBodyPart(part.mp, found, id);\n\t\t\tif (part && part.body) {\n\t\t\t\tif (!found.contentType.length) {\n\t\t\t\t\treturn { contentType: part.ct, content: part.content ?? '' };\n\t\t\t\t}\n\t\t\t\tif (\n\t\t\t\t\tpart.part &&\n\t\t\t\t\tpart.part.indexOf('.') === -1 &&\n\t\t\t\t\tpart.cd &&\n\t\t\t\t\tpart.cd === 'inline' &&\n\t\t\t\t\t!part.ci &&\n\t\t\t\t\t!(part.ct && part.ct === 'text/plain')\n\t\t\t\t) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...found,\n\t\t\t\t\t\tcontent: found.content.concat(\n\t\t\t\t\t\t\t`<img src='/service/home/~/?auth=co&loc=en&id=${id}&part=${part?.part}'>` ?? ''\n\t\t\t\t\t\t)\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\treturn { ...found, content: found.content.concat(part.content ?? '') };\n\t\t\t}\n\t\t\treturn found;\n\t\t},\n\t\tacc\n\t);\n\n\treturn bodyPart;\n}\n\nexport function generateBody(\n\tmp: Array<SoapMailMessagePart>,\n\tid: string\n): {\n\tcontentType: string;\n\tcontent: string;\n} {\n\treturn findBodyPart(mp, { contentType: '', content: '' }, id);\n}\n\nfunction participantTypeFromSoap(t: SoapEmailParticipantRole): ParticipantRole {\n\tswitch (t) {\n\t\tcase 'f':\n\t\t\treturn ParticipantRole.FROM;\n\t\tcase 't':\n\t\t\treturn ParticipantRole.TO;\n\t\tcase 'c':\n\t\t\treturn ParticipantRole.CARBON_COPY;\n\t\tcase 'b':\n\t\t\treturn ParticipantRole.BLIND_CARBON_COPY;\n\t\tcase 'r':\n\t\t\treturn ParticipantRole.REPLY_TO;\n\t\tcase 's':\n\t\t\treturn ParticipantRole.SENDER;\n\t\tcase 'n':\n\t\t\treturn ParticipantRole.READ_RECEIPT_NOTIFICATION;\n\t\tcase 'rf':\n\t\t\treturn ParticipantRole.RESENT_FROM;\n\t\tdefault:\n\t\t\tthrow new Error(`Participant type not handled: '${t}'`);\n\t}\n}\n\nexport function normalizeParticipantsFromSoap(e: SoapMailParticipant): Participant {\n\treturn {\n\t\ttype: participantTypeFromSoap(e.t),\n\t\taddress: e.a,\n\t\tname: e.d || e.a,\n\t\tfullName: e.p\n\t};\n}\nexport const getTagIdsFromName = (names: string | undefined): Array<string | undefined> => {\n\tconst tags = getTags();\n\treturn map(names?.split(','), (name) => find(tags, { name })?.id);\n};\n\nexport const getTagIds = (\n\tt: string | undefined,\n\ttn: string | undefined\n): Array<string | undefined> => {\n\tif (!isNil(t)) {\n\t\treturn filter(t.split(','), (tag) => tag !== '');\n\t}\n\tif (!isNil(tn)) {\n\t\treturn getTagIdsFromName(tn);\n\t}\n\treturn [];\n};\nexport const normalizeMailMessageFromSoap = (\n\tm: SoapIncompleteMessage,\n\tisComplete: boolean\n): IncompleteMessage => <IncompleteMessage>omitBy(\n\t\t{\n\t\t\tconversation: m.cid,\n\t\t\tid: m.id,\n\t\t\tdate: m.d,\n\t\t\tsize: m.s,\n\t\t\tparent: m.l,\n\t\t\tfragment: m.fr,\n\t\t\tsubject: m.su,\n\t\t\tparticipants: m.e ? map(m.e || [], normalizeParticipantsFromSoap) : undefined,\n\t\t\ttags: getTagIds(m.t, m.tn),\n\t\t\tparts: m.mp ? map(m.mp || [], normalizeMailPartMapFn) : undefined,\n\t\t\tinvite: m.inv,\n\t\t\tshr: m.shr,\n\t\t\tbody: m.mp ? generateBody(m.mp || [], m.id) : undefined,\n\t\t\tisComplete,\n\t\t\tread: !isNil(m.f) ? !/u/.test(m.f) : true,\n\t\t\tattachment: !isNil(m.f) ? /a/.test(m.f) : undefined,\n\t\t\tflagged: !isNil(m.f) ? /f/.test(m.f) : undefined,\n\t\t\turgent: !isNil(m.f) ? /!/.test(m.f) : undefined,\n\t\t\tisDeleted: !isNil(m.f) ? /x/.test(m.f) : undefined,\n\t\t\tisDraft: !isNil(m.f) ? /d/.test(m.f) : undefined,\n\t\t\tisForwarded: !isNil(m.f) ? /w/.test(m.f) : undefined,\n\t\t\tisSentByMe: !isNil(m.f) ? /s/.test(m.f) : undefined,\n\t\t\tisInvite: !isNil(m.f) ? /v/.test(m.f) : undefined,\n\t\t\tisReplied: !isNil(m.f) ? /r/.test(m.f) : undefined,\n\t\t\tisReadReceiptRequested: !isNil(m.f) ? !/n/.test(m.f) : true\n\t\t},\n\t\tisNil\n\t);\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/normalizations/normalize-message.ts b/src/normalizations/normalize-message.ts
+--- a/src/normalizations/normalize-message.ts	(revision 4adaba21c8889cfd3cf44adf6271b75e82f59433)
++++ b/src/normalizations/normalize-message.ts	(date 1660294413000)
+@@ -4,7 +4,7 @@
+  * SPDX-License-Identifier: AGPL-3.0-only
+  */
+ import { getTags } from '@zextras/carbonio-shell-ui';
+-import { filter, find, isNil, map, omitBy, reduce } from 'lodash';
++import { filter, find, isNil, map, reduce, omitBy } from 'lodash';
+ import { ParticipantRole } from '../commons/utils';
+ import {
+ 	IncompleteMessage,
+Index: src/store/actions/search.ts
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n/* eslint no-param-reassign: [\"error\", { \"props\": true, \"ignorePropertyModificationsFor\": [\"conversation\"] }] */\n\nimport { createAsyncThunk } from '@reduxjs/toolkit';\nimport { soapFetch } from '@zextras/carbonio-shell-ui';\nimport { keyBy, map, reduce } from 'lodash';\nimport { normalizeConversation } from '../../normalizations/normalize-conversation';\nimport { normalizeMailMessageFromSoap } from '../../normalizations/normalize-message';\nimport {\n\tConversation,\n\tSearchRequest,\n\tSearchResponse,\n\tFetchConversationsReturn,\n\tFetchConversationsParameters\n} from '../../types';\n\nexport const search = createAsyncThunk<\n\tFetchConversationsReturn | undefined,\n\tFetchConversationsParameters\n>(\n\t'fetchConversations',\n\tasync ({\n\t\tfolderId,\n\t\tlimit = 100,\n\t\tbefore,\n\t\ttypes = 'conversation',\n\t\tsortBy = 'dateDesc',\n\t\tquery,\n\t\toffset,\n\t\trecip = '2',\n\t\twantContent = 'full'\n\t}) => {\n\t\tconst queryPart = [`inId:\"${folderId}\"`];\n\t\tif (before) queryPart.push(`before:${before.getTime()}`);\n\t\tconst result = await soapFetch<SearchRequest, SearchResponse>('Search', {\n\t\t\t_jsns: 'urn:zimbraMail',\n\t\t\tlimit,\n\t\t\tneedExp: 1,\n\t\t\trecip,\n\t\t\tfullConversation: 1,\n\t\t\twantContent,\n\t\t\tsortBy,\n\t\t\tquery: query || queryPart.join(' '),\n\t\t\toffset,\n\t\t\ttypes\n\t\t});\n\n\t\tif (types === 'conversation') {\n\t\t\tconst conversations = map(result?.c ?? [], (obj) =>\n\t\t\t\tnormalizeConversation(obj)\n\t\t\t) as unknown as Array<Conversation>;\n\t\t\treturn {\n\t\t\t\tconversations: keyBy(conversations, 'id'),\n\t\t\t\thasMore: result.more,\n\t\t\t\ttypes\n\t\t\t};\n\t\t}\n\t\tif (types === 'message') {\n\t\t\treturn {\n\t\t\t\tmessages: reduce(\n\t\t\t\t\tresult.m ?? [],\n\t\t\t\t\t(acc, msg) => {\n\t\t\t\t\t\tconst normalized = normalizeMailMessageFromSoap(msg, false);\n\t\t\t\t\t\treturn { ...acc, [normalized.id]: normalized };\n\t\t\t\t\t},\n\t\t\t\t\t{}\n\t\t\t\t),\n\t\t\t\thasMore: result.more,\n\t\t\t\ttypes\n\t\t\t};\n\t\t}\n\t\treturn undefined;\n\t}\n);\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/store/actions/search.ts b/src/store/actions/search.ts
+--- a/src/store/actions/search.ts	(revision 4adaba21c8889cfd3cf44adf6271b75e82f59433)
++++ b/src/store/actions/search.ts	(date 1660294413000)
+@@ -6,7 +6,7 @@
+ /* eslint no-param-reassign: ["error", { "props": true, "ignorePropertyModificationsFor": ["conversation"] }] */
+ 
+ import { createAsyncThunk } from '@reduxjs/toolkit';
+-import { soapFetch } from '@zextras/carbonio-shell-ui';
++import { getTags, soapFetch } from '@zextras/carbonio-shell-ui';
+ import { keyBy, map, reduce } from 'lodash';
+ import { normalizeConversation } from '../../normalizations/normalize-conversation';
+ import { normalizeMailMessageFromSoap } from '../../normalizations/normalize-message';
+@@ -49,9 +49,10 @@
+ 			types
+ 		});
+ 
++		const tags = getTags();
+ 		if (types === 'conversation') {
+ 			const conversations = map(result?.c ?? [], (obj) =>
+-				normalizeConversation(obj)
++				normalizeConversation({ c: obj, tags })
+ 			) as unknown as Array<Conversation>;
+ 			return {
+ 				conversations: keyBy(conversations, 'id'),
+Index: .idea/prettier.xml
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/.idea/prettier.xml b/.idea/prettier.xml
+new file mode 100644
+--- /dev/null	(date 1660294413000)
++++ b/.idea/prettier.xml	(date 1660294413000)
+@@ -0,0 +1,7 @@
++<?xml version="1.0" encoding="UTF-8"?>
++<project version="4">
++  <component name="PrettierConfiguration">
++    <option name="myRunOnSave" value="true" />
++    <option name="myRunOnReformat" value="true" />
++  </component>
++</project>
+\ No newline at end of file
+Index: src/views/sidebar/sync-data-handler.jsx
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport {\n\tFOLDERS,\n\tstore,\n\tuseNotify,\n\tuseRefresh,\n\tupdatePrimaryBadge\n} from '@zextras/carbonio-shell-ui';\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { isEmpty, map, keyBy, find, filter, forEach, sortBy, reduce } from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport {\n\thandleCreatedFolders,\n\thandleModifiedFolders,\n\thandleDeletedFolders,\n\thandleRefresh,\n\tselectFolder\n} from '../../store/folders-slice';\nimport {\n\thandleNotifyCreatedConversations,\n\thandleNotifyModifiedConversations,\n\thandleNotifyDeletedConversations,\n\thandleModifiedMessagesInConversation,\n\thandleDeletedMessagesInConversation,\n\tsetSearchedInFolder,\n\tselectCurrentFolder,\n\thandleCreatedMessagesInConversation,\n\thandleAddMessagesInConversation\n} from '../../store/conversations-slice';\nimport {\n\thandleCreatedMessages,\n\thandleModifiedMessages,\n\thandleDeletedMessages,\n\tselectMessages\n} from '../../store/messages-slice';\nimport { storeReducers } from '../../store/reducers';\nimport { normalizeConversation } from '../../normalizations/normalize-conversation';\nimport { normalizeMailMessageFromSoap } from '../../normalizations/normalize-message';\nimport { extractFolders } from './utils';\nimport { MAILS_ROUTE } from '../../constants';\n\nconst InboxBadgeUpdater = () => {\n\tconst folder = useSelector(selectFolder(FOLDERS.INBOX));\n\tuseEffect(() => {\n\t\tupdatePrimaryBadge(\n\t\t\t{\n\t\t\t\tshow: folder.unreadCount > 0,\n\t\t\t\tcount: folder.unreadCount,\n\t\t\t\tshowCount: true\n\t\t\t},\n\t\t\tMAILS_ROUTE\n\t\t);\n\t}, [folder.unreadCount]);\n\treturn null;\n};\n\nexport const SyncDataHandler = () => {\n\tconst [t] = useTranslation();\n\tconst refresh = useRefresh();\n\tconst notifyList = useNotify();\n\tconst [seq, setSeq] = useState(-1);\n\tconst dispatch = useDispatch();\n\tconst [initialized, setInitialized] = useState(false);\n\tconst currentFolder = useSelector(selectCurrentFolder);\n\tconst messagesState = useSelector(selectMessages);\n\n\tuseEffect(() => {\n\t\tif (!isEmpty(refresh) && !initialized) {\n\t\t\tstore.setReducer(storeReducers);\n\t\t\t// this also normalize folders so no need to normalize it later\n\t\t\tconst extractedFolders = extractFolders([\n\t\t\t\t...(refresh?.folder?.[0]?.folder ?? []),\n\t\t\t\t...(refresh?.folder?.[0]?.link ?? [])\n\t\t\t]);\n\t\t\tdispatch(handleRefresh(extractedFolders));\n\t\t\tsetInitialized(true);\n\t\t}\n\t}, [dispatch, initialized, refresh]);\n\n\tuseEffect(() => {\n\t\tforEach(notifyList, (notify) => {\n\t\t\t// this intercept all changes made from different folders towards the current one, it triggers a search request if it finds at least one item which affect currentFolder\n\t\t\tif (find(notify?.modified?.m, ['l', currentFolder])) {\n\t\t\t\tdispatch(setSearchedInFolder({ [currentFolder]: 'incomplete' }));\n\t\t\t}\n\t\t});\n\t}, [currentFolder, dispatch, notifyList]);\n\n\tuseEffect(() => {\n\t\tif (initialized) {\n\t\t\tif (notifyList.length > 0) {\n\t\t\t\tforEach(sortBy(notifyList, 'seq'), (notify) => {\n\t\t\t\t\tif (!isEmpty(notify) && (notify.seq > seq || (seq > 1 && notify.seq === 1))) {\n\t\t\t\t\t\tif (notify.created) {\n\t\t\t\t\t\t\tif (notify.created.folder || notify.created.link) {\n\t\t\t\t\t\t\t\tdispatch(\n\t\t\t\t\t\t\t\t\thandleCreatedFolders([\n\t\t\t\t\t\t\t\t\t\t...(notify.created.folder ?? []),\n\t\t\t\t\t\t\t\t\t\t...(notify.created.link ?? [])\n\t\t\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (notify.created.c && notify.created.m) {\n\t\t\t\t\t\t\t\tconst conversations = map(notify.created.c, (i) =>\n\t\t\t\t\t\t\t\t\tnormalizeConversation(i, notify.created.m)\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tdispatch(handleNotifyCreatedConversations(keyBy(conversations, 'id')));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (notify.created.m) {\n\t\t\t\t\t\t\t\tdispatch(handleCreatedMessages({ m: notify.created.m }));\n\t\t\t\t\t\t\t\tdispatch(handleCreatedMessagesInConversation({ m: notify.created.m }));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (notify.modified) {\n\t\t\t\t\t\t\tif (notify.modified.folder || notify.modified.link) {\n\t\t\t\t\t\t\t\tdispatch(\n\t\t\t\t\t\t\t\t\thandleModifiedFolders([\n\t\t\t\t\t\t\t\t\t\t...(notify.modified.folder ?? []),\n\t\t\t\t\t\t\t\t\t\t...(notify.modified.link ?? [])\n\t\t\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (notify.modified.c) {\n\t\t\t\t\t\t\t\tconst conversations = map(notify.modified.c, normalizeConversation);\n\t\t\t\t\t\t\t\tdispatch(handleNotifyModifiedConversations(keyBy(conversations, 'id')));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (notify.modified.m) {\n\t\t\t\t\t\t\t\tconst messages = map(notify.modified.m, (obj) =>\n\t\t\t\t\t\t\t\t\tnormalizeMailMessageFromSoap(obj, false)\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tdispatch(handleModifiedMessages(messages));\n\n\t\t\t\t\t\t\t\t// the condition filters messages with parent property (the only ones we need to update)\n\t\t\t\t\t\t\t\tconst toUpdate = filter(messages, 'parent');\n\t\t\t\t\t\t\t\tif (toUpdate?.length > 0) {\n\t\t\t\t\t\t\t\t\t// this function updates messages' parent in conversations. If parent never changes it does not need to be called\n\t\t\t\t\t\t\t\t\tdispatch(handleModifiedMessagesInConversation(toUpdate));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// the condition filters messages with conversation property (the only ones we need to add to conversation)\n\t\t\t\t\t\t\t\tconst conversationToUpdate = filter(messages, 'conversation');\n\t\t\t\t\t\t\t\tif (conversationToUpdate?.length > 0) {\n\t\t\t\t\t\t\t\t\tconst msgsReference = reduce(\n\t\t\t\t\t\t\t\t\t\tconversationToUpdate,\n\t\t\t\t\t\t\t\t\t\t(acc, msg) => {\n\t\t\t\t\t\t\t\t\t\t\tif (messagesState?.[msg?.id]) {\n\t\t\t\t\t\t\t\t\t\t\t\treturn [\n\t\t\t\t\t\t\t\t\t\t\t\t\t...acc,\n\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tid: messagesState?.[msg?.id].id,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tparent: messagesState?.[msg?.id].parent,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tdate: messagesState?.[msg?.id].date,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tconversation: msg.conversation\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t];\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\treturn acc;\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t[]\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t// this function add messages' in conversations. If conversation never changes it does not need to be called\n\t\t\t\t\t\t\t\t\tdispatch(handleAddMessagesInConversation(msgsReference));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (notify.deleted) {\n\t\t\t\t\t\t\tdispatch(handleDeletedFolders(notify.deleted));\n\t\t\t\t\t\t\tdispatch(handleNotifyDeletedConversations(notify.deleted));\n\t\t\t\t\t\t\tdispatch(handleDeletedMessages(notify.deleted));\n\t\t\t\t\t\t\tdispatch(handleDeletedMessagesInConversation(notify.deleted));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tsetSeq(notify.seq);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}, [dispatch, initialized, messagesState, notifyList, seq, t]);\n\treturn <InboxBadgeUpdater />;\n};\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/views/sidebar/sync-data-handler.jsx b/src/views/sidebar/sync-data-handler.jsx
+--- a/src/views/sidebar/sync-data-handler.jsx	(revision 4adaba21c8889cfd3cf44adf6271b75e82f59433)
++++ b/src/views/sidebar/sync-data-handler.jsx	(date 1660294413000)
+@@ -8,7 +8,8 @@
+ 	store,
+ 	useNotify,
+ 	useRefresh,
+-	updatePrimaryBadge
++	updatePrimaryBadge,
++	getTags
+ } from '@zextras/carbonio-shell-ui';
+ import React, { useEffect, useState } from 'react';
+ import { useDispatch, useSelector } from 'react-redux';
+@@ -106,8 +107,9 @@
+ 								);
+ 							}
+ 							if (notify.created.c && notify.created.m) {
++								const tags = getTags();
+ 								const conversations = map(notify.created.c, (i) =>
+-									normalizeConversation(i, notify.created.m)
++									normalizeConversation({ c: i, m: notify.created.m, tags })
+ 								);
+ 								dispatch(handleNotifyCreatedConversations(keyBy(conversations, 'id')));
+ 							}
+Index: src/views/sidebar/utils.ts
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport {\n\tZIMBRA_STANDARD_COLORS,\n\tFOLDERS,\n\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t// @ts-ignore\n\tROOT_NAME,\n\tAccordionFolder,\n\tFolder,\n\tLinkFolderFields\n} from '@zextras/carbonio-shell-ui';\nimport { isNil, omitBy, reduce } from 'lodash';\nimport { TFunction } from 'react-i18next';\n\nconst folderIdRegex = /^(.+:)*(\\d+)$/;\n\nexport const normalizeFolder = (\n\tfolder: Folder & Partial<LinkFolderFields>\n): Partial<Folder & Partial<LinkFolderFields>> =>\n\tomitBy(\n\t\t{\n\t\t\tid: folder.id,\n\t\t\tuuid: folder.uuid,\n\t\t\tcolor: folder.color,\n\t\t\tname: folder.name,\n\t\t\tpath: folder.absFolderPath,\n\t\t\tparent: folder.l,\n\t\t\tparentUuid: folder.luuid,\n\t\t\titemsCount: folder.n,\n\t\t\tsize: folder.s,\n\t\t\tunreadCount: folder.u,\n\t\t\tsynced: true,\n\t\t\trgb: folder.rgb,\n\t\t\towner: folder.owner,\n\t\t\trid: folder.rid,\n\t\t\tzid: folder.zid,\n\t\t\tacl: folder.acl,\n\t\t\tperm: folder.perm,\n\t\t\tisSharedFolder: !!folder.owner,\n\t\t\tretentionPolicy: folder.retentionPolicy,\n\t\t\tview: folder.view\n\t\t},\n\t\tisNil\n\t);\n\nexport const extractFolders = (accordion: Array<any>, acc = {}): any =>\n\treduce(\n\t\taccordion,\n\t\t(acc2, folder) => {\n\t\t\tif (folder.folder) {\n\t\t\t\treturn (folder.view === 'message' &&\n\t\t\t\t\tfolder.id !== FOLDERS.IM_LOGS &&\n\t\t\t\t\tfolder.id !== FOLDERS.USER_ROOT) ||\n\t\t\t\t\tfolder.id === FOLDERS.TRASH\n\t\t\t\t\t? {\n\t\t\t\t\t\t\t...acc2,\n\t\t\t\t\t\t\t[folder.id]: normalizeFolder(folder),\n\t\t\t\t\t\t\t...extractFolders(folder.folder, acc2)\n\t\t\t\t\t  }\n\t\t\t\t\t: { ...acc2, ...extractFolders(folder.folder, acc2) };\n\t\t\t}\n\t\t\treturn (folder.view === 'message' &&\n\t\t\t\tfolder.id !== FOLDERS.IM_LOGS &&\n\t\t\t\tfolder.id !== FOLDERS.USER_ROOT) ||\n\t\t\t\tfolder.id === FOLDERS.TRASH\n\t\t\t\t? {\n\t\t\t\t\t\t...acc2,\n\t\t\t\t\t\t[folder.id]: normalizeFolder(folder)\n\t\t\t\t  }\n\t\t\t\t: acc2;\n\t\t},\n\t\tacc\n\t);\n\nexport const capitalise = (word: string): string => {\n\tconst asciiRef = word?.charCodeAt(0);\n\tconst newAsciiRef = asciiRef - 32;\n\tconst newChar = String.fromCharCode(newAsciiRef);\n\treturn word ? newChar + word.substring(1) : '';\n};\n\nexport const getFolderIconColor = (f: AccordionFolder): string => {\n\tif (f?.folder?.color) {\n\t\treturn f.folder.color < 10\n\t\t\t? ZIMBRA_STANDARD_COLORS[f.folder.color].hex\n\t\t\t: f?.folder.rgb ?? ZIMBRA_STANDARD_COLORS[0].hex;\n\t}\n\treturn ZIMBRA_STANDARD_COLORS[0].hex;\n};\n\nexport const getFolderIconName = (folder: AccordionFolder): string | null => {\n\tconst systemFolders = [\n\t\tFOLDERS.USER_ROOT,\n\t\tFOLDERS.INBOX,\n\t\tFOLDERS.TRASH,\n\t\tFOLDERS.DRAFTS,\n\t\tFOLDERS.SPAM,\n\t\tFOLDERS.SENT\n\t];\n\n\tif (folder.id === FOLDERS.USER_ROOT || folder.folder?.oname === ROOT_NAME) {\n\t\treturn null;\n\t}\n\n\tif (folder.id && systemFolders.includes(folder.id)) {\n\t\tswitch (folder.id) {\n\t\t\tcase FOLDERS.INBOX:\n\t\t\t\treturn 'InboxOutline';\n\t\t\tcase FOLDERS.DRAFTS:\n\t\t\t\treturn 'FileOutline';\n\t\t\tcase FOLDERS.SENT:\n\t\t\t\treturn 'PaperPlaneOutline';\n\t\t\tcase FOLDERS.SPAM:\n\t\t\t\treturn 'SlashOutline';\n\t\t\tcase FOLDERS.TRASH:\n\t\t\t\treturn 'Trash2Outline';\n\t\t\tdefault:\n\t\t\t\treturn 'FolderOutline';\n\t\t}\n\t}\n\tif (\n\t\tfolder.id?.charAt(folder.id.length - 2) === ':' &&\n\t\tsystemFolders.includes(folder.id.slice(-1))\n\t) {\n\t\tswitch (folder.id.slice(-1)) {\n\t\t\tcase FOLDERS.INBOX:\n\t\t\t\treturn 'InboxOutline';\n\t\t\tcase FOLDERS.DRAFTS:\n\t\t\t\treturn 'FileOutline';\n\t\t\tcase FOLDERS.SENT:\n\t\t\t\treturn 'PaperPlaneOutline';\n\t\t\tcase FOLDERS.SPAM:\n\t\t\t\treturn 'SlashOutline';\n\t\t\tcase FOLDERS.TRASH:\n\t\t\t\treturn 'Trash2Outline';\n\t\t\tdefault:\n\t\t\t\treturn 'FolderOutline';\n\t\t}\n\t}\n\treturn 'FolderOutline';\n};\n\nexport const translatedSystemFolders = (t: TFunction): Array<string> => [\n\tt('folders.inbox', 'Inbox'),\n\tt('folders.sent', 'Sent'),\n\tt('folders.drafts', 'Drafts'),\n\tt('folders.trash', 'Trash'),\n\tt('folders.spam', 'Spam'),\n\tt('folders.junk', 'Junk')\n];\n\ntype GetSystemFolderProps = {\n\tt: TFunction;\n\tfolderId?: string;\n\tfolderName: string;\n};\n\nexport const getSystemFolderTranslatedName = ({ t, folderName }: GetSystemFolderProps): string => {\n\tif (folderName) {\n\t\tswitch (folderName) {\n\t\t\tcase 'Inbox':\n\t\t\t\treturn t('folders.inbox', 'Inbox');\n\t\t\tcase 'Sent':\n\t\t\t\treturn t('folders.sent', 'Sent');\n\t\t\tcase 'Drafts':\n\t\t\t\treturn t('folders.drafts', 'Drafts');\n\t\t\tcase 'Trash':\n\t\t\t\treturn t('folders.trash', 'Trash');\n\t\t\tcase 'Spam':\n\t\t\t\treturn t('folders.spam', 'Spam');\n\t\t\tcase 'Junk':\n\t\t\t\treturn t('folders.junk', 'Junk');\n\t\t\tdefault:\n\t\t\t\treturn folderName;\n\t\t}\n\t}\n\treturn folderName;\n};\n\nexport const getFolderTranslatedName = ({\n\tt,\n\tfolderId,\n\tfolderName\n}: GetSystemFolderProps): string => {\n\tconst id = folderIdRegex.exec(folderId ?? '')?.[2];\n\tif (id && Object.values(FOLDERS).includes(id)) {\n\t\treturn getSystemFolderTranslatedName({ t, folderName });\n\t}\n\n\treturn folderName;\n};\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/views/sidebar/utils.ts b/src/views/sidebar/utils.ts
+--- a/src/views/sidebar/utils.ts	(revision 4adaba21c8889cfd3cf44adf6271b75e82f59433)
++++ b/src/views/sidebar/utils.ts	(date 1661441808000)
+@@ -9,11 +9,10 @@
+ 	// eslint-disable-next-line @typescript-eslint/ban-ts-comment
+ 	// @ts-ignore
+ 	ROOT_NAME,
+-	AccordionFolder,
+ 	Folder,
+ 	LinkFolderFields
+ } from '@zextras/carbonio-shell-ui';
+-import { isNil, omitBy, reduce } from 'lodash';
++import { isNil, reduce, omitBy } from 'lodash';
+ import { TFunction } from 'react-i18next';
+ 
+ const folderIdRegex = /^(.+:)*(\d+)$/;
+@@ -83,16 +82,16 @@
+ 	return word ? newChar + word.substring(1) : '';
+ };
+ 
+-export const getFolderIconColor = (f: AccordionFolder): string => {
+-	if (f?.folder?.color) {
+-		return f.folder.color < 10
+-			? ZIMBRA_STANDARD_COLORS[f.folder.color].hex
+-			: f?.folder.rgb ?? ZIMBRA_STANDARD_COLORS[0].hex;
++export const getFolderIconColor = (f: Folder): string => {
++	if (f?.color) {
++		return Number(f.color) < 10
++			? ZIMBRA_STANDARD_COLORS[Number(f.color)].hex
++			: f?.rgb ?? ZIMBRA_STANDARD_COLORS[0].hex;
+ 	}
+ 	return ZIMBRA_STANDARD_COLORS[0].hex;
+ };
+ 
+-export const getFolderIconName = (folder: AccordionFolder): string | null => {
++export const getFolderIconName = (folder: Folder): string | null => {
+ 	const systemFolders = [
+ 		FOLDERS.USER_ROOT,
+ 		FOLDERS.INBOX,
+@@ -102,7 +101,7 @@
+ 		FOLDERS.SENT
+ 	];
+ 
+-	if (folder.id === FOLDERS.USER_ROOT || folder.folder?.oname === ROOT_NAME) {
++	if (folder.id === FOLDERS.USER_ROOT || (folder.isLink && folder.oname === ROOT_NAME)) {
+ 		return null;
+ 	}
+ 
+Index: src/normalizations/normalize-conversation.ts
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport { getTags } from '@zextras/carbonio-shell-ui';\nimport { filter, find, isNil, map, omitBy } from 'lodash';\nimport { Conversation, SoapIncompleteMessage, SoapConversation } from '../types';\nimport { normalizeParticipantsFromSoap } from './normalize-message';\n\nexport const getTagIdsFromName = (names: string | undefined): Array<string | undefined> => {\n\tconst tags = getTags();\n\treturn map(names?.split(','), (name) => find(tags, { name })?.id);\n};\n\nexport const getTagIds = (\n\tt: string | undefined,\n\ttn: string | undefined\n): Array<string | undefined> => {\n\tif (!isNil(t)) {\n\t\treturn filter(t.split(','), (tag) => tag !== '');\n\t}\n\tif (!isNil(tn)) {\n\t\treturn getTagIdsFromName(tn);\n\t}\n\treturn [];\n};\nexport const normalizeConversation = (\n\tc: SoapConversation,\n\tm?: Array<SoapIncompleteMessage>\n): Partial<Conversation> => {\n\tconst filteredMsgs = c?.m ?? filter(m ?? [], ['cid', c?.id]);\n\tconst messages = filteredMsgs?.length\n\t\t? map(filteredMsgs, (msg) => ({\n\t\t\t\tid: msg.id,\n\t\t\t\tparent: msg.l,\n\t\t\t\tdate: Number(msg?.d)\n\t\t  }))\n\t\t: undefined;\n\n\treturn omitBy(\n\t\t{\n\t\t\ttags: getTagIds(c.t, c.tn),\n\t\t\tid: c.id,\n\t\t\tdate: c.d,\n\t\t\tmsgCount: c.n,\n\t\t\tunreadMsgCount: c.u,\n\t\t\tmessages,\n\t\t\tparticipants: c.e ? map(c.e, normalizeParticipantsFromSoap) : undefined,\n\t\t\tsubject: c.su,\n\t\t\tfragment: c.fr,\n\t\t\tread: !isNil(c.f) ? !/u/.test(c.f) : !(c.u > 0),\n\t\t\tattachment: !isNil(c.f) ? /a/.test(c.f) : undefined,\n\t\t\tflagged: !isNil(c.f) ? /f/.test(c.f) : undefined,\n\t\t\turgent: !isNil(c.f) ? /!/.test(c.f) : undefined\n\t\t},\n\t\tisNil\n\t);\n};\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/normalizations/normalize-conversation.ts b/src/normalizations/normalize-conversation.ts
+--- a/src/normalizations/normalize-conversation.ts	(revision 4adaba21c8889cfd3cf44adf6271b75e82f59433)
++++ b/src/normalizations/normalize-conversation.ts	(date 1661342969000)
+@@ -3,32 +3,41 @@
+  *
+  * SPDX-License-Identifier: AGPL-3.0-only
+  */
+-import { getTags } from '@zextras/carbonio-shell-ui';
+-import { filter, find, isNil, map, omitBy } from 'lodash';
++import { Tags } from '@zextras/carbonio-shell-ui';
++import { filter, find, isNil, map } from 'lodash';
++import { omitBy } from '../commons/utils';
+ import { Conversation, SoapIncompleteMessage, SoapConversation } from '../types';
+ import { normalizeParticipantsFromSoap } from './normalize-message';
+ 
+-export const getTagIdsFromName = (names: string | undefined): Array<string | undefined> => {
+-	const tags = getTags();
+-	return map(names?.split(','), (name) => find(tags, { name })?.id);
+-};
+-
++export const getTagIdsFromName = (
++	names: string | undefined,
++	tags?: Tags
++): Array<string | undefined> => map(names?.split(','), (name) => find(tags, { name })?.id);
+ export const getTagIds = (
+ 	t: string | undefined,
+-	tn: string | undefined
++	tn: string | undefined,
++	tags?: Tags
+ ): Array<string | undefined> => {
+ 	if (!isNil(t)) {
+ 		return filter(t.split(','), (tag) => tag !== '');
+ 	}
+ 	if (!isNil(tn)) {
+-		return getTagIdsFromName(tn);
++		return getTagIdsFromName(tn, tags);
+ 	}
+ 	return [];
+ };
+-export const normalizeConversation = (
+-	c: SoapConversation,
+-	m?: Array<SoapIncompleteMessage>
+-): Partial<Conversation> => {
++
++export type NormalizeConversationProps = {
++	c: SoapConversation;
++	tags: Tags;
++	m?: Array<SoapIncompleteMessage>;
++};
++
++export const normalizeConversation = ({
++	c,
++	m,
++	tags
++}: NormalizeConversationProps): Partial<Conversation> => {
+ 	const filteredMsgs = c?.m ?? filter(m ?? [], ['cid', c?.id]);
+ 	const messages = filteredMsgs?.length
+ 		? map(filteredMsgs, (msg) => ({
+@@ -38,9 +47,9 @@
+ 		  }))
+ 		: undefined;
+ 
+-	return omitBy(
++	const result = omitBy(
+ 		{
+-			tags: getTagIds(c.t, c.tn),
++			tags: getTagIds(c.t, c.tn, tags),
+ 			id: c.id,
+ 			date: c.d,
+ 			msgCount: c.n,
+@@ -56,4 +65,6 @@
+ 		},
+ 		isNil
+ 	);
++
++	return result;
+ };
+Index: src/views/search/parts/folder-modal.tsx
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>/*\n * SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { ChangeEvent, FC, ReactElement, useCallback, useMemo, useState } from 'react';\nimport {\n\tContainer,\n\tCustomModal,\n\tInput,\n\tText,\n\tAccordion,\n\tAccordionItem,\n\tTooltip,\n\tAvatar,\n\tIcon,\n\tRow,\n\tPadding\n} from '@zextras/carbonio-design-system';\nimport { TFunction } from 'i18next';\nimport { filter, isEmpty, reduce, startsWith } from 'lodash';\n\nimport {\n\tAccordionFolder,\n\tFOLDERS,\n\tuseFolders,\n\tuseFoldersAccordionByView,\n\tuseUserAccount\n} from '@zextras/carbonio-shell-ui';\n\nimport styled from 'styled-components';\nimport ModalFooter from '../../sidebar/commons/modal-footer';\nimport { ModalHeader } from '../../sidebar/commons/modal-header';\nimport { FolderType } from '../../../types';\nimport { getFolderIconColor, getFolderTranslatedName } from '../../sidebar/utils';\nimport { FOLDER_VIEW } from '../../../constants';\nimport AccordionCustomComponent from './folder-accordion-custom-comp';\n\ntype ComponentProps = {\n\tcompProps: { open: boolean; onClose: () => void; setFolder: (arg: any) => void; t: TFunction };\n};\nconst ContainerEl = styled(Container)`\n\toverflow-y: auto;\n\tdisplay: block;\n`;\nconst FittedRow = styled(Row)`\n\tmax-width: calc(100% - (2 * ${({ theme }): string => theme.sizes.padding.small}));\n\theight: 48px;\n`;\nconst getFolderOwner = (item: any): string => {\n\tif (item.owner) return item.owner;\n\tif (item.parent) {\n\t\treturn getFolderOwner(item.parent);\n\t}\n\treturn item.name;\n};\n\nconst CustomComponent: FC<{ item: AccordionFolder }> = ({ item }): ReactElement => (\n\t<FittedRow>\n\t\t<Padding horizontal=\"small\">\n\t\t\t<Avatar label={item.label} size=\"medium\" />\n\t\t</Padding>\n\t\t<Tooltip label={item.label} placement=\"right\" maxWidth=\"100%\">\n\t\t\t<AccordionItem item={item} />\n\t\t</Tooltip>\n\t</FittedRow>\n);\n\ntype CustomComponent = {\n\tCustomComponent: ReactElement;\n\tdivider: boolean;\n\tbackground: string | undefined;\n\tonClick: () => void;\n\titems: Array<any>;\n};\nconst FolderSelectModal: FC<ComponentProps> = ({ compProps }): ReactElement => {\n\tconst { open, onClose, setFolder, t } = compProps;\n\n\tconst [input, setInput] = useState('');\n\tconst [folderDestination, setFolderDestination] = useState<FolderType | any>({});\n\n\tconst foldersFromStore = useFolders();\n\n\tconst getFolderAbsPath = useCallback(\n\t\t(fid: string) => {\n\t\t\tconst path = foldersFromStore[fid]?.absFolderPath;\n\t\t\treturn filter(path?.split('/'), (p) => p !== '').join('/');\n\t\t},\n\t\t[foldersFromStore]\n\t);\n\tconst accountName = useUserAccount().name;\n\tconst [openIds, setOpenIds] = useState(['USER_ROOT']);\n\tconst additionalProps = (item: AccordionFolder): Record<string, any> => ({\n\t\tonClick: (): void => {\n\t\t\tsetFolderDestination(item);\n\t\t},\n\t\tonOpen: () => setOpenIds((s: Array<string>) => (s.includes(item.id) ? s : [...s, item.id])),\n\t\tonClose: () => setOpenIds((s: Array<string>) => s.filter((id: string) => id !== item.id)),\n\t\topenIds\n\t});\n\n\tconst accordions = useFoldersAccordionByView(\n\t\tFOLDER_VIEW.message,\n\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t// @ts-ignore\n\t\tAccordionCustomComponent,\n\t\tadditionalProps\n\t);\n\n\tconst requiredAcc = useMemo(() => {\n\t\tconst temp = reduce(\n\t\t\taccordions,\n\t\t\t(acc: Array<AccordionFolder & CustomComponent>, v) => {\n\t\t\t\tacc.push({\n\t\t\t\t\tid: v.id,\n\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\tCustomComponent,\n\t\t\t\t\tlabel:\n\t\t\t\t\t\tv.id === FOLDERS.USER_ROOT\n\t\t\t\t\t\t\t? accountName\n\t\t\t\t\t\t\t: getFolderTranslatedName({ t, folderId: v.id, folderName: v.label }),\n\t\t\t\t\tdivider: true,\n\t\t\t\t\titems: v.items,\n\t\t\t\t\tbackground: folderDestination.id === v.id ? 'highlight' : undefined,\n\t\t\t\t\tonClick: () => {\n\t\t\t\t\t\tv.id !== FOLDERS.USER_ROOT && setFolderDestination(v);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\treturn acc;\n\t\t\t},\n\t\t\t[]\n\t\t);\n\n\t\treturn temp;\n\t}, [accordions, accountName, folderDestination.id, t]);\n\n\tconst filteredFolders = useMemo(\n\t\t() =>\n\t\t\tfilter(requiredAcc, (v) => {\n\t\t\t\tif (isEmpty(v)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tconst folderName = getFolderTranslatedName({\n\t\t\t\t\tt,\n\t\t\t\t\tfolderId: v?.id,\n\t\t\t\t\tfolderName: v?.label\n\t\t\t\t})?.toLowerCase();\n\n\t\t\t\treturn startsWith(folderName, input.toLowerCase());\n\t\t\t}),\n\t\t[input, requiredAcc, t]\n\t);\n\n\tconst getFolderPath = useCallback(\n\t\t(folder: AccordionFolder) => {\n\t\t\tconst absoluteParent = getFolderOwner(folder.folder);\n\t\t\tconst relativePath = getFolderAbsPath(folder?.id);\n\n\t\t\tif (absoluteParent === 'USER_ROOT') {\n\t\t\t\treturn relativePath;\n\t\t\t}\n\t\t\tif (relativePath) {\n\t\t\t\treturn `${absoluteParent}/${relativePath}`;\n\t\t\t}\n\t\t\treturn absoluteParent;\n\t\t},\n\t\t[getFolderAbsPath]\n\t);\n\tconst onConfirm = useCallback(() => {\n\t\tconst folderPath = getFolderPath(folderDestination);\n\t\tsetFolder([\n\t\t\t{\n\t\t\t\tlabel: `in:${folderPath}`,\n\t\t\t\thasAvatar: true,\n\t\t\t\tmaxWidth: '200px',\n\t\t\t\tisGeneric: false,\n\t\t\t\tbackground: 'gray2',\n\t\t\t\tavatarBackground: getFolderIconColor(folderDestination),\n\t\t\t\tavatarIcon: 'FolderOutline',\n\t\t\t\tisQueryFilter: true,\n\t\t\t\tvalue: `in:\"${folderPath}\"`\n\t\t\t}\n\t\t]);\n\t\tonClose();\n\t}, [folderDestination, getFolderPath, setFolder, onClose]);\n\n\tconst disabled = useMemo(() => isEmpty(folderDestination), [folderDestination]);\n\n\treturn (\n\t\t<CustomModal open={open} onClose={onClose} maxHeight=\"90vh\" size=\"medium\">\n\t\t\t<Container\n\t\t\t\tpadding={{ all: 'large' }}\n\t\t\t\tmainAlignment=\"center\"\n\t\t\t\tcrossAlignment=\"flex-start\"\n\t\t\t\theight=\"fit\"\n\t\t\t>\n\t\t\t\t<ModalHeader title={t('share.is_contained_in', 'Is contained in')} onClose={onClose} />\n\t\t\t\t<Container mainAlignment=\"center\" crossAlignment=\"flex-start\">\n\t\t\t\t\t<Container\n\t\t\t\t\t\tpadding={{ all: 'small' }}\n\t\t\t\t\t\tmainAlignment=\"center\"\n\t\t\t\t\t\tcrossAlignment=\"flex-start\"\n\t\t\t\t\t\theight=\"fit\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<Container\n\t\t\t\t\t\t\tpadding={{ all: 'small' }}\n\t\t\t\t\t\t\tmainAlignment=\"center\"\n\t\t\t\t\t\t\tcrossAlignment=\"flex-start\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<Text overflow=\"break-word\">\n\t\t\t\t\t\t\t\t{t(\n\t\t\t\t\t\t\t\t\t'share.filter_folder_message',\n\t\t\t\t\t\t\t\t\t'Select a folder where to start your advanced search'\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</Text>\n\t\t\t\t\t\t</Container>\n\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\tinputName=\"test\"\n\t\t\t\t\t\t\tlabel={t('label.filter_folders', 'Filter folders')}\n\t\t\t\t\t\t\tbackgroundColor=\"gray5\"\n\t\t\t\t\t\t\tvalue={input}\n\t\t\t\t\t\t\tCustomIcon={({ hasFocus }: { hasFocus: boolean }): ReactElement => (\n\t\t\t\t\t\t\t\t<Icon icon=\"FunnelOutline\" size=\"large\" color={hasFocus ? 'primary' : 'text'} />\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\tonChange={(e: ChangeEvent<HTMLInputElement>): void => setInput(e.target.value)}\n\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t<ContainerEl\n\t\t\t\t\t\t\torientation=\"vertical\"\n\t\t\t\t\t\t\tmainAlignment=\"flex-start\"\n\t\t\t\t\t\t\tminHeight=\"30vh\"\n\t\t\t\t\t\t\tmaxHeight=\"60vh\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<Accordion\n\t\t\t\t\t\t\t\titems={filteredFolders}\n\t\t\t\t\t\t\t\tactiveId={folderDestination?.id}\n\t\t\t\t\t\t\t\topenIds={openIds}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</ContainerEl>\n\t\t\t\t\t</Container>\n\t\t\t\t\t<ModalFooter\n\t\t\t\t\t\tonConfirm={onConfirm}\n\t\t\t\t\t\tsecondaryAction={onClose}\n\t\t\t\t\t\tlabel={t('label.choose_folder', 'Choose folder')}\n\t\t\t\t\t\tsecondaryLabel={t('label.go_back', 'Go Back')}\n\t\t\t\t\t\tdisabled={disabled}\n\t\t\t\t\t/>\n\t\t\t\t</Container>\n\t\t\t</Container>\n\t\t</CustomModal>\n\t);\n};\n\nexport default FolderSelectModal;\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/views/search/parts/folder-modal.tsx b/src/views/search/parts/folder-modal.tsx
+--- a/src/views/search/parts/folder-modal.tsx	(revision 4adaba21c8889cfd3cf44adf6271b75e82f59433)
++++ b/src/views/search/parts/folder-modal.tsx	(date 1661442050000)
+@@ -22,10 +22,10 @@
+ import { filter, isEmpty, reduce, startsWith } from 'lodash';
+ 
+ import {
+-	AccordionFolder,
++	Folder,
+ 	FOLDERS,
+ 	useFolders,
+-	useFoldersAccordionByView,
++	useFoldersByView,
+ 	useUserAccount
+ } from '@zextras/carbonio-shell-ui';
+ 
+@@ -56,12 +56,12 @@
+ 	return item.name;
+ };
+ 
+-const CustomComponent: FC<{ item: AccordionFolder }> = ({ item }): ReactElement => (
++const CustomComponent: FC<{ item: Folder }> = ({ item }): ReactElement => (
+ 	<FittedRow>
+ 		<Padding horizontal="small">
+-			<Avatar label={item.label} size="medium" />
++			<Avatar label={item.name} size="medium" />
+ 		</Padding>
+-		<Tooltip label={item.label} placement="right" maxWidth="100%">
++		<Tooltip label={item.name} placement="right" maxWidth="100%">
+ 			<AccordionItem item={item} />
+ 		</Tooltip>
+ 	</FittedRow>
+@@ -91,7 +91,7 @@
+ 	);
+ 	const accountName = useUserAccount().name;
+ 	const [openIds, setOpenIds] = useState(['USER_ROOT']);
+-	const additionalProps = (item: AccordionFolder): Record<string, any> => ({
++	const additionalProps = (item: Folder): Record<string, any> => ({
+ 		onClick: (): void => {
+ 			setFolderDestination(item);
+ 		},
+@@ -100,18 +100,13 @@
+ 		openIds
+ 	});
+ 
+-	const accordions = useFoldersAccordionByView(
+-		FOLDER_VIEW.message,
+-		// eslint-disable-next-line @typescript-eslint/ban-ts-comment
+-		// @ts-ignore
+-		AccordionCustomComponent,
+-		additionalProps
+-	);
++	// @@ finish conversion to use useFoldersByView
++	const accordions = useFoldersByView(FOLDER_VIEW.message);
+ 
+ 	const requiredAcc = useMemo(() => {
+ 		const temp = reduce(
+ 			accordions,
+-			(acc: Array<AccordionFolder & CustomComponent>, v) => {
++			(acc: Array<Folder & CustomComponent>, v) => {
+ 				acc.push({
+ 					id: v.id,
+ 					// eslint-disable-next-line @typescript-eslint/ban-ts-comment
+@@ -120,9 +115,9 @@
+ 					label:
+ 						v.id === FOLDERS.USER_ROOT
+ 							? accountName
+-							: getFolderTranslatedName({ t, folderId: v.id, folderName: v.label }),
++							: getFolderTranslatedName({ t, folderId: v.id, folderName: v.name }),
+ 					divider: true,
+-					items: v.items,
++					items: v.children,
+ 					background: folderDestination.id === v.id ? 'highlight' : undefined,
+ 					onClick: () => {
+ 						v.id !== FOLDERS.USER_ROOT && setFolderDestination(v);
+@@ -146,7 +141,7 @@
+ 				const folderName = getFolderTranslatedName({
+ 					t,
+ 					folderId: v?.id,
+-					folderName: v?.label
++					folderName: v?.name
+ 				})?.toLowerCase();
+ 
+ 				return startsWith(folderName, input.toLowerCase());
+@@ -155,8 +150,8 @@
+ 	);
+ 
+ 	const getFolderPath = useCallback(
+-		(folder: AccordionFolder) => {
+-			const absoluteParent = getFolderOwner(folder.folder);
++		(folder: Folder) => {
++			const absoluteParent = getFolderOwner(folder);
+ 			const relativePath = getFolderAbsPath(folder?.id);
+ 
+ 			if (absoluteParent === 'USER_ROOT') {
+Index: .syncignore
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/.syncignore b/.syncignore
+new file mode 100644
+--- /dev/null	(date 1660294413000)
++++ b/.syncignore	(date 1660294413000)
+@@ -0,0 +1,16 @@
++# CodeSync won't sync the files in the .syncignore. It follows same format as .gitignore.
++# SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>
++
++# SPDX-License-Identifier: CC0-1.0
++/node_modules/
++/pkg/
++/build/
++/sdk/
++/dist/
++/.idea/workspace.xml
++/.idea/compiler.xml
++/e2e/output/
++.idea/jsLibraryMappings.xml
++/junit.xml
++/coverage/cobertura-coverage.xml
++.DS_Store
+Index: .idea/webResources.xml
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/.idea/webResources.xml b/.idea/webResources.xml
+new file mode 100644
+--- /dev/null	(date 1660294413000)
++++ b/.idea/webResources.xml	(date 1660294413000)
+@@ -0,0 +1,14 @@
++<?xml version="1.0" encoding="UTF-8"?>
++<project version="4">
++  <component name="WebResourcesPaths">
++    <contentEntries>
++      <entry url="file://$PROJECT_DIR$">
++        <entryData>
++          <resourceRoots>
++            <path value="file://$PROJECT_DIR$/src" />
++          </resourceRoots>
++        </entryData>
++      </entry>
++    </contentEntries>
++  </component>
++</project>
+\ No newline at end of file
+Index: src/views/search/parts/folder-accordion-custom-comp.tsx
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>/*\n * SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { FC, useMemo } from 'react';\nimport {\n\tFOLDERS,\n\tuseUserAccount,\n\tAccordionFolder,\n\tuseUserSettings\n} from '@zextras/carbonio-shell-ui';\nimport { AccordionItem, Tooltip, Row, Padding } from '@zextras/carbonio-design-system';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n\tgetFolderIconColor,\n\tgetFolderIconName,\n\tgetFolderTranslatedName\n} from '../../sidebar/utils';\n\nconst AccordionCustomComponent: FC<{ item: AccordionFolder }> = ({ item }) => {\n\tconst { folder } = item;\n\tconst accountName = useUserAccount().name;\n\tconst [t] = useTranslation();\n\n\tconst accordionItem = useMemo(\n\t\t() => ({\n\t\t\t...item,\n\t\t\tlabel:\n\t\t\t\titem.id === FOLDERS.USER_ROOT\n\t\t\t\t\t? accountName\n\t\t\t\t\t: getFolderTranslatedName({ t, folderId: item.id, folderName: item.label }),\n\t\t\ticon: getFolderIconName(item),\n\t\t\ticonColor: getFolderIconColor(item),\n\t\t\ttextProps: { size: 'small' }\n\t\t}),\n\t\t[item, accountName, t]\n\t);\n\tconst settings = useUserSettings()?.prefs;\n\tconst [includeSpam, includeTrash, includeSharedFolders] = useMemo(\n\t\t() => [\n\t\t\tsettings?.zimbraPrefIncludeSpamInSearch === 'TRUE',\n\t\t\tsettings?.zimbraPrefIncludeTrashInSearch === 'TRUE',\n\t\t\tsettings?.zimbraPrefIncludeSharedItemsInSearch === 'TRUE'\n\t\t],\n\t\t[settings]\n\t);\n\n\tconst hasToExclude = useMemo(\n\t\t() =>\n\t\t\t(!includeTrash && folder.name === 'Trash') ||\n\t\t\t(!includeSpam && folder.name === 'Junk') ||\n\t\t\t(!includeSharedFolders && folder.isLink),\n\t\t[folder.isLink, folder.name, includeSharedFolders, includeSpam, includeTrash]\n\t);\n\n\tif (hasToExclude) return <></>;\n\treturn (\n\t\t<Row>\n\t\t\t<Padding left=\"small\" />\n\t\t\t<Tooltip label={accordionItem.label} placement=\"right\" maxWidth=\"100%\">\n\t\t\t\t<AccordionItem item={accordionItem} />\n\t\t\t</Tooltip>\n\t\t</Row>\n\t);\n};\n\nexport default AccordionCustomComponent;\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/views/search/parts/folder-accordion-custom-comp.tsx b/src/views/search/parts/folder-accordion-custom-comp.tsx
+--- a/src/views/search/parts/folder-accordion-custom-comp.tsx	(revision 4adaba21c8889cfd3cf44adf6271b75e82f59433)
++++ b/src/views/search/parts/folder-accordion-custom-comp.tsx	(date 1661441554000)
+@@ -5,12 +5,7 @@
+  */
+ 
+ import React, { FC, useMemo } from 'react';
+-import {
+-	FOLDERS,
+-	useUserAccount,
+-	AccordionFolder,
+-	useUserSettings
+-} from '@zextras/carbonio-shell-ui';
++import { FOLDERS, useUserAccount, useUserSettings, Folder } from '@zextras/carbonio-shell-ui';
+ import { AccordionItem, Tooltip, Row, Padding } from '@zextras/carbonio-design-system';
+ import { useTranslation } from 'react-i18next';
+ 
+@@ -20,8 +15,7 @@
+ 	getFolderTranslatedName
+ } from '../../sidebar/utils';
+ 
+-const AccordionCustomComponent: FC<{ item: AccordionFolder }> = ({ item }) => {
+-	const { folder } = item;
++const AccordionCustomComponent: FC<{ item: Folder }> = ({ item }) => {
+ 	const accountName = useUserAccount().name;
+ 	const [t] = useTranslation();
+ 
+@@ -31,7 +25,7 @@
+ 			label:
+ 				item.id === FOLDERS.USER_ROOT
+ 					? accountName
+-					: getFolderTranslatedName({ t, folderId: item.id, folderName: item.label }),
++					: getFolderTranslatedName({ t, folderId: item.id, folderName: item.name }),
+ 			icon: getFolderIconName(item),
+ 			iconColor: getFolderIconColor(item),
+ 			textProps: { size: 'small' }
+@@ -50,10 +44,10 @@
+ 
+ 	const hasToExclude = useMemo(
+ 		() =>
+-			(!includeTrash && folder.name === 'Trash') ||
+-			(!includeSpam && folder.name === 'Junk') ||
+-			(!includeSharedFolders && folder.isLink),
+-		[folder.isLink, folder.name, includeSharedFolders, includeSpam, includeTrash]
++			(!includeTrash && item.name === 'Trash') ||
++			(!includeSpam && item.name === 'Junk') ||
++			(!includeSharedFolders && item.isLink),
++		[item.isLink, item.name, includeSharedFolders, includeSpam, includeTrash]
+ 	);
+ 
+ 	if (hasToExclude) return <></>;
+Index: src/types/actions/index.d.ts
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/types/actions/index.d.ts b/src/types/actions/index.d.ts
+new file mode 100644
+--- /dev/null	(date 1660294413000)
++++ b/src/types/actions/index.d.ts	(date 1660294413000)
+@@ -0,0 +1,14 @@
++/*
++ * SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
++ *
++ * SPDX-License-Identifier: AGPL-3.0-only
++ */
++
++export type ActionProps = {
++	folder: Folder;
++	grant: Grant;
++	createSnackbar: CreateSnackbar;
++	setActiveModal: (arg: string) => void;
++	onMouseLeave: () => void;
++	onMouseEnter: () => void;
++};
+Index: src/views/sidebar/parts/edit/share-folder-properties.tsx
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/views/sidebar/parts/edit/share-folder-properties.tsx b/src/views/sidebar/parts/edit/share-folder-properties.tsx
+new file mode 100644
+--- /dev/null	(date 1661734494053)
++++ b/src/views/sidebar/parts/edit/share-folder-properties.tsx	(date 1661734494053)
+@@ -0,0 +1,213 @@
++/*
++ * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>
++ *
++ * SPDX-License-Identifier: AGPL-3.0-only
++ */
++import {
++	Button,
++	Chip,
++	Container,
++	Divider,
++	Padding,
++	Text,
++	Tooltip,
++	SnackbarManagerContext
++} from '@zextras/carbonio-design-system';
++import { Grant, soapFetch, useUserAccounts } from '@zextras/carbonio-shell-ui';
++import { map, replace, split } from 'lodash';
++import React, { FC, useCallback, useContext, useEffect, useMemo, useState } from 'react';
++import { useTranslation } from 'react-i18next';
++import { useDispatch } from 'react-redux';
++
++import styled from 'styled-components';
++import {
++	findLabel,
++	ShareCalendarRoleOptions
++} from '../../../../integrations/shared-invite-reply/parts/utils';
++import { sendShareNotification } from '../../../../store/actions/send-share-notification';
++import {
++	ActionProps,
++	GranteeInfoProps,
++	GranteeProps,
++	ShareFolderPropertiesProps
++} from '../../../../types';
++import { capitalise } from '../../utils';
++import { Context } from './edit-context';
++
++const HoverChip = styled(Chip)`
++	background-color: ${({ theme, hovered }): string =>
++		hovered ? theme.palette.gray3.hover : theme.palette.gray3.regular};
++`;
++
++export const GranteeInfo: FC<GranteeInfoProps> = ({ grant, shareCalendarRoleOptions, hovered }) => {
++	const role = useMemo(
++		() => findLabel(shareCalendarRoleOptions, grant.perm || ''),
++		[shareCalendarRoleOptions, grant.perm]
++	);
++	const label = useMemo(
++		() => `${replace(split(grant.d, '@')?.[0], '.', ' ')} - ${role}`,
++		[grant.d, role]
++	);
++	const upperCaseLabel = useMemo(() => capitalise(label), [label]);
++	return (
++		<Container crossAlignment="flex-start">
++			<Text>
++				<HoverChip label={upperCaseLabel} hovered={hovered} />
++			</Text>
++		</Container>
++	);
++};
++
++const Actions: FC<ActionProps> = ({
++	folder,
++	grant,
++	setActiveModal,
++	onMouseLeave,
++	onMouseEnter
++}) => {
++	const [t] = useTranslation();
++	const accounts = useUserAccounts();
++	const { setActiveGrant } = useContext(Context);
++	// eslint-disable-next-line @typescript-eslint/ban-types
++	const createSnackbar = useContext(SnackbarManagerContext) as Function;
++	// eslint-disable-next-line @typescript-eslint/ban-types
++	const dispatch = useDispatch() as Function;
++	const onRevoke = useCallback(() => {
++		setActiveGrant(grant);
++		setActiveModal('revoke');
++	}, [setActiveModal, setActiveGrant, grant]);
++
++	const onResend = useCallback(() => {
++		dispatch(
++			sendShareNotification({
++				standardMessage: '',
++				contacts: [{ email: grant.d }],
++				folder,
++				accounts
++			})
++		).then((res: Response) => {
++			if (res.type.includes('fulfilled')) {
++				createSnackbar({
++					key: `resend-${folder.id}`,
++					replace: true,
++					type: 'info',
++					label: t('snackbar.share_resend', 'Share invite resent'),
++					autoHideTimeout: 2000,
++					hideButton: true
++				});
++			}
++		});
++	}, [accounts, dispatch, folder, t, grant.d, createSnackbar]);
++	const onEdit = useCallback(() => {
++		setActiveGrant(grant);
++		setActiveModal('edit');
++	}, [setActiveModal, setActiveGrant, grant]);
++
++	return (
++		<Container
++			orientation="horizontal"
++			mainAlignment="flex-end"
++			onMouseEnter={onMouseEnter}
++			onMouseLeave={onMouseLeave}
++			maxWidth="fit"
++		>
++			<Tooltip label={t('tooltip.edit', 'Edit share properties')} placement="top">
++				<Button type="outlined" label={t('label.edit', 'Edit')} onClick={onEdit} isSmall />
++			</Tooltip>
++			<Padding horizontal="extrasmall" />
++			<Tooltip label={t('tooltip.revoke', 'Revoke access')} placement="top">
++				<Button
++					type="outlined"
++					label={t('label.revoke', 'Revoke')}
++					color="error"
++					onClick={onRevoke}
++					isSmall
++				/>
++			</Tooltip>
++			<Padding horizontal="extrasmall" />
++			<Tooltip
++				label={t('tooltip.resend', 'Send mail notification about this share')}
++				placement="top"
++				maxWidth="300px"
++			>
++				<Button type="outlined" label={t('label.resend', 'Resend')} onClick={onResend} isSmall />
++			</Tooltip>
++		</Container>
++	);
++};
++const Grantee: FC<GranteeProps> = ({ grant, folder, setActiveModal, shareCalendarRoleOptions }) => {
++	const createSnackbar = useContext(SnackbarManagerContext);
++	const [hovered, setHovered] = useState(false);
++	const onMouseEnter = useCallback(() => {
++		setHovered(true);
++	}, []);
++	const onMouseLeave = useCallback(() => {
++		setHovered(false);
++	}, []);
++	return (
++		<Container orientation="horizontal" mainAlignment="flex-end" padding={{ bottom: 'small' }}>
++			<GranteeInfo
++				grant={grant}
++				shareCalendarRoleOptions={shareCalendarRoleOptions}
++				hovered={hovered}
++			/>
++			<Actions
++				folder={folder}
++				onMouseLeave={onMouseLeave}
++				onMouseEnter={onMouseEnter}
++				grant={grant}
++				createSnackbar={createSnackbar}
++				setActiveModal={setActiveModal}
++			/>
++		</Container>
++	);
++};
++
++export const ShareFolderProperties: FC<ShareFolderPropertiesProps> | undefined = ({
++	folder,
++	setActiveModal
++}) => {
++	const createSnackbar = useContext(SnackbarManagerContext);
++	const [t] = useTranslation();
++	const [grant, setGrant] = useState<Array<Grant> | undefined>();
++
++	useEffect(() => {
++		soapFetch('GetFolder', {
++			_jsns: 'urn:zimbraMail',
++			folder: { l: folder.id }
++		}).then((res: any) => {
++			if (res?.folder) {
++				setGrant(res.folder[0].acl.grant);
++			}
++		});
++	}, [folder.id]);
++
++	console.log('@@grant', grant);
++
++	const shareCalendarRoleOptions = useMemo(
++		() => ShareCalendarRoleOptions(t, grant?.perm?.includes('p')),
++		[t, grant?.perm]
++	);
++	return (
++		grant?.d && (
++			<Container mainAlignment="center" crossAlignment="flex-start" height="fit">
++				<Padding vertical="small" />
++				<Text weight="bold">{t('label.shares_folder_edit', 'Sharing of this folder')}</Text>
++				<Padding vertical="small" />
++				{map(grant, (item) => (
++					<Grantee
++						key={item?.zid}
++						grant={item}
++						folder={folder}
++						createSnackbar={createSnackbar}
++						setActiveModal={setActiveModal}
++						shareCalendarRoleOptions={shareCalendarRoleOptions}
++					/>
++				))}
++				<Padding top="medium" />
++				<Divider />
++				<Padding bottom="medium" />
++			</Container>
++		)
++	);
++};
+Index: src/store/actions/folder-action.ts
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport { createAsyncThunk } from '@reduxjs/toolkit';\nimport { soapFetch } from '@zextras/carbonio-shell-ui';\nimport { isEmpty, isNil, omitBy } from 'lodash';\nimport { DataProps, FolderType } from '../../types';\n\ntype FolderActionProps = {\n\tfolder: FolderType | DataProps;\n\tcolor?: number;\n\tzid?: string;\n\top: string;\n\tname?: string;\n\tl?: string;\n\trecursive?: boolean;\n\tretentionPolicy?: unknown;\n};\n\nexport const folderAction = createAsyncThunk(\n\t'contacts/folderAction',\n\tasync ({ folder, color, zid, op, name, l, recursive, retentionPolicy }: FolderActionProps) => {\n\t\tconst result = !isEmpty(retentionPolicy)\n\t\t\t? await soapFetch('Batch', {\n\t\t\t\t\tFolderActionRequest: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\taction: {\n\t\t\t\t\t\t\t\tid: folder.id,\n\t\t\t\t\t\t\t\top,\n\t\t\t\t\t\t\t\tl,\n\t\t\t\t\t\t\t\trecursive,\n\t\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\t\tcolor\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t_jsns: 'urn:zimbraMail'\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\taction: {\n\t\t\t\t\t\t\t\tid: folder.id,\n\t\t\t\t\t\t\t\top: 'retentionpolicy',\n\t\t\t\t\t\t\t\tretentionPolicy\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t_jsns: 'urn:zimbraMail'\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t\t_jsns: 'urn:zimbra'\n\t\t\t  })\n\t\t\t: await soapFetch('FolderAction', {\n\t\t\t\t\taction: omitBy(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tid: folder.id,\n\t\t\t\t\t\t\top,\n\t\t\t\t\t\t\tl,\n\t\t\t\t\t\t\trecursive,\n\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\tcolor,\n\t\t\t\t\t\t\tzid\n\t\t\t\t\t\t},\n\t\t\t\t\t\tisNil\n\t\t\t\t\t),\n\t\t\t\t\t_jsns: 'urn:zimbraMail'\n\t\t\t  });\n\t\treturn result;\n\t}\n);\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/store/actions/folder-action.ts b/src/store/actions/folder-action.ts
+--- a/src/store/actions/folder-action.ts	(revision 4adaba21c8889cfd3cf44adf6271b75e82f59433)
++++ b/src/store/actions/folder-action.ts	(date 1661734106612)
+@@ -4,12 +4,12 @@
+  * SPDX-License-Identifier: AGPL-3.0-only
+  */
+ import { createAsyncThunk } from '@reduxjs/toolkit';
+-import { soapFetch } from '@zextras/carbonio-shell-ui';
++import { Folder, soapFetch } from '@zextras/carbonio-shell-ui';
+ import { isEmpty, isNil, omitBy } from 'lodash';
+ import { DataProps, FolderType } from '../../types';
+ 
+ type FolderActionProps = {
+-	folder: FolderType | DataProps;
++	folder: FolderType | DataProps | Folder;
+ 	color?: number;
+ 	zid?: string;
+ 	op: string;
+Index: src/hooks/use-local-storage.ts
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/hooks/use-local-storage.ts b/src/hooks/use-local-storage.ts
+new file mode 100644
+--- /dev/null	(date 1661312414000)
++++ b/src/hooks/use-local-storage.ts	(date 1661312414000)
+@@ -0,0 +1,29 @@
++/*
++ * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>
++ *
++ * SPDX-License-Identifier: AGPL-3.0-only
++ */
++
++import { Dispatch, SetStateAction, useState } from 'react';
++
++export function useLocalStorage<T>(key: string, initialValue: T): [T, Dispatch<SetStateAction<T>>] {
++	const [storedValue, setStoredValue] = useState<T>(() => {
++		try {
++			const item = window.localStorage.getItem(key);
++			return item ? JSON.parse(item) : initialValue;
++		} catch (error) {
++			console.error(error);
++			return initialValue;
++		}
++	});
++	const setValue = (value: T | ((val: T) => T)): any => {
++		try {
++			const valueToStore = value instanceof Function ? value(storedValue) : value;
++			setStoredValue(valueToStore);
++			localStorage.setItem(key, JSON.stringify(valueToStore));
++		} catch (error) {
++			console.error(error);
++		}
++	};
++	return [storedValue, setValue];
++}
+Index: .idea/shelf/fix__shared_with_information_on_edit_folder_modal/shelved.patch
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/.idea/shelf/fix__shared_with_information_on_edit_folder_modal/shelved.patch b/.idea/shelf/fix__shared_with_information_on_edit_folder_modal/shelved.patch
+new file mode 100644
+--- /dev/null	(date 1660292803000)
++++ b/.idea/shelf/fix__shared_with_information_on_edit_folder_modal/shelved.patch	(date 1660292803000)
+@@ -0,0 +1,293 @@
++Index: src/store/actions/conv-action.ts
++IDEA additional info:
++Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
++<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport { createAsyncThunk } from '@reduxjs/toolkit';\nimport { soapFetch } from '@zextras/carbonio-shell-ui';\nimport { isNil, omitBy } from 'lodash';\nimport {\n\tConvActionParameters,\n\tConvActionRequest,\n\tConvActionResponse,\n\tConvActionResult\n} from '../../types';\n\nexport const convAction = createAsyncThunk<ConvActionResult, ConvActionParameters>(\n\t'convAction',\n\tasync ({ ids, operation, parent, tagName }) => {\n\t\tconst { action } = (await soapFetch<ConvActionRequest, ConvActionResponse>('ConvAction', {\n\t\t\t_jsns: 'urn:zimbraMail',\n\n\t\t\taction: omitBy(\n\t\t\t\t{\n\t\t\t\t\tid: ids.join(','),\n\t\t\t\t\top: operation,\n\t\t\t\t\tl: parent,\n\t\t\t\t\ttn: tagName\n\t\t\t\t},\n\t\t\t\tisNil\n\t\t\t)\n\t\t})) as ConvActionResponse;\n\t\treturn {\n\t\t\tids: action.id.split(','),\n\t\t\toperation: action.op\n\t\t};\n\t}\n);\n
++Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
++<+>UTF-8
++===================================================================
++diff --git a/src/store/actions/conv-action.ts b/src/store/actions/conv-action.ts
++--- a/src/store/actions/conv-action.ts	(revision 4adaba21c8889cfd3cf44adf6271b75e82f59433)
+++++ b/src/store/actions/conv-action.ts	(date 1659976268999)
++@@ -6,6 +6,7 @@
++ import { createAsyncThunk } from '@reduxjs/toolkit';
++ import { soapFetch } from '@zextras/carbonio-shell-ui';
++ import { isNil, omitBy } from 'lodash';
+++// import { omitBy } from '../../commons/utils';
++ import {
++ 	ConvActionParameters,
++ 	ConvActionRequest,
++Index: src/commons/utils.tsx
++IDEA additional info:
++Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
++<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport moment from 'moment';\nimport { find, isArray } from 'lodash';\nimport { TFunction } from 'react-i18next';\nimport { Account } from '@zextras/carbonio-shell-ui';\nimport { Participant } from '../types/participant';\n\nexport const getTimeLabel = (date: number): string => {\n\tconst momentDate = moment(date);\n\tif (momentDate.isSame(new Date(), 'day')) {\n\t\treturn momentDate.format('LT');\n\t}\n\tif (momentDate.isSame(new Date(), 'week')) {\n\t\treturn momentDate.format('dddd, LT');\n\t}\n\tif (momentDate.isSame(new Date(), 'month')) {\n\t\treturn momentDate.format('DD MMMM');\n\t}\n\treturn momentDate.format('DD/MM/YYYY');\n};\n\nexport const participantToString = (\n\tparticipant: Participant | undefined,\n\tt: TFunction,\n\taccounts: Array<Account>\n): string => {\n\tconst me = find(accounts, ['name', participant?.address]);\n\tif (me) {\n\t\treturn t('label.me', 'Me');\n\t}\n\treturn participant?.fullName || participant?.name || participant?.address || '';\n};\n\nexport const isAvailableInTrusteeList = (\n\ttrusteeList: Array<string> | string,\n\taddress: string\n): boolean => {\n\tlet trusteeAddress: Array<string> = [];\n\tlet availableInTrusteeList = false;\n\tif (trusteeList) {\n\t\ttrusteeAddress = isArray(trusteeList) ? trusteeList : trusteeList.split(',');\n\t}\n\tif (trusteeAddress.length > 0) {\n\t\tconst domain = address.substring(address.lastIndexOf('@') + 1);\n\t\ttrusteeAddress.forEach((ta) => {\n\t\t\tif (ta === domain || ta === address) {\n\t\t\t\tavailableInTrusteeList = true;\n\t\t\t}\n\t\t});\n\t}\n\treturn availableInTrusteeList;\n};\n\n// eslint-disable-next-line no-shadow\nexport enum LineType {\n\tORIG_UNKNOWN = 'UNKNOWN',\n\tORIG_QUOTED = 'QUOTED',\n\tORIG_SEP_STRONG = 'SEP_STRONG',\n\tORIG_WROTE_STRONG = 'WROTE_STRONG',\n\tORIG_WROTE_WEAK = 'WROTE_WEAK',\n\tORIG_HEADER = 'HEADER',\n\tORIG_LINE = 'LINE',\n\tHTML_SEP_ID = 'zwchr',\n\tNOTES_SEPARATOR = '*~*~*~*~*~*~*~*~*~*'\n}\n\n// eslint-disable-next-line no-shadow\nexport enum FolderActionsType {\n\tNEW = 'new',\n\tMOVE = 'move',\n\tDELETE = 'delete',\n\tEDIT = 'edit',\n\tEMPTY = 'empty',\n\tREMOVE_FROM_LIST = 'removeFromList',\n\tSHARES_INFO = 'sharesInfo',\n\tSHARE = 'share'\n}\n\n// eslint-disable-next-line no-shadow\nexport enum ParticipantRole {\n\tFROM = 'f',\n\tTO = 't',\n\tCARBON_COPY = 'c',\n\tBLIND_CARBON_COPY = 'b',\n\tREPLY_TO = 'r',\n\tSENDER = 's',\n\tREAD_RECEIPT_NOTIFICATION = 'n',\n\tRESENT_FROM = 'rf'\n}\n\n// eslint-disable-next-line no-shadow\nexport enum ActionsType {\n\tNEW = 'new',\n\tEDIT_AS_DRAFT = 'editAsDraft',\n\tEDIT_AS_NEW = 'editAsNew',\n\tREPLY = 'reply',\n\tREPLY_ALL = 'replyAll',\n\tFORWARD = 'forward',\n\tMAIL_TO = 'mailTo',\n\tCOMPOSE = 'compose',\n\tPREFILL_COMPOSE = 'prefillCompose'\n}\n\n// eslint-disable-next-line no-shadow\nexport enum TagsActionsType {\n\tNEW = 'new',\n\tDELETE = 'delete',\n\tEDIT = 'edit',\n\tApply = 'apply'\n}\n
++Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
++<+>UTF-8
++===================================================================
++diff --git a/src/commons/utils.tsx b/src/commons/utils.tsx
++--- a/src/commons/utils.tsx	(revision 4adaba21c8889cfd3cf44adf6271b75e82f59433)
+++++ b/src/commons/utils.tsx	(date 1659976157630)
++@@ -112,3 +112,12 @@
++ 	EDIT = 'edit',
++ 	Apply = 'apply'
++ }
+++
+++// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
+++export const omitBy = (obj: any, check: (arg: unknown) => boolean): any => {
+++	// eslint-disable-next-line no-param-reassign
+++	obj = { ...obj };
+++	// eslint-disable-next-line no-param-reassign
+++	Object.entries(obj).forEach(([key, value]) => check(value) && delete obj[key]);
+++	return obj;
+++};
++Index: src/store/actions/search.ts
++IDEA additional info:
++Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
++<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n/* eslint no-param-reassign: [\"error\", { \"props\": true, \"ignorePropertyModificationsFor\": [\"conversation\"] }] */\n\nimport { createAsyncThunk } from '@reduxjs/toolkit';\nimport { soapFetch } from '@zextras/carbonio-shell-ui';\nimport { keyBy, map, reduce } from 'lodash';\nimport { normalizeConversation } from '../../normalizations/normalize-conversation';\nimport { normalizeMailMessageFromSoap } from '../../normalizations/normalize-message';\nimport {\n\tConversation,\n\tSearchRequest,\n\tSearchResponse,\n\tFetchConversationsReturn,\n\tFetchConversationsParameters\n} from '../../types';\n\nexport const search = createAsyncThunk<\n\tFetchConversationsReturn | undefined,\n\tFetchConversationsParameters\n>(\n\t'fetchConversations',\n\tasync ({\n\t\tfolderId,\n\t\tlimit = 100,\n\t\tbefore,\n\t\ttypes = 'conversation',\n\t\tsortBy = 'dateDesc',\n\t\tquery,\n\t\toffset,\n\t\trecip = '2',\n\t\twantContent = 'full'\n\t}) => {\n\t\tconst queryPart = [`inId:\"${folderId}\"`];\n\t\tif (before) queryPart.push(`before:${before.getTime()}`);\n\t\tconst result = await soapFetch<SearchRequest, SearchResponse>('Search', {\n\t\t\t_jsns: 'urn:zimbraMail',\n\t\t\tlimit,\n\t\t\tneedExp: 1,\n\t\t\trecip,\n\t\t\tfullConversation: 1,\n\t\t\twantContent,\n\t\t\tsortBy,\n\t\t\tquery: query || queryPart.join(' '),\n\t\t\toffset,\n\t\t\ttypes\n\t\t});\n\n\t\tif (types === 'conversation') {\n\t\t\tconst conversations = map(result?.c ?? [], (obj) =>\n\t\t\t\tnormalizeConversation(obj)\n\t\t\t) as unknown as Array<Conversation>;\n\t\t\treturn {\n\t\t\t\tconversations: keyBy(conversations, 'id'),\n\t\t\t\thasMore: result.more,\n\t\t\t\ttypes\n\t\t\t};\n\t\t}\n\t\tif (types === 'message') {\n\t\t\treturn {\n\t\t\t\tmessages: reduce(\n\t\t\t\t\tresult.m ?? [],\n\t\t\t\t\t(acc, msg) => {\n\t\t\t\t\t\tconst normalized = normalizeMailMessageFromSoap(msg, false);\n\t\t\t\t\t\treturn { ...acc, [normalized.id]: normalized };\n\t\t\t\t\t},\n\t\t\t\t\t{}\n\t\t\t\t),\n\t\t\t\thasMore: result.more,\n\t\t\t\ttypes\n\t\t\t};\n\t\t}\n\t\treturn undefined;\n\t}\n);\n
++Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
++<+>UTF-8
++===================================================================
++diff --git a/src/store/actions/search.ts b/src/store/actions/search.ts
++--- a/src/store/actions/search.ts	(revision 4adaba21c8889cfd3cf44adf6271b75e82f59433)
+++++ b/src/store/actions/search.ts	(date 1659976157631)
++@@ -6,7 +6,7 @@
++ /* eslint no-param-reassign: ["error", { "props": true, "ignorePropertyModificationsFor": ["conversation"] }] */
++ 
++ import { createAsyncThunk } from '@reduxjs/toolkit';
++-import { soapFetch } from '@zextras/carbonio-shell-ui';
+++import { getTags, soapFetch } from '@zextras/carbonio-shell-ui';
++ import { keyBy, map, reduce } from 'lodash';
++ import { normalizeConversation } from '../../normalizations/normalize-conversation';
++ import { normalizeMailMessageFromSoap } from '../../normalizations/normalize-message';
++@@ -49,9 +49,10 @@
++ 			types
++ 		});
++ 
+++		const tags = getTags();
++ 		if (types === 'conversation') {
++ 			const conversations = map(result?.c ?? [], (obj) =>
++-				normalizeConversation(obj)
+++				normalizeConversation({ c: obj, tags })
++ 			) as unknown as Array<Conversation>;
++ 			return {
++ 				conversations: keyBy(conversations, 'id'),
++Index: src/store/utils.ts
++IDEA additional info:
++Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
++<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport { max, map, filter, find, reduce, some, merge, isNil, omitBy } from 'lodash';\nimport { FolderType, MailsFolderMap, FoldersStateType } from '../types';\n\nexport function findDepth(subFolder: FolderType, depth = 1): number {\n\tif (subFolder && subFolder.items && subFolder.items.length) {\n\t\treturn <number>max(map(subFolder.items, (item) => findDepth(item, depth + 1)));\n\t}\n\treturn depth;\n}\n\nexport function calcFolderItems(\n\tfolders: MailsFolderMap,\n\tsubFolders: FolderType | undefined,\n\tid: string\n): FolderType[] {\n\treturn map(\n\t\tfilter(folders, (item) => item.parent === id),\n\t\t(item) => ({\n\t\t\t...item,\n\t\t\titems: calcFolderItems(folders, subFolders, item.id),\n\t\t\tto: `/folder/${item.id}`\n\t\t})\n\t);\n}\n\nexport function calcFolderAbsParentLevelAndPath(\n\tfolders: MailsFolderMap,\n\tsubFolder: FolderType | undefined,\n\tpath = subFolder && subFolder.name,\n\tlevel = 1\n): { absParent: string; level: number; path: string | undefined } | undefined {\n\tif (!subFolder) return undefined;\n\tconst nextFolder = find(folders, (item) => item.id === subFolder.parent);\n\tconst nextPath = `${nextFolder ? nextFolder.name : ''}/${path}`;\n\treturn (\n\t\tcalcFolderAbsParentLevelAndPath(folders, nextFolder, nextPath, level + 1) || {\n\t\t\tabsParent: level > 1 ? subFolder.id : subFolder.parent,\n\t\t\tlevel,\n\t\t\tpath\n\t\t}\n\t);\n}\n\n// replaced lodash \"reduce\" method with vanilla JS in order to decrease iterations and improve performance\nexport function updateFolders(state: FoldersStateType, folders: FolderType[]): void {\n\tstate.folders = Object.values(state.folders).reduce((acc, item) => {\n\t\tconst newFolder = omitBy(\n\t\t\tObject.values(folders).find((c) => c.id === item.id),\n\t\t\tisNil\n\t\t);\n\t\tconst toRet = newFolder ? { ...item, ...newFolder } : item;\n\n\t\treturn {\n\t\t\t...acc,\n\t\t\t[toRet.id]: {\n\t\t\t\t...toRet\n\t\t\t}\n\t\t};\n\t}, {});\n}\n\nexport function updateFolderInStore(state: FoldersStateType, folders: FolderType[]): void {\n\tstate.folders = reduce(\n\t\tstate.folders,\n\t\t(acc, item) => {\n\t\t\tconst toRet = find(folders, (c) => c.id === item.id) || item;\n\n\t\t\tconst items = calcFolderItems(state.folders, toRet, toRet.id);\n\t\t\tconst moreParams = calcFolderAbsParentLevelAndPath(state.folders, toRet);\n\t\t\treturn {\n\t\t\t\t...acc,\n\t\t\t\t[toRet.id]: {\n\t\t\t\t\t...toRet,\n\t\t\t\t\t...moreParams,\n\t\t\t\t\tdepth: findDepth({ ...toRet, items }),\n\t\t\t\t\titems,\n\t\t\t\t\tpath: moreParams ? `/${moreParams.path}` : undefined\n\t\t\t\t}\n\t\t\t};\n\t\t},\n\t\t{}\n\t);\n}\n\nexport function updatePartialFolderInStore(state: FoldersStateType, folders: FolderType[]): void {\n\tstate.folders = reduce(\n\t\tstate.folders,\n\t\t(acc, item) => {\n\t\t\tconst itemToUpdate = find(folders, (c) => c.id === item.id);\n\t\t\tconst toRet = merge(item, itemToUpdate ?? {});\n\n\t\t\tconst items = calcFolderItems(state.folders, toRet, toRet.id);\n\t\t\tconst moreParams = calcFolderAbsParentLevelAndPath(state.folders, toRet);\n\t\t\treturn {\n\t\t\t\t...acc,\n\t\t\t\t[toRet.id]: {\n\t\t\t\t\t...toRet,\n\t\t\t\t\t...moreParams,\n\t\t\t\t\tdepth: findDepth({ ...toRet, items }),\n\t\t\t\t\titems,\n\t\t\t\t\tpath: moreParams ? `/${moreParams.path}` : undefined\n\t\t\t\t}\n\t\t\t};\n\t\t},\n\t\t{}\n\t);\n}\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport function addFoldersToStore(state: FoldersStateType, folders: any): void {\n\tstate.folders = reduce(folders, (acc, v, k) => ({ ...acc, [v.id]: v }), state.folders);\n}\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport function removeFoldersFromStore(state: FoldersStateType, idsToDelete: any): void {\n\t// state.folders = omit(state.folders, idsToDelete); Maybe?\n\tstate.folders = reduce(\n\t\tstate.folders,\n\t\t(acc, v, k) => {\n\t\t\tconst value = some(idsToDelete, (cid) => cid === v.id);\n\t\t\treturn value ? { ...acc } : { ...acc, [v.id]: v };\n\t\t},\n\t\t{} as MailsFolderMap\n\t);\n}\n
++Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
++<+>UTF-8
++===================================================================
++diff --git a/src/store/utils.ts b/src/store/utils.ts
++--- a/src/store/utils.ts	(revision 4adaba21c8889cfd3cf44adf6271b75e82f59433)
+++++ b/src/store/utils.ts	(date 1659976428473)
++@@ -3,7 +3,7 @@
++  *
++  * SPDX-License-Identifier: AGPL-3.0-only
++  */
++-import { max, map, filter, find, reduce, some, merge, isNil, omitBy } from 'lodash';
+++import { max, map, filter, find, reduce, omitBy, some, merge, isNil } from 'lodash';
++ import { FolderType, MailsFolderMap, FoldersStateType } from '../types';
++ 
++ export function findDepth(subFolder: FolderType, depth = 1): number {
++Index: src/normalizations/normalize-message.ts
++IDEA additional info:
++Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
++<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport { getTags } from '@zextras/carbonio-shell-ui';\nimport { filter, find, isNil, map, omitBy, reduce } from 'lodash';\nimport { ParticipantRole } from '../commons/utils';\nimport {\n\tIncompleteMessage,\n\tMailMessagePart,\n\tSoapEmailParticipantRole,\n\tSoapMailParticipant,\n\tParticipant,\n\tSoapIncompleteMessage,\n\tSoapMailMessagePart\n} from '../types';\n\nexport function normalizeMailPartMapFn(v: SoapMailMessagePart): MailMessagePart {\n\tconst ret: MailMessagePart = {\n\t\tcontentType: v.ct,\n\t\tsize: v.s || 0,\n\t\tname: v.part,\n\t\tdisposition: v.cd\n\t};\n\tif (v.mp) {\n\t\tret.parts = map(v.mp || [], normalizeMailPartMapFn);\n\t}\n\tif (v.filename) ret.filename = v.filename;\n\tif (v.content) ret.content = v.content;\n\tif (v.ci) ret.ci = v.ci;\n\tif (v.cd) ret.disposition = v.cd;\n\treturn ret;\n}\n\nfunction findBodyPart(\n\tmp: Array<SoapMailMessagePart>,\n\tacc: { contentType: string; content: string },\n\tid: string\n): { contentType: string; content: string } {\n\tconst bodyPart = reduce(\n\t\tmp,\n\t\t(found, part) => {\n\t\t\tif (part.mp) return findBodyPart(part.mp, found, id);\n\t\t\tif (part && part.body) {\n\t\t\t\tif (!found.contentType.length) {\n\t\t\t\t\treturn { contentType: part.ct, content: part.content ?? '' };\n\t\t\t\t}\n\t\t\t\tif (\n\t\t\t\t\tpart.part &&\n\t\t\t\t\tpart.part.indexOf('.') === -1 &&\n\t\t\t\t\tpart.cd &&\n\t\t\t\t\tpart.cd === 'inline' &&\n\t\t\t\t\t!part.ci &&\n\t\t\t\t\t!(part.ct && part.ct === 'text/plain')\n\t\t\t\t) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...found,\n\t\t\t\t\t\tcontent: found.content.concat(\n\t\t\t\t\t\t\t`<img src='/service/home/~/?auth=co&loc=en&id=${id}&part=${part?.part}'>` ?? ''\n\t\t\t\t\t\t)\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\treturn { ...found, content: found.content.concat(part.content ?? '') };\n\t\t\t}\n\t\t\treturn found;\n\t\t},\n\t\tacc\n\t);\n\n\treturn bodyPart;\n}\n\nexport function generateBody(\n\tmp: Array<SoapMailMessagePart>,\n\tid: string\n): {\n\tcontentType: string;\n\tcontent: string;\n} {\n\treturn findBodyPart(mp, { contentType: '', content: '' }, id);\n}\n\nfunction participantTypeFromSoap(t: SoapEmailParticipantRole): ParticipantRole {\n\tswitch (t) {\n\t\tcase 'f':\n\t\t\treturn ParticipantRole.FROM;\n\t\tcase 't':\n\t\t\treturn ParticipantRole.TO;\n\t\tcase 'c':\n\t\t\treturn ParticipantRole.CARBON_COPY;\n\t\tcase 'b':\n\t\t\treturn ParticipantRole.BLIND_CARBON_COPY;\n\t\tcase 'r':\n\t\t\treturn ParticipantRole.REPLY_TO;\n\t\tcase 's':\n\t\t\treturn ParticipantRole.SENDER;\n\t\tcase 'n':\n\t\t\treturn ParticipantRole.READ_RECEIPT_NOTIFICATION;\n\t\tcase 'rf':\n\t\t\treturn ParticipantRole.RESENT_FROM;\n\t\tdefault:\n\t\t\tthrow new Error(`Participant type not handled: '${t}'`);\n\t}\n}\n\nexport function normalizeParticipantsFromSoap(e: SoapMailParticipant): Participant {\n\treturn {\n\t\ttype: participantTypeFromSoap(e.t),\n\t\taddress: e.a,\n\t\tname: e.d || e.a,\n\t\tfullName: e.p\n\t};\n}\nexport const getTagIdsFromName = (names: string | undefined): Array<string | undefined> => {\n\tconst tags = getTags();\n\treturn map(names?.split(','), (name) => find(tags, { name })?.id);\n};\n\nexport const getTagIds = (\n\tt: string | undefined,\n\ttn: string | undefined\n): Array<string | undefined> => {\n\tif (!isNil(t)) {\n\t\treturn filter(t.split(','), (tag) => tag !== '');\n\t}\n\tif (!isNil(tn)) {\n\t\treturn getTagIdsFromName(tn);\n\t}\n\treturn [];\n};\nexport const normalizeMailMessageFromSoap = (\n\tm: SoapIncompleteMessage,\n\tisComplete: boolean\n): IncompleteMessage => <IncompleteMessage>omitBy(\n\t\t{\n\t\t\tconversation: m.cid,\n\t\t\tid: m.id,\n\t\t\tdate: m.d,\n\t\t\tsize: m.s,\n\t\t\tparent: m.l,\n\t\t\tfragment: m.fr,\n\t\t\tsubject: m.su,\n\t\t\tparticipants: m.e ? map(m.e || [], normalizeParticipantsFromSoap) : undefined,\n\t\t\ttags: getTagIds(m.t, m.tn),\n\t\t\tparts: m.mp ? map(m.mp || [], normalizeMailPartMapFn) : undefined,\n\t\t\tinvite: m.inv,\n\t\t\tshr: m.shr,\n\t\t\tbody: m.mp ? generateBody(m.mp || [], m.id) : undefined,\n\t\t\tisComplete,\n\t\t\tread: !isNil(m.f) ? !/u/.test(m.f) : true,\n\t\t\tattachment: !isNil(m.f) ? /a/.test(m.f) : undefined,\n\t\t\tflagged: !isNil(m.f) ? /f/.test(m.f) : undefined,\n\t\t\turgent: !isNil(m.f) ? /!/.test(m.f) : undefined,\n\t\t\tisDeleted: !isNil(m.f) ? /x/.test(m.f) : undefined,\n\t\t\tisDraft: !isNil(m.f) ? /d/.test(m.f) : undefined,\n\t\t\tisForwarded: !isNil(m.f) ? /w/.test(m.f) : undefined,\n\t\t\tisSentByMe: !isNil(m.f) ? /s/.test(m.f) : undefined,\n\t\t\tisInvite: !isNil(m.f) ? /v/.test(m.f) : undefined,\n\t\t\tisReplied: !isNil(m.f) ? /r/.test(m.f) : undefined,\n\t\t\tisReadReceiptRequested: !isNil(m.f) ? !/n/.test(m.f) : true\n\t\t},\n\t\tisNil\n\t);\n
++Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
++<+>UTF-8
++===================================================================
++diff --git a/src/normalizations/normalize-message.ts b/src/normalizations/normalize-message.ts
++--- a/src/normalizations/normalize-message.ts	(revision 4adaba21c8889cfd3cf44adf6271b75e82f59433)
+++++ b/src/normalizations/normalize-message.ts	(date 1659976375980)
++@@ -4,7 +4,7 @@
++  * SPDX-License-Identifier: AGPL-3.0-only
++  */
++ import { getTags } from '@zextras/carbonio-shell-ui';
++-import { filter, find, isNil, map, omitBy, reduce } from 'lodash';
+++import { filter, find, isNil, map, reduce, omitBy } from 'lodash';
++ import { ParticipantRole } from '../commons/utils';
++ import {
++ 	IncompleteMessage,
++Index: src/normalizations/normalize-conversation.ts
++IDEA additional info:
++Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
++<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport { getTags } from '@zextras/carbonio-shell-ui';\nimport { filter, find, isNil, map, omitBy } from 'lodash';\nimport { Conversation, SoapIncompleteMessage, SoapConversation } from '../types';\nimport { normalizeParticipantsFromSoap } from './normalize-message';\n\nexport const getTagIdsFromName = (names: string | undefined): Array<string | undefined> => {\n\tconst tags = getTags();\n\treturn map(names?.split(','), (name) => find(tags, { name })?.id);\n};\n\nexport const getTagIds = (\n\tt: string | undefined,\n\ttn: string | undefined\n): Array<string | undefined> => {\n\tif (!isNil(t)) {\n\t\treturn filter(t.split(','), (tag) => tag !== '');\n\t}\n\tif (!isNil(tn)) {\n\t\treturn getTagIdsFromName(tn);\n\t}\n\treturn [];\n};\nexport const normalizeConversation = (\n\tc: SoapConversation,\n\tm?: Array<SoapIncompleteMessage>\n): Partial<Conversation> => {\n\tconst filteredMsgs = c?.m ?? filter(m ?? [], ['cid', c?.id]);\n\tconst messages = filteredMsgs?.length\n\t\t? map(filteredMsgs, (msg) => ({\n\t\t\t\tid: msg.id,\n\t\t\t\tparent: msg.l,\n\t\t\t\tdate: Number(msg?.d)\n\t\t  }))\n\t\t: undefined;\n\n\treturn omitBy(\n\t\t{\n\t\t\ttags: getTagIds(c.t, c.tn),\n\t\t\tid: c.id,\n\t\t\tdate: c.d,\n\t\t\tmsgCount: c.n,\n\t\t\tunreadMsgCount: c.u,\n\t\t\tmessages,\n\t\t\tparticipants: c.e ? map(c.e, normalizeParticipantsFromSoap) : undefined,\n\t\t\tsubject: c.su,\n\t\t\tfragment: c.fr,\n\t\t\tread: !isNil(c.f) ? !/u/.test(c.f) : !(c.u > 0),\n\t\t\tattachment: !isNil(c.f) ? /a/.test(c.f) : undefined,\n\t\t\tflagged: !isNil(c.f) ? /f/.test(c.f) : undefined,\n\t\t\turgent: !isNil(c.f) ? /!/.test(c.f) : undefined\n\t\t},\n\t\tisNil\n\t);\n};\n
++Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
++<+>UTF-8
++===================================================================
++diff --git a/src/normalizations/normalize-conversation.ts b/src/normalizations/normalize-conversation.ts
++--- a/src/normalizations/normalize-conversation.ts	(revision 4adaba21c8889cfd3cf44adf6271b75e82f59433)
+++++ b/src/normalizations/normalize-conversation.ts	(date 1659976157630)
++@@ -3,32 +3,41 @@
++  *
++  * SPDX-License-Identifier: AGPL-3.0-only
++  */
++-import { getTags } from '@zextras/carbonio-shell-ui';
++-import { filter, find, isNil, map, omitBy } from 'lodash';
+++import { Tags } from '@zextras/carbonio-shell-ui';
+++import { filter, find, isNil, map } from 'lodash';
+++import { omitBy } from '../commons/utils';
++ import { Conversation, SoapIncompleteMessage, SoapConversation } from '../types';
++ import { normalizeParticipantsFromSoap } from './normalize-message';
++ 
++-export const getTagIdsFromName = (names: string | undefined): Array<string | undefined> => {
++-	const tags = getTags();
++-	return map(names?.split(','), (name) => find(tags, { name })?.id);
++-};
++-
+++export const getTagIdsFromName = (
+++	names: string | undefined,
+++	tags?: Tags
+++): Array<string | undefined> => map(names?.split(','), (name) => find(tags, { name })?.id);
++ export const getTagIds = (
++ 	t: string | undefined,
++-	tn: string | undefined
+++	tn: string | undefined,
+++	tags?: Tags
++ ): Array<string | undefined> => {
++ 	if (!isNil(t)) {
++ 		return filter(t.split(','), (tag) => tag !== '');
++ 	}
++ 	if (!isNil(tn)) {
++-		return getTagIdsFromName(tn);
+++		return getTagIdsFromName(tn, tags);
++ 	}
++ 	return [];
++ };
++-export const normalizeConversation = (
++-	c: SoapConversation,
++-	m?: Array<SoapIncompleteMessage>
++-): Partial<Conversation> => {
+++
+++export type NormalizeConversationProps = {
+++	c: SoapConversation;
+++	tags: Tags;
+++	m?: Array<SoapIncompleteMessage>;
+++};
+++
+++export const normalizeConversation = ({
+++	c,
+++	m,
+++	tags
+++}: NormalizeConversationProps): Partial<Conversation> => {
++ 	const filteredMsgs = c?.m ?? filter(m ?? [], ['cid', c?.id]);
++ 	const messages = filteredMsgs?.length
++ 		? map(filteredMsgs, (msg) => ({
++@@ -38,9 +47,10 @@
++ 		  }))
++ 		: undefined;
++ 
++-	return omitBy(
+++	console.time('@@normalizeConversation');
+++	const result = omitBy(
++ 		{
++-			tags: getTagIds(c.t, c.tn),
+++			tags: getTagIds(c.t, c.tn, tags),
++ 			id: c.id,
++ 			date: c.d,
++ 			msgCount: c.n,
++@@ -56,4 +66,7 @@
++ 		},
++ 		isNil
++ 	);
+++	console.timeEnd('@@normalizeConversation');
+++
+++	return result;
++ };
++Index: src/views/sidebar/sync-data-handler.jsx
++IDEA additional info:
++Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
++<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport {\n\tFOLDERS,\n\tstore,\n\tuseNotify,\n\tuseRefresh,\n\tupdatePrimaryBadge\n} from '@zextras/carbonio-shell-ui';\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { isEmpty, map, keyBy, find, filter, forEach, sortBy, reduce } from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport {\n\thandleCreatedFolders,\n\thandleModifiedFolders,\n\thandleDeletedFolders,\n\thandleRefresh,\n\tselectFolder\n} from '../../store/folders-slice';\nimport {\n\thandleNotifyCreatedConversations,\n\thandleNotifyModifiedConversations,\n\thandleNotifyDeletedConversations,\n\thandleModifiedMessagesInConversation,\n\thandleDeletedMessagesInConversation,\n\tsetSearchedInFolder,\n\tselectCurrentFolder,\n\thandleCreatedMessagesInConversation,\n\thandleAddMessagesInConversation\n} from '../../store/conversations-slice';\nimport {\n\thandleCreatedMessages,\n\thandleModifiedMessages,\n\thandleDeletedMessages,\n\tselectMessages\n} from '../../store/messages-slice';\nimport { storeReducers } from '../../store/reducers';\nimport { normalizeConversation } from '../../normalizations/normalize-conversation';\nimport { normalizeMailMessageFromSoap } from '../../normalizations/normalize-message';\nimport { extractFolders } from './utils';\nimport { MAILS_ROUTE } from '../../constants';\n\nconst InboxBadgeUpdater = () => {\n\tconst folder = useSelector(selectFolder(FOLDERS.INBOX));\n\tuseEffect(() => {\n\t\tupdatePrimaryBadge(\n\t\t\t{\n\t\t\t\tshow: folder.unreadCount > 0,\n\t\t\t\tcount: folder.unreadCount,\n\t\t\t\tshowCount: true\n\t\t\t},\n\t\t\tMAILS_ROUTE\n\t\t);\n\t}, [folder.unreadCount]);\n\treturn null;\n};\n\nexport const SyncDataHandler = () => {\n\tconst [t] = useTranslation();\n\tconst refresh = useRefresh();\n\tconst notifyList = useNotify();\n\tconst [seq, setSeq] = useState(-1);\n\tconst dispatch = useDispatch();\n\tconst [initialized, setInitialized] = useState(false);\n\tconst currentFolder = useSelector(selectCurrentFolder);\n\tconst messagesState = useSelector(selectMessages);\n\n\tuseEffect(() => {\n\t\tif (!isEmpty(refresh) && !initialized) {\n\t\t\tstore.setReducer(storeReducers);\n\t\t\t// this also normalize folders so no need to normalize it later\n\t\t\tconst extractedFolders = extractFolders([\n\t\t\t\t...(refresh?.folder?.[0]?.folder ?? []),\n\t\t\t\t...(refresh?.folder?.[0]?.link ?? [])\n\t\t\t]);\n\t\t\tdispatch(handleRefresh(extractedFolders));\n\t\t\tsetInitialized(true);\n\t\t}\n\t}, [dispatch, initialized, refresh]);\n\n\tuseEffect(() => {\n\t\tforEach(notifyList, (notify) => {\n\t\t\t// this intercept all changes made from different folders towards the current one, it triggers a search request if it finds at least one item which affect currentFolder\n\t\t\tif (find(notify?.modified?.m, ['l', currentFolder])) {\n\t\t\t\tdispatch(setSearchedInFolder({ [currentFolder]: 'incomplete' }));\n\t\t\t}\n\t\t});\n\t}, [currentFolder, dispatch, notifyList]);\n\n\tuseEffect(() => {\n\t\tif (initialized) {\n\t\t\tif (notifyList.length > 0) {\n\t\t\t\tforEach(sortBy(notifyList, 'seq'), (notify) => {\n\t\t\t\t\tif (!isEmpty(notify) && (notify.seq > seq || (seq > 1 && notify.seq === 1))) {\n\t\t\t\t\t\tif (notify.created) {\n\t\t\t\t\t\t\tif (notify.created.folder || notify.created.link) {\n\t\t\t\t\t\t\t\tdispatch(\n\t\t\t\t\t\t\t\t\thandleCreatedFolders([\n\t\t\t\t\t\t\t\t\t\t...(notify.created.folder ?? []),\n\t\t\t\t\t\t\t\t\t\t...(notify.created.link ?? [])\n\t\t\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (notify.created.c && notify.created.m) {\n\t\t\t\t\t\t\t\tconst conversations = map(notify.created.c, (i) =>\n\t\t\t\t\t\t\t\t\tnormalizeConversation(i, notify.created.m)\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tdispatch(handleNotifyCreatedConversations(keyBy(conversations, 'id')));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (notify.created.m) {\n\t\t\t\t\t\t\t\tdispatch(handleCreatedMessages({ m: notify.created.m }));\n\t\t\t\t\t\t\t\tdispatch(handleCreatedMessagesInConversation({ m: notify.created.m }));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (notify.modified) {\n\t\t\t\t\t\t\tif (notify.modified.folder || notify.modified.link) {\n\t\t\t\t\t\t\t\tdispatch(\n\t\t\t\t\t\t\t\t\thandleModifiedFolders([\n\t\t\t\t\t\t\t\t\t\t...(notify.modified.folder ?? []),\n\t\t\t\t\t\t\t\t\t\t...(notify.modified.link ?? [])\n\t\t\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (notify.modified.c) {\n\t\t\t\t\t\t\t\tconst conversations = map(notify.modified.c, normalizeConversation);\n\t\t\t\t\t\t\t\tdispatch(handleNotifyModifiedConversations(keyBy(conversations, 'id')));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (notify.modified.m) {\n\t\t\t\t\t\t\t\tconst messages = map(notify.modified.m, (obj) =>\n\t\t\t\t\t\t\t\t\tnormalizeMailMessageFromSoap(obj, false)\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tdispatch(handleModifiedMessages(messages));\n\n\t\t\t\t\t\t\t\t// the condition filters messages with parent property (the only ones we need to update)\n\t\t\t\t\t\t\t\tconst toUpdate = filter(messages, 'parent');\n\t\t\t\t\t\t\t\tif (toUpdate?.length > 0) {\n\t\t\t\t\t\t\t\t\t// this function updates messages' parent in conversations. If parent never changes it does not need to be called\n\t\t\t\t\t\t\t\t\tdispatch(handleModifiedMessagesInConversation(toUpdate));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// the condition filters messages with conversation property (the only ones we need to add to conversation)\n\t\t\t\t\t\t\t\tconst conversationToUpdate = filter(messages, 'conversation');\n\t\t\t\t\t\t\t\tif (conversationToUpdate?.length > 0) {\n\t\t\t\t\t\t\t\t\tconst msgsReference = reduce(\n\t\t\t\t\t\t\t\t\t\tconversationToUpdate,\n\t\t\t\t\t\t\t\t\t\t(acc, msg) => {\n\t\t\t\t\t\t\t\t\t\t\tif (messagesState?.[msg?.id]) {\n\t\t\t\t\t\t\t\t\t\t\t\treturn [\n\t\t\t\t\t\t\t\t\t\t\t\t\t...acc,\n\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tid: messagesState?.[msg?.id].id,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tparent: messagesState?.[msg?.id].parent,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tdate: messagesState?.[msg?.id].date,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tconversation: msg.conversation\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t];\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\treturn acc;\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t[]\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t// this function add messages' in conversations. If conversation never changes it does not need to be called\n\t\t\t\t\t\t\t\t\tdispatch(handleAddMessagesInConversation(msgsReference));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (notify.deleted) {\n\t\t\t\t\t\t\tdispatch(handleDeletedFolders(notify.deleted));\n\t\t\t\t\t\t\tdispatch(handleNotifyDeletedConversations(notify.deleted));\n\t\t\t\t\t\t\tdispatch(handleDeletedMessages(notify.deleted));\n\t\t\t\t\t\t\tdispatch(handleDeletedMessagesInConversation(notify.deleted));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tsetSeq(notify.seq);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}, [dispatch, initialized, messagesState, notifyList, seq, t]);\n\treturn <InboxBadgeUpdater />;\n};\n
++Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
++<+>UTF-8
++===================================================================
++diff --git a/src/views/sidebar/sync-data-handler.jsx b/src/views/sidebar/sync-data-handler.jsx
++--- a/src/views/sidebar/sync-data-handler.jsx	(revision 4adaba21c8889cfd3cf44adf6271b75e82f59433)
+++++ b/src/views/sidebar/sync-data-handler.jsx	(date 1659976157631)
++@@ -8,7 +8,8 @@
++ 	store,
++ 	useNotify,
++ 	useRefresh,
++-	updatePrimaryBadge
+++	updatePrimaryBadge,
+++	getTags
++ } from '@zextras/carbonio-shell-ui';
++ import React, { useEffect, useState } from 'react';
++ import { useDispatch, useSelector } from 'react-redux';
++@@ -106,8 +107,9 @@
++ 								);
++ 							}
++ 							if (notify.created.c && notify.created.m) {
+++								const tags = getTags();
++ 								const conversations = map(notify.created.c, (i) =>
++-									normalizeConversation(i, notify.created.m)
+++									normalizeConversation({ c: i, m: notify.created.m, tags })
++ 								);
++ 								dispatch(handleNotifyCreatedConversations(keyBy(conversations, 'id')));
++ 							}
++Index: src/store/actions/get-conv.ts
++IDEA additional info:
++Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
++<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport { createAsyncThunk } from '@reduxjs/toolkit';\nimport { soapFetch } from '@zextras/carbonio-shell-ui';\nimport { map } from 'lodash';\nimport { normalizeConversation } from '../../normalizations/normalize-conversation';\nimport { normalizeMailMessageFromSoap } from '../../normalizations/normalize-message';\nimport {\n\tConversation,\n\tGetConvParameters,\n\tGetConvRequest,\n\tGetConvResponse,\n\tIncompleteMessage\n} from '../../types';\n\nexport const getConv = createAsyncThunk<\n\t{ conversation: Partial<Conversation>; messages: Array<IncompleteMessage> },\n\tGetConvParameters\n>(\n\t'conversations/getConv',\n\tasync ({ conversationId, fetch = 'all' }) => {\n\t\tconst result = (await soapFetch<GetConvRequest, GetConvResponse>('GetConv', {\n\t\t\t_jsns: 'urn:zimbraMail',\n\t\t\tc: {\n\t\t\t\tid: conversationId,\n\t\t\t\thtml: 1,\n\t\t\t\tneedExp: 1,\n\t\t\t\tfetch\n\t\t\t}\n\t\t})) as GetConvResponse;\n\t\tconst conversation = normalizeConversation(result.c[0]);\n\t\tconst messages = map(result.c[0].m, (item) =>\n\t\t\tnormalizeMailMessageFromSoap(item, false)\n\t\t) as unknown as Array<IncompleteMessage>;\n\t\treturn { conversation, messages };\n\t},\n\t{\n\t\tcondition: ({ folderId, conversationId }: GetConvParameters, { getState }: any) => {\n\t\t\tif (!folderId) return true;\n\t\t\treturn (\n\t\t\t\tgetState().conversations?.expandedStatus[conversationId] !== 'complete' &&\n\t\t\t\tgetState().conversations?.expandedStatus[conversationId] !== 'pending'\n\t\t\t);\n\t\t}\n\t}\n);\n
++Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
++<+>UTF-8
++===================================================================
++diff --git a/src/store/actions/get-conv.ts b/src/store/actions/get-conv.ts
++--- a/src/store/actions/get-conv.ts	(revision 4adaba21c8889cfd3cf44adf6271b75e82f59433)
+++++ b/src/store/actions/get-conv.ts	(date 1659976157631)
++@@ -4,7 +4,7 @@
++  * SPDX-License-Identifier: AGPL-3.0-only
++  */
++ import { createAsyncThunk } from '@reduxjs/toolkit';
++-import { soapFetch } from '@zextras/carbonio-shell-ui';
+++import { getTags, soapFetch } from '@zextras/carbonio-shell-ui';
++ import { map } from 'lodash';
++ import { normalizeConversation } from '../../normalizations/normalize-conversation';
++ import { normalizeMailMessageFromSoap } from '../../normalizations/normalize-message';
++@@ -31,7 +31,8 @@
++ 				fetch
++ 			}
++ 		})) as GetConvResponse;
++-		const conversation = normalizeConversation(result.c[0]);
+++		const tags = getTags();
+++		const conversation = normalizeConversation({ c: result.c[0], tags });
++ 		const messages = map(result.c[0].m, (item) =>
++ 			normalizeMailMessageFromSoap(item, false)
++ 		) as unknown as Array<IncompleteMessage>;
++Index: src/views/sidebar/utils.ts
++IDEA additional info:
++Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
++<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport {\n\tZIMBRA_STANDARD_COLORS,\n\tFOLDERS,\n\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t// @ts-ignore\n\tROOT_NAME,\n\tAccordionFolder,\n\tFolder,\n\tLinkFolderFields\n} from '@zextras/carbonio-shell-ui';\nimport { isNil, omitBy, reduce } from 'lodash';\nimport { TFunction } from 'react-i18next';\n\nconst folderIdRegex = /^(.+:)*(\\d+)$/;\n\nexport const normalizeFolder = (\n\tfolder: Folder & Partial<LinkFolderFields>\n): Partial<Folder & Partial<LinkFolderFields>> =>\n\tomitBy(\n\t\t{\n\t\t\tid: folder.id,\n\t\t\tuuid: folder.uuid,\n\t\t\tcolor: folder.color,\n\t\t\tname: folder.name,\n\t\t\tpath: folder.absFolderPath,\n\t\t\tparent: folder.l,\n\t\t\tparentUuid: folder.luuid,\n\t\t\titemsCount: folder.n,\n\t\t\tsize: folder.s,\n\t\t\tunreadCount: folder.u,\n\t\t\tsynced: true,\n\t\t\trgb: folder.rgb,\n\t\t\towner: folder.owner,\n\t\t\trid: folder.rid,\n\t\t\tzid: folder.zid,\n\t\t\tacl: folder.acl,\n\t\t\tperm: folder.perm,\n\t\t\tisSharedFolder: !!folder.owner,\n\t\t\tretentionPolicy: folder.retentionPolicy,\n\t\t\tview: folder.view\n\t\t},\n\t\tisNil\n\t);\n\nexport const extractFolders = (accordion: Array<any>, acc = {}): any =>\n\treduce(\n\t\taccordion,\n\t\t(acc2, folder) => {\n\t\t\tif (folder.folder) {\n\t\t\t\treturn (folder.view === 'message' &&\n\t\t\t\t\tfolder.id !== FOLDERS.IM_LOGS &&\n\t\t\t\t\tfolder.id !== FOLDERS.USER_ROOT) ||\n\t\t\t\t\tfolder.id === FOLDERS.TRASH\n\t\t\t\t\t? {\n\t\t\t\t\t\t\t...acc2,\n\t\t\t\t\t\t\t[folder.id]: normalizeFolder(folder),\n\t\t\t\t\t\t\t...extractFolders(folder.folder, acc2)\n\t\t\t\t\t  }\n\t\t\t\t\t: { ...acc2, ...extractFolders(folder.folder, acc2) };\n\t\t\t}\n\t\t\treturn (folder.view === 'message' &&\n\t\t\t\tfolder.id !== FOLDERS.IM_LOGS &&\n\t\t\t\tfolder.id !== FOLDERS.USER_ROOT) ||\n\t\t\t\tfolder.id === FOLDERS.TRASH\n\t\t\t\t? {\n\t\t\t\t\t\t...acc2,\n\t\t\t\t\t\t[folder.id]: normalizeFolder(folder)\n\t\t\t\t  }\n\t\t\t\t: acc2;\n\t\t},\n\t\tacc\n\t);\n\nexport const capitalise = (word: string): string => {\n\tconst asciiRef = word?.charCodeAt(0);\n\tconst newAsciiRef = asciiRef - 32;\n\tconst newChar = String.fromCharCode(newAsciiRef);\n\treturn word ? newChar + word.substring(1) : '';\n};\n\nexport const getFolderIconColor = (f: AccordionFolder): string => {\n\tif (f?.folder?.color) {\n\t\treturn f.folder.color < 10\n\t\t\t? ZIMBRA_STANDARD_COLORS[f.folder.color].hex\n\t\t\t: f?.folder.rgb ?? ZIMBRA_STANDARD_COLORS[0].hex;\n\t}\n\treturn ZIMBRA_STANDARD_COLORS[0].hex;\n};\n\nexport const getFolderIconName = (folder: AccordionFolder): string | null => {\n\tconst systemFolders = [\n\t\tFOLDERS.USER_ROOT,\n\t\tFOLDERS.INBOX,\n\t\tFOLDERS.TRASH,\n\t\tFOLDERS.DRAFTS,\n\t\tFOLDERS.SPAM,\n\t\tFOLDERS.SENT\n\t];\n\n\tif (folder.id === FOLDERS.USER_ROOT || folder.folder?.oname === ROOT_NAME) {\n\t\treturn null;\n\t}\n\n\tif (folder.id && systemFolders.includes(folder.id)) {\n\t\tswitch (folder.id) {\n\t\t\tcase FOLDERS.INBOX:\n\t\t\t\treturn 'InboxOutline';\n\t\t\tcase FOLDERS.DRAFTS:\n\t\t\t\treturn 'FileOutline';\n\t\t\tcase FOLDERS.SENT:\n\t\t\t\treturn 'PaperPlaneOutline';\n\t\t\tcase FOLDERS.SPAM:\n\t\t\t\treturn 'SlashOutline';\n\t\t\tcase FOLDERS.TRASH:\n\t\t\t\treturn 'Trash2Outline';\n\t\t\tdefault:\n\t\t\t\treturn 'FolderOutline';\n\t\t}\n\t}\n\tif (\n\t\tfolder.id?.charAt(folder.id.length - 2) === ':' &&\n\t\tsystemFolders.includes(folder.id.slice(-1))\n\t) {\n\t\tswitch (folder.id.slice(-1)) {\n\t\t\tcase FOLDERS.INBOX:\n\t\t\t\treturn 'InboxOutline';\n\t\t\tcase FOLDERS.DRAFTS:\n\t\t\t\treturn 'FileOutline';\n\t\t\tcase FOLDERS.SENT:\n\t\t\t\treturn 'PaperPlaneOutline';\n\t\t\tcase FOLDERS.SPAM:\n\t\t\t\treturn 'SlashOutline';\n\t\t\tcase FOLDERS.TRASH:\n\t\t\t\treturn 'Trash2Outline';\n\t\t\tdefault:\n\t\t\t\treturn 'FolderOutline';\n\t\t}\n\t}\n\treturn 'FolderOutline';\n};\n\nexport const translatedSystemFolders = (t: TFunction): Array<string> => [\n\tt('folders.inbox', 'Inbox'),\n\tt('folders.sent', 'Sent'),\n\tt('folders.drafts', 'Drafts'),\n\tt('folders.trash', 'Trash'),\n\tt('folders.spam', 'Spam'),\n\tt('folders.junk', 'Junk')\n];\n\ntype GetSystemFolderProps = {\n\tt: TFunction;\n\tfolderId?: string;\n\tfolderName: string;\n};\n\nexport const getSystemFolderTranslatedName = ({ t, folderName }: GetSystemFolderProps): string => {\n\tif (folderName) {\n\t\tswitch (folderName) {\n\t\t\tcase 'Inbox':\n\t\t\t\treturn t('folders.inbox', 'Inbox');\n\t\t\tcase 'Sent':\n\t\t\t\treturn t('folders.sent', 'Sent');\n\t\t\tcase 'Drafts':\n\t\t\t\treturn t('folders.drafts', 'Drafts');\n\t\t\tcase 'Trash':\n\t\t\t\treturn t('folders.trash', 'Trash');\n\t\t\tcase 'Spam':\n\t\t\t\treturn t('folders.spam', 'Spam');\n\t\t\tcase 'Junk':\n\t\t\t\treturn t('folders.junk', 'Junk');\n\t\t\tdefault:\n\t\t\t\treturn folderName;\n\t\t}\n\t}\n\treturn folderName;\n};\n\nexport const getFolderTranslatedName = ({\n\tt,\n\tfolderId,\n\tfolderName\n}: GetSystemFolderProps): string => {\n\tconst id = folderIdRegex.exec(folderId ?? '')?.[2];\n\tif (id && Object.values(FOLDERS).includes(id)) {\n\t\treturn getSystemFolderTranslatedName({ t, folderName });\n\t}\n\n\treturn folderName;\n};\n
++Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
++<+>UTF-8
++===================================================================
++diff --git a/src/views/sidebar/utils.ts b/src/views/sidebar/utils.ts
++--- a/src/views/sidebar/utils.ts	(revision 4adaba21c8889cfd3cf44adf6271b75e82f59433)
+++++ b/src/views/sidebar/utils.ts	(date 1659976441039)
++@@ -13,7 +13,7 @@
++ 	Folder,
++ 	LinkFolderFields
++ } from '@zextras/carbonio-shell-ui';
++-import { isNil, omitBy, reduce } from 'lodash';
+++import { isNil, reduce, omitBy } from 'lodash';
++ import { TFunction } from 'react-i18next';
++ 
++ const folderIdRegex = /^(.+:)*(\d+)$/;
++Index: .idea/prettier.xml
++IDEA additional info:
++Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
++<+>UTF-8
++===================================================================
++diff --git a/.idea/prettier.xml b/.idea/prettier.xml
++new file mode 100644
++--- /dev/null	(date 1659976157630)
+++++ b/.idea/prettier.xml	(date 1659976157630)
++@@ -0,0 +1,7 @@
+++<?xml version="1.0" encoding="UTF-8"?>
+++<project version="4">
+++  <component name="PrettierConfiguration">
+++    <option name="myRunOnSave" value="true" />
+++    <option name="myRunOnReformat" value="true" />
+++  </component>
+++</project>
++\ No newline at end of file
+Index: package-lock.json
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/package-lock.json b/package-lock.json
+--- a/package-lock.json	(revision 4adaba21c8889cfd3cf44adf6271b75e82f59433)
++++ b/package-lock.json	(date 1661456034188)
+@@ -10,6 +10,10 @@
+ 			"hasInstallScript": true,
+ 			"license": "AGPL-3.0-only",
+ 			"dependencies": {
++				"@emotion/react": "^11.10.0",
++				"@emotion/styled": "^11.10.0",
++				"@mui/icons-material": "^5.10.2",
++				"@mui/material": "^5.10.2",
+ 				"@reduxjs/toolkit": "1.6.2",
+ 				"@zextras/carbonio-design-system": "^0.3.7",
+ 				"@zextras/carbonio-shell-ui": "^0.4.30",
+@@ -70,7 +74,6 @@
+ 		"node_modules/@babel/compat-data": {
+ 			"version": "7.16.8",
+ 			"integrity": "sha512-m7OkX0IdKLKPpBlJtF561YJal5y/jyI5fNfWbPxh2D/nbzzGI4qRyrD8xO2jB24u7l+5I2a43scCG2IrfjC50Q==",
+-			"dev": true,
+ 			"engines": {
+ 				"node": ">=6.9.0"
+ 			}
+@@ -78,7 +81,6 @@
+ 		"node_modules/@babel/core": {
+ 			"version": "7.16.0",
+ 			"integrity": "sha512-mYZEvshBRHGsIAiyH5PzCFTCfbWfoYbO/jcSdXQSUQu1/pW0xDZAUP7KEc32heqWTAfAHhV9j1vH8Sav7l+JNQ==",
+-			"dev": true,
+ 			"dependencies": {
+ 				"@babel/code-frame": "^7.16.0",
+ 				"@babel/generator": "^7.16.0",
+@@ -107,7 +109,6 @@
+ 		"node_modules/@babel/core/node_modules/@babel/helper-compilation-targets": {
+ 			"version": "7.16.7",
+ 			"integrity": "sha512-mGojBwIWcwGD6rfqgRXVlVYmPAv7eOpIemUG3dGnDdCY4Pae70ROij3XmfrH6Fa1h1aiDylpglbZyktfzyo/hA==",
+-			"dev": true,
+ 			"dependencies": {
+ 				"@babel/compat-data": "^7.16.4",
+ 				"@babel/helper-validator-option": "^7.16.7",
+@@ -232,7 +233,6 @@
+ 		"node_modules/@babel/helper-module-transforms": {
+ 			"version": "7.16.7",
+ 			"integrity": "sha512-gaqtLDxJEFCeQbYp9aLAefjhkKdjKcdh6DB7jniIGU3Pz52WAmP268zK0VgPz9hUNkMSYeH976K2/Y6yPadpng==",
+-			"dev": true,
+ 			"dependencies": {
+ 				"@babel/helper-environment-visitor": "^7.16.7",
+ 				"@babel/helper-module-imports": "^7.16.7",
+@@ -259,9 +259,9 @@
+ 			}
+ 		},
+ 		"node_modules/@babel/helper-plugin-utils": {
+-			"version": "7.16.7",
+-			"integrity": "sha512-Qg3Nk7ZxpgMrsox6HreY1ZNKdBq7K72tDSliA6dCl5f007jR4ne8iD5UzuNnCJH2xBf2BEEVGr+/OL6Gdp7RxA==",
+-			"dev": true,
++			"version": "7.18.9",
++			"resolved": "https://registry.npmjs.org/@babel/helper-plugin-utils/-/helper-plugin-utils-7.18.9.tgz",
++			"integrity": "sha512-aBXPT3bmtLryXaoJLyYPXPlSD4p1ld9aYeR+sJNOZjJJGiOpb+fKfh3NkcCu7J54nUJwCERPBExCCpyCOHnu/w==",
+ 			"engines": {
+ 				"node": ">=6.9.0"
+ 			}
+@@ -297,7 +297,6 @@
+ 		"node_modules/@babel/helper-simple-access": {
+ 			"version": "7.16.7",
+ 			"integrity": "sha512-ZIzHVyoeLMvXMN/vok/a4LWRy8G2v205mNP0XOuf9XRLyX5/u9CnVulUtDgUTama3lT+bf/UqucuZjqiGuTS1g==",
+-			"dev": true,
+ 			"dependencies": {
+ 				"@babel/types": "^7.16.7"
+ 			},
+@@ -336,7 +335,6 @@
+ 		"node_modules/@babel/helper-validator-option": {
+ 			"version": "7.16.7",
+ 			"integrity": "sha512-TRtenOuRUVo9oIQGPC5G9DgK4743cdxvtOw0weQNpZXaS16SCBi5MNjZF8vba3ETURjZpTbVn7Vvcf2eAwFozQ==",
+-			"dev": true,
+ 			"engines": {
+ 				"node": ">=6.9.0"
+ 			}
+@@ -358,7 +356,6 @@
+ 		"node_modules/@babel/helpers": {
+ 			"version": "7.16.7",
+ 			"integrity": "sha512-9ZDoqtfY7AuEOt3cxchfii6C7GDyyMBffktR5B2jvWv8u2+efwvpnVKXMWzNehqy68tKgAfSwfdw/lWpthS2bw==",
+-			"dev": true,
+ 			"dependencies": {
+ 				"@babel/template": "^7.16.7",
+ 				"@babel/traverse": "^7.16.7",
+@@ -425,6 +422,20 @@
+ 				"@babel/core": "^7.0.0"
+ 			}
+ 		},
++		"node_modules/@babel/plugin-syntax-jsx": {
++			"version": "7.18.6",
++			"resolved": "https://registry.npmjs.org/@babel/plugin-syntax-jsx/-/plugin-syntax-jsx-7.18.6.tgz",
++			"integrity": "sha512-6mmljtAedFGTWu2p/8WIORGwy+61PLgOMPOdazc7YoJ9ZCWUyFy3A6CpPkRKLKD1ToAesxX8KGEViAiLo9N+7Q==",
++			"dependencies": {
++				"@babel/helper-plugin-utils": "^7.18.6"
++			},
++			"engines": {
++				"node": ">=6.9.0"
++			},
++			"peerDependencies": {
++				"@babel/core": "^7.0.0-0"
++			}
++		},
+ 		"node_modules/@babel/plugin-transform-runtime": {
+ 			"version": "7.16.4",
+ 			"integrity": "sha512-pru6+yHANMTukMtEZGC4fs7XPwg35v8sj5CIEmE+gEkFljFiVJxEWxx/7ZDkTK+iZRYo1bFXBtfIN95+K3cJ5A==",
+@@ -1857,20 +1868,6 @@
+ 			"dependencies": {
+ 				"@babel/plugin-transform-react-jsx": "^7.16.7"
+ 			},
+-			"engines": {
+-				"node": ">=6.9.0"
+-			},
+-			"peerDependencies": {
+-				"@babel/core": "^7.0.0-0"
+-			}
+-		},
+-		"node_modules/@babel/preset-react/node_modules/@babel/plugin-transform-react-jsx/node_modules/@babel/plugin-syntax-jsx": {
+-			"version": "7.16.7",
+-			"integrity": "sha512-Esxmk7YjA8QysKeT3VhTXvF6y77f/a91SIs4pWb4H2eWGQkCKFgQaG6hdoEVZtGsrAcb2K5BW66XsOErD4WU3Q==",
+-			"dev": true,
+-			"dependencies": {
+-				"@babel/helper-plugin-utils": "^7.16.7"
+-			},
+ 			"engines": {
+ 				"node": ">=6.9.0"
+ 			},
+@@ -1960,8 +1957,9 @@
+ 			}
+ 		},
+ 		"node_modules/@babel/runtime": {
+-			"version": "7.16.7",
+-			"integrity": "sha512-9E9FJowqAsytyOY6LG+1KuueckRL+aQW+mKvXRXnuFGyRAyepJPmEo9vgMfXUA6O9u3IeEdv9MAkppFcaQwogQ==",
++			"version": "7.18.9",
++			"resolved": "https://registry.npmjs.org/@babel/runtime/-/runtime-7.18.9.tgz",
++			"integrity": "sha512-lkqXDcvlFT5rvEjiu6+QYO+1GXrEHRo2LOtS7E4GtX5ESIZOgepqsZBVIj6Pv+a6zqsya9VCgiK1KAK4BvJDAw==",
+ 			"dependencies": {
+ 				"regenerator-runtime": "^0.13.4"
+ 			},
+@@ -2433,6 +2431,66 @@
+ 				"node": ">=8"
+ 			}
+ 		},
++		"node_modules/@emotion/babel-plugin": {
++			"version": "11.10.2",
++			"resolved": "https://registry.npmjs.org/@emotion/babel-plugin/-/babel-plugin-11.10.2.tgz",
++			"integrity": "sha512-xNQ57njWTFVfPAc3cjfuaPdsgLp5QOSuRsj9MA6ndEhH/AzuZM86qIQzt6rq+aGBwj3n5/TkLmU5lhAfdRmogA==",
++			"dependencies": {
++				"@babel/helper-module-imports": "^7.16.7",
++				"@babel/plugin-syntax-jsx": "^7.17.12",
++				"@babel/runtime": "^7.18.3",
++				"@emotion/hash": "^0.9.0",
++				"@emotion/memoize": "^0.8.0",
++				"@emotion/serialize": "^1.1.0",
++				"babel-plugin-macros": "^3.1.0",
++				"convert-source-map": "^1.5.0",
++				"escape-string-regexp": "^4.0.0",
++				"find-root": "^1.1.0",
++				"source-map": "^0.5.7",
++				"stylis": "4.0.13"
++			},
++			"peerDependencies": {
++				"@babel/core": "^7.0.0"
++			}
++		},
++		"node_modules/@emotion/babel-plugin/node_modules/@emotion/memoize": {
++			"version": "0.8.0",
++			"resolved": "https://registry.npmjs.org/@emotion/memoize/-/memoize-0.8.0.tgz",
++			"integrity": "sha512-G/YwXTkv7Den9mXDO7AhLWkE3q+I92B+VqAE+dYG4NGPaHZGvt3G8Q0p9vmE+sq7rTGphUbAvmQ9YpbfMQGGlA=="
++		},
++		"node_modules/@emotion/babel-plugin/node_modules/escape-string-regexp": {
++			"version": "4.0.0",
++			"resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-4.0.0.tgz",
++			"integrity": "sha512-TtpcNJ3XAzx3Gq8sWRzJaVajRs0uVxA2YAkdb1jm2YkPz4G6egUFAyA3n5vtEIZefPk5Wa4UXbKuS5fKkJWdgA==",
++			"engines": {
++				"node": ">=10"
++			},
++			"funding": {
++				"url": "https://github.com/sponsors/sindresorhus"
++			}
++		},
++		"node_modules/@emotion/cache": {
++			"version": "11.10.2",
++			"resolved": "https://registry.npmjs.org/@emotion/cache/-/cache-11.10.2.tgz",
++			"integrity": "sha512-GPR4PovENRvYDbCEnDRecPZYJzWdNMsM+Jn+13MC5uImVNbMyKwzv95DUHy5PDcgfPtKoDtfLU6emF1grrbQDg==",
++			"dependencies": {
++				"@emotion/memoize": "^0.8.0",
++				"@emotion/sheet": "^1.2.0",
++				"@emotion/utils": "^1.2.0",
++				"@emotion/weak-memoize": "^0.3.0",
++				"stylis": "4.0.13"
++			}
++		},
++		"node_modules/@emotion/cache/node_modules/@emotion/memoize": {
++			"version": "0.8.0",
++			"resolved": "https://registry.npmjs.org/@emotion/memoize/-/memoize-0.8.0.tgz",
++			"integrity": "sha512-G/YwXTkv7Den9mXDO7AhLWkE3q+I92B+VqAE+dYG4NGPaHZGvt3G8Q0p9vmE+sq7rTGphUbAvmQ9YpbfMQGGlA=="
++		},
++		"node_modules/@emotion/hash": {
++			"version": "0.9.0",
++			"resolved": "https://registry.npmjs.org/@emotion/hash/-/hash-0.9.0.tgz",
++			"integrity": "sha512-14FtKiHhy2QoPIzdTcvh//8OyBlknNs2nXRwIhG904opCby3l+9Xaf/wuPvICBF0rc1ZCNBd3nKe9cd2mecVkQ=="
++		},
+ 		"node_modules/@emotion/is-prop-valid": {
+ 			"version": "0.8.8",
+ 			"integrity": "sha512-u5WtneEAr5IDG2Wv65yhunPSMLIpuKsbuOktRojfrEiEvRyC85LgPMZI63cr7NUqT8ZIGdSVg8ZKGxIug4lXcA==",
+@@ -2444,6 +2502,97 @@
+ 			"version": "0.7.4",
+ 			"integrity": "sha512-Ja/Vfqe3HpuzRsG1oBtWTHk2PGZ7GR+2Vz5iYGelAw8dx32K0y7PjVuxK6z1nMpZOqAFsRUPCkK1YjJ56qJlgw=="
+ 		},
++		"node_modules/@emotion/react": {
++			"version": "11.10.0",
++			"resolved": "https://registry.npmjs.org/@emotion/react/-/react-11.10.0.tgz",
++			"integrity": "sha512-K6z9zlHxxBXwN8TcpwBKcEsBsOw4JWCCmR+BeeOWgqp8GIU1yA2Odd41bwdAAr0ssbQrbJbVnndvv7oiv1bZeQ==",
++			"dependencies": {
++				"@babel/runtime": "^7.18.3",
++				"@emotion/babel-plugin": "^11.10.0",
++				"@emotion/cache": "^11.10.0",
++				"@emotion/serialize": "^1.1.0",
++				"@emotion/utils": "^1.2.0",
++				"@emotion/weak-memoize": "^0.3.0",
++				"hoist-non-react-statics": "^3.3.1"
++			},
++			"peerDependencies": {
++				"@babel/core": "^7.0.0",
++				"react": ">=16.8.0"
++			},
++			"peerDependenciesMeta": {
++				"@babel/core": {
++					"optional": true
++				},
++				"@types/react": {
++					"optional": true
++				}
++			}
++		},
++		"node_modules/@emotion/serialize": {
++			"version": "1.1.0",
++			"resolved": "https://registry.npmjs.org/@emotion/serialize/-/serialize-1.1.0.tgz",
++			"integrity": "sha512-F1ZZZW51T/fx+wKbVlwsfchr5q97iW8brAnXmsskz4d0hVB4O3M/SiA3SaeH06x02lSNzkkQv+n3AX3kCXKSFA==",
++			"dependencies": {
++				"@emotion/hash": "^0.9.0",
++				"@emotion/memoize": "^0.8.0",
++				"@emotion/unitless": "^0.8.0",
++				"@emotion/utils": "^1.2.0",
++				"csstype": "^3.0.2"
++			}
++		},
++		"node_modules/@emotion/serialize/node_modules/@emotion/memoize": {
++			"version": "0.8.0",
++			"resolved": "https://registry.npmjs.org/@emotion/memoize/-/memoize-0.8.0.tgz",
++			"integrity": "sha512-G/YwXTkv7Den9mXDO7AhLWkE3q+I92B+VqAE+dYG4NGPaHZGvt3G8Q0p9vmE+sq7rTGphUbAvmQ9YpbfMQGGlA=="
++		},
++		"node_modules/@emotion/serialize/node_modules/@emotion/unitless": {
++			"version": "0.8.0",
++			"resolved": "https://registry.npmjs.org/@emotion/unitless/-/unitless-0.8.0.tgz",
++			"integrity": "sha512-VINS5vEYAscRl2ZUDiT3uMPlrFQupiKgHz5AA4bCH1miKBg4qtwkim1qPmJj/4WG6TreYMY111rEFsjupcOKHw=="
++		},
++		"node_modules/@emotion/sheet": {
++			"version": "1.2.0",
++			"resolved": "https://registry.npmjs.org/@emotion/sheet/-/sheet-1.2.0.tgz",
++			"integrity": "sha512-OiTkRgpxescko+M51tZsMq7Puu/KP55wMT8BgpcXVG2hqXc0Vo0mfymJ/Uj24Hp0i083ji/o0aLddh08UEjq8w=="
++		},
++		"node_modules/@emotion/styled": {
++			"version": "11.10.0",
++			"resolved": "https://registry.npmjs.org/@emotion/styled/-/styled-11.10.0.tgz",
++			"integrity": "sha512-V9oaEH6V4KePeQpgUE83i8ht+4Ri3E8Djp/ZPJ4DQlqWhSKITvgzlR3/YQE2hdfP4Jw3qVRkANJz01LLqK9/TA==",
++			"dependencies": {
++				"@babel/runtime": "^7.18.3",
++				"@emotion/babel-plugin": "^11.10.0",
++				"@emotion/is-prop-valid": "^1.2.0",
++				"@emotion/serialize": "^1.1.0",
++				"@emotion/utils": "^1.2.0"
++			},
++			"peerDependencies": {
++				"@babel/core": "^7.0.0",
++				"@emotion/react": "^11.0.0-rc.0",
++				"react": ">=16.8.0"
++			},
++			"peerDependenciesMeta": {
++				"@babel/core": {
++					"optional": true
++				},
++				"@types/react": {
++					"optional": true
++				}
++			}
++		},
++		"node_modules/@emotion/styled/node_modules/@emotion/is-prop-valid": {
++			"version": "1.2.0",
++			"resolved": "https://registry.npmjs.org/@emotion/is-prop-valid/-/is-prop-valid-1.2.0.tgz",
++			"integrity": "sha512-3aDpDprjM0AwaxGE09bOPkNxHpBd+kA6jty3RnaEXdweX1DF1U3VQpPYb0g1IStAuK7SVQ1cy+bNBBKp4W3Fjg==",
++			"dependencies": {
++				"@emotion/memoize": "^0.8.0"
++			}
++		},
++		"node_modules/@emotion/styled/node_modules/@emotion/memoize": {
++			"version": "0.8.0",
++			"resolved": "https://registry.npmjs.org/@emotion/memoize/-/memoize-0.8.0.tgz",
++			"integrity": "sha512-G/YwXTkv7Den9mXDO7AhLWkE3q+I92B+VqAE+dYG4NGPaHZGvt3G8Q0p9vmE+sq7rTGphUbAvmQ9YpbfMQGGlA=="
++		},
+ 		"node_modules/@emotion/stylis": {
+ 			"version": "0.8.5",
+ 			"integrity": "sha512-h6KtPihKFn3T9fuIrwvXXUOwlx3rfUvfZIcP5a6rh8Y7zjE3O06hT5Ss4S/YI1AYhuZ1kjaE/5EaOOI2NqSylQ=="
+@@ -2452,6 +2601,16 @@
+ 			"version": "0.7.5",
+ 			"integrity": "sha512-OWORNpfjMsSSUBVrRBVGECkhWcULOAJz9ZW8uK9qgxD+87M7jHRcvh/A96XXNhXTLmKcoYSQtBEX7lHMO7YRwg=="
+ 		},
++		"node_modules/@emotion/utils": {
++			"version": "1.2.0",
++			"resolved": "https://registry.npmjs.org/@emotion/utils/-/utils-1.2.0.tgz",
++			"integrity": "sha512-sn3WH53Kzpw8oQ5mgMmIzzyAaH2ZqFEbozVVBSYp538E06OSE6ytOp7pRAjNQR+Q/orwqdQYJSe2m3hCOeznkw=="
++		},
++		"node_modules/@emotion/weak-memoize": {
++			"version": "0.3.0",
++			"resolved": "https://registry.npmjs.org/@emotion/weak-memoize/-/weak-memoize-0.3.0.tgz",
++			"integrity": "sha512-AHPmaAx+RYfZz0eYu6Gviiagpmiyw98ySSlQvCUhVGDRtDFe4DBS0x1bSjdF3gqUDYOczB+yYvBTtEylYSdRhg=="
++		},
+ 		"node_modules/@endemolshinegroup/cosmiconfig-typescript-loader": {
+ 			"version": "3.0.2",
+ 			"integrity": "sha512-QRVtqJuS1mcT56oHpVegkKBlgtWjXw/gHNWO3eL9oyB5Sc7HBoc2OLG/nYpVfT/Jejvo3NUrD0Udk7XgoyDKkA==",
+@@ -2791,6 +2950,398 @@
+ 				"node": ">=8"
+ 			}
+ 		},
++		"node_modules/@mui/base": {
++			"version": "5.0.0-alpha.94",
++			"resolved": "https://registry.npmjs.org/@mui/base/-/base-5.0.0-alpha.94.tgz",
++			"integrity": "sha512-IJXmgTF07H1Iv5zjDV7zJZGUmb9cN8ERzd2dgA1akh6NWZgwyIGyQx+Au9+QSDoM5vN3FqZvU/0YCU6inUwgeQ==",
++			"dependencies": {
++				"@babel/runtime": "^7.17.2",
++				"@emotion/is-prop-valid": "^1.2.0",
++				"@mui/types": "^7.1.5",
++				"@mui/utils": "^5.9.3",
++				"@popperjs/core": "^2.11.6",
++				"clsx": "^1.2.1",
++				"prop-types": "^15.8.1",
++				"react-is": "^18.2.0"
++			},
++			"engines": {
++				"node": ">=12.0.0"
++			},
++			"funding": {
++				"type": "opencollective",
++				"url": "https://opencollective.com/mui"
++			},
++			"peerDependencies": {
++				"@types/react": "^17.0.0 || ^18.0.0",
++				"react": "^17.0.0 || ^18.0.0",
++				"react-dom": "^17.0.0 || ^18.0.0"
++			},
++			"peerDependenciesMeta": {
++				"@types/react": {
++					"optional": true
++				}
++			}
++		},
++		"node_modules/@mui/base/node_modules/@emotion/is-prop-valid": {
++			"version": "1.2.0",
++			"resolved": "https://registry.npmjs.org/@emotion/is-prop-valid/-/is-prop-valid-1.2.0.tgz",
++			"integrity": "sha512-3aDpDprjM0AwaxGE09bOPkNxHpBd+kA6jty3RnaEXdweX1DF1U3VQpPYb0g1IStAuK7SVQ1cy+bNBBKp4W3Fjg==",
++			"dependencies": {
++				"@emotion/memoize": "^0.8.0"
++			}
++		},
++		"node_modules/@mui/base/node_modules/@emotion/memoize": {
++			"version": "0.8.0",
++			"resolved": "https://registry.npmjs.org/@emotion/memoize/-/memoize-0.8.0.tgz",
++			"integrity": "sha512-G/YwXTkv7Den9mXDO7AhLWkE3q+I92B+VqAE+dYG4NGPaHZGvt3G8Q0p9vmE+sq7rTGphUbAvmQ9YpbfMQGGlA=="
++		},
++		"node_modules/@mui/base/node_modules/@popperjs/core": {
++			"version": "2.11.6",
++			"resolved": "https://registry.npmjs.org/@popperjs/core/-/core-2.11.6.tgz",
++			"integrity": "sha512-50/17A98tWUfQ176raKiOGXuYpLyyVMkxxG6oylzL3BPOlA6ADGdK7EYunSa4I064xerltq9TGXs8HmOk5E+vw==",
++			"funding": {
++				"type": "opencollective",
++				"url": "https://opencollective.com/popperjs"
++			}
++		},
++		"node_modules/@mui/base/node_modules/prop-types": {
++			"version": "15.8.1",
++			"resolved": "https://registry.npmjs.org/prop-types/-/prop-types-15.8.1.tgz",
++			"integrity": "sha512-oj87CgZICdulUohogVAR7AjlC0327U4el4L6eAvOqCeudMDVU0NThNaV+b9Df4dXgSP1gXMTnPdhfe/2qDH5cg==",
++			"dependencies": {
++				"loose-envify": "^1.4.0",
++				"object-assign": "^4.1.1",
++				"react-is": "^16.13.1"
++			}
++		},
++		"node_modules/@mui/base/node_modules/prop-types/node_modules/react-is": {
++			"version": "16.13.1",
++			"resolved": "https://registry.npmjs.org/react-is/-/react-is-16.13.1.tgz",
++			"integrity": "sha512-24e6ynE2H+OKt4kqsOvNd8kBpV65zoxbA4BVsEOB3ARVWQki/DHzaUoC5KuON/BiccDaCCTZBuOcfZs70kR8bQ=="
++		},
++		"node_modules/@mui/base/node_modules/react-is": {
++			"version": "18.2.0",
++			"resolved": "https://registry.npmjs.org/react-is/-/react-is-18.2.0.tgz",
++			"integrity": "sha512-xWGDIW6x921xtzPkhiULtthJHoJvBbF3q26fzloPCK0hsvxtPVelvftw3zjbHWSkR2km9Z+4uxbDDK/6Zw9B8w=="
++		},
++		"node_modules/@mui/core-downloads-tracker": {
++			"version": "5.10.2",
++			"resolved": "https://registry.npmjs.org/@mui/core-downloads-tracker/-/core-downloads-tracker-5.10.2.tgz",
++			"integrity": "sha512-1guoGvL3QZ7VjA3y9zye9Rpm+jz18rVZIo3AauTGyW5ntDMxr/cR0M18nuc/NH2KqpMt+coh4NwPEO1uPuKM5w==",
++			"funding": {
++				"type": "opencollective",
++				"url": "https://opencollective.com/mui"
++			}
++		},
++		"node_modules/@mui/icons-material": {
++			"version": "5.10.2",
++			"resolved": "https://registry.npmjs.org/@mui/icons-material/-/icons-material-5.10.2.tgz",
++			"integrity": "sha512-p7ku+43JeKRz0ONGzPZbRXZRbE7vCKP1Cr8l/Yj9sUIGVQ6CM/m37u6udacJZkDXD+G2FoxJPixrVvvjx6f64w==",
++			"dependencies": {
++				"@babel/runtime": "^7.17.2"
++			},
++			"engines": {
++				"node": ">=12.0.0"
++			},
++			"funding": {
++				"type": "opencollective",
++				"url": "https://opencollective.com/mui"
++			},
++			"peerDependencies": {
++				"@mui/material": "^5.0.0",
++				"@types/react": "^17.0.0 || ^18.0.0",
++				"react": "^17.0.0 || ^18.0.0"
++			},
++			"peerDependenciesMeta": {
++				"@types/react": {
++					"optional": true
++				}
++			}
++		},
++		"node_modules/@mui/material": {
++			"version": "5.10.2",
++			"resolved": "https://registry.npmjs.org/@mui/material/-/material-5.10.2.tgz",
++			"integrity": "sha512-ay43fuQLXROXkxFd6tqbj394Hu8BlbmpCdEDFtAisijulla2ZLfQa24pjhdX+56HrHReB3cZsf/sRq+DSfIgiA==",
++			"dependencies": {
++				"@babel/runtime": "^7.17.2",
++				"@mui/base": "5.0.0-alpha.94",
++				"@mui/core-downloads-tracker": "^5.10.2",
++				"@mui/system": "^5.10.2",
++				"@mui/types": "^7.1.5",
++				"@mui/utils": "^5.9.3",
++				"@types/react-transition-group": "^4.4.5",
++				"clsx": "^1.2.1",
++				"csstype": "^3.1.0",
++				"prop-types": "^15.8.1",
++				"react-is": "^18.2.0",
++				"react-transition-group": "^4.4.5"
++			},
++			"engines": {
++				"node": ">=12.0.0"
++			},
++			"funding": {
++				"type": "opencollective",
++				"url": "https://opencollective.com/mui"
++			},
++			"peerDependencies": {
++				"@emotion/react": "^11.5.0",
++				"@emotion/styled": "^11.3.0",
++				"@types/react": "^17.0.0 || ^18.0.0",
++				"react": "^17.0.0 || ^18.0.0",
++				"react-dom": "^17.0.0 || ^18.0.0"
++			},
++			"peerDependenciesMeta": {
++				"@emotion/react": {
++					"optional": true
++				},
++				"@emotion/styled": {
++					"optional": true
++				},
++				"@types/react": {
++					"optional": true
++				}
++			}
++		},
++		"node_modules/@mui/material/node_modules/dom-helpers": {
++			"version": "5.2.1",
++			"resolved": "https://registry.npmjs.org/dom-helpers/-/dom-helpers-5.2.1.tgz",
++			"integrity": "sha512-nRCa7CK3VTrM2NmGkIy4cbK7IZlgBE/PYMn55rrXefr5xXDP0LdtfPnblFDoVdcAfslJ7or6iqAUnx0CCGIWQA==",
++			"dependencies": {
++				"@babel/runtime": "^7.8.7",
++				"csstype": "^3.0.2"
++			}
++		},
++		"node_modules/@mui/material/node_modules/prop-types": {
++			"version": "15.8.1",
++			"resolved": "https://registry.npmjs.org/prop-types/-/prop-types-15.8.1.tgz",
++			"integrity": "sha512-oj87CgZICdulUohogVAR7AjlC0327U4el4L6eAvOqCeudMDVU0NThNaV+b9Df4dXgSP1gXMTnPdhfe/2qDH5cg==",
++			"dependencies": {
++				"loose-envify": "^1.4.0",
++				"object-assign": "^4.1.1",
++				"react-is": "^16.13.1"
++			}
++		},
++		"node_modules/@mui/material/node_modules/prop-types/node_modules/react-is": {
++			"version": "16.13.1",
++			"resolved": "https://registry.npmjs.org/react-is/-/react-is-16.13.1.tgz",
++			"integrity": "sha512-24e6ynE2H+OKt4kqsOvNd8kBpV65zoxbA4BVsEOB3ARVWQki/DHzaUoC5KuON/BiccDaCCTZBuOcfZs70kR8bQ=="
++		},
++		"node_modules/@mui/material/node_modules/react-is": {
++			"version": "18.2.0",
++			"resolved": "https://registry.npmjs.org/react-is/-/react-is-18.2.0.tgz",
++			"integrity": "sha512-xWGDIW6x921xtzPkhiULtthJHoJvBbF3q26fzloPCK0hsvxtPVelvftw3zjbHWSkR2km9Z+4uxbDDK/6Zw9B8w=="
++		},
++		"node_modules/@mui/material/node_modules/react-transition-group": {
++			"version": "4.4.5",
++			"resolved": "https://registry.npmjs.org/react-transition-group/-/react-transition-group-4.4.5.tgz",
++			"integrity": "sha512-pZcd1MCJoiKiBR2NRxeCRg13uCXbydPnmB4EOeRrY7480qNWO8IIgQG6zlDkm6uRMsURXPuKq0GWtiM59a5Q6g==",
++			"dependencies": {
++				"@babel/runtime": "^7.5.5",
++				"dom-helpers": "^5.0.1",
++				"loose-envify": "^1.4.0",
++				"prop-types": "^15.6.2"
++			},
++			"peerDependencies": {
++				"react": ">=16.6.0",
++				"react-dom": ">=16.6.0"
++			}
++		},
++		"node_modules/@mui/private-theming": {
++			"version": "5.9.3",
++			"resolved": "https://registry.npmjs.org/@mui/private-theming/-/private-theming-5.9.3.tgz",
++			"integrity": "sha512-Ys3WO39WqoGciGX9k5AIi/k2zJhlydv4FzlEEwtw9OqdMaV0ydK/TdZekKzjP9sTI/JcdAP3H5DWtUaPLQJjWg==",
++			"dependencies": {
++				"@babel/runtime": "^7.17.2",
++				"@mui/utils": "^5.9.3",
++				"prop-types": "^15.8.1"
++			},
++			"engines": {
++				"node": ">=12.0.0"
++			},
++			"funding": {
++				"type": "opencollective",
++				"url": "https://opencollective.com/mui"
++			},
++			"peerDependencies": {
++				"@types/react": "^17.0.0 || ^18.0.0",
++				"react": "^17.0.0 || ^18.0.0"
++			},
++			"peerDependenciesMeta": {
++				"@types/react": {
++					"optional": true
++				}
++			}
++		},
++		"node_modules/@mui/private-theming/node_modules/prop-types": {
++			"version": "15.8.1",
++			"resolved": "https://registry.npmjs.org/prop-types/-/prop-types-15.8.1.tgz",
++			"integrity": "sha512-oj87CgZICdulUohogVAR7AjlC0327U4el4L6eAvOqCeudMDVU0NThNaV+b9Df4dXgSP1gXMTnPdhfe/2qDH5cg==",
++			"dependencies": {
++				"loose-envify": "^1.4.0",
++				"object-assign": "^4.1.1",
++				"react-is": "^16.13.1"
++			}
++		},
++		"node_modules/@mui/private-theming/node_modules/react-is": {
++			"version": "16.13.1",
++			"resolved": "https://registry.npmjs.org/react-is/-/react-is-16.13.1.tgz",
++			"integrity": "sha512-24e6ynE2H+OKt4kqsOvNd8kBpV65zoxbA4BVsEOB3ARVWQki/DHzaUoC5KuON/BiccDaCCTZBuOcfZs70kR8bQ=="
++		},
++		"node_modules/@mui/styled-engine": {
++			"version": "5.10.2",
++			"resolved": "https://registry.npmjs.org/@mui/styled-engine/-/styled-engine-5.10.2.tgz",
++			"integrity": "sha512-YqnptNQ2E0cWwOTmLCEvrddiiR/neUfn2AD/4TDUXZu8B2n7NfDb9d3bAUfWZV+KmulQdAedoaZDqyXBFGLdbQ==",
++			"dependencies": {
++				"@babel/runtime": "^7.17.2",
++				"@emotion/cache": "^11.10.1",
++				"csstype": "^3.1.0",
++				"prop-types": "^15.8.1"
++			},
++			"engines": {
++				"node": ">=12.0.0"
++			},
++			"funding": {
++				"type": "opencollective",
++				"url": "https://opencollective.com/mui"
++			},
++			"peerDependencies": {
++				"@emotion/react": "^11.4.1",
++				"@emotion/styled": "^11.3.0",
++				"react": "^17.0.0 || ^18.0.0"
++			},
++			"peerDependenciesMeta": {
++				"@emotion/react": {
++					"optional": true
++				},
++				"@emotion/styled": {
++					"optional": true
++				}
++			}
++		},
++		"node_modules/@mui/styled-engine/node_modules/prop-types": {
++			"version": "15.8.1",
++			"resolved": "https://registry.npmjs.org/prop-types/-/prop-types-15.8.1.tgz",
++			"integrity": "sha512-oj87CgZICdulUohogVAR7AjlC0327U4el4L6eAvOqCeudMDVU0NThNaV+b9Df4dXgSP1gXMTnPdhfe/2qDH5cg==",
++			"dependencies": {
++				"loose-envify": "^1.4.0",
++				"object-assign": "^4.1.1",
++				"react-is": "^16.13.1"
++			}
++		},
++		"node_modules/@mui/styled-engine/node_modules/react-is": {
++			"version": "16.13.1",
++			"resolved": "https://registry.npmjs.org/react-is/-/react-is-16.13.1.tgz",
++			"integrity": "sha512-24e6ynE2H+OKt4kqsOvNd8kBpV65zoxbA4BVsEOB3ARVWQki/DHzaUoC5KuON/BiccDaCCTZBuOcfZs70kR8bQ=="
++		},
++		"node_modules/@mui/system": {
++			"version": "5.10.2",
++			"resolved": "https://registry.npmjs.org/@mui/system/-/system-5.10.2.tgz",
++			"integrity": "sha512-YudwJhLcEoQiwCAmzeMr9P3ISiVGNsxBIIPzFxaGwJ8+mMrx3qoPVOV2sfm0ZuNiQuABshEw4KqHa5ftNC+pOQ==",
++			"dependencies": {
++				"@babel/runtime": "^7.17.2",
++				"@mui/private-theming": "^5.9.3",
++				"@mui/styled-engine": "^5.10.2",
++				"@mui/types": "^7.1.5",
++				"@mui/utils": "^5.9.3",
++				"clsx": "^1.2.1",
++				"csstype": "^3.1.0",
++				"prop-types": "^15.8.1"
++			},
++			"engines": {
++				"node": ">=12.0.0"
++			},
++			"funding": {
++				"type": "opencollective",
++				"url": "https://opencollective.com/mui"
++			},
++			"peerDependencies": {
++				"@emotion/react": "^11.5.0",
++				"@emotion/styled": "^11.3.0",
++				"@types/react": "^17.0.0 || ^18.0.0",
++				"react": "^17.0.0 || ^18.0.0"
++			},
++			"peerDependenciesMeta": {
++				"@emotion/react": {
++					"optional": true
++				},
++				"@emotion/styled": {
++					"optional": true
++				},
++				"@types/react": {
++					"optional": true
++				}
++			}
++		},
++		"node_modules/@mui/system/node_modules/prop-types": {
++			"version": "15.8.1",
++			"resolved": "https://registry.npmjs.org/prop-types/-/prop-types-15.8.1.tgz",
++			"integrity": "sha512-oj87CgZICdulUohogVAR7AjlC0327U4el4L6eAvOqCeudMDVU0NThNaV+b9Df4dXgSP1gXMTnPdhfe/2qDH5cg==",
++			"dependencies": {
++				"loose-envify": "^1.4.0",
++				"object-assign": "^4.1.1",
++				"react-is": "^16.13.1"
++			}
++		},
++		"node_modules/@mui/system/node_modules/react-is": {
++			"version": "16.13.1",
++			"resolved": "https://registry.npmjs.org/react-is/-/react-is-16.13.1.tgz",
++			"integrity": "sha512-24e6ynE2H+OKt4kqsOvNd8kBpV65zoxbA4BVsEOB3ARVWQki/DHzaUoC5KuON/BiccDaCCTZBuOcfZs70kR8bQ=="
++		},
++		"node_modules/@mui/types": {
++			"version": "7.1.5",
++			"resolved": "https://registry.npmjs.org/@mui/types/-/types-7.1.5.tgz",
++			"integrity": "sha512-HnRXrxgHJYJcT8ZDdDCQIlqk0s0skOKD7eWs9mJgBUu70hyW4iA6Kiv3yspJR474RFH8hysKR65VVSzUSzkuwA==",
++			"peerDependencies": {
++				"@types/react": "*"
++			},
++			"peerDependenciesMeta": {
++				"@types/react": {
++					"optional": true
++				}
++			}
++		},
++		"node_modules/@mui/utils": {
++			"version": "5.9.3",
++			"resolved": "https://registry.npmjs.org/@mui/utils/-/utils-5.9.3.tgz",
++			"integrity": "sha512-l0N5bcrenE9hnwZ/jPecpIRqsDFHkPXoFUcmkgysaJwVZzJ3yQkGXB47eqmXX5yyGrSc6HksbbqXEaUya+siew==",
++			"dependencies": {
++				"@babel/runtime": "^7.17.2",
++				"@types/prop-types": "^15.7.5",
++				"@types/react-is": "^16.7.1 || ^17.0.0",
++				"prop-types": "^15.8.1",
++				"react-is": "^18.2.0"
++			},
++			"engines": {
++				"node": ">=12.0.0"
++			},
++			"funding": {
++				"type": "opencollective",
++				"url": "https://opencollective.com/mui"
++			},
++			"peerDependencies": {
++				"react": "^17.0.0 || ^18.0.0"
++			}
++		},
++		"node_modules/@mui/utils/node_modules/prop-types": {
++			"version": "15.8.1",
++			"resolved": "https://registry.npmjs.org/prop-types/-/prop-types-15.8.1.tgz",
++			"integrity": "sha512-oj87CgZICdulUohogVAR7AjlC0327U4el4L6eAvOqCeudMDVU0NThNaV+b9Df4dXgSP1gXMTnPdhfe/2qDH5cg==",
++			"dependencies": {
++				"loose-envify": "^1.4.0",
++				"object-assign": "^4.1.1",
++				"react-is": "^16.13.1"
++			}
++		},
++		"node_modules/@mui/utils/node_modules/prop-types/node_modules/react-is": {
++			"version": "16.13.1",
++			"resolved": "https://registry.npmjs.org/react-is/-/react-is-16.13.1.tgz",
++			"integrity": "sha512-24e6ynE2H+OKt4kqsOvNd8kBpV65zoxbA4BVsEOB3ARVWQki/DHzaUoC5KuON/BiccDaCCTZBuOcfZs70kR8bQ=="
++		},
++		"node_modules/@mui/utils/node_modules/react-is": {
++			"version": "18.2.0",
++			"resolved": "https://registry.npmjs.org/react-is/-/react-is-18.2.0.tgz",
++			"integrity": "sha512-xWGDIW6x921xtzPkhiULtthJHoJvBbF3q26fzloPCK0hsvxtPVelvftw3zjbHWSkR2km9Z+4uxbDDK/6Zw9B8w=="
++		},
+ 		"node_modules/@nodelib/fs.scandir": {
+ 			"version": "2.1.5",
+ 			"integrity": "sha512-vq24Bq3ym5HEQm2NKCr3yXDwjc7vTsEThRDnkp2DK9p1uqLR+DHurm/NOTo0KG7HYHU7eppKZj3MyqYuMBf62g==",
+@@ -3203,12 +3754,12 @@
+ 		},
+ 		"node_modules/@types/parse-json": {
+ 			"version": "4.0.0",
+-			"integrity": "sha512-//oorEZjL6sbPcKUaCdIGlIUeH26mgzimjBB77G6XRgnDl/L5wOnpyBGRe/Mmf5CVW3PwEBE1NjiMZ/ssFh4wA==",
+-			"dev": true
++			"integrity": "sha512-//oorEZjL6sbPcKUaCdIGlIUeH26mgzimjBB77G6XRgnDl/L5wOnpyBGRe/Mmf5CVW3PwEBE1NjiMZ/ssFh4wA=="
+ 		},
+ 		"node_modules/@types/prop-types": {
+-			"version": "15.7.4",
+-			"integrity": "sha512-rZ5drC/jWjrArrS8BR6SIr4cWpW09RNTYt9AMZo3Jwwif+iacXAqgVjm0B0Bv/S1jhDXKHqRVNCbACkJ89RAnQ=="
++			"version": "15.7.5",
++			"resolved": "https://registry.npmjs.org/@types/prop-types/-/prop-types-15.7.5.tgz",
++			"integrity": "sha512-JCB8C6SnDoQf0cNycqd/35A7MjcnK+ZTqE7judS6o7utxUCg6imJg3QK2qzHKszlTjcj2cn+NwMB2i96ubpj7w=="
+ 		},
+ 		"node_modules/@types/qs": {
+ 			"version": "6.9.7",
+@@ -3237,6 +3788,14 @@
+ 				"@types/react": "*"
+ 			}
+ 		},
++		"node_modules/@types/react-is": {
++			"version": "17.0.3",
++			"resolved": "https://registry.npmjs.org/@types/react-is/-/react-is-17.0.3.tgz",
++			"integrity": "sha512-aBTIWg1emtu95bLTLx0cpkxwGW3ueZv71nE2YFBpL8k/z5czEW8yYpOo8Dp+UUAFAtKwNaOsh/ioSeQnWlZcfw==",
++			"dependencies": {
++				"@types/react": "*"
++			}
++		},
+ 		"node_modules/@types/react-redux": {
+ 			"version": "7.1.20",
+ 			"integrity": "sha512-q42es4c8iIeTgcnB+yJgRTTzftv3eYYvCZOh1Ckn2eX/3o5TdsQYKUWpLoLuGlcY/p+VAhV9IOEZJcWk/vfkXw==",
+@@ -3271,6 +3830,14 @@
+ 			"integrity": "sha512-qjDJRrmvBMiTx+jyLxvLfJU7UznFuokDv4f3WRuriHKERccVpFU+8XMQUAbDzoiJCsmexxRExQeMwwCdamSKDA==",
+ 			"dev": true
+ 		},
++		"node_modules/@types/react-transition-group": {
++			"version": "4.4.5",
++			"resolved": "https://registry.npmjs.org/@types/react-transition-group/-/react-transition-group-4.4.5.tgz",
++			"integrity": "sha512-juKD/eiSM3/xZYzjuzH6ZwpP+/lejltmiS3QEzV/vmb/Q8+HfDmxu+Baga8UEMGBqV88Nbg4l2hY/K2DkyaLLA==",
++			"dependencies": {
++				"@types/react": "*"
++			}
++		},
+ 		"node_modules/@types/retry": {
+ 			"version": "0.12.1",
+ 			"integrity": "sha512-xoDlM2S4ortawSWORYqsdU+2rxdh4LRW9ytc3zmT37RIKQh6IHyKwwtKhKis9ah8ol07DCkZxPt8BBvPjC6v4g==",
+@@ -4640,6 +5207,20 @@
+ 				"node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
+ 			}
+ 		},
++		"node_modules/babel-plugin-macros": {
++			"version": "3.1.0",
++			"resolved": "https://registry.npmjs.org/babel-plugin-macros/-/babel-plugin-macros-3.1.0.tgz",
++			"integrity": "sha512-Cg7TFGpIr01vOQNODXOOaGz2NpCU5gl8x1qJFbb6hbZxR7XrcE2vtbAsTAbJ7/xwJtUuJEw8K8Zr/AE0LHlesg==",
++			"dependencies": {
++				"@babel/runtime": "^7.12.5",
++				"cosmiconfig": "^7.0.0",
++				"resolve": "^1.19.0"
++			},
++			"engines": {
++				"node": ">=10",
++				"npm": ">=6"
++			}
++		},
+ 		"node_modules/babel-plugin-styled-components": {
+ 			"version": "2.0.1",
+ 			"integrity": "sha512-U3wmORxerYBiqcRCo6thItIosEIga3F+ph0jJPkiOZJjyhpZyUZFQV9XvrZ2CbBIihJ3rDBC/itQ+Wx3VHMauw==",
+@@ -4903,7 +5484,6 @@
+ 		"node_modules/callsites": {
+ 			"version": "3.1.0",
+ 			"integrity": "sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==",
+-			"dev": true,
+ 			"engines": {
+ 				"node": ">=6"
+ 			}
+@@ -5120,6 +5700,14 @@
+ 				"node": ">=0.8"
+ 			}
+ 		},
++		"node_modules/clsx": {
++			"version": "1.2.1",
++			"resolved": "https://registry.npmjs.org/clsx/-/clsx-1.2.1.tgz",
++			"integrity": "sha512-EcR6r5a8bj6pu3ycsa/E/cKVGuTgZJZdsyUYHOksG/UHIiKfjxzRxYJpyVBwYaQeOvghal9fcc4PidlgzugAQg==",
++			"engines": {
++				"node": ">=6"
++			}
++		},
+ 		"node_modules/color-convert": {
+ 			"version": "1.9.3",
+ 			"integrity": "sha512-QfAUtd+vFdAtFQcC8CCyYt1fYWxSqAiK2cSD6zDB8N3cpsEBAvRxp9zOGg6G/SHHJYAT88/az/IuDGALsNVbGg==",
+@@ -5332,7 +5920,6 @@
+ 		"node_modules/convert-source-map": {
+ 			"version": "1.8.0",
+ 			"integrity": "sha512-+OQdjP49zViI/6i7nIJpA8rAl4sV/JdPfU9nZs3VqOwGIgizICvuN2ru6fMd+4llL0tar18UYJXfZ/TWtmhUjA==",
+-			"dev": true,
+ 			"dependencies": {
+ 				"safe-buffer": "~5.1.1"
+ 			}
+@@ -5475,7 +6062,6 @@
+ 		"node_modules/cosmiconfig": {
+ 			"version": "7.0.1",
+ 			"integrity": "sha512-a1YWNUV2HwGimB7dU2s1wUMurNKjpx60HxBB6xUM8Re+2s1g1IIfJvFR0/iCF+XHdE0GMTKTuLR32UQff4TEyQ==",
+-			"dev": true,
+ 			"dependencies": {
+ 				"@types/parse-json": "^4.0.0",
+ 				"import-fresh": "^3.2.1",
+@@ -5598,8 +6184,9 @@
+ 			}
+ 		},
+ 		"node_modules/csstype": {
+-			"version": "3.0.10",
+-			"integrity": "sha512-2u44ZG2OcNUO9HDp/Jl8C07x6pU/eTR3ncV91SiK3dhG9TWvRVsCoJw14Ckx5DgWkzGA3waZWO3d7pgqpUI/XA=="
++			"version": "3.1.0",
++			"resolved": "https://registry.npmjs.org/csstype/-/csstype-3.1.0.tgz",
++			"integrity": "sha512-uX1KG+x9h5hIJsaKR9xHUeUraxf8IODOwq9JLNPq6BwB04a/xgpq3rcx47l5BZu5zBPlgD342tdke3Hom/nJRA=="
+ 		},
+ 		"node_modules/damerau-levenshtein": {
+ 			"version": "1.0.8",
+@@ -6037,7 +6624,6 @@
+ 		"node_modules/error-ex": {
+ 			"version": "1.3.2",
+ 			"integrity": "sha512-7dFHNmqeFSEt2ZBsCriorKnn3Z2pj+fd9kmI6QoWw4//DL+icEBfc0U7qJCisqrTsKTjw4fNFy2pW9OqStD84g==",
+-			"dev": true,
+ 			"dependencies": {
+ 				"is-arrayish": "^0.2.1"
+ 			}
+@@ -7113,8 +7699,7 @@
+ 		},
+ 		"node_modules/find-root": {
+ 			"version": "1.1.0",
+-			"integrity": "sha512-NKfW6bec6GfKc0SGx1e07QZY9PE99u0Bft/0rzSD5k3sO/vwkVUpDUKVm5Gpp5Ue3YfShPFTX2070tDs5kB9Ng==",
+-			"dev": true
++			"integrity": "sha512-NKfW6bec6GfKc0SGx1e07QZY9PE99u0Bft/0rzSD5k3sO/vwkVUpDUKVm5Gpp5Ue3YfShPFTX2070tDs5kB9Ng=="
+ 		},
+ 		"node_modules/find-up": {
+ 			"version": "5.0.0",
+@@ -7232,8 +7817,7 @@
+ 		},
+ 		"node_modules/function-bind": {
+ 			"version": "1.1.1",
+-			"integrity": "sha512-yIovAzMX49sF8Yl58fSCWJ5svSLuaibPxXQJFLmBObTuCr0Mf1KiPopGM9NiFjiYBCbfaa2Fh6breQ6ANVTI0A==",
+-			"dev": true
++			"integrity": "sha512-yIovAzMX49sF8Yl58fSCWJ5svSLuaibPxXQJFLmBObTuCr0Mf1KiPopGM9NiFjiYBCbfaa2Fh6breQ6ANVTI0A=="
+ 		},
+ 		"node_modules/functional-red-black-tree": {
+ 			"version": "1.0.1",
+@@ -7243,7 +7827,6 @@
+ 		"node_modules/gensync": {
+ 			"version": "1.0.0-beta.2",
+ 			"integrity": "sha512-3hN7NaskYvMDLQY55gnW3NQ+mesEAepTqlg+VEbj7zzqEMBVNhzcGYYeqFo/TlYz6eQiFcp1HcsCZO+nGgS8zg==",
+-			"dev": true,
+ 			"engines": {
+ 				"node": ">=6.9.0"
+ 			}
+@@ -7518,7 +8101,6 @@
+ 		"node_modules/has": {
+ 			"version": "1.0.3",
+ 			"integrity": "sha512-f2dvO0VU6Oej7RkWJGrehjbzMAjFp5/VKPp5tTpWIV4JHHZK1/BxbFRtf/siA2SWTe09caDmVtYYzWEIbBS4zw==",
+-			"dev": true,
+ 			"dependencies": {
+ 				"function-bind": "^1.1.1"
+ 			},
+@@ -7909,7 +8491,6 @@
+ 		"node_modules/import-fresh": {
+ 			"version": "3.3.0",
+ 			"integrity": "sha512-veYYhQa+D1QBKznvhUHxb8faxlrwUnxseDAbAp457E0wLNio2bOSKnjYDhMj+YiAq61xrMGhQk9iXVk5FzgQMw==",
+-			"dev": true,
+ 			"dependencies": {
+ 				"parent-module": "^1.0.0",
+ 				"resolve-from": "^4.0.0"
+@@ -7924,7 +8505,6 @@
+ 		"node_modules/import-fresh/node_modules/resolve-from": {
+ 			"version": "4.0.0",
+ 			"integrity": "sha512-pb/MYmXstAkysRFx8piNI1tGFNQIFA3vkE3Gq4EuA1dF6gHp/+vgZqsCGJapvy8N3Q+4o7FwvquPJcnZ7RYy4g==",
+-			"dev": true,
+ 			"engines": {
+ 				"node": ">=4"
+ 			}
+@@ -8018,8 +8598,7 @@
+ 		},
+ 		"node_modules/is-arrayish": {
+ 			"version": "0.2.1",
+-			"integrity": "sha512-zz06S8t0ozoDXMG+ube26zeCTNXcKIPJZJi8hBrF4idCLms4CG9QtK7qBl1boi5ODzFpjswb5JPmHCbMpjaYzg==",
+-			"dev": true
++			"integrity": "sha512-zz06S8t0ozoDXMG+ube26zeCTNXcKIPJZJi8hBrF4idCLms4CG9QtK7qBl1boi5ODzFpjswb5JPmHCbMpjaYzg=="
+ 		},
+ 		"node_modules/is-bigint": {
+ 			"version": "1.0.4",
+@@ -8104,7 +8683,6 @@
+ 		"node_modules/is-core-module": {
+ 			"version": "2.8.1",
+ 			"integrity": "sha512-SdNCUs284hr40hFTFP6l0IfZ/RSrMXF3qgoRHd3/79unUTvrFO/JoXwkGm+5J/Oe3E/b5GsnG330uUNgRpu1PA==",
+-			"dev": true,
+ 			"dependencies": {
+ 				"has": "^1.0.3"
+ 			},
+@@ -8582,8 +9160,7 @@
+ 		},
+ 		"node_modules/json-parse-even-better-errors": {
+ 			"version": "2.3.1",
+-			"integrity": "sha512-xyFwyhro/JEof6Ghe2iz2NcXoj2sloNsWr/XsERDK/oiPCfaNhl5ONfp+jQdAZRQQ0IJWNzH9zIZF7li91kh2w==",
+-			"dev": true
++			"integrity": "sha512-xyFwyhro/JEof6Ghe2iz2NcXoj2sloNsWr/XsERDK/oiPCfaNhl5ONfp+jQdAZRQQ0IJWNzH9zIZF7li91kh2w=="
+ 		},
+ 		"node_modules/json-schema-traverse": {
+ 			"version": "0.4.1",
+@@ -8776,8 +9353,7 @@
+ 		},
+ 		"node_modules/lines-and-columns": {
+ 			"version": "1.2.4",
+-			"integrity": "sha512-7ylylesZQ/PV29jhEDl3Ufjo6ZX7gCqJr5F7PKrqc93v7fzSymt1BpwEU8nAUXs8qzzvqhbjhK5QZg6Mt/HkBg==",
+-			"dev": true
++			"integrity": "sha512-7ylylesZQ/PV29jhEDl3Ufjo6ZX7gCqJr5F7PKrqc93v7fzSymt1BpwEU8nAUXs8qzzvqhbjhK5QZg6Mt/HkBg=="
+ 		},
+ 		"node_modules/loader-runner": {
+ 			"version": "4.2.0",
+@@ -10568,7 +11144,6 @@
+ 		"node_modules/parent-module": {
+ 			"version": "1.0.1",
+ 			"integrity": "sha512-GQ2EWRpQV8/o+Aw8YqtfZZPfNRWZYkbidE9k5rpl/hC3vtHHBfGm2Ifi6qWV+coDGkrUKZAxE3Lot5kcsRlh+g==",
+-			"dev": true,
+ 			"dependencies": {
+ 				"callsites": "^3.0.0"
+ 			},
+@@ -10579,7 +11154,6 @@
+ 		"node_modules/parse-json": {
+ 			"version": "5.2.0",
+ 			"integrity": "sha512-ayCKvm/phCGxOkYRSCM82iDwct8/EonSEgCSxWxD7ve6jHggsFl4fZVQBPRNgQoKiuV/odhFrGzQXZwbifC8Rg==",
+-			"dev": true,
+ 			"dependencies": {
+ 				"@babel/code-frame": "^7.0.0",
+ 				"error-ex": "^1.3.1",
+@@ -10650,8 +11224,7 @@
+ 		},
+ 		"node_modules/path-parse": {
+ 			"version": "1.0.7",
+-			"integrity": "sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw==",
+-			"dev": true
++			"integrity": "sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw=="
+ 		},
+ 		"node_modules/path-to-regexp": {
+ 			"version": "1.8.0",
+@@ -10663,7 +11236,6 @@
+ 		"node_modules/path-type": {
+ 			"version": "4.0.0",
+ 			"integrity": "sha512-gDKb8aZMDeD/tZWs9P6+q0J9Mwkdl6xMV8TjnGP3qJVJ06bdMgkbBlLU8IdfOsIsFz2BW1rNVT3XuNEl8zPAvw==",
+-			"dev": true,
+ 			"engines": {
+ 				"node": ">=8"
+ 			}
+@@ -12048,7 +12620,6 @@
+ 		"node_modules/resolve": {
+ 			"version": "1.22.0",
+ 			"integrity": "sha512-Hhtrw0nLeSrFQ7phPp4OOcVjLPIeMnRlr5mcnVuMe7M/7eBn98A3hmFRLoFo3DLZkivSYwhRUJTyPyWAk56WLw==",
+-			"dev": true,
+ 			"dependencies": {
+ 				"is-core-module": "^2.8.1",
+ 				"path-parse": "^1.0.7",
+@@ -12255,7 +12826,6 @@
+ 		"node_modules/semver": {
+ 			"version": "6.3.0",
+ 			"integrity": "sha512-b39TBaTSfV6yBrapU89p5fKekE2m/NwnDocOVruQFS1/veMgdzuPcnOM34M6CwxW8jH/lxEa5rBoDeUwu5HHTw==",
+-			"dev": true,
+ 			"bin": {
+ 				"semver": "bin/semver.js"
+ 			}
+@@ -12804,6 +13374,11 @@
+ 				"react-is": ">= 16.8.0"
+ 			}
+ 		},
++		"node_modules/stylis": {
++			"version": "4.0.13",
++			"resolved": "https://registry.npmjs.org/stylis/-/stylis-4.0.13.tgz",
++			"integrity": "sha512-xGPXiFVl4YED9Jh7Euv2V220mriG9u4B2TA6Ybjc1catrstKD2PpIdU3U0RKpkVBC2EhmL/F0sPCr9vrFTNRag=="
++		},
+ 		"node_modules/supports-color": {
+ 			"version": "5.5.0",
+ 			"integrity": "sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==",
+@@ -12817,7 +13392,6 @@
+ 		"node_modules/supports-preserve-symlinks-flag": {
+ 			"version": "1.0.0",
+ 			"integrity": "sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w==",
+-			"dev": true,
+ 			"engines": {
+ 				"node": ">= 0.4"
+ 			},
+@@ -14108,7 +14682,6 @@
+ 		"node_modules/yaml": {
+ 			"version": "1.10.2",
+ 			"integrity": "sha512-r3vXyErRCYJ7wg28yvBY5VSoAF8ZvlcW9/BwUzEtUsjvX/DKs24dIkuwjtuprwJJHsbyUbLApepYTR1BN4uHrg==",
+-			"dev": true,
+ 			"engines": {
+ 				"node": ">= 6"
+ 			}
+@@ -14208,13 +14781,11 @@
+ 		},
+ 		"@babel/compat-data": {
+ 			"version": "7.16.8",
+-			"integrity": "sha512-m7OkX0IdKLKPpBlJtF561YJal5y/jyI5fNfWbPxh2D/nbzzGI4qRyrD8xO2jB24u7l+5I2a43scCG2IrfjC50Q==",
+-			"dev": true
++			"integrity": "sha512-m7OkX0IdKLKPpBlJtF561YJal5y/jyI5fNfWbPxh2D/nbzzGI4qRyrD8xO2jB24u7l+5I2a43scCG2IrfjC50Q=="
+ 		},
+ 		"@babel/core": {
+ 			"version": "7.16.0",
+ 			"integrity": "sha512-mYZEvshBRHGsIAiyH5PzCFTCfbWfoYbO/jcSdXQSUQu1/pW0xDZAUP7KEc32heqWTAfAHhV9j1vH8Sav7l+JNQ==",
+-			"dev": true,
+ 			"requires": {
+ 				"@babel/code-frame": "^7.16.0",
+ 				"@babel/generator": "^7.16.0",
+@@ -14236,7 +14807,6 @@
+ 				"@babel/helper-compilation-targets": {
+ 					"version": "7.16.7",
+ 					"integrity": "sha512-mGojBwIWcwGD6rfqgRXVlVYmPAv7eOpIemUG3dGnDdCY4Pae70ROij3XmfrH6Fa1h1aiDylpglbZyktfzyo/hA==",
+-					"dev": true,
+ 					"requires": {
+ 						"@babel/compat-data": "^7.16.4",
+ 						"@babel/helper-validator-option": "^7.16.7",
+@@ -14327,7 +14897,6 @@
+ 		"@babel/helper-module-transforms": {
+ 			"version": "7.16.7",
+ 			"integrity": "sha512-gaqtLDxJEFCeQbYp9aLAefjhkKdjKcdh6DB7jniIGU3Pz52WAmP268zK0VgPz9hUNkMSYeH976K2/Y6yPadpng==",
+-			"dev": true,
+ 			"requires": {
+ 				"@babel/helper-environment-visitor": "^7.16.7",
+ 				"@babel/helper-module-imports": "^7.16.7",
+@@ -14348,9 +14917,9 @@
+ 			}
+ 		},
+ 		"@babel/helper-plugin-utils": {
+-			"version": "7.16.7",
+-			"integrity": "sha512-Qg3Nk7ZxpgMrsox6HreY1ZNKdBq7K72tDSliA6dCl5f007jR4ne8iD5UzuNnCJH2xBf2BEEVGr+/OL6Gdp7RxA==",
+-			"dev": true
++			"version": "7.18.9",
++			"resolved": "https://registry.npmjs.org/@babel/helper-plugin-utils/-/helper-plugin-utils-7.18.9.tgz",
++			"integrity": "sha512-aBXPT3bmtLryXaoJLyYPXPlSD4p1ld9aYeR+sJNOZjJJGiOpb+fKfh3NkcCu7J54nUJwCERPBExCCpyCOHnu/w=="
+ 		},
+ 		"@babel/helper-remap-async-to-generator": {
+ 			"version": "7.16.8",
+@@ -14377,7 +14946,6 @@
+ 		"@babel/helper-simple-access": {
+ 			"version": "7.16.7",
+ 			"integrity": "sha512-ZIzHVyoeLMvXMN/vok/a4LWRy8G2v205mNP0XOuf9XRLyX5/u9CnVulUtDgUTama3lT+bf/UqucuZjqiGuTS1g==",
+-			"dev": true,
+ 			"requires": {
+ 				"@babel/types": "^7.16.7"
+ 			}
+@@ -14403,8 +14971,7 @@
+ 		},
+ 		"@babel/helper-validator-option": {
+ 			"version": "7.16.7",
+-			"integrity": "sha512-TRtenOuRUVo9oIQGPC5G9DgK4743cdxvtOw0weQNpZXaS16SCBi5MNjZF8vba3ETURjZpTbVn7Vvcf2eAwFozQ==",
+-			"dev": true
++			"integrity": "sha512-TRtenOuRUVo9oIQGPC5G9DgK4743cdxvtOw0weQNpZXaS16SCBi5MNjZF8vba3ETURjZpTbVn7Vvcf2eAwFozQ=="
+ 		},
+ 		"@babel/helper-wrap-function": {
+ 			"version": "7.16.8",
+@@ -14420,7 +14987,6 @@
+ 		"@babel/helpers": {
+ 			"version": "7.16.7",
+ 			"integrity": "sha512-9ZDoqtfY7AuEOt3cxchfii6C7GDyyMBffktR5B2jvWv8u2+efwvpnVKXMWzNehqy68tKgAfSwfdw/lWpthS2bw==",
+-			"dev": true,
+ 			"requires": {
+ 				"@babel/template": "^7.16.7",
+ 				"@babel/traverse": "^7.16.7",
+@@ -14465,6 +15031,14 @@
+ 				}
+ 			}
+ 		},
++		"@babel/plugin-syntax-jsx": {
++			"version": "7.18.6",
++			"resolved": "https://registry.npmjs.org/@babel/plugin-syntax-jsx/-/plugin-syntax-jsx-7.18.6.tgz",
++			"integrity": "sha512-6mmljtAedFGTWu2p/8WIORGwy+61PLgOMPOdazc7YoJ9ZCWUyFy3A6CpPkRKLKD1ToAesxX8KGEViAiLo9N+7Q==",
++			"requires": {
++				"@babel/helper-plugin-utils": "^7.18.6"
++			}
++		},
+ 		"@babel/plugin-transform-runtime": {
+ 			"version": "7.16.4",
+ 			"integrity": "sha512-pru6+yHANMTukMtEZGC4fs7XPwg35v8sj5CIEmE+gEkFljFiVJxEWxx/7ZDkTK+iZRYo1bFXBtfIN95+K3cJ5A==",
+@@ -15450,16 +16024,6 @@
+ 						"@babel/helper-plugin-utils": "^7.16.7",
+ 						"@babel/plugin-syntax-jsx": "^7.16.7",
+ 						"@babel/types": "^7.16.7"
+-					},
+-					"dependencies": {
+-						"@babel/plugin-syntax-jsx": {
+-							"version": "7.16.7",
+-							"integrity": "sha512-Esxmk7YjA8QysKeT3VhTXvF6y77f/a91SIs4pWb4H2eWGQkCKFgQaG6hdoEVZtGsrAcb2K5BW66XsOErD4WU3Q==",
+-							"dev": true,
+-							"requires": {
+-								"@babel/helper-plugin-utils": "^7.16.7"
+-							}
+-						}
+ 					}
+ 				},
+ 				"@babel/plugin-transform-react-jsx-development": {
+@@ -15528,8 +16092,9 @@
+ 			}
+ 		},
+ 		"@babel/runtime": {
+-			"version": "7.16.7",
+-			"integrity": "sha512-9E9FJowqAsytyOY6LG+1KuueckRL+aQW+mKvXRXnuFGyRAyepJPmEo9vgMfXUA6O9u3IeEdv9MAkppFcaQwogQ==",
++			"version": "7.18.9",
++			"resolved": "https://registry.npmjs.org/@babel/runtime/-/runtime-7.18.9.tgz",
++			"integrity": "sha512-lkqXDcvlFT5rvEjiu6+QYO+1GXrEHRo2LOtS7E4GtX5ESIZOgepqsZBVIj6Pv+a6zqsya9VCgiK1KAK4BvJDAw==",
+ 			"requires": {
+ 				"regenerator-runtime": "^0.13.4"
+ 			}
+@@ -15874,6 +16439,61 @@
+ 				}
+ 			}
+ 		},
++		"@emotion/babel-plugin": {
++			"version": "11.10.2",
++			"resolved": "https://registry.npmjs.org/@emotion/babel-plugin/-/babel-plugin-11.10.2.tgz",
++			"integrity": "sha512-xNQ57njWTFVfPAc3cjfuaPdsgLp5QOSuRsj9MA6ndEhH/AzuZM86qIQzt6rq+aGBwj3n5/TkLmU5lhAfdRmogA==",
++			"requires": {
++				"@babel/helper-module-imports": "^7.16.7",
++				"@babel/plugin-syntax-jsx": "^7.17.12",
++				"@babel/runtime": "^7.18.3",
++				"@emotion/hash": "^0.9.0",
++				"@emotion/memoize": "^0.8.0",
++				"@emotion/serialize": "^1.1.0",
++				"babel-plugin-macros": "^3.1.0",
++				"convert-source-map": "^1.5.0",
++				"escape-string-regexp": "^4.0.0",
++				"find-root": "^1.1.0",
++				"source-map": "^0.5.7",
++				"stylis": "4.0.13"
++			},
++			"dependencies": {
++				"@emotion/memoize": {
++					"version": "0.8.0",
++					"resolved": "https://registry.npmjs.org/@emotion/memoize/-/memoize-0.8.0.tgz",
++					"integrity": "sha512-G/YwXTkv7Den9mXDO7AhLWkE3q+I92B+VqAE+dYG4NGPaHZGvt3G8Q0p9vmE+sq7rTGphUbAvmQ9YpbfMQGGlA=="
++				},
++				"escape-string-regexp": {
++					"version": "4.0.0",
++					"resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-4.0.0.tgz",
++					"integrity": "sha512-TtpcNJ3XAzx3Gq8sWRzJaVajRs0uVxA2YAkdb1jm2YkPz4G6egUFAyA3n5vtEIZefPk5Wa4UXbKuS5fKkJWdgA=="
++				}
++			}
++		},
++		"@emotion/cache": {
++			"version": "11.10.2",
++			"resolved": "https://registry.npmjs.org/@emotion/cache/-/cache-11.10.2.tgz",
++			"integrity": "sha512-GPR4PovENRvYDbCEnDRecPZYJzWdNMsM+Jn+13MC5uImVNbMyKwzv95DUHy5PDcgfPtKoDtfLU6emF1grrbQDg==",
++			"requires": {
++				"@emotion/memoize": "^0.8.0",
++				"@emotion/sheet": "^1.2.0",
++				"@emotion/utils": "^1.2.0",
++				"@emotion/weak-memoize": "^0.3.0",
++				"stylis": "4.0.13"
++			},
++			"dependencies": {
++				"@emotion/memoize": {
++					"version": "0.8.0",
++					"resolved": "https://registry.npmjs.org/@emotion/memoize/-/memoize-0.8.0.tgz",
++					"integrity": "sha512-G/YwXTkv7Den9mXDO7AhLWkE3q+I92B+VqAE+dYG4NGPaHZGvt3G8Q0p9vmE+sq7rTGphUbAvmQ9YpbfMQGGlA=="
++				}
++			}
++		},
++		"@emotion/hash": {
++			"version": "0.9.0",
++			"resolved": "https://registry.npmjs.org/@emotion/hash/-/hash-0.9.0.tgz",
++			"integrity": "sha512-14FtKiHhy2QoPIzdTcvh//8OyBlknNs2nXRwIhG904opCby3l+9Xaf/wuPvICBF0rc1ZCNBd3nKe9cd2mecVkQ=="
++		},
+ 		"@emotion/is-prop-valid": {
+ 			"version": "0.8.8",
+ 			"integrity": "sha512-u5WtneEAr5IDG2Wv65yhunPSMLIpuKsbuOktRojfrEiEvRyC85LgPMZI63cr7NUqT8ZIGdSVg8ZKGxIug4lXcA==",
+@@ -15885,6 +16505,76 @@
+ 			"version": "0.7.4",
+ 			"integrity": "sha512-Ja/Vfqe3HpuzRsG1oBtWTHk2PGZ7GR+2Vz5iYGelAw8dx32K0y7PjVuxK6z1nMpZOqAFsRUPCkK1YjJ56qJlgw=="
+ 		},
++		"@emotion/react": {
++			"version": "11.10.0",
++			"resolved": "https://registry.npmjs.org/@emotion/react/-/react-11.10.0.tgz",
++			"integrity": "sha512-K6z9zlHxxBXwN8TcpwBKcEsBsOw4JWCCmR+BeeOWgqp8GIU1yA2Odd41bwdAAr0ssbQrbJbVnndvv7oiv1bZeQ==",
++			"requires": {
++				"@babel/runtime": "^7.18.3",
++				"@emotion/babel-plugin": "^11.10.0",
++				"@emotion/cache": "^11.10.0",
++				"@emotion/serialize": "^1.1.0",
++				"@emotion/utils": "^1.2.0",
++				"@emotion/weak-memoize": "^0.3.0",
++				"hoist-non-react-statics": "^3.3.1"
++			}
++		},
++		"@emotion/serialize": {
++			"version": "1.1.0",
++			"resolved": "https://registry.npmjs.org/@emotion/serialize/-/serialize-1.1.0.tgz",
++			"integrity": "sha512-F1ZZZW51T/fx+wKbVlwsfchr5q97iW8brAnXmsskz4d0hVB4O3M/SiA3SaeH06x02lSNzkkQv+n3AX3kCXKSFA==",
++			"requires": {
++				"@emotion/hash": "^0.9.0",
++				"@emotion/memoize": "^0.8.0",
++				"@emotion/unitless": "^0.8.0",
++				"@emotion/utils": "^1.2.0",
++				"csstype": "^3.0.2"
++			},
++			"dependencies": {
++				"@emotion/memoize": {
++					"version": "0.8.0",
++					"resolved": "https://registry.npmjs.org/@emotion/memoize/-/memoize-0.8.0.tgz",
++					"integrity": "sha512-G/YwXTkv7Den9mXDO7AhLWkE3q+I92B+VqAE+dYG4NGPaHZGvt3G8Q0p9vmE+sq7rTGphUbAvmQ9YpbfMQGGlA=="
++				},
++				"@emotion/unitless": {
++					"version": "0.8.0",
++					"resolved": "https://registry.npmjs.org/@emotion/unitless/-/unitless-0.8.0.tgz",
++					"integrity": "sha512-VINS5vEYAscRl2ZUDiT3uMPlrFQupiKgHz5AA4bCH1miKBg4qtwkim1qPmJj/4WG6TreYMY111rEFsjupcOKHw=="
++				}
++			}
++		},
++		"@emotion/sheet": {
++			"version": "1.2.0",
++			"resolved": "https://registry.npmjs.org/@emotion/sheet/-/sheet-1.2.0.tgz",
++			"integrity": "sha512-OiTkRgpxescko+M51tZsMq7Puu/KP55wMT8BgpcXVG2hqXc0Vo0mfymJ/Uj24Hp0i083ji/o0aLddh08UEjq8w=="
++		},
++		"@emotion/styled": {
++			"version": "11.10.0",
++			"resolved": "https://registry.npmjs.org/@emotion/styled/-/styled-11.10.0.tgz",
++			"integrity": "sha512-V9oaEH6V4KePeQpgUE83i8ht+4Ri3E8Djp/ZPJ4DQlqWhSKITvgzlR3/YQE2hdfP4Jw3qVRkANJz01LLqK9/TA==",
++			"requires": {
++				"@babel/runtime": "^7.18.3",
++				"@emotion/babel-plugin": "^11.10.0",
++				"@emotion/is-prop-valid": "^1.2.0",
++				"@emotion/serialize": "^1.1.0",
++				"@emotion/utils": "^1.2.0"
++			},
++			"dependencies": {
++				"@emotion/is-prop-valid": {
++					"version": "1.2.0",
++					"resolved": "https://registry.npmjs.org/@emotion/is-prop-valid/-/is-prop-valid-1.2.0.tgz",
++					"integrity": "sha512-3aDpDprjM0AwaxGE09bOPkNxHpBd+kA6jty3RnaEXdweX1DF1U3VQpPYb0g1IStAuK7SVQ1cy+bNBBKp4W3Fjg==",
++					"requires": {
++						"@emotion/memoize": "^0.8.0"
++					}
++				},
++				"@emotion/memoize": {
++					"version": "0.8.0",
++					"resolved": "https://registry.npmjs.org/@emotion/memoize/-/memoize-0.8.0.tgz",
++					"integrity": "sha512-G/YwXTkv7Den9mXDO7AhLWkE3q+I92B+VqAE+dYG4NGPaHZGvt3G8Q0p9vmE+sq7rTGphUbAvmQ9YpbfMQGGlA=="
++				}
++			}
++		},
+ 		"@emotion/stylis": {
+ 			"version": "0.8.5",
+ 			"integrity": "sha512-h6KtPihKFn3T9fuIrwvXXUOwlx3rfUvfZIcP5a6rh8Y7zjE3O06hT5Ss4S/YI1AYhuZ1kjaE/5EaOOI2NqSylQ=="
+@@ -15893,6 +16583,16 @@
+ 			"version": "0.7.5",
+ 			"integrity": "sha512-OWORNpfjMsSSUBVrRBVGECkhWcULOAJz9ZW8uK9qgxD+87M7jHRcvh/A96XXNhXTLmKcoYSQtBEX7lHMO7YRwg=="
+ 		},
++		"@emotion/utils": {
++			"version": "1.2.0",
++			"resolved": "https://registry.npmjs.org/@emotion/utils/-/utils-1.2.0.tgz",
++			"integrity": "sha512-sn3WH53Kzpw8oQ5mgMmIzzyAaH2ZqFEbozVVBSYp538E06OSE6ytOp7pRAjNQR+Q/orwqdQYJSe2m3hCOeznkw=="
++		},
++		"@emotion/weak-memoize": {
++			"version": "0.3.0",
++			"resolved": "https://registry.npmjs.org/@emotion/weak-memoize/-/weak-memoize-0.3.0.tgz",
++			"integrity": "sha512-AHPmaAx+RYfZz0eYu6Gviiagpmiyw98ySSlQvCUhVGDRtDFe4DBS0x1bSjdF3gqUDYOczB+yYvBTtEylYSdRhg=="
++		},
+ 		"@endemolshinegroup/cosmiconfig-typescript-loader": {
+ 			"version": "3.0.2",
+ 			"integrity": "sha512-QRVtqJuS1mcT56oHpVegkKBlgtWjXw/gHNWO3eL9oyB5Sc7HBoc2OLG/nYpVfT/Jejvo3NUrD0Udk7XgoyDKkA==",
+@@ -16141,6 +16841,268 @@
+ 				}
+ 			}
+ 		},
++		"@mui/base": {
++			"version": "5.0.0-alpha.94",
++			"resolved": "https://registry.npmjs.org/@mui/base/-/base-5.0.0-alpha.94.tgz",
++			"integrity": "sha512-IJXmgTF07H1Iv5zjDV7zJZGUmb9cN8ERzd2dgA1akh6NWZgwyIGyQx+Au9+QSDoM5vN3FqZvU/0YCU6inUwgeQ==",
++			"requires": {
++				"@babel/runtime": "^7.17.2",
++				"@emotion/is-prop-valid": "^1.2.0",
++				"@mui/types": "^7.1.5",
++				"@mui/utils": "^5.9.3",
++				"@popperjs/core": "^2.11.6",
++				"clsx": "^1.2.1",
++				"prop-types": "^15.8.1",
++				"react-is": "^18.2.0"
++			},
++			"dependencies": {
++				"@emotion/is-prop-valid": {
++					"version": "1.2.0",
++					"resolved": "https://registry.npmjs.org/@emotion/is-prop-valid/-/is-prop-valid-1.2.0.tgz",
++					"integrity": "sha512-3aDpDprjM0AwaxGE09bOPkNxHpBd+kA6jty3RnaEXdweX1DF1U3VQpPYb0g1IStAuK7SVQ1cy+bNBBKp4W3Fjg==",
++					"requires": {
++						"@emotion/memoize": "^0.8.0"
++					}
++				},
++				"@emotion/memoize": {
++					"version": "0.8.0",
++					"resolved": "https://registry.npmjs.org/@emotion/memoize/-/memoize-0.8.0.tgz",
++					"integrity": "sha512-G/YwXTkv7Den9mXDO7AhLWkE3q+I92B+VqAE+dYG4NGPaHZGvt3G8Q0p9vmE+sq7rTGphUbAvmQ9YpbfMQGGlA=="
++				},
++				"@popperjs/core": {
++					"version": "2.11.6",
++					"resolved": "https://registry.npmjs.org/@popperjs/core/-/core-2.11.6.tgz",
++					"integrity": "sha512-50/17A98tWUfQ176raKiOGXuYpLyyVMkxxG6oylzL3BPOlA6ADGdK7EYunSa4I064xerltq9TGXs8HmOk5E+vw=="
++				},
++				"prop-types": {
++					"version": "15.8.1",
++					"resolved": "https://registry.npmjs.org/prop-types/-/prop-types-15.8.1.tgz",
++					"integrity": "sha512-oj87CgZICdulUohogVAR7AjlC0327U4el4L6eAvOqCeudMDVU0NThNaV+b9Df4dXgSP1gXMTnPdhfe/2qDH5cg==",
++					"requires": {
++						"loose-envify": "^1.4.0",
++						"object-assign": "^4.1.1",
++						"react-is": "^16.13.1"
++					},
++					"dependencies": {
++						"react-is": {
++							"version": "16.13.1",
++							"resolved": "https://registry.npmjs.org/react-is/-/react-is-16.13.1.tgz",
++							"integrity": "sha512-24e6ynE2H+OKt4kqsOvNd8kBpV65zoxbA4BVsEOB3ARVWQki/DHzaUoC5KuON/BiccDaCCTZBuOcfZs70kR8bQ=="
++						}
++					}
++				},
++				"react-is": {
++					"version": "18.2.0",
++					"resolved": "https://registry.npmjs.org/react-is/-/react-is-18.2.0.tgz",
++					"integrity": "sha512-xWGDIW6x921xtzPkhiULtthJHoJvBbF3q26fzloPCK0hsvxtPVelvftw3zjbHWSkR2km9Z+4uxbDDK/6Zw9B8w=="
++				}
++			}
++		},
++		"@mui/core-downloads-tracker": {
++			"version": "5.10.2",
++			"resolved": "https://registry.npmjs.org/@mui/core-downloads-tracker/-/core-downloads-tracker-5.10.2.tgz",
++			"integrity": "sha512-1guoGvL3QZ7VjA3y9zye9Rpm+jz18rVZIo3AauTGyW5ntDMxr/cR0M18nuc/NH2KqpMt+coh4NwPEO1uPuKM5w=="
++		},
++		"@mui/icons-material": {
++			"version": "5.10.2",
++			"resolved": "https://registry.npmjs.org/@mui/icons-material/-/icons-material-5.10.2.tgz",
++			"integrity": "sha512-p7ku+43JeKRz0ONGzPZbRXZRbE7vCKP1Cr8l/Yj9sUIGVQ6CM/m37u6udacJZkDXD+G2FoxJPixrVvvjx6f64w==",
++			"requires": {
++				"@babel/runtime": "^7.17.2"
++			}
++		},
++		"@mui/material": {
++			"version": "5.10.2",
++			"resolved": "https://registry.npmjs.org/@mui/material/-/material-5.10.2.tgz",
++			"integrity": "sha512-ay43fuQLXROXkxFd6tqbj394Hu8BlbmpCdEDFtAisijulla2ZLfQa24pjhdX+56HrHReB3cZsf/sRq+DSfIgiA==",
++			"requires": {
++				"@babel/runtime": "^7.17.2",
++				"@mui/base": "5.0.0-alpha.94",
++				"@mui/core-downloads-tracker": "^5.10.2",
++				"@mui/system": "^5.10.2",
++				"@mui/types": "^7.1.5",
++				"@mui/utils": "^5.9.3",
++				"@types/react-transition-group": "^4.4.5",
++				"clsx": "^1.2.1",
++				"csstype": "^3.1.0",
++				"prop-types": "^15.8.1",
++				"react-is": "^18.2.0",
++				"react-transition-group": "^4.4.5"
++			},
++			"dependencies": {
++				"dom-helpers": {
++					"version": "5.2.1",
++					"resolved": "https://registry.npmjs.org/dom-helpers/-/dom-helpers-5.2.1.tgz",
++					"integrity": "sha512-nRCa7CK3VTrM2NmGkIy4cbK7IZlgBE/PYMn55rrXefr5xXDP0LdtfPnblFDoVdcAfslJ7or6iqAUnx0CCGIWQA==",
++					"requires": {
++						"@babel/runtime": "^7.8.7",
++						"csstype": "^3.0.2"
++					}
++				},
++				"prop-types": {
++					"version": "15.8.1",
++					"resolved": "https://registry.npmjs.org/prop-types/-/prop-types-15.8.1.tgz",
++					"integrity": "sha512-oj87CgZICdulUohogVAR7AjlC0327U4el4L6eAvOqCeudMDVU0NThNaV+b9Df4dXgSP1gXMTnPdhfe/2qDH5cg==",
++					"requires": {
++						"loose-envify": "^1.4.0",
++						"object-assign": "^4.1.1",
++						"react-is": "^16.13.1"
++					},
++					"dependencies": {
++						"react-is": {
++							"version": "16.13.1",
++							"resolved": "https://registry.npmjs.org/react-is/-/react-is-16.13.1.tgz",
++							"integrity": "sha512-24e6ynE2H+OKt4kqsOvNd8kBpV65zoxbA4BVsEOB3ARVWQki/DHzaUoC5KuON/BiccDaCCTZBuOcfZs70kR8bQ=="
++						}
++					}
++				},
++				"react-is": {
++					"version": "18.2.0",
++					"resolved": "https://registry.npmjs.org/react-is/-/react-is-18.2.0.tgz",
++					"integrity": "sha512-xWGDIW6x921xtzPkhiULtthJHoJvBbF3q26fzloPCK0hsvxtPVelvftw3zjbHWSkR2km9Z+4uxbDDK/6Zw9B8w=="
++				},
++				"react-transition-group": {
++					"version": "4.4.5",
++					"resolved": "https://registry.npmjs.org/react-transition-group/-/react-transition-group-4.4.5.tgz",
++					"integrity": "sha512-pZcd1MCJoiKiBR2NRxeCRg13uCXbydPnmB4EOeRrY7480qNWO8IIgQG6zlDkm6uRMsURXPuKq0GWtiM59a5Q6g==",
++					"requires": {
++						"@babel/runtime": "^7.5.5",
++						"dom-helpers": "^5.0.1",
++						"loose-envify": "^1.4.0",
++						"prop-types": "^15.6.2"
++					}
++				}
++			}
++		},
++		"@mui/private-theming": {
++			"version": "5.9.3",
++			"resolved": "https://registry.npmjs.org/@mui/private-theming/-/private-theming-5.9.3.tgz",
++			"integrity": "sha512-Ys3WO39WqoGciGX9k5AIi/k2zJhlydv4FzlEEwtw9OqdMaV0ydK/TdZekKzjP9sTI/JcdAP3H5DWtUaPLQJjWg==",
++			"requires": {
++				"@babel/runtime": "^7.17.2",
++				"@mui/utils": "^5.9.3",
++				"prop-types": "^15.8.1"
++			},
++			"dependencies": {
++				"prop-types": {
++					"version": "15.8.1",
++					"resolved": "https://registry.npmjs.org/prop-types/-/prop-types-15.8.1.tgz",
++					"integrity": "sha512-oj87CgZICdulUohogVAR7AjlC0327U4el4L6eAvOqCeudMDVU0NThNaV+b9Df4dXgSP1gXMTnPdhfe/2qDH5cg==",
++					"requires": {
++						"loose-envify": "^1.4.0",
++						"object-assign": "^4.1.1",
++						"react-is": "^16.13.1"
++					}
++				},
++				"react-is": {
++					"version": "16.13.1",
++					"resolved": "https://registry.npmjs.org/react-is/-/react-is-16.13.1.tgz",
++					"integrity": "sha512-24e6ynE2H+OKt4kqsOvNd8kBpV65zoxbA4BVsEOB3ARVWQki/DHzaUoC5KuON/BiccDaCCTZBuOcfZs70kR8bQ=="
++				}
++			}
++		},
++		"@mui/styled-engine": {
++			"version": "5.10.2",
++			"resolved": "https://registry.npmjs.org/@mui/styled-engine/-/styled-engine-5.10.2.tgz",
++			"integrity": "sha512-YqnptNQ2E0cWwOTmLCEvrddiiR/neUfn2AD/4TDUXZu8B2n7NfDb9d3bAUfWZV+KmulQdAedoaZDqyXBFGLdbQ==",
++			"requires": {
++				"@babel/runtime": "^7.17.2",
++				"@emotion/cache": "^11.10.1",
++				"csstype": "^3.1.0",
++				"prop-types": "^15.8.1"
++			},
++			"dependencies": {
++				"prop-types": {
++					"version": "15.8.1",
++					"resolved": "https://registry.npmjs.org/prop-types/-/prop-types-15.8.1.tgz",
++					"integrity": "sha512-oj87CgZICdulUohogVAR7AjlC0327U4el4L6eAvOqCeudMDVU0NThNaV+b9Df4dXgSP1gXMTnPdhfe/2qDH5cg==",
++					"requires": {
++						"loose-envify": "^1.4.0",
++						"object-assign": "^4.1.1",
++						"react-is": "^16.13.1"
++					}
++				},
++				"react-is": {
++					"version": "16.13.1",
++					"resolved": "https://registry.npmjs.org/react-is/-/react-is-16.13.1.tgz",
++					"integrity": "sha512-24e6ynE2H+OKt4kqsOvNd8kBpV65zoxbA4BVsEOB3ARVWQki/DHzaUoC5KuON/BiccDaCCTZBuOcfZs70kR8bQ=="
++				}
++			}
++		},
++		"@mui/system": {
++			"version": "5.10.2",
++			"resolved": "https://registry.npmjs.org/@mui/system/-/system-5.10.2.tgz",
++			"integrity": "sha512-YudwJhLcEoQiwCAmzeMr9P3ISiVGNsxBIIPzFxaGwJ8+mMrx3qoPVOV2sfm0ZuNiQuABshEw4KqHa5ftNC+pOQ==",
++			"requires": {
++				"@babel/runtime": "^7.17.2",
++				"@mui/private-theming": "^5.9.3",
++				"@mui/styled-engine": "^5.10.2",
++				"@mui/types": "^7.1.5",
++				"@mui/utils": "^5.9.3",
++				"clsx": "^1.2.1",
++				"csstype": "^3.1.0",
++				"prop-types": "^15.8.1"
++			},
++			"dependencies": {
++				"prop-types": {
++					"version": "15.8.1",
++					"resolved": "https://registry.npmjs.org/prop-types/-/prop-types-15.8.1.tgz",
++					"integrity": "sha512-oj87CgZICdulUohogVAR7AjlC0327U4el4L6eAvOqCeudMDVU0NThNaV+b9Df4dXgSP1gXMTnPdhfe/2qDH5cg==",
++					"requires": {
++						"loose-envify": "^1.4.0",
++						"object-assign": "^4.1.1",
++						"react-is": "^16.13.1"
++					}
++				},
++				"react-is": {
++					"version": "16.13.1",
++					"resolved": "https://registry.npmjs.org/react-is/-/react-is-16.13.1.tgz",
++					"integrity": "sha512-24e6ynE2H+OKt4kqsOvNd8kBpV65zoxbA4BVsEOB3ARVWQki/DHzaUoC5KuON/BiccDaCCTZBuOcfZs70kR8bQ=="
++				}
++			}
++		},
++		"@mui/types": {
++			"version": "7.1.5",
++			"resolved": "https://registry.npmjs.org/@mui/types/-/types-7.1.5.tgz",
++			"integrity": "sha512-HnRXrxgHJYJcT8ZDdDCQIlqk0s0skOKD7eWs9mJgBUu70hyW4iA6Kiv3yspJR474RFH8hysKR65VVSzUSzkuwA==",
++			"requires": {}
++		},
++		"@mui/utils": {
++			"version": "5.9.3",
++			"resolved": "https://registry.npmjs.org/@mui/utils/-/utils-5.9.3.tgz",
++			"integrity": "sha512-l0N5bcrenE9hnwZ/jPecpIRqsDFHkPXoFUcmkgysaJwVZzJ3yQkGXB47eqmXX5yyGrSc6HksbbqXEaUya+siew==",
++			"requires": {
++				"@babel/runtime": "^7.17.2",
++				"@types/prop-types": "^15.7.5",
++				"@types/react-is": "^16.7.1 || ^17.0.0",
++				"prop-types": "^15.8.1",
++				"react-is": "^18.2.0"
++			},
++			"dependencies": {
++				"prop-types": {
++					"version": "15.8.1",
++					"resolved": "https://registry.npmjs.org/prop-types/-/prop-types-15.8.1.tgz",
++					"integrity": "sha512-oj87CgZICdulUohogVAR7AjlC0327U4el4L6eAvOqCeudMDVU0NThNaV+b9Df4dXgSP1gXMTnPdhfe/2qDH5cg==",
++					"requires": {
++						"loose-envify": "^1.4.0",
++						"object-assign": "^4.1.1",
++						"react-is": "^16.13.1"
++					},
++					"dependencies": {
++						"react-is": {
++							"version": "16.13.1",
++							"resolved": "https://registry.npmjs.org/react-is/-/react-is-16.13.1.tgz",
++							"integrity": "sha512-24e6ynE2H+OKt4kqsOvNd8kBpV65zoxbA4BVsEOB3ARVWQki/DHzaUoC5KuON/BiccDaCCTZBuOcfZs70kR8bQ=="
++						}
++					}
++				},
++				"react-is": {
++					"version": "18.2.0",
++					"resolved": "https://registry.npmjs.org/react-is/-/react-is-18.2.0.tgz",
++					"integrity": "sha512-xWGDIW6x921xtzPkhiULtthJHoJvBbF3q26fzloPCK0hsvxtPVelvftw3zjbHWSkR2km9Z+4uxbDDK/6Zw9B8w=="
++				}
++			}
++		},
+ 		"@nodelib/fs.scandir": {
+ 			"version": "2.1.5",
+ 			"integrity": "sha512-vq24Bq3ym5HEQm2NKCr3yXDwjc7vTsEThRDnkp2DK9p1uqLR+DHurm/NOTo0KG7HYHU7eppKZj3MyqYuMBf62g==",
+@@ -16514,12 +17476,12 @@
+ 		},
+ 		"@types/parse-json": {
+ 			"version": "4.0.0",
+-			"integrity": "sha512-//oorEZjL6sbPcKUaCdIGlIUeH26mgzimjBB77G6XRgnDl/L5wOnpyBGRe/Mmf5CVW3PwEBE1NjiMZ/ssFh4wA==",
+-			"dev": true
++			"integrity": "sha512-//oorEZjL6sbPcKUaCdIGlIUeH26mgzimjBB77G6XRgnDl/L5wOnpyBGRe/Mmf5CVW3PwEBE1NjiMZ/ssFh4wA=="
+ 		},
+ 		"@types/prop-types": {
+-			"version": "15.7.4",
+-			"integrity": "sha512-rZ5drC/jWjrArrS8BR6SIr4cWpW09RNTYt9AMZo3Jwwif+iacXAqgVjm0B0Bv/S1jhDXKHqRVNCbACkJ89RAnQ=="
++			"version": "15.7.5",
++			"resolved": "https://registry.npmjs.org/@types/prop-types/-/prop-types-15.7.5.tgz",
++			"integrity": "sha512-JCB8C6SnDoQf0cNycqd/35A7MjcnK+ZTqE7judS6o7utxUCg6imJg3QK2qzHKszlTjcj2cn+NwMB2i96ubpj7w=="
+ 		},
+ 		"@types/qs": {
+ 			"version": "6.9.7",
+@@ -16546,6 +17508,14 @@
+ 			"dev": true,
+ 			"requires": {
+ 				"@types/react": "*"
++			}
++		},
++		"@types/react-is": {
++			"version": "17.0.3",
++			"resolved": "https://registry.npmjs.org/@types/react-is/-/react-is-17.0.3.tgz",
++			"integrity": "sha512-aBTIWg1emtu95bLTLx0cpkxwGW3ueZv71nE2YFBpL8k/z5czEW8yYpOo8Dp+UUAFAtKwNaOsh/ioSeQnWlZcfw==",
++			"requires": {
++				"@types/react": "*"
+ 			}
+ 		},
+ 		"@types/react-redux": {
+@@ -16584,6 +17554,14 @@
+ 				"@types/react-router": "*"
+ 			}
+ 		},
++		"@types/react-transition-group": {
++			"version": "4.4.5",
++			"resolved": "https://registry.npmjs.org/@types/react-transition-group/-/react-transition-group-4.4.5.tgz",
++			"integrity": "sha512-juKD/eiSM3/xZYzjuzH6ZwpP+/lejltmiS3QEzV/vmb/Q8+HfDmxu+Baga8UEMGBqV88Nbg4l2hY/K2DkyaLLA==",
++			"requires": {
++				"@types/react": "*"
++			}
++		},
+ 		"@types/retry": {
+ 			"version": "0.12.1",
+ 			"integrity": "sha512-xoDlM2S4ortawSWORYqsdU+2rxdh4LRW9ytc3zmT37RIKQh6IHyKwwtKhKis9ah8ol07DCkZxPt8BBvPjC6v4g==",
+@@ -17589,6 +18567,16 @@
+ 				"@types/babel__traverse": "^7.0.6"
+ 			}
+ 		},
++		"babel-plugin-macros": {
++			"version": "3.1.0",
++			"resolved": "https://registry.npmjs.org/babel-plugin-macros/-/babel-plugin-macros-3.1.0.tgz",
++			"integrity": "sha512-Cg7TFGpIr01vOQNODXOOaGz2NpCU5gl8x1qJFbb6hbZxR7XrcE2vtbAsTAbJ7/xwJtUuJEw8K8Zr/AE0LHlesg==",
++			"requires": {
++				"@babel/runtime": "^7.12.5",
++				"cosmiconfig": "^7.0.0",
++				"resolve": "^1.19.0"
++			}
++		},
+ 		"babel-plugin-styled-components": {
+ 			"version": "2.0.1",
+ 			"integrity": "sha512-U3wmORxerYBiqcRCo6thItIosEIga3F+ph0jJPkiOZJjyhpZyUZFQV9XvrZ2CbBIihJ3rDBC/itQ+Wx3VHMauw==",
+@@ -17783,8 +18771,7 @@
+ 		},
+ 		"callsites": {
+ 			"version": "3.1.0",
+-			"integrity": "sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==",
+-			"dev": true
++			"integrity": "sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ=="
+ 		},
+ 		"camel-case": {
+ 			"version": "4.1.2",
+@@ -17932,6 +18919,11 @@
+ 			"integrity": "sha512-JQHZ2QMW6l3aH/j6xCqQThY/9OH4D/9ls34cgkUBiEeocRTU04tHfKPBsUK1PqZCUQM7GiA0IIXJSuXHI64Kbg==",
+ 			"dev": true
+ 		},
++		"clsx": {
++			"version": "1.2.1",
++			"resolved": "https://registry.npmjs.org/clsx/-/clsx-1.2.1.tgz",
++			"integrity": "sha512-EcR6r5a8bj6pu3ycsa/E/cKVGuTgZJZdsyUYHOksG/UHIiKfjxzRxYJpyVBwYaQeOvghal9fcc4PidlgzugAQg=="
++		},
+ 		"color-convert": {
+ 			"version": "1.9.3",
+ 			"integrity": "sha512-QfAUtd+vFdAtFQcC8CCyYt1fYWxSqAiK2cSD6zDB8N3cpsEBAvRxp9zOGg6G/SHHJYAT88/az/IuDGALsNVbGg==",
+@@ -18094,7 +19086,6 @@
+ 		"convert-source-map": {
+ 			"version": "1.8.0",
+ 			"integrity": "sha512-+OQdjP49zViI/6i7nIJpA8rAl4sV/JdPfU9nZs3VqOwGIgizICvuN2ru6fMd+4llL0tar18UYJXfZ/TWtmhUjA==",
+-			"dev": true,
+ 			"requires": {
+ 				"safe-buffer": "~5.1.1"
+ 			}
+@@ -18190,7 +19181,6 @@
+ 		"cosmiconfig": {
+ 			"version": "7.0.1",
+ 			"integrity": "sha512-a1YWNUV2HwGimB7dU2s1wUMurNKjpx60HxBB6xUM8Re+2s1g1IIfJvFR0/iCF+XHdE0GMTKTuLR32UQff4TEyQ==",
+-			"dev": true,
+ 			"requires": {
+ 				"@types/parse-json": "^4.0.0",
+ 				"import-fresh": "^3.2.1",
+@@ -18275,8 +19265,9 @@
+ 			"dev": true
+ 		},
+ 		"csstype": {
+-			"version": "3.0.10",
+-			"integrity": "sha512-2u44ZG2OcNUO9HDp/Jl8C07x6pU/eTR3ncV91SiK3dhG9TWvRVsCoJw14Ckx5DgWkzGA3waZWO3d7pgqpUI/XA=="
++			"version": "3.1.0",
++			"resolved": "https://registry.npmjs.org/csstype/-/csstype-3.1.0.tgz",
++			"integrity": "sha512-uX1KG+x9h5hIJsaKR9xHUeUraxf8IODOwq9JLNPq6BwB04a/xgpq3rcx47l5BZu5zBPlgD342tdke3Hom/nJRA=="
+ 		},
+ 		"damerau-levenshtein": {
+ 			"version": "1.0.8",
+@@ -18606,7 +19597,6 @@
+ 		"error-ex": {
+ 			"version": "1.3.2",
+ 			"integrity": "sha512-7dFHNmqeFSEt2ZBsCriorKnn3Z2pj+fd9kmI6QoWw4//DL+icEBfc0U7qJCisqrTsKTjw4fNFy2pW9OqStD84g==",
+-			"dev": true,
+ 			"requires": {
+ 				"is-arrayish": "^0.2.1"
+ 			}
+@@ -19397,8 +20387,7 @@
+ 		},
+ 		"find-root": {
+ 			"version": "1.1.0",
+-			"integrity": "sha512-NKfW6bec6GfKc0SGx1e07QZY9PE99u0Bft/0rzSD5k3sO/vwkVUpDUKVm5Gpp5Ue3YfShPFTX2070tDs5kB9Ng==",
+-			"dev": true
++			"integrity": "sha512-NKfW6bec6GfKc0SGx1e07QZY9PE99u0Bft/0rzSD5k3sO/vwkVUpDUKVm5Gpp5Ue3YfShPFTX2070tDs5kB9Ng=="
+ 		},
+ 		"find-up": {
+ 			"version": "5.0.0",
+@@ -19470,8 +20459,7 @@
+ 		},
+ 		"function-bind": {
+ 			"version": "1.1.1",
+-			"integrity": "sha512-yIovAzMX49sF8Yl58fSCWJ5svSLuaibPxXQJFLmBObTuCr0Mf1KiPopGM9NiFjiYBCbfaa2Fh6breQ6ANVTI0A==",
+-			"dev": true
++			"integrity": "sha512-yIovAzMX49sF8Yl58fSCWJ5svSLuaibPxXQJFLmBObTuCr0Mf1KiPopGM9NiFjiYBCbfaa2Fh6breQ6ANVTI0A=="
+ 		},
+ 		"functional-red-black-tree": {
+ 			"version": "1.0.1",
+@@ -19480,8 +20468,7 @@
+ 		},
+ 		"gensync": {
+ 			"version": "1.0.0-beta.2",
+-			"integrity": "sha512-3hN7NaskYvMDLQY55gnW3NQ+mesEAepTqlg+VEbj7zzqEMBVNhzcGYYeqFo/TlYz6eQiFcp1HcsCZO+nGgS8zg==",
+-			"dev": true
++			"integrity": "sha512-3hN7NaskYvMDLQY55gnW3NQ+mesEAepTqlg+VEbj7zzqEMBVNhzcGYYeqFo/TlYz6eQiFcp1HcsCZO+nGgS8zg=="
+ 		},
+ 		"get-caller-file": {
+ 			"version": "2.0.5",
+@@ -19674,7 +20661,6 @@
+ 		"has": {
+ 			"version": "1.0.3",
+ 			"integrity": "sha512-f2dvO0VU6Oej7RkWJGrehjbzMAjFp5/VKPp5tTpWIV4JHHZK1/BxbFRtf/siA2SWTe09caDmVtYYzWEIbBS4zw==",
+-			"dev": true,
+ 			"requires": {
+ 				"function-bind": "^1.1.1"
+ 			}
+@@ -19925,7 +20911,6 @@
+ 		"import-fresh": {
+ 			"version": "3.3.0",
+ 			"integrity": "sha512-veYYhQa+D1QBKznvhUHxb8faxlrwUnxseDAbAp457E0wLNio2bOSKnjYDhMj+YiAq61xrMGhQk9iXVk5FzgQMw==",
+-			"dev": true,
+ 			"requires": {
+ 				"parent-module": "^1.0.0",
+ 				"resolve-from": "^4.0.0"
+@@ -19933,8 +20918,7 @@
+ 			"dependencies": {
+ 				"resolve-from": {
+ 					"version": "4.0.0",
+-					"integrity": "sha512-pb/MYmXstAkysRFx8piNI1tGFNQIFA3vkE3Gq4EuA1dF6gHp/+vgZqsCGJapvy8N3Q+4o7FwvquPJcnZ7RYy4g==",
+-					"dev": true
++					"integrity": "sha512-pb/MYmXstAkysRFx8piNI1tGFNQIFA3vkE3Gq4EuA1dF6gHp/+vgZqsCGJapvy8N3Q+4o7FwvquPJcnZ7RYy4g=="
+ 				}
+ 			}
+ 		},
+@@ -20009,8 +20993,7 @@
+ 		},
+ 		"is-arrayish": {
+ 			"version": "0.2.1",
+-			"integrity": "sha512-zz06S8t0ozoDXMG+ube26zeCTNXcKIPJZJi8hBrF4idCLms4CG9QtK7qBl1boi5ODzFpjswb5JPmHCbMpjaYzg==",
+-			"dev": true
++			"integrity": "sha512-zz06S8t0ozoDXMG+ube26zeCTNXcKIPJZJi8hBrF4idCLms4CG9QtK7qBl1boi5ODzFpjswb5JPmHCbMpjaYzg=="
+ 		},
+ 		"is-bigint": {
+ 			"version": "1.0.4",
+@@ -20057,7 +21040,6 @@
+ 		"is-core-module": {
+ 			"version": "2.8.1",
+ 			"integrity": "sha512-SdNCUs284hr40hFTFP6l0IfZ/RSrMXF3qgoRHd3/79unUTvrFO/JoXwkGm+5J/Oe3E/b5GsnG330uUNgRpu1PA==",
+-			"dev": true,
+ 			"requires": {
+ 				"has": "^1.0.3"
+ 			}
+@@ -20375,8 +21357,7 @@
+ 		},
+ 		"json-parse-even-better-errors": {
+ 			"version": "2.3.1",
+-			"integrity": "sha512-xyFwyhro/JEof6Ghe2iz2NcXoj2sloNsWr/XsERDK/oiPCfaNhl5ONfp+jQdAZRQQ0IJWNzH9zIZF7li91kh2w==",
+-			"dev": true
++			"integrity": "sha512-xyFwyhro/JEof6Ghe2iz2NcXoj2sloNsWr/XsERDK/oiPCfaNhl5ONfp+jQdAZRQQ0IJWNzH9zIZF7li91kh2w=="
+ 		},
+ 		"json-schema-traverse": {
+ 			"version": "0.4.1",
+@@ -20514,8 +21495,7 @@
+ 		},
+ 		"lines-and-columns": {
+ 			"version": "1.2.4",
+-			"integrity": "sha512-7ylylesZQ/PV29jhEDl3Ufjo6ZX7gCqJr5F7PKrqc93v7fzSymt1BpwEU8nAUXs8qzzvqhbjhK5QZg6Mt/HkBg==",
+-			"dev": true
++			"integrity": "sha512-7ylylesZQ/PV29jhEDl3Ufjo6ZX7gCqJr5F7PKrqc93v7fzSymt1BpwEU8nAUXs8qzzvqhbjhK5QZg6Mt/HkBg=="
+ 		},
+ 		"loader-runner": {
+ 			"version": "4.2.0",
+@@ -21699,7 +22679,6 @@
+ 		"parent-module": {
+ 			"version": "1.0.1",
+ 			"integrity": "sha512-GQ2EWRpQV8/o+Aw8YqtfZZPfNRWZYkbidE9k5rpl/hC3vtHHBfGm2Ifi6qWV+coDGkrUKZAxE3Lot5kcsRlh+g==",
+-			"dev": true,
+ 			"requires": {
+ 				"callsites": "^3.0.0"
+ 			}
+@@ -21707,7 +22686,6 @@
+ 		"parse-json": {
+ 			"version": "5.2.0",
+ 			"integrity": "sha512-ayCKvm/phCGxOkYRSCM82iDwct8/EonSEgCSxWxD7ve6jHggsFl4fZVQBPRNgQoKiuV/odhFrGzQXZwbifC8Rg==",
+-			"dev": true,
+ 			"requires": {
+ 				"@babel/code-frame": "^7.0.0",
+ 				"error-ex": "^1.3.1",
+@@ -21757,8 +22735,7 @@
+ 		},
+ 		"path-parse": {
+ 			"version": "1.0.7",
+-			"integrity": "sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw==",
+-			"dev": true
++			"integrity": "sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw=="
+ 		},
+ 		"path-to-regexp": {
+ 			"version": "1.8.0",
+@@ -21769,8 +22746,7 @@
+ 		},
+ 		"path-type": {
+ 			"version": "4.0.0",
+-			"integrity": "sha512-gDKb8aZMDeD/tZWs9P6+q0J9Mwkdl6xMV8TjnGP3qJVJ06bdMgkbBlLU8IdfOsIsFz2BW1rNVT3XuNEl8zPAvw==",
+-			"dev": true
++			"integrity": "sha512-gDKb8aZMDeD/tZWs9P6+q0J9Mwkdl6xMV8TjnGP3qJVJ06bdMgkbBlLU8IdfOsIsFz2BW1rNVT3XuNEl8zPAvw=="
+ 		},
+ 		"pdfjs-dist": {
+ 			"version": "2.12.313",
+@@ -22753,7 +23729,6 @@
+ 		"resolve": {
+ 			"version": "1.22.0",
+ 			"integrity": "sha512-Hhtrw0nLeSrFQ7phPp4OOcVjLPIeMnRlr5mcnVuMe7M/7eBn98A3hmFRLoFo3DLZkivSYwhRUJTyPyWAk56WLw==",
+-			"dev": true,
+ 			"requires": {
+ 				"is-core-module": "^2.8.1",
+ 				"path-parse": "^1.0.7",
+@@ -22896,8 +23871,7 @@
+ 		},
+ 		"semver": {
+ 			"version": "6.3.0",
+-			"integrity": "sha512-b39TBaTSfV6yBrapU89p5fKekE2m/NwnDocOVruQFS1/veMgdzuPcnOM34M6CwxW8jH/lxEa5rBoDeUwu5HHTw==",
+-			"dev": true
++			"integrity": "sha512-b39TBaTSfV6yBrapU89p5fKekE2m/NwnDocOVruQFS1/veMgdzuPcnOM34M6CwxW8jH/lxEa5rBoDeUwu5HHTw=="
+ 		},
+ 		"send": {
+ 			"version": "0.17.2",
+@@ -23349,6 +24323,11 @@
+ 				"supports-color": "^5.5.0"
+ 			}
+ 		},
++		"stylis": {
++			"version": "4.0.13",
++			"resolved": "https://registry.npmjs.org/stylis/-/stylis-4.0.13.tgz",
++			"integrity": "sha512-xGPXiFVl4YED9Jh7Euv2V220mriG9u4B2TA6Ybjc1catrstKD2PpIdU3U0RKpkVBC2EhmL/F0sPCr9vrFTNRag=="
++		},
+ 		"supports-color": {
+ 			"version": "5.5.0",
+ 			"integrity": "sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==",
+@@ -23358,8 +24337,7 @@
+ 		},
+ 		"supports-preserve-symlinks-flag": {
+ 			"version": "1.0.0",
+-			"integrity": "sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w==",
+-			"dev": true
++			"integrity": "sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w=="
+ 		},
+ 		"table": {
+ 			"version": "6.8.0",
+@@ -24254,8 +25232,7 @@
+ 		},
+ 		"yaml": {
+ 			"version": "1.10.2",
+-			"integrity": "sha512-r3vXyErRCYJ7wg28yvBY5VSoAF8ZvlcW9/BwUzEtUsjvX/DKs24dIkuwjtuprwJJHsbyUbLApepYTR1BN4uHrg==",
+-			"dev": true
++			"integrity": "sha512-r3vXyErRCYJ7wg28yvBY5VSoAF8ZvlcW9/BwUzEtUsjvX/DKs24dIkuwjtuprwJJHsbyUbLApepYTR1BN4uHrg=="
+ 		},
+ 		"yargs": {
+ 			"version": "17.3.1",
Index: src/views/sidebar/delete-modal.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport React, { FC, useCallback, useContext } from 'react';\nimport { FOLDERS, report } from '@zextras/carbonio-shell-ui';\nimport { Container, Text, Divider, SnackbarManagerContext } from '@zextras/carbonio-design-system';\nimport { useTranslation } from 'react-i18next';\nimport { useDispatch } from 'react-redux';\nimport { startsWith } from 'lodash';\nimport ModalFooter from './commons/modal-footer';\nimport { ModalHeader } from './commons/modal-header';\nimport { folderAction } from '../../store/actions/folder-action';\nimport { ModalProps } from '../../types';\nimport { FOLDER_ACTIONS } from '../../commons/utilities';\n\nexport const DeleteModal: FC<ModalProps> = ({ folder, onClose }) => {\n\tconst [t] = useTranslation();\n\tconst dispatch = useDispatch();\n\t// eslint-disable-next-line @typescript-eslint/ban-types\n\tconst createSnackbar = useContext(SnackbarManagerContext) as Function;\n\tconst onConfirm = useCallback(() => {\n\t\tlet inTrash = false;\n\t\tconst restoreFolder = (): void =>\n\t\t\tdispatch(\n\t\t\t\tfolderAction({ folder: folder.folder, l: folder.folder?.parent, op: FOLDER_ACTIONS.MOVE })\n\t\t\t)\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t\t// @ts-ignore\n\t\t\t\t.then((res) => {\n\t\t\t\t\tif (res.type.includes('fulfilled')) {\n\t\t\t\t\t\tcreateSnackbar({\n\t\t\t\t\t\t\tkey: `trash-folder`,\n\t\t\t\t\t\t\treplace: true,\n\t\t\t\t\t\t\ttype: 'success',\n\t\t\t\t\t\t\tlabel: t('messages.snackbar.folder_restored', 'Folder restored'),\n\t\t\t\t\t\t\tautoHideTimeout: 3000,\n\t\t\t\t\t\t\thideButton: true\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcreateSnackbar({\n\t\t\t\t\t\t\tkey: `trash`,\n\t\t\t\t\t\t\treplace: true,\n\t\t\t\t\t\t\ttype: 'error',\n\t\t\t\t\t\t\tlabel: t('label.error_try_again', 'Something went wrong, please try again'),\n\t\t\t\t\t\t\tautoHideTimeout: 3000,\n\t\t\t\t\t\t\thideButton: true\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.catch(report);\n\n\t\tif (startsWith(folder.folder?.absFolderPath, '/Trash')) {\n\t\t\tinTrash = true;\n\t\t}\n\t\tdispatch(\n\t\t\tfolderAction({\n\t\t\t\tfolder: folder.folder,\n\t\t\t\tl: FOLDERS.TRASH,\n\t\t\t\top: inTrash ? FOLDER_ACTIONS.DELETE : FOLDER_ACTIONS.MOVE\n\t\t\t})\n\t\t)\n\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t// @ts-ignore\n\t\t\t.then((res: { type: string }) => {\n\t\t\t\tif (res.type.includes('fulfilled')) {\n\t\t\t\t\tcreateSnackbar({\n\t\t\t\t\t\tkey: `trash-folder`,\n\t\t\t\t\t\treplace: true,\n\t\t\t\t\t\ttype: 'info',\n\t\t\t\t\t\tlabel: inTrash\n\t\t\t\t\t\t\t? t('messages.snackbar.folder_deleted', 'Folder permanently deleted.')\n\t\t\t\t\t\t\t: t('messages.snackbar.folder_moved_to_trash', 'Folder moved to trash'),\n\t\t\t\t\t\tautoHideTimeout: 5000,\n\t\t\t\t\t\thideButton: false,\n\t\t\t\t\t\tactionLabel: 'Undo',\n\t\t\t\t\t\tonActionClick: () => restoreFolder()\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tcreateSnackbar({\n\t\t\t\t\t\tkey: `trash`,\n\t\t\t\t\t\treplace: true,\n\t\t\t\t\t\ttype: 'error',\n\t\t\t\t\t\tlabel: t('label.error_try_again', 'Something went wrong, please try again'),\n\t\t\t\t\t\tautoHideTimeout: 3000,\n\t\t\t\t\t\thideButton: true\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(report);\n\t\tonClose();\n\t}, [folder, dispatch, onClose, createSnackbar, t]);\n\n\treturn folder.folder ? (\n\t\t<Container\n\t\t\tpadding={{ all: 'large' }}\n\t\t\tmainAlignment=\"center\"\n\t\t\tcrossAlignment=\"flex-start\"\n\t\t\theight=\"fit\"\n\t\t>\n\t\t\t<ModalHeader\n\t\t\t\ttitle={`${t('label.delete', 'Delete')} ${folder.folder?.name}`}\n\t\t\t\tonClose={onClose}\n\t\t\t/>\n\t\t\t<Container\n\t\t\t\tpadding={{ all: 'small' }}\n\t\t\t\tmainAlignment=\"center\"\n\t\t\t\tcrossAlignment=\"flex-start\"\n\t\t\t\theight=\"fit\"\n\t\t\t>\n\t\t\t\t{startsWith(folder.folder?.absFolderPath, '/Trash') ? (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<Text overflow=\"break-word\">\n\t\t\t\t\t\t\t{t(\n\t\t\t\t\t\t\t\t'folder_panel.modal.delete.body.message2',\n\t\t\t\t\t\t\t\t'Do you want to delete the selected folder permanently?'\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</Text>\n\t\t\t\t\t\t<Text overflow=\"break-word\">\n\t\t\t\t\t\t\t{t(\n\t\t\t\t\t\t\t\t'folder_panel.modal.delete.body.message4',\n\t\t\t\t\t\t\t\t'If you delete it, all the related content will be permanently removed and the folder will no longer be recoverable.'\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</Text>\n\t\t\t\t\t</>\n\t\t\t\t) : (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<Text overflow=\"break-word\">\n\t\t\t\t\t\t\t{t(\n\t\t\t\t\t\t\t\t'folder_panel.modal.delete.body.message1',\n\t\t\t\t\t\t\t\t'Do you want to delete the selected folder?'\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</Text>\n\t\t\t\t\t\t<Text overflow=\"break-word\">\n\t\t\t\t\t\t\t{t(\n\t\t\t\t\t\t\t\t'folder_panel.modal.delete.body.message3',\n\t\t\t\t\t\t\t\t'If you delete it, all the related content will be moved to Trash and the folder will no longer be visible.'\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</Text>\n\t\t\t\t\t</>\n\t\t\t\t)}\n\t\t\t</Container>\n\t\t\t<Divider />\n\t\t\t<ModalFooter\n\t\t\t\tonConfirm={onConfirm}\n\t\t\t\tsecondaryAction={onClose}\n\t\t\t\tlabel={t('action.ok', 'Ok')}\n\t\t\t\tcolor=\"error\"\n\t\t\t/>\n\t\t</Container>\n\t) : (\n\t\t<></>\n\t);\n};\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/views/sidebar/delete-modal.tsx b/src/views/sidebar/delete-modal.tsx
--- a/src/views/sidebar/delete-modal.tsx	(revision d8bea371a1253f951f0f0ff48819868807c68aa7)
+++ b/src/views/sidebar/delete-modal.tsx	(date 1662121371000)
@@ -24,7 +24,11 @@
 		let inTrash = false;
 		const restoreFolder = (): void =>
 			dispatch(
-				folderAction({ folder: folder.folder, l: folder.folder?.parent, op: FOLDER_ACTIONS.MOVE })
+				folderAction({
+					folder,
+					l: folder.parent as unknown as string,
+					op: FOLDER_ACTIONS.MOVE
+				})
 			)
 				// eslint-disable-next-line @typescript-eslint/ban-ts-comment
 				// @ts-ignore
@@ -51,12 +55,12 @@
 				})
 				.catch(report);
 
-		if (startsWith(folder.folder?.absFolderPath, '/Trash')) {
+		if (startsWith(folder.absFolderPath, '/Trash')) {
 			inTrash = true;
 		}
 		dispatch(
 			folderAction({
-				folder: folder.folder,
+				folder,
 				l: FOLDERS.TRASH,
 				op: inTrash ? FOLDER_ACTIONS.DELETE : FOLDER_ACTIONS.MOVE
 			})
@@ -92,24 +96,21 @@
 		onClose();
 	}, [folder, dispatch, onClose, createSnackbar, t]);
 
-	return folder.folder ? (
+	return folder ? (
 		<Container
 			padding={{ all: 'large' }}
 			mainAlignment="center"
 			crossAlignment="flex-start"
 			height="fit"
 		>
-			<ModalHeader
-				title={`${t('label.delete', 'Delete')} ${folder.folder?.name}`}
-				onClose={onClose}
-			/>
+			<ModalHeader title={`${t('label.delete', 'Delete')} ${folder.name}`} onClose={onClose} />
 			<Container
 				padding={{ all: 'small' }}
 				mainAlignment="center"
 				crossAlignment="flex-start"
 				height="fit"
 			>
-				{startsWith(folder.folder?.absFolderPath, '/Trash') ? (
+				{startsWith(folder.absFolderPath, '/Trash') ? (
 					<>
 						<Text overflow="break-word">
 							{t(
Index: .idea/shelf/Changes2/shelved.patch
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/shelf/Changes2/shelved.patch b/.idea/shelf/Changes2/shelved.patch
new file mode 100644
--- /dev/null	(date 1661935986000)
+++ b/.idea/shelf/Changes2/shelved.patch	(date 1661935986000)
@@ -0,0 +1,5298 @@
+Index: .idea/shelf/fix__shared_with_information_on_edit_folder_modal.xml
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/.idea/shelf/fix__shared_with_information_on_edit_folder_modal.xml b/.idea/shelf/fix__shared_with_information_on_edit_folder_modal.xml
+new file mode 100644
+--- /dev/null	(date 1661932451823)
++++ b/.idea/shelf/fix__shared_with_information_on_edit_folder_modal.xml	(date 1661932451823)
+@@ -0,0 +1,4 @@
++<changelist name="fix__shared_with_information_on_edit_folder_modal" date="1660292803725" recycled="false">
++  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/fix__shared_with_information_on_edit_folder_modal/shelved.patch" />
++  <option name="DESCRIPTION" value="fix: shared with information on edit folder modal" />
++</changelist>
+\ No newline at end of file
+Index: src/hooks/use-get-tags-accordions.tsx
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>/*\n * SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport React, { FC, useCallback, useContext, useMemo } from 'react';\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nimport { useTags, ZIMBRA_STANDARD_COLORS, runSearch } from '@zextras/carbonio-shell-ui';\nimport {\n\tAccordionItem,\n\tDropdown,\n\tRow,\n\tIcon,\n\tPadding,\n\tTooltip,\n\tModalManagerContext\n} from '@zextras/carbonio-design-system';\nimport { reduce } from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { createTag, useGetTagsActions } from '../ui-actions/tag-actions';\nimport { ItemType, TagsAccordionItems } from '../types';\n\ntype ItemProps = {\n\titem: ItemType;\n};\n\nconst CustomComp: FC<ItemProps> = (props) => {\n\tconst [t] = useTranslation();\n\tconst actions = useGetTagsActions({ tag: props?.item, t });\n\n\tconst triggerSearch = useCallback(\n\t\t() =>\n\t\t\trunSearch(\n\t\t\t\t[\n\t\t\t\t\t{\n\t\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\tavatarBackground: ZIMBRA_STANDARD_COLORS[props?.item?.color || 0].hex,\n\t\t\t\t\t\tavatarIcon: 'Tag',\n\t\t\t\t\t\tbackground: 'gray2',\n\t\t\t\t\t\thasAvatar: true,\n\t\t\t\t\t\tisGeneric: false,\n\t\t\t\t\t\tisQueryFilter: true,\n\t\t\t\t\t\tlabel: `tag:${props?.item?.name}`,\n\t\t\t\t\t\tvalue: `tag:\"${props?.item?.name}\"`\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t'mails'\n\t\t\t),\n\t\t[props?.item?.color, props?.item?.name]\n\t);\n\n\treturn (\n\t\t<Dropdown contextMenu items={actions} display=\"block\" width=\"fit\" onClick={triggerSearch}>\n\t\t\t<Row mainAlignment=\"flex-start\" height=\"fit\" padding={{ left: 'large' }} takeAvailableSpace>\n\t\t\t\t<Icon\n\t\t\t\t\tsize=\"large\"\n\t\t\t\t\ticon=\"Tag\"\n\t\t\t\t\tcustomColor={ZIMBRA_STANDARD_COLORS[props?.item?.color ?? 0].hex}\n\t\t\t\t/>\n\n\t\t\t\t<Padding right=\"large\" />\n\t\t\t\t<Tooltip label={props?.item?.name} placement=\"right\" maxWidth=\"100%\">\n\t\t\t\t\t<AccordionItem {...props} height={40} />\n\t\t\t\t</Tooltip>\n\t\t\t</Row>\n\t\t</Dropdown>\n\t);\n};\n\nexport const TagLabel: FC<ItemType> = (props) => {\n\tconst createModal = useContext(ModalManagerContext) as () => () => void;\n\tconst [t] = useTranslation();\n\treturn (\n\t\t<Dropdown contextMenu display=\"block\" width=\"fit\" items={[createTag({ t, createModal })]}>\n\t\t\t<Row mainAlignment=\"flex-start\" padding={{ horizontal: 'large' }} takeAvailableSpace>\n\t\t\t\t<Icon size=\"large\" icon=\"TagsMoreOutline\" /> <Padding right=\"large\" />\n\t\t\t\t<AccordionItem {...props} height={40} />\n\t\t\t</Row>\n\t\t</Dropdown>\n\t);\n};\n\nconst useGetTagsAccordion = (): TagsAccordionItems => {\n\tconst tagsFromStore = useTags();\n\tconst [t] = useTranslation();\n\n\treturn useMemo(\n\t\t() => ({\n\t\t\tid: 'Tags',\n\t\t\tlabel: t('label.tags', 'Tags'),\n\t\t\tdivider: true,\n\t\t\tactive: false,\n\t\t\topen: false,\n\t\t\tonClick: (e: Event): void => {\n\t\t\t\te.stopPropagation();\n\t\t\t},\n\t\t\tCustomComponent: TagLabel,\n\t\t\titems: reduce(\n\t\t\t\ttagsFromStore,\n\t\t\t\t(acc: Array<ItemType>, v) => {\n\t\t\t\t\tconst item = {\n\t\t\t\t\t\tid: v.id,\n\t\t\t\t\t\tactive: false,\n\t\t\t\t\t\tcolor: v.color || 0,\n\t\t\t\t\t\tdivider: false,\n\t\t\t\t\t\tlabel: v.name,\n\t\t\t\t\t\tname: v.name,\n\t\t\t\t\t\topen: false,\n\t\t\t\t\t\tCustomComponent: CustomComp\n\t\t\t\t\t};\n\t\t\t\t\tacc.push(item);\n\t\t\t\t\treturn acc;\n\t\t\t\t},\n\t\t\t\t[]\n\t\t\t)\n\t\t}),\n\t\t[t, tagsFromStore]\n\t);\n};\n\nexport default useGetTagsAccordion;\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/hooks/use-get-tags-accordions.tsx b/src/hooks/use-get-tags-accordions.tsx
+--- a/src/hooks/use-get-tags-accordions.tsx	(revision 625354c8af746681a130d381c5881a3713632fe6)
++++ b/src/hooks/use-get-tags-accordions.tsx	(date 1661736228000)
+@@ -84,6 +84,7 @@
+ 
+ const useGetTagsAccordion = (): TagsAccordionItems => {
+ 	const tagsFromStore = useTags();
++	console.log('@@tagsFromStore', tagsFromStore);
+ 	const [t] = useTranslation();
+ 
+ 	return useMemo(
+Index: src/views/sidebar/sidebar.tsx
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport React, { useRef, FC, useContext, useMemo, useCallback, useEffect, useState } from 'react';\nimport {\n\tAccordionFolder,\n\tuseFoldersAccordionByView,\n\tuseLocalStorage\n} from '@zextras/carbonio-shell-ui';\nimport { Accordion, Container, Button, ModalManagerContext } from '@zextras/carbonio-design-system';\nimport { Route, Switch, useRouteMatch, useParams } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport { filter, isEqual, map, uniqWith } from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport CollapsedSideBarItems from './collapsed-sidebar-items';\nimport { FOLDER_VIEW } from '../../constants';\nimport { AccordionCustomComponent } from './accordion-custom-component';\nimport { getShareInfo } from '../../store/actions/get-share-info';\nimport { ResFolder } from '../../types';\nimport { SharesModal } from './shares-modal';\nimport useGetTagsAccordion from '../../hooks/use-get-tags-accordions';\n\ntype SidebarComponentProps = {\n\taccordions: Array<AccordionFolder>;\n\topenIds: Array<string>;\n};\n\nconst ButtonFindShares: FC = () => {\n\tconst [t] = useTranslation();\n\tconst dispatch = useDispatch();\n\t// eslint-disable-next-line @typescript-eslint/ban-types\n\tconst createModal = useContext(ModalManagerContext) as Function;\n\n\tconst openFindShares = useCallback(\n\t\t(ev: MouseEvent): void => {\n\t\t\tev.stopPropagation();\n\t\t\tdispatch(getShareInfo())\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t\t// @ts-ignore\n\t\t\t\t.then((res: any) => {\n\t\t\t\t\tif (res.type.includes('fulfilled') && res.payload?.share?.length > 0) {\n\t\t\t\t\t\tconst resFolders: Array<ResFolder> = uniqWith(\n\t\t\t\t\t\t\tfilter(res.payload.share, ['view', 'message']),\n\t\t\t\t\t\t\tisEqual\n\t\t\t\t\t\t);\n\t\t\t\t\t\tconst closeModal = createModal(\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tchildren: <SharesModal folders={resFolders} onClose={(): void => closeModal()} />\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\ttrue\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t},\n\t\t[createModal, dispatch]\n\t);\n\n\treturn (\n\t\t<Container padding={{ horizontal: 'medium', vertical: 'small' }}>\n\t\t\t<Button\n\t\t\t\ttype=\"outlined\"\n\t\t\t\tlabel={t('label.find_shares', 'Find shares')}\n\t\t\t\tcolor=\"primary\"\n\t\t\t\tsize=\"fill\"\n\t\t\t\tonClick={openFindShares}\n\t\t\t/>\n\t\t</Container>\n\t);\n};\n\nconst SidebarComponent: FC<SidebarComponentProps> = ({ accordions, openIds }) => {\n\tconst sidebarRef = useRef<HTMLInputElement>(null);\n\tconst { folderId } = useParams<{ folderId: string }>();\n\tconst tagsAccordionItems = useGetTagsAccordion();\n\tconst [disableTransition, setDisableTransition] = useState(true);\n\tconst [t] = useTranslation();\n\tconst accordionsWithFindShare = useMemo(() => {\n\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t// @ts-ignore\n\t\taccordions[0]?.items?.push({\n\t\t\tid: 'find_shares',\n\t\t\tlabel: t('label.find_shares', 'Find shares'),\n\t\t\tCustomComponent: ButtonFindShares,\n\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t// @ts-ignore\n\t\t\tdisableHover: true\n\t\t});\n\t\treturn map(accordions, (item) => ({ ...item, background: 'gray4' }));\n\t}, [accordions, t]);\n\n\tuseEffect(() => {\n\t\tsetDisableTransition(false);\n\t}, []);\n\n\treturn (\n\t\t<Container orientation=\"vertical\" height=\"fit\">\n\t\t\t<Accordion\n\t\t\t\topenIds={openIds}\n\t\t\t\tref={sidebarRef}\n\t\t\t\titems={accordionsWithFindShare}\n\t\t\t\tactiveId={folderId}\n\t\t\t\tdisableTransition={disableTransition}\n\t\t\t/>\n\t\t\t<Accordion items={[tagsAccordionItems]} />\n\t\t</Container>\n\t);\n};\n\ntype SidebarProps = {\n\texpanded: boolean;\n};\n\nconst Sidebar: FC<SidebarProps> = ({ expanded }) => {\n\tconst { path } = useRouteMatch();\n\tconst [openIds, setOpenIds] = useLocalStorage<Array<string>>('open_mails_folders', []);\n\n\tconst additionalProps = (item: AccordionFolder): Record<string, any> => ({\n\t\tonOpen: () => setOpenIds((s: Array<string>) => (s.includes(item.id) ? s : [...s, item.id])),\n\t\tonClose: () => setOpenIds((s: Array<string>) => s.filter((id: string) => id !== item.id))\n\t});\n\n\tconst accordions = useFoldersAccordionByView(\n\t\tFOLDER_VIEW.message,\n\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t// @ts-ignore\n\t\tAccordionCustomComponent,\n\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t// @ts-ignore\n\t\tadditionalProps\n\t);\n\n\treturn (\n\t\t<>\n\t\t\t{expanded ? (\n\t\t\t\t<>\n\t\t\t\t\t<Switch>\n\t\t\t\t\t\t<Route path={`${path}/folder/:folderId/:type?/:itemId?`}>\n\t\t\t\t\t\t\t<SidebarComponent accordions={accordions} openIds={openIds} />\n\t\t\t\t\t\t</Route>\n\t\t\t\t\t</Switch>\n\t\t\t\t</>\n\t\t\t) : (\n\t\t\t\taccordions[0].items.map((folder, index: number) => (\n\t\t\t\t\t<CollapsedSideBarItems key={index} folder={folder} />\n\t\t\t\t))\n\t\t\t)}\n\t\t</>\n\t);\n};\n\nexport default Sidebar;\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/views/sidebar/sidebar.tsx b/src/views/sidebar/sidebar.tsx
+--- a/src/views/sidebar/sidebar.tsx	(revision 625354c8af746681a130d381c5881a3713632fe6)
++++ b/src/views/sidebar/sidebar.tsx	(date 1661934115961)
+@@ -3,106 +3,48 @@
+  *
+  * SPDX-License-Identifier: AGPL-3.0-only
+  */
+-import React, { useRef, FC, useContext, useMemo, useCallback, useEffect, useState } from 'react';
+-import {
+-	AccordionFolder,
+-	useFoldersAccordionByView,
+-	useLocalStorage
+-} from '@zextras/carbonio-shell-ui';
+-import { Accordion, Container, Button, ModalManagerContext } from '@zextras/carbonio-design-system';
+-import { Route, Switch, useRouteMatch, useParams } from 'react-router-dom';
+-import { useDispatch } from 'react-redux';
+-import { filter, isEqual, map, uniqWith } from 'lodash';
++
++import { ThemeProvider } from '@mui/material';
++import { Folder, useFoldersByView } from '@zextras/carbonio-shell-ui';
++import { Accordion, Container, useTheme } from '@zextras/carbonio-design-system';
++import { map } from 'lodash';
++import React, { FC, useMemo } from 'react';
+ import { useTranslation } from 'react-i18next';
+-import CollapsedSideBarItems from './collapsed-sidebar-items';
++import { Route, Switch, useRouteMatch } from 'react-router-dom';
+ import { FOLDER_VIEW } from '../../constants';
+-import { AccordionCustomComponent } from './accordion-custom-component';
+-import { getShareInfo } from '../../store/actions/get-share-info';
+-import { ResFolder } from '../../types';
+-import { SharesModal } from './shares-modal';
+ import useGetTagsAccordion from '../../hooks/use-get-tags-accordions';
++import { themeMui } from '../../theme/theme-mui';
++import CollapsedSideBarItems from './collapsed-sidebar-items';
++import { SidebarAccordionMui } from './sidebar-accordion-mui';
+ 
+ type SidebarComponentProps = {
+-	accordions: Array<AccordionFolder>;
+-	openIds: Array<string>;
+-};
+-
+-const ButtonFindShares: FC = () => {
+-	const [t] = useTranslation();
+-	const dispatch = useDispatch();
+-	// eslint-disable-next-line @typescript-eslint/ban-types
+-	const createModal = useContext(ModalManagerContext) as Function;
+-
+-	const openFindShares = useCallback(
+-		(ev: MouseEvent): void => {
+-			ev.stopPropagation();
+-			dispatch(getShareInfo())
+-				// eslint-disable-next-line @typescript-eslint/ban-ts-comment
+-				// @ts-ignore
+-				.then((res: any) => {
+-					if (res.type.includes('fulfilled') && res.payload?.share?.length > 0) {
+-						const resFolders: Array<ResFolder> = uniqWith(
+-							filter(res.payload.share, ['view', 'message']),
+-							isEqual
+-						);
+-						const closeModal = createModal(
+-							{
+-								children: <SharesModal folders={resFolders} onClose={(): void => closeModal()} />
+-							},
+-							true
+-						);
+-					}
+-				});
+-		},
+-		[createModal, dispatch]
+-	);
+-
+-	return (
+-		<Container padding={{ horizontal: 'medium', vertical: 'small' }}>
+-			<Button
+-				type="outlined"
+-				label={t('label.find_shares', 'Find shares')}
+-				color="primary"
+-				size="fill"
+-				onClick={openFindShares}
+-			/>
+-		</Container>
+-	);
++	accordions: Array<Folder>;
+ };
+ 
+-const SidebarComponent: FC<SidebarComponentProps> = ({ accordions, openIds }) => {
+-	const sidebarRef = useRef<HTMLInputElement>(null);
+-	const { folderId } = useParams<{ folderId: string }>();
++const SidebarComponent: FC<SidebarComponentProps> = ({ accordions }) => {
++	console.count('@@SidebarComponent');
++	// const { folderId } = useParams<{ folderId: string }>();
+ 	const tagsAccordionItems = useGetTagsAccordion();
+-	const [disableTransition, setDisableTransition] = useState(true);
++	console.log('@@tagsAccordionItems', tagsAccordionItems);
++	const theme = useTheme();
++	console.log('@@theme', theme);
+ 	const [t] = useTranslation();
++
+ 	const accordionsWithFindShare = useMemo(() => {
+ 		// eslint-disable-next-line @typescript-eslint/ban-ts-comment
+ 		// @ts-ignore
+-		accordions[0]?.items?.push({
++		accordions[0]?.children?.push({
+ 			id: 'find_shares',
+-			label: t('label.find_shares', 'Find shares'),
+-			CustomComponent: ButtonFindShares,
+ 			// eslint-disable-next-line @typescript-eslint/ban-ts-comment
+ 			// @ts-ignore
+ 			disableHover: true
+ 		});
+ 		return map(accordions, (item) => ({ ...item, background: 'gray4' }));
+-	}, [accordions, t]);
+-
+-	useEffect(() => {
+-		setDisableTransition(false);
+-	}, []);
+-
++	}, [accordions]);
++	console.log('@@accordionsWithFindShare', accordionsWithFindShare);
+ 	return (
+ 		<Container orientation="vertical" height="fit">
+-			<Accordion
+-				openIds={openIds}
+-				ref={sidebarRef}
+-				items={accordionsWithFindShare}
+-				activeId={folderId}
+-				disableTransition={disableTransition}
+-			/>
++			<SidebarAccordionMui accordions={accordionsWithFindShare} />
+ 			<Accordion items={[tagsAccordionItems]} />
+ 		</Container>
+ 	);
+@@ -112,40 +54,28 @@
+ 	expanded: boolean;
+ };
+ 
++const MemoSidebar: FC<SidebarComponentProps> = React.memo(SidebarComponent);
++
+ const Sidebar: FC<SidebarProps> = ({ expanded }) => {
++	const accordions = useFoldersByView(FOLDER_VIEW.message);
+ 	const { path } = useRouteMatch();
+-	const [openIds, setOpenIds] = useLocalStorage<Array<string>>('open_mails_folders', []);
+-
+-	const additionalProps = (item: AccordionFolder): Record<string, any> => ({
+-		onOpen: () => setOpenIds((s: Array<string>) => (s.includes(item.id) ? s : [...s, item.id])),
+-		onClose: () => setOpenIds((s: Array<string>) => s.filter((id: string) => id !== item.id))
+-	});
+-
+-	const accordions = useFoldersAccordionByView(
+-		FOLDER_VIEW.message,
+-		// eslint-disable-next-line @typescript-eslint/ban-ts-comment
+-		// @ts-ignore
+-		AccordionCustomComponent,
+-		// eslint-disable-next-line @typescript-eslint/ban-ts-comment
+-		// @ts-ignore
+-		additionalProps
+-	);
+-
++	console.log('@@@@accordions', accordions);
++	console.count('@@Sidebar');
+ 	return (
+ 		<>
+-			{expanded ? (
+-				<>
++			<ThemeProvider theme={themeMui}>
++				{expanded ? (
+ 					<Switch>
+ 						<Route path={`${path}/folder/:folderId/:type?/:itemId?`}>
+-							<SidebarComponent accordions={accordions} openIds={openIds} />
++							<MemoSidebar accordions={accordions} />
+ 						</Route>
+ 					</Switch>
+-				</>
+-			) : (
+-				accordions[0].items.map((folder, index: number) => (
+-					<CollapsedSideBarItems key={index} folder={folder} />
+-				))
+-			)}
++				) : (
++					accordions.map((folder, index: number) => (
++						<CollapsedSideBarItems key={index} folder={folder} />
++					))
++				)}
++			</ThemeProvider>
+ 		</>
+ 	);
+ };
+Index: src/types/utils/index.d.ts
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport { AccordionFolder } from '@zextras/carbonio-shell-ui';\n\nexport type ModalFooterProps = {\n\tmainAlignment?: string | undefined;\n\tcrossAlignment?: string | undefined;\n\tpadding?: Record<string, string> | undefined;\n\tonConfirm: (a: string) => void;\n\tsecondaryAction?: () => void | undefined;\n\tlabel: string;\n\tsecondaryLabel?: string | undefined;\n\tdisabled?: boolean | undefined;\n\tsecondaryDisabled?: boolean | undefined;\n\tbackground?: string | undefined;\n\tsecondarybackground?: string | undefined;\n\tcolor?: string | undefined;\n\tsecondaryColor?: string | undefined;\n\tsize?: string | undefined;\n\tprimaryBtnType?: string | undefined;\n\tsecondaryBtnType?: string | undefined;\n\tshowDivider?: boolean;\n\ttooltip?: string;\n\tsecondaryTooltip?: string;\n\tpaddingTop?: string;\n};\n\nexport type CreateSnackbar = (arg: {\n\tkey: string;\n\treplace?: boolean;\n\ttype: string;\n\thideButton?: boolean;\n\tlabel: string;\n\tautoHideTimeout: number;\n\tactionLabel?: string;\n\tonActionClick?: () => void;\n}) => void;\n\nexport type ModalProps = {\n\tfolder: AccordionFolder;\n\tonClose: () => void;\n};\n\nexport type Crumb = {\n\tlabel: string;\n\ttooltip: string;\n};\n\nexport type ResFolder = AccordionFolder &\n\tPartial<{\n\t\tfolderId: number;\n\t\tfolderPath: string;\n\t\tfolderUuid: string;\n\t\tgranteeId: string;\n\t\tgranteeName: string;\n\t\tgranteeType: string;\n\t\tmid: string;\n\t\townerEmail: string;\n\t\townerId: string;\n\t\townerName: string;\n\t\trights: string;\n\t\tview: string;\n\t}>;\n\nexport type DataProps = {\n\tid: string;\n\tdate: number;\n\tmsgCount: number;\n\tunreadMsgCount: number;\n\tmessages: [\n\t\t{\n\t\t\tid: string;\n\t\t\tparent: string;\n\t\t\tdate: number;\n\t\t}\n\t];\n\tparticipants: [\n\t\t{\n\t\t\ttype: string;\n\t\t\taddress: string;\n\t\t\tname: string;\n\t\t\tfullName: string;\n\t\t},\n\t\t{\n\t\t\ttype: string;\n\t\t\taddress: string;\n\t\t\tname: string;\n\t\t}\n\t];\n\tsubject: string;\n\tfragment: string;\n\tread: false;\n\tattachment: false;\n\tflagged: false;\n\turgent: false;\n\tparentFolderId: string;\n\tselectedIDs: Array<string>;\n};\n\nexport type TextReadValuesProps = {\n\tcolor: string;\n\tweight: string;\n\tbadge: 'unread' | 'read';\n};\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/types/utils/index.d.ts b/src/types/utils/index.d.ts
+--- a/src/types/utils/index.d.ts	(revision 625354c8af746681a130d381c5881a3713632fe6)
++++ b/src/types/utils/index.d.ts	(date 1661852989000)
+@@ -3,7 +3,7 @@
+  *
+  * SPDX-License-Identifier: AGPL-3.0-only
+  */
+-import { AccordionFolder } from '@zextras/carbonio-shell-ui';
++import { Folder } from '@zextras/carbonio-shell-ui';
+ 
+ export type ModalFooterProps = {
+ 	mainAlignment?: string | undefined;
+@@ -40,7 +40,7 @@
+ }) => void;
+ 
+ export type ModalProps = {
+-	folder: AccordionFolder;
++	folder: Folder;
+ 	onClose: () => void;
+ };
+ 
+@@ -49,7 +49,7 @@
+ 	tooltip: string;
+ };
+ 
+-export type ResFolder = AccordionFolder &
++export type ResFolder = Folder &
+ 	Partial<{
+ 		folderId: number;
+ 		folderPath: string;
+Index: src/store/conversations-slice.ts
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n/* eslint-disable no-param-reassign */\n\n/* eslint no-param-reassign: [\"error\", { \"props\": true, \"ignorePropertyModificationsFor\": [\"state\", \"conversation\", \"message\", \"cache\", \"folder-panel\"] }] */\n\nimport { createSlice } from '@reduxjs/toolkit';\nimport produce from 'immer';\nimport { find, forEach, merge, reduce } from 'lodash';\nimport {\n\tFolderType,\n\tConversationsFolderStatus,\n\tConversationsStateType,\n\tStateType,\n\tFetchConversationsReturn,\n\tConvMessage,\n\tConvActionParameters,\n\tConvActionResult,\n\tConversation\n} from '../types';\nimport { convAction, getConv, searchConv, search } from './actions';\nimport {\n\thandleAddMessagesInConversationReducer,\n\thandleCreatedConversationsReducer,\n\thandleCreatedMessagesInConversationsReducer,\n\thandleDeletedConversationsReducer,\n\thandleDeletedMessagesInConversationReducer,\n\thandleModifiedConversationsReducer,\n\thandleModifiedMessagesInConversationReducer\n} from './sync/conversation';\n\nfunction fetchConversationsPending(state: ConversationsStateType): void {\n\tstate.status = 'pending';\n}\n\nfunction fetchConversationsFulfilled(\n\tstate: ConversationsStateType,\n\t{ payload, meta }: { payload: FetchConversationsReturn | undefined; meta: any }\n): void {\n\tif (payload?.types === 'conversation' && payload?.conversations) {\n\t\tstate.conversations = { ...state.conversations, ...payload.conversations };\n\t\tstate.searchedInFolder = {\n\t\t\t...state.searchedInFolder,\n\t\t\t[meta.arg.folderId]: 'complete'\n\t\t};\n\t}\n\tstate.status = payload?.hasMore ? 'hasMore' : 'complete';\n}\n\nfunction fetchConversationsRejected(state: ConversationsStateType, { meta }: { meta: any }): void {\n\tstate.status = 'error';\n\tstate.searchedInFolder = {\n\t\t...state.searchedInFolder,\n\t\t[meta.arg.folderId]: 'incomplete'\n\t};\n}\n\nfunction searchConvFulfilled(state: ConversationsStateType, { payload, meta }: any): void {\n\tstate.expandedStatus[meta.arg.conversationId] = 'complete';\n\tconst conversation = state.conversations[meta.arg.conversationId];\n\tif (conversation) {\n\t\tconversation.messages = reduce(\n\t\t\tconversation.messages,\n\t\t\t(acc, v) => {\n\t\t\t\tconst msg = find(payload.messages, ['id', v.id]);\n\t\t\t\treturn msg ? [...acc, { id: v.id, parent: v.parent, date: Number(v.date) }] : [...acc, v];\n\t\t\t},\n\t\t\t[] as Array<ConvMessage>\n\t\t);\n\t}\n}\n\nfunction searchConvPending(state: ConversationsStateType, { meta }: any): void {\n\tstate.expandedStatus[meta.arg.conversationId] = 'pending';\n}\n\nfunction searchConvRejected(state: ConversationsStateType, { meta }: any): void {\n\tstate.expandedStatus[meta.arg.conversationId] = 'error';\n}\n\nfunction convActionPending(\n\t{ conversations }: ConversationsStateType,\n\t{ meta }: { meta: { arg: ConvActionParameters; requestId: string; requestStatus: string } }\n): void {\n\tconst { ids, operation } = meta.arg;\n\n\tforEach(ids, (id: string) => {\n\t\tif (conversations?.[id]) {\n\t\t\tif (operation.includes('flag')) {\n\t\t\t\tconversations[id].flagged = !operation.startsWith('!');\n\t\t\t} else if (operation.includes('read')) {\n\t\t\t\tconversations[id].read = !operation.startsWith('!');\n\t\t\t}\n\t\t}\n\t});\n}\n\nfunction convActionFulfilled(\n\t{ conversations }: ConversationsStateType,\n\t{\n\t\tpayload\n\t}: {\n\t\tpayload: ConvActionResult;\n\t\tmeta: { arg: ConvActionParameters; requestId: string; requestStatus: string };\n\t}\n): void {\n\tconst { ids, operation } = payload;\n\n\tforEach(ids, (id: string) => {\n\t\tif (conversations?.[id]) {\n\t\t\tif (operation === 'delete') {\n\t\t\t\tdelete conversations[id];\n\t\t\t}\n\t\t}\n\t});\n}\n\nfunction convActionRejected(\n\t{ conversations }: ConversationsStateType,\n\t{ meta }: { meta: { arg: ConvActionParameters; requestId: string; requestStatus: string } }\n): void {\n\tconst { ids, operation } = meta.arg;\n\n\tforEach(ids, (id: string) => {\n\t\tif (conversations?.[id]) {\n\t\t\tif (operation.includes('flag')) {\n\t\t\t\tconversations[id].flagged = operation.startsWith('!');\n\t\t\t} else if (operation.includes('read')) {\n\t\t\t\tconversations[id].read = operation.startsWith('!');\n\t\t\t}\n\t\t}\n\t});\n}\n\nexport function setCurrentFolderReducer(\n\tstate: ConversationsStateType,\n\t{ payload }: { payload: string }\n): void {\n\tstate.currentFolder = payload;\n}\n\nexport function setSearchedInFolderReducer(\n\tstate: ConversationsStateType,\n\t{ payload }: { payload: Record<string, string> }\n): void {\n\tstate.searchedInFolder = merge(state.searchedInFolder, payload);\n}\nfunction getConvFulfilled(state: ConversationsStateType, { payload }: any): void {\n\tconst conv = payload.conversation;\n\tif (conv?.id && state.conversations?.[conv.id]) {\n\t\tstate.conversations[conv.id] = merge(state.conversations[conv.id], conv);\n\t\tstate.expandedStatus[conv.id] = 'complete';\n\t} else if (conv?.id && !state.conversations?.[conv.id]) {\n\t\tstate.conversations[conv.id] = conv;\n\t\tstate.expandedStatus[conv.id] = 'complete';\n\t}\n}\n\nfunction getConvPending(state: ConversationsStateType, { meta }: any): void {\n\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t// @ts-ignore\n\tstate.expandedStatus[meta.arg.conversationId] = 'pending';\n}\n\nfunction getConvRejected(state: ConversationsStateType, { meta }: any): void {\n\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t// @ts-ignore\n\tstate.expandedStatus[meta.arg.conversationId] = 'error';\n}\n\nexport const conversationsSlice = createSlice({\n\tname: 'conversations',\n\tinitialState: {\n\t\tcurrentFolder: '2',\n\t\tconversations: {},\n\t\texpandedStatus: {},\n\t\tsearchedInFolder: {},\n\t\tstatus: 'empty'\n\t} as ConversationsStateType,\n\treducers: {\n\t\thandleNotifyCreatedConversations: produce(handleCreatedConversationsReducer),\n\t\thandleNotifyModifiedConversations: produce(handleModifiedConversationsReducer),\n\t\thandleNotifyDeletedConversations: produce(handleDeletedConversationsReducer),\n\t\thandleCreatedMessagesInConversation: produce(handleCreatedMessagesInConversationsReducer),\n\t\thandleModifiedMessagesInConversation: produce(handleModifiedMessagesInConversationReducer),\n\t\thandleDeletedMessagesInConversation: produce(handleDeletedMessagesInConversationReducer),\n\t\thandleAddMessagesInConversation: produce(handleAddMessagesInConversationReducer),\n\t\tsetCurrentFolder: produce(setCurrentFolderReducer),\n\t\tsetSearchedInFolder: produce(setSearchedInFolderReducer)\n\t},\n\textraReducers: (builder) => {\n\t\tbuilder.addCase(search.pending, produce(fetchConversationsPending));\n\t\tbuilder.addCase(search.fulfilled, produce(fetchConversationsFulfilled));\n\t\tbuilder.addCase(search.rejected, produce(fetchConversationsRejected));\n\t\tbuilder.addCase(searchConv.pending, produce(searchConvPending));\n\t\tbuilder.addCase(searchConv.fulfilled, produce(searchConvFulfilled));\n\t\tbuilder.addCase(searchConv.rejected, produce(searchConvRejected));\n\t\tbuilder.addCase(convAction.pending, produce(convActionPending));\n\t\tbuilder.addCase(convAction.rejected, produce(convActionRejected));\n\t\tbuilder.addCase(convAction.fulfilled, produce(convActionFulfilled));\n\t\tbuilder.addCase(getConv.pending, produce(getConvPending));\n\t\tbuilder.addCase(getConv.fulfilled, produce(getConvFulfilled));\n\t\tbuilder.addCase(getConv.rejected, produce(getConvRejected));\n\t}\n});\n\nexport const {\n\thandleNotifyCreatedConversations,\n\thandleNotifyModifiedConversations,\n\thandleNotifyDeletedConversations,\n\thandleCreatedMessagesInConversation,\n\thandleModifiedMessagesInConversation,\n\thandleAddMessagesInConversation,\n\thandleDeletedMessagesInConversation,\n\tsetSearchedInFolder\n} = conversationsSlice.actions;\nexport const conversationsSliceReducer = conversationsSlice.reducer;\n\nexport function selectConversations({ conversations }: StateType): Record<string, any> {\n\treturn conversations?.conversations;\n}\n\nexport function selectCurrentFolderExpandedStatus({\n\tconversations\n}: StateType): Record<string, string> {\n\treturn conversations.expandedStatus;\n}\n\nexport function selectConversationExpandedStatus(\n\t{ conversations }: StateType,\n\tid: string\n): 'pending' | 'error' | 'complete' | undefined {\n\treturn conversations?.expandedStatus?.[id];\n}\n\nexport function selectFolder({ folders }: StateType, id: string): FolderType {\n\treturn folders?.folders?.[id];\n}\n\nexport function selectCurrentFolder({ conversations }: StateType): string {\n\treturn conversations?.currentFolder;\n}\n\nexport function selectConversationStatus(state: StateType): ConversationsFolderStatus {\n\treturn state.conversations.status;\n}\n\nexport function selectSearchedFolder({ conversations }: StateType, id: string): string {\n\treturn conversations?.searchedInFolder?.[id];\n}\nexport function selectConversationsArray({ conversations }: StateType): Array<Conversation> {\n\treturn Object.values(conversations?.conversations ?? []);\n}\n\nexport function selectFolderSearchStatus(\n\t{ conversations }: StateType,\n\tfolderId: string\n): string | undefined {\n\treturn conversations?.searchedInFolder?.[folderId] ?? undefined;\n}\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/store/conversations-slice.ts b/src/store/conversations-slice.ts
+--- a/src/store/conversations-slice.ts	(revision 625354c8af746681a130d381c5881a3713632fe6)
++++ b/src/store/conversations-slice.ts	(date 1661935140352)
+@@ -40,6 +40,8 @@
+ 	state: ConversationsStateType,
+ 	{ payload, meta }: { payload: FetchConversationsReturn | undefined; meta: any }
+ ): void {
++	console.log('@@@_payload', payload);
++	console.log('@@@_meta', meta);
+ 	if (payload?.types === 'conversation' && payload?.conversations) {
+ 		state.conversations = { ...state.conversations, ...payload.conversations };
+ 		state.searchedInFolder = {
+Index: src/views/sidebar/button-find-shares.tsx
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/views/sidebar/button-find-shares.tsx b/src/views/sidebar/button-find-shares.tsx
+new file mode 100644
+--- /dev/null	(date 1661736228000)
++++ b/src/views/sidebar/button-find-shares.tsx	(date 1661736228000)
+@@ -0,0 +1,57 @@
++/*
++ * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>
++ *
++ * SPDX-License-Identifier: AGPL-3.0-only
++ */
++
++import React, { FC, useCallback, useContext } from 'react';
++import { Button, ModalManagerContext, Container } from '@zextras/carbonio-design-system';
++import { filter, isEqual, uniqWith } from 'lodash';
++import { useTranslation } from 'react-i18next';
++import { useDispatch } from 'react-redux';
++import { getShareInfo } from '../../store/actions/get-share-info';
++import { ResFolder } from '../../types';
++import { SharesModal } from './shares-modal';
++
++export const ButtonFindShares: FC = () => {
++	const [t] = useTranslation();
++	const dispatch = useDispatch();
++	// eslint-disable-next-line @typescript-eslint/ban-types
++	const createModal = useContext(ModalManagerContext) as Function;
++
++	const openFindShares = useCallback(
++		(ev: MouseEvent): void => {
++			ev.stopPropagation();
++			dispatch(getShareInfo())
++				// eslint-disable-next-line @typescript-eslint/ban-ts-comment
++				// @ts-ignore
++				.then((res: any) => {
++					if (res.type.includes('fulfilled') && res.payload?.share?.length > 0) {
++						const resFolders: Array<ResFolder> = uniqWith(
++							filter(res.payload.share, ['view', 'message']),
++							isEqual
++						);
++						const closeModal = createModal(
++							{
++								children: <SharesModal folders={resFolders} onClose={(): void => closeModal()} />
++							},
++							true
++						);
++					}
++				});
++		},
++		[createModal, dispatch]
++	);
++
++	return (
++		<Container padding={{ horizontal: 'medium', vertical: 'small' }}>
++			<Button
++				type="outlined"
++				label={t('label.find_shares', 'Find shares')}
++				color="primary"
++				size="fill"
++				onClick={openFindShares}
++			/>
++		</Container>
++	);
++};
+Index: src/views/search/parts/folder-accordion-custom-comp.tsx
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>/*\n * SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { FC, useMemo } from 'react';\nimport {\n\tFOLDERS,\n\tuseUserAccount,\n\tAccordionFolder,\n\tuseUserSettings\n} from '@zextras/carbonio-shell-ui';\nimport { AccordionItem, Tooltip, Row, Padding } from '@zextras/carbonio-design-system';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n\tgetFolderIconColor,\n\tgetFolderIconName,\n\tgetFolderTranslatedName\n} from '../../sidebar/utils';\n\nconst AccordionCustomComponent: FC<{ item: AccordionFolder }> = ({ item }) => {\n\tconst { folder } = item;\n\tconst accountName = useUserAccount().name;\n\tconst [t] = useTranslation();\n\n\tconst accordionItem = useMemo(\n\t\t() => ({\n\t\t\t...item,\n\t\t\tlabel:\n\t\t\t\titem.id === FOLDERS.USER_ROOT\n\t\t\t\t\t? accountName\n\t\t\t\t\t: getFolderTranslatedName({ t, folderId: item.id, folderName: item.label }),\n\t\t\ticon: getFolderIconName(item),\n\t\t\ticonColor: getFolderIconColor(item),\n\t\t\ttextProps: { size: 'small' }\n\t\t}),\n\t\t[item, accountName, t]\n\t);\n\tconst settings = useUserSettings()?.prefs;\n\tconst [includeSpam, includeTrash, includeSharedFolders] = useMemo(\n\t\t() => [\n\t\t\tsettings?.zimbraPrefIncludeSpamInSearch === 'TRUE',\n\t\t\tsettings?.zimbraPrefIncludeTrashInSearch === 'TRUE',\n\t\t\tsettings?.zimbraPrefIncludeSharedItemsInSearch === 'TRUE'\n\t\t],\n\t\t[settings]\n\t);\n\n\tconst hasToExclude = useMemo(\n\t\t() =>\n\t\t\t(!includeTrash && folder.name === 'Trash') ||\n\t\t\t(!includeSpam && folder.name === 'Junk') ||\n\t\t\t(!includeSharedFolders && folder.isLink),\n\t\t[folder.isLink, folder.name, includeSharedFolders, includeSpam, includeTrash]\n\t);\n\n\tif (hasToExclude) return <></>;\n\treturn (\n\t\t<Row>\n\t\t\t<Padding left=\"small\" />\n\t\t\t<Tooltip label={accordionItem.label} placement=\"right\" maxWidth=\"100%\">\n\t\t\t\t<AccordionItem item={accordionItem} />\n\t\t\t</Tooltip>\n\t\t</Row>\n\t);\n};\n\nexport default AccordionCustomComponent;\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/views/search/parts/folder-accordion-custom-comp.tsx b/src/views/search/parts/folder-accordion-custom-comp.tsx
+--- a/src/views/search/parts/folder-accordion-custom-comp.tsx	(revision 625354c8af746681a130d381c5881a3713632fe6)
++++ b/src/views/search/parts/folder-accordion-custom-comp.tsx	(date 1661736228000)
+@@ -5,12 +5,7 @@
+  */
+ 
+ import React, { FC, useMemo } from 'react';
+-import {
+-	FOLDERS,
+-	useUserAccount,
+-	AccordionFolder,
+-	useUserSettings
+-} from '@zextras/carbonio-shell-ui';
++import { FOLDERS, useUserAccount, useUserSettings, Folder } from '@zextras/carbonio-shell-ui';
+ import { AccordionItem, Tooltip, Row, Padding } from '@zextras/carbonio-design-system';
+ import { useTranslation } from 'react-i18next';
+ 
+@@ -20,8 +15,7 @@
+ 	getFolderTranslatedName
+ } from '../../sidebar/utils';
+ 
+-const AccordionCustomComponent: FC<{ item: AccordionFolder }> = ({ item }) => {
+-	const { folder } = item;
++const AccordionCustomComponent: FC<{ item: Folder }> = ({ item }) => {
+ 	const accountName = useUserAccount().name;
+ 	const [t] = useTranslation();
+ 
+@@ -31,7 +25,7 @@
+ 			label:
+ 				item.id === FOLDERS.USER_ROOT
+ 					? accountName
+-					: getFolderTranslatedName({ t, folderId: item.id, folderName: item.label }),
++					: getFolderTranslatedName({ t, folderId: item.id, folderName: item.name }),
+ 			icon: getFolderIconName(item),
+ 			iconColor: getFolderIconColor(item),
+ 			textProps: { size: 'small' }
+@@ -50,10 +44,10 @@
+ 
+ 	const hasToExclude = useMemo(
+ 		() =>
+-			(!includeTrash && folder.name === 'Trash') ||
+-			(!includeSpam && folder.name === 'Junk') ||
+-			(!includeSharedFolders && folder.isLink),
+-		[folder.isLink, folder.name, includeSharedFolders, includeSpam, includeTrash]
++			(!includeTrash && item.name === 'Trash') ||
++			(!includeSpam && item.name === 'Junk') ||
++			(!includeSharedFolders && item.isLink),
++		[item.isLink, item.name, includeSharedFolders, includeSpam, includeTrash]
+ 	);
+ 
+ 	if (hasToExclude) return <></>;
+Index: .idea/webResources.xml
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/.idea/webResources.xml b/.idea/webResources.xml
+new file mode 100644
+--- /dev/null	(date 1661736228000)
++++ b/.idea/webResources.xml	(date 1661736228000)
+@@ -0,0 +1,14 @@
++<?xml version="1.0" encoding="UTF-8"?>
++<project version="4">
++  <component name="WebResourcesPaths">
++    <contentEntries>
++      <entry url="file://$PROJECT_DIR$">
++        <entryData>
++          <resourceRoots>
++            <path value="file://$PROJECT_DIR$/src" />
++          </resourceRoots>
++        </entryData>
++      </entry>
++    </contentEntries>
++  </component>
++</project>
+\ No newline at end of file
+Index: src/views/sidebar/accordion-custom-component.tsx
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport React, { FC, useCallback, useContext, useMemo, useState } from 'react';\nimport {\n\tAppLink,\n\tFOLDERS,\n\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t// @ts-ignore\n\tROOT_NAME,\n\treplaceHistory,\n\tuseUserSettings,\n\tgetBridgedFunctions,\n\tuseUserAccount,\n\tpushHistory,\n\tAccordionFolder\n} from '@zextras/carbonio-shell-ui';\nimport styled from 'styled-components';\nimport {\n\tAccordionItem,\n\tDropdown,\n\tDrag,\n\tDrop,\n\tContainer,\n\tTooltip,\n\tAvatar,\n\tIcon,\n\tRow,\n\tPadding,\n\tModalManagerContext\n} from '@zextras/carbonio-design-system';\nimport { find, startsWith } from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { useDispatch } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport { convAction, msgAction, search } from '../../store/actions';\nimport { folderAction } from '../../store/actions/folder-action';\nimport { getFolderIconColor, getFolderIconName, getFolderTranslatedName } from './utils';\nimport { NewModal } from './new-modal';\nimport { MoveModal } from './move-modal';\nimport { EmptyModal } from './empty-modal';\nimport { DeleteModal } from './delete-modal';\nimport { EditModal } from './edit-modal';\nimport { SharesInfoModal } from './shares-info-modal';\nimport ShareFolderModal from './share-folder-modal';\nimport { FolderActionsType } from '../../commons/utils';\nimport { DataProps } from '../../types';\n\nconst FittedRow = styled(Row)`\n\tmax-width: calc(100% - (2 * ${({ theme }): string => theme.sizes.padding.small}));\n\theight: 48px;\n`;\n\nconst DropOverlayContainer = styled(Container)`\n\tposition: absolute;\n\twidth: calc(248px - ${(props): number => (props.folder.level - 2) * 16}px);\n\theight: 100%;\n\tbackground: ${(props): string => props.theme.palette.primary.regular};\n\tborder-radius: 4px;\n\tborder: 4px solid #d5e3f6;\n\topacity: 0.4;\n`;\n\nconst DropDenyOverlayContainer = styled(Container)`\n\tposition: absolute;\n\twidth: calc(248px - ${(props): number => (props.folder.level - 2) * 16}px);\n\theight: 100%;\n\tbackground: ${(props): string => props.theme.palette.gray1.regular};\n\tborder-radius: 4px;\n\tborder: 4px solid #d5e3f6;\n\topacity: 0.4;\n`;\n\ntype FolderActionsProps = {\n\tid: string;\n\ticon: string;\n\tlabel: string;\n\tclick: (e: MouseEvent) => void;\n\tdisabled?: boolean;\n};\n\nconst useFolderActions = (folder: AccordionFolder): Array<FolderActionsProps> => {\n\tconst [t] = useTranslation();\n\tconst dispatch = useDispatch();\n\t// eslint-disable-next-line @typescript-eslint/ban-types\n\tconst createModal = useContext(ModalManagerContext) as Function;\n\tconst [activeModal, setActiveModal] = useState('default');\n\tconst [activeGrant, setActiveGrant] = useState({});\n\tconst goBack = useCallback(() => {\n\t\tsetActiveModal('default');\n\t}, [setActiveModal]);\n\n\tconst actions = useMemo(\n\t\t() => [\n\t\t\t{\n\t\t\t\tid: FolderActionsType.NEW,\n\t\t\t\ticon: 'FolderAddOutline',\n\t\t\t\tlabel: t('label.new_folder', 'New Folder'),\n\t\t\t\tclick: (e: MouseEvent): void => {\n\t\t\t\t\tif (e) {\n\t\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t}\n\t\t\t\t\tconst closeModal = createModal(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmaxHeight: '90vh',\n\t\t\t\t\t\t\tchildren: (\n\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t<NewModal folder={folder} onClose={(): void => closeModal()} />\n\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttrue\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: FolderActionsType.MOVE,\n\t\t\t\ticon: 'MoveOutline',\n\t\t\t\tlabel: startsWith(folder.folder?.absFolderPath, '/Trash')\n\t\t\t\t\t? t('label.restore', 'Restore')\n\t\t\t\t\t: t('label.move', 'Move'),\n\t\t\t\tclick: (e: MouseEvent): void => {\n\t\t\t\t\tif (e) {\n\t\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t}\n\t\t\t\t\tconst closeModal = createModal(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmaxHeight: '90vh',\n\t\t\t\t\t\t\tchildren: (\n\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t<MoveModal folder={folder} onClose={(): void => closeModal()} />\n\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttrue\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: FolderActionsType.EMPTY,\n\t\t\t\ticon: folder.id === FOLDERS.TRASH ? 'DeletePermanentlyOutline' : 'EmptyFolderOutline',\n\t\t\t\tlabel:\n\t\t\t\t\tfolder.id === FOLDERS.TRASH\n\t\t\t\t\t\t? t('folder_panel.action.empty.trash', 'Empty Trash')\n\t\t\t\t\t\t: t('folder_panel.action.wipe.folder_panel', 'Wipe Folder'),\n\t\t\t\tdisabled: folder.folder?.n === 0 && folder.folder?.children?.length === 0,\n\t\t\t\tclick: (e: MouseEvent): void => {\n\t\t\t\t\tif (e) {\n\t\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t}\n\t\t\t\t\tconst closeModal = createModal(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tchildren: (\n\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t<EmptyModal onClose={(): void => closeModal()} folder={folder} />\n\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttrue\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: FolderActionsType.EDIT,\n\t\t\t\ticon: 'Edit2Outline',\n\t\t\t\tlabel: folder?.folder?.isLink\n\t\t\t\t\t? t('folder_panel.action.edit_properties', 'Edit Properties')\n\t\t\t\t\t: t('label.edit', 'Edit'),\n\t\t\t\tclick: (e: MouseEvent): void => {\n\t\t\t\t\tif (e) {\n\t\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t}\n\t\t\t\t\tconst closeModal = createModal(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmaxHeight: '90vh',\n\t\t\t\t\t\t\tchildren: (\n\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t<EditModal onClose={(): void => closeModal()} folder={folder} />\n\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttrue\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: FolderActionsType.DELETE,\n\t\t\t\ticon: 'Trash2Outline',\n\t\t\t\tlabel: startsWith(folder.folder?.absFolderPath, '/Trash')\n\t\t\t\t\t? t('label.delete_permanently', 'Delete Permanently')\n\t\t\t\t\t: t('label.delete', 'Delete'),\n\t\t\t\tclick: (e: MouseEvent): void => {\n\t\t\t\t\tif (e) {\n\t\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t}\n\t\t\t\t\tconst closeModal = createModal(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tchildren: (\n\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t<DeleteModal onClose={(): void => closeModal()} folder={folder} />\n\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttrue\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: FolderActionsType.SHARE,\n\t\t\t\ticon: 'ShareOutline',\n\t\t\t\tlabel: t('action.share_folder', 'Share folder'),\n\t\t\t\tclick: (e: MouseEvent): void => {\n\t\t\t\t\tif (e) {\n\t\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t}\n\t\t\t\t\tconst closeModal = createModal(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tchildren: (\n\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t<ShareFolderModal\n\t\t\t\t\t\t\t\t\t\tonClose={(): void => closeModal()}\n\t\t\t\t\t\t\t\t\t\tfolder={folder}\n\t\t\t\t\t\t\t\t\t\tactiveGrant={activeGrant}\n\t\t\t\t\t\t\t\t\t\tgoBack={goBack}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttrue\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: FolderActionsType.REMOVE_FROM_LIST,\n\t\t\t\ticon: 'CloseOutline',\n\t\t\t\tlabel: t('label.remove_from_this_list', 'Remove from this list'),\n\t\t\t\tclick: (e): void => {\n\t\t\t\t\tif (e) {\n\t\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t\tdispatch(folderAction({ folder: folder.folder, op: 'delete' }));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: FolderActionsType.SHARES_INFO,\n\t\t\t\ticon: 'InfoOutline',\n\t\t\t\tlabel: t('label.shares_info', `Shared folder's info`),\n\t\t\t\tclick: (e): void => {\n\t\t\t\t\tif (e) {\n\t\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t}\n\t\t\t\t\tconst closeModal = createModal(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tchildren: (\n\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t<SharesInfoModal onClose={(): void => closeModal()} folder={folder.folder} />\n\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttrue\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t],\n\t\t[activeGrant, createModal, dispatch, folder, goBack, t]\n\t);\n\n\tconst defaultFolderActions = useMemo(\n\t\t() =>\n\t\t\tactions.filter(\n\t\t\t\t(action) =>\n\t\t\t\t\taction.id !== FolderActionsType.SHARES_INFO &&\n\t\t\t\t\taction.id !== FolderActionsType.REMOVE_FROM_LIST\n\t\t\t),\n\t\t[actions]\n\t);\n\tconst id =\n\t\tfolder.id.indexOf(':') !== -1 ? folder.id.slice(folder.id.indexOf(':') + 1) : folder.id;\n\tswitch (id) {\n\t\t// default folders\n\t\tcase FOLDERS.INBOX:\n\t\tcase FOLDERS.SENT:\n\t\tcase FOLDERS.DRAFTS:\n\t\t\treturn defaultFolderActions.map((action) =>\n\t\t\t\taction.id === FolderActionsType.MOVE || action.id === FolderActionsType.DELETE\n\t\t\t\t\t? { ...action, disabled: true }\n\t\t\t\t\t: action\n\t\t\t);\n\n\t\tcase FOLDERS.SPAM:\n\t\t\treturn defaultFolderActions.map((action) =>\n\t\t\t\taction.id === FolderActionsType.NEW ||\n\t\t\t\taction.id === FolderActionsType.MOVE ||\n\t\t\t\taction.id === FolderActionsType.DELETE\n\t\t\t\t\t? { ...action, disabled: true }\n\t\t\t\t\t: action\n\t\t\t);\n\t\tcase FOLDERS.TRASH:\n\t\t\treturn defaultFolderActions.map((action) =>\n\t\t\t\taction.id === FolderActionsType.MOVE ||\n\t\t\t\taction.id === FolderActionsType.DELETE ||\n\t\t\t\taction.id === FolderActionsType.EDIT ||\n\t\t\t\taction.id === FolderActionsType.SHARE\n\t\t\t\t\t? { ...action, disabled: true }\n\t\t\t\t\t: action\n\t\t\t);\n\t\t// customizable folders\n\t\tdefault:\n\t\t\treturn folder.folder?.isLink\n\t\t\t\t? actions.filter(\n\t\t\t\t\t\t(action) =>\n\t\t\t\t\t\t\taction.id === FolderActionsType.SHARES_INFO ||\n\t\t\t\t\t\t\taction.id === FolderActionsType.REMOVE_FROM_LIST ||\n\t\t\t\t\t\t\taction.id === FolderActionsType.EDIT\n\t\t\t\t  )\n\t\t\t\t: defaultFolderActions.map((action) => {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tstartsWith(folder.folder?.absFolderPath, '/Trash') &&\n\t\t\t\t\t\t\t(action.id === FolderActionsType.NEW || action.id === FolderActionsType.EDIT)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\treturn { ...action, disabled: true };\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn action;\n\t\t\t\t  });\n\t}\n};\n\ntype DragEnterAction =\n\t| undefined\n\t| {\n\t\t\tsuccess: false;\n\t  };\n\ntype OnDropActionProps = {\n\ttype: string;\n\tdata: DataProps;\n};\n\nconst badgeCount = (v?: number): number | undefined => (v && v > 0 ? v : undefined);\nexport const AccordionCustomComponent: FC<{ item: AccordionFolder }> = ({ item }) => {\n\tconst { folder } = item;\n\tconst accountName = useUserAccount().name;\n\tconst [t] = useTranslation();\n\tconst dispatch = useDispatch();\n\tconst { folderId } = useParams<{ folderId: string }>();\n\n\tconst onDragEnterAction = (data: OnDropActionProps): DragEnterAction => {\n\t\tif (data.type === 'conversation' || data.type === 'message') {\n\t\t\tif (\n\t\t\t\tdata.data.parentFolderId === folder.id || // same folder not allowed\n\t\t\t\t(data.data.parentFolderId === FOLDERS.INBOX && [5, 6].includes(Number(folder.id))) || // from inbox not allowed in draft and sent\n\t\t\t\t(data.data.parentFolderId === FOLDERS.DRAFTS && ![3].includes(Number(folder.id))) || // from draft only allowed in Trash\n\t\t\t\t(folder.id === FOLDERS.DRAFTS && data.data.parentFolderId !== FOLDERS.TRASH) || // only from Trash can move in Draft\n\t\t\t\t(folder.isLink && folder.perm?.indexOf('w') === -1) || // only if shared folder have write permission\n\t\t\t\tfolder.id === FOLDERS.USER_ROOT ||\n\t\t\t\tfolder.oname === ROOT_NAME\n\t\t\t) {\n\t\t\t\treturn { success: false };\n\t\t\t}\n\t\t}\n\t\tif (data.type === 'folder') {\n\t\t\tif (\n\t\t\t\tfolder.id === data.data.id || // same folder not allowed\n\t\t\t\tfolder.isLink || //  shared folder not allowed\n\t\t\t\t[FOLDERS.DRAFTS, FOLDERS.SPAM].includes(folder.id) // cannot be moved inside Draft and Spam\n\t\t\t)\n\t\t\t\treturn { success: false };\n\t\t}\n\t\treturn undefined;\n\t};\n\n\tconst onDropAction = (data: OnDropActionProps): void => {\n\t\tconst dragEnterResponse = onDragEnterAction(data);\n\t\tif (dragEnterResponse && dragEnterResponse?.success === false) return;\n\t\tlet convMsgsIds = [data.data.id];\n\t\tif (\n\t\t\tdata.type !== 'folder' &&\n\t\t\tdata.data?.selectedIDs?.length &&\n\t\t\tdata.data?.selectedIDs.includes(data.data.id)\n\t\t) {\n\t\t\tconvMsgsIds = data.data?.selectedIDs;\n\t\t}\n\n\t\tif (data.type === 'folder') {\n\t\t\tdispatch(folderAction({ folder: data.data, l: folder.id || FOLDERS.USER_ROOT, op: 'move' }))\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t\t// @ts-ignore\n\t\t\t\t.then((res) => {\n\t\t\t\t\tif (res.type.includes('fulfilled')) {\n\t\t\t\t\t\tgetBridgedFunctions().createSnackbar({\n\t\t\t\t\t\t\tkey: `move`,\n\t\t\t\t\t\t\treplace: true,\n\t\t\t\t\t\t\ttype: 'success',\n\t\t\t\t\t\t\tlabel: t('messages.snackbar.folder_moved', 'Folder successfully moved'),\n\t\t\t\t\t\t\tautoHideTimeout: 3000\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tgetBridgedFunctions().createSnackbar({\n\t\t\t\t\t\t\tkey: `move`,\n\t\t\t\t\t\t\treplace: true,\n\t\t\t\t\t\t\ttype: 'error',\n\t\t\t\t\t\t\tlabel: t('label.error_try_again', 'Something went wrong, please try again.'),\n\t\t\t\t\t\t\tautoHideTimeout: 3000\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t} else if (data.type === 'conversation') {\n\t\t\tdispatch(\n\t\t\t\tconvAction({\n\t\t\t\t\toperation: `move`,\n\t\t\t\t\tids: convMsgsIds,\n\t\t\t\t\tparent: folder.id\n\t\t\t\t})\n\t\t\t)\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t\t// @ts-ignore\n\t\t\t\t.then((res) => {\n\t\t\t\t\tif (res.type.includes('fulfilled')) {\n\t\t\t\t\t\treplaceHistory(`/folder/${folderId}`);\n\t\t\t\t\t\tgetBridgedFunctions().createSnackbar({\n\t\t\t\t\t\t\tkey: `edit`,\n\t\t\t\t\t\t\treplace: true,\n\t\t\t\t\t\t\ttype: 'info',\n\t\t\t\t\t\t\tlabel: t('messages.snackbar.conversation_move', 'Conversation successfully moved'),\n\t\t\t\t\t\t\tautoHideTimeout: 3000,\n\t\t\t\t\t\t\tactionLabel: t('action.goto_folder', 'GO TO FOLDER'),\n\t\t\t\t\t\t\tonActionClick: () => {\n\t\t\t\t\t\t\t\treplaceHistory(`/folder/${folder.id}`);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tgetBridgedFunctions().createSnackbar({\n\t\t\t\t\t\t\tkey: `edit`,\n\t\t\t\t\t\t\treplace: true,\n\t\t\t\t\t\t\ttype: 'error',\n\t\t\t\t\t\t\tlabel: t('label.error_try_again', 'Something went wrong, please try again'),\n\t\t\t\t\t\t\tautoHideTimeout: 3000,\n\t\t\t\t\t\t\thideButton: true\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t} else {\n\t\t\tdispatch(\n\t\t\t\tmsgAction({\n\t\t\t\t\toperation: `move`,\n\t\t\t\t\tids: convMsgsIds,\n\t\t\t\t\tparent: folder.id\n\t\t\t\t})\n\t\t\t)\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t\t// @ts-ignore\n\t\t\t\t.then((res) => {\n\t\t\t\t\tif (res.type.includes('fulfilled')) {\n\t\t\t\t\t\tgetBridgedFunctions().createSnackbar({\n\t\t\t\t\t\t\tkey: `edit`,\n\t\t\t\t\t\t\treplace: true,\n\t\t\t\t\t\t\ttype: 'info',\n\t\t\t\t\t\t\tlabel: t('messages.snackbar.message_move', 'Message successfully moved'),\n\t\t\t\t\t\t\tautoHideTimeout: 3000,\n\t\t\t\t\t\t\tactionLabel: t('action.goto_folder', 'GO TO FOLDER'),\n\t\t\t\t\t\t\tonActionClick: () => {\n\t\t\t\t\t\t\t\treplaceHistory(`/folder/${folder.id}`);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tgetBridgedFunctions().createSnackbar({\n\t\t\t\t\t\t\tkey: `edit`,\n\t\t\t\t\t\t\treplace: true,\n\t\t\t\t\t\t\ttype: 'error',\n\t\t\t\t\t\t\tlabel: t('label.error_try_again', 'Something went wrong, please try again'),\n\t\t\t\t\t\t\tautoHideTimeout: 3000,\n\t\t\t\t\t\t\thideButton: true\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t}\n\t};\n\n\tconst dragFolderDisable = useMemo(\n\t\t() =>\n\t\t\t[FOLDERS.INBOX, FOLDERS.TRASH, FOLDERS.SPAM, FOLDERS.SENT, FOLDERS.DRAFTS].includes(\n\t\t\t\tfolder.id\n\t\t\t) || folder.isLink, // Default folders and shared folders not allowed to drag\n\t\t[folder.id, folder.isLink]\n\t);\n\tconst { zimbraPrefGroupMailBy } = useUserSettings().prefs;\n\n\t/* NOTE: Need to comment out when need to sort as per the configured sort order */\n\t// const { zimbraPrefSortOrder, zimbraPrefGroupMailBy } = useUserSettings().prefs;\n\t// const sorting = useMemo(() => {\n\t// \tif (typeof zimbraPrefSortOrder === 'string') {\n\t// \t\treturn (\n\t// \t\t\tfind(zimbraPrefSortOrder?.split(','), (f) => f?.split(':')?.[0] === folder.id)?.split(\n\t// \t\t\t\t':'\n\t// \t\t\t)?.[1] ?? 'dateDesc'\n\t// \t\t);\n\t// \t}\n\t// \treturn 'dateDesc';\n\t// }, [zimbraPrefSortOrder, folder.id]) as 'dateDesc' | 'dateAsc';\n\n\tconst onClick = useCallback((): void => {\n\t\tpushHistory(`/folder/${folder.id}`);\n\t\tdispatch(\n\t\t\tsearch({\n\t\t\t\tfolderId: folder.id,\n\t\t\t\tlimit: 101,\n\t\t\t\tsortBy: 'dateDesc',\n\t\t\t\t// folder.id === FOLDERS.DRAFTS ? 'message' : zimbraPrefGroupMailBy\n\t\t\t\ttypes:\n\t\t\t\t\tfolder.id === FOLDERS.DRAFTS || typeof zimbraPrefGroupMailBy !== 'string'\n\t\t\t\t\t\t? 'message'\n\t\t\t\t\t\t: zimbraPrefGroupMailBy\n\t\t\t})\n\t\t);\n\t}, [dispatch, folder.id, zimbraPrefGroupMailBy]);\n\n\tconst accordionItem = useMemo(\n\t\t() => ({\n\t\t\t...item,\n\t\t\tlabel:\n\t\t\t\titem.id === FOLDERS.USER_ROOT\n\t\t\t\t\t? accountName\n\t\t\t\t\t: getFolderTranslatedName({ t, folderId: item.id, folderName: item.label }),\n\t\t\ticon: getFolderIconName(item),\n\t\t\ticonColor: getFolderIconColor(item),\n\t\t\t// open: openIds ? openIds.includes(folder.id) : false,\n\t\t\tbadgeCounter: badgeCount(item.id === FOLDERS.DRAFTS ? item?.folder.n : item?.folder?.u),\n\t\t\tbadgeType: item.id === FOLDERS.DRAFTS ? 'read' : 'unread',\n\t\t\tto: `/folder/${item.id}`,\n\t\t\ttextProps: { size: 'small' }\n\t\t}),\n\t\t[item, accountName, t]\n\t);\n\n\tconst dropdownItems = useFolderActions(item);\n\n\tconst statusIcon = useMemo(() => {\n\t\tconst RowWithIcon = (icon: string, color: string, tooltipText: string): JSX.Element => (\n\t\t\t<Padding left=\"small\">\n\t\t\t\t<Tooltip placement=\"right\" label={tooltipText}>\n\t\t\t\t\t<Row>\n\t\t\t\t\t\t<Icon icon={icon} color={color} size=\"medium\" />\n\t\t\t\t\t</Row>\n\t\t\t\t</Tooltip>\n\t\t\t</Padding>\n\t\t);\n\n\t\tif (folder.acl?.grant) {\n\t\t\tconst tooltipText = t('tooltip.folder_sharing_status', {\n\t\t\t\tcount: folder.acl.grant.length,\n\t\t\t\tdefaultValue_one: 'Shared with {{count}} person',\n\t\t\t\tdefaultValue: 'Shared with {{count}} people'\n\t\t\t});\n\t\t\treturn RowWithIcon('Shared', 'shared', tooltipText);\n\t\t}\n\t\tif (folder.isLink) {\n\t\t\tconst tooltipText = t('tooltip.folder_linked_status', 'Linked to me');\n\t\t\treturn RowWithIcon('Linked', 'linked', tooltipText);\n\t\t}\n\t\treturn '';\n\t}, [folder, t]);\n\n\t// hide folders where a share was provided and subsequently removed\n\tif (folder.broken) {\n\t\treturn <></>;\n\t}\n\n\treturn folder.id === FOLDERS.USER_ROOT || folder.oname === ROOT_NAME ? (\n\t\t<FittedRow>\n\t\t\t<Padding horizontal=\"small\">\n\t\t\t\t<Avatar label={accordionItem.label} colorLabel={accordionItem.iconColor} size=\"medium\" />\n\t\t\t</Padding>\n\t\t\t<Tooltip label={accordionItem.label} placement=\"right\" maxWidth=\"100%\">\n\t\t\t\t<AccordionItem item={accordionItem} />\n\t\t\t</Tooltip>\n\t\t</FittedRow>\n\t) : (\n\t\t<Row width=\"fill\" minWidth={0}>\n\t\t\t<Drop\n\t\t\t\tacceptType={['message', 'conversation', 'folder']}\n\t\t\t\tonDrop={(data: OnDropActionProps): void => onDropAction(data)}\n\t\t\t\tonDragEnter={(data: OnDropActionProps): unknown => onDragEnterAction(data)}\n\t\t\t\toverlayAcceptComponent={<DropOverlayContainer folder={folder} />}\n\t\t\t\toverlayDenyComponent={<DropDenyOverlayContainer folder={folder} />}\n\t\t\t>\n\t\t\t\t<Drag\n\t\t\t\t\ttype=\"folder\"\n\t\t\t\t\tdata={folder}\n\t\t\t\t\tdragDisabled={dragFolderDisable}\n\t\t\t\t\tstyle={{ display: 'block' }}\n\t\t\t\t>\n\t\t\t\t\t<AppLink\n\t\t\t\t\t\tonClick={onClick}\n\t\t\t\t\t\tto={`/folder/${folder.id}`}\n\t\t\t\t\t\tstyle={{ width: '100%', height: '100%', textDecoration: 'none' }}\n\t\t\t\t\t>\n\t\t\t\t\t\t<Dropdown contextMenu items={dropdownItems} display=\"block\" width=\"100%\">\n\t\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t\t<Padding left=\"small\" />\n\t\t\t\t\t\t\t\t<Tooltip label={accordionItem.label} placement=\"right\" maxWidth=\"100%\">\n\t\t\t\t\t\t\t\t\t<AccordionItem item={accordionItem}>{statusIcon}</AccordionItem>\n\t\t\t\t\t\t\t\t</Tooltip>\n\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t</Dropdown>\n\t\t\t\t\t</AppLink>\n\t\t\t\t</Drag>\n\t\t\t</Drop>\n\t\t</Row>\n\t);\n};\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/views/sidebar/accordion-custom-component.tsx b/src/views/sidebar/accordion-custom-component.tsx
+--- a/src/views/sidebar/accordion-custom-component.tsx	(revision 625354c8af746681a130d381c5881a3713632fe6)
++++ b/src/views/sidebar/accordion-custom-component.tsx	(date 1661883378000)
+@@ -3,57 +3,48 @@
+  *
+  * SPDX-License-Identifier: AGPL-3.0-only
+  */
+-import React, { FC, useCallback, useContext, useMemo, useState } from 'react';
++import {
++	AccordionItem,
++	Avatar,
++	Container,
++	Drag,
++	Drop,
++	Dropdown,
++	Icon,
++	Padding,
++	Row,
++	Tooltip
++} from '@zextras/carbonio-design-system';
+ import {
+ 	AppLink,
++	Folder,
+ 	FOLDERS,
++	getBridgedFunctions,
++	pushHistory,
++	replaceHistory,
+ 	// eslint-disable-next-line @typescript-eslint/ban-ts-comment
+ 	// @ts-ignore
+ 	ROOT_NAME,
+-	replaceHistory,
+-	useUserSettings,
+-	getBridgedFunctions,
+ 	useUserAccount,
+-	pushHistory,
+-	AccordionFolder
++	useUserSettings
+ } from '@zextras/carbonio-shell-ui';
+-import styled from 'styled-components';
+-import {
+-	AccordionItem,
+-	Dropdown,
+-	Drag,
+-	Drop,
+-	Container,
+-	Tooltip,
+-	Avatar,
+-	Icon,
+-	Row,
+-	Padding,
+-	ModalManagerContext
+-} from '@zextras/carbonio-design-system';
+-import { find, startsWith } from 'lodash';
++import React, { FC, useCallback, useMemo } from 'react';
+ import { useTranslation } from 'react-i18next';
+ import { useDispatch } from 'react-redux';
+ import { useParams } from 'react-router-dom';
++import styled from 'styled-components';
+ import { convAction, msgAction, search } from '../../store/actions';
+ import { folderAction } from '../../store/actions/folder-action';
+-import { getFolderIconColor, getFolderIconName, getFolderTranslatedName } from './utils';
+-import { NewModal } from './new-modal';
+-import { MoveModal } from './move-modal';
+-import { EmptyModal } from './empty-modal';
+-import { DeleteModal } from './delete-modal';
+-import { EditModal } from './edit-modal';
+-import { SharesInfoModal } from './shares-info-modal';
+-import ShareFolderModal from './share-folder-modal';
+-import { FolderActionsType } from '../../commons/utils';
+ import { DataProps } from '../../types';
++import { useFolderActions } from './use-folder-actions';
++import { getFolderIconColor, getFolderIconName, getFolderTranslatedName } from './utils';
+ 
+ const FittedRow = styled(Row)`
+ 	max-width: calc(100% - (2 * ${({ theme }): string => theme.sizes.padding.small}));
+ 	height: 48px;
+ `;
+ 
+-const DropOverlayContainer = styled(Container)`
++export const DropOverlayContainer = styled(Container)`
+ 	position: absolute;
+ 	width: calc(248px - ${(props): number => (props.folder.level - 2) * 16}px);
+ 	height: 100%;
+@@ -62,8 +53,7 @@
+ 	border: 4px solid #d5e3f6;
+ 	opacity: 0.4;
+ `;
+-
+-const DropDenyOverlayContainer = styled(Container)`
++export const DropDenyOverlayContainer = styled(Container)`
+ 	position: absolute;
+ 	width: calc(248px - ${(props): number => (props.folder.level - 2) * 16}px);
+ 	height: 100%;
+@@ -72,304 +62,52 @@
+ 	border: 4px solid #d5e3f6;
+ 	opacity: 0.4;
+ `;
+-
+-type FolderActionsProps = {
+-	id: string;
+-	icon: string;
+-	label: string;
+-	click: (e: MouseEvent) => void;
+-	disabled?: boolean;
+-};
+-
+-const useFolderActions = (folder: AccordionFolder): Array<FolderActionsProps> => {
+-	const [t] = useTranslation();
+-	const dispatch = useDispatch();
+-	// eslint-disable-next-line @typescript-eslint/ban-types
+-	const createModal = useContext(ModalManagerContext) as Function;
+-	const [activeModal, setActiveModal] = useState('default');
+-	const [activeGrant, setActiveGrant] = useState({});
+-	const goBack = useCallback(() => {
+-		setActiveModal('default');
+-	}, [setActiveModal]);
+-
+-	const actions = useMemo(
+-		() => [
+-			{
+-				id: FolderActionsType.NEW,
+-				icon: 'FolderAddOutline',
+-				label: t('label.new_folder', 'New Folder'),
+-				click: (e: MouseEvent): void => {
+-					if (e) {
+-						e.stopPropagation();
+-					}
+-					const closeModal = createModal(
+-						{
+-							maxHeight: '90vh',
+-							children: (
+-								<>
+-									<NewModal folder={folder} onClose={(): void => closeModal()} />
+-								</>
+-							)
+-						},
+-						true
+-					);
+-				}
+-			},
+-			{
+-				id: FolderActionsType.MOVE,
+-				icon: 'MoveOutline',
+-				label: startsWith(folder.folder?.absFolderPath, '/Trash')
+-					? t('label.restore', 'Restore')
+-					: t('label.move', 'Move'),
+-				click: (e: MouseEvent): void => {
+-					if (e) {
+-						e.stopPropagation();
+-					}
+-					const closeModal = createModal(
+-						{
+-							maxHeight: '90vh',
+-							children: (
+-								<>
+-									<MoveModal folder={folder} onClose={(): void => closeModal()} />
+-								</>
+-							)
+-						},
+-						true
+-					);
+-				}
+-			},
+-			{
+-				id: FolderActionsType.EMPTY,
+-				icon: folder.id === FOLDERS.TRASH ? 'DeletePermanentlyOutline' : 'EmptyFolderOutline',
+-				label:
+-					folder.id === FOLDERS.TRASH
+-						? t('folder_panel.action.empty.trash', 'Empty Trash')
+-						: t('folder_panel.action.wipe.folder_panel', 'Wipe Folder'),
+-				disabled: folder.folder?.n === 0 && folder.folder?.children?.length === 0,
+-				click: (e: MouseEvent): void => {
+-					if (e) {
+-						e.stopPropagation();
+-					}
+-					const closeModal = createModal(
+-						{
+-							children: (
+-								<>
+-									<EmptyModal onClose={(): void => closeModal()} folder={folder} />
+-								</>
+-							)
+-						},
+-						true
+-					);
+-				}
+-			},
+-			{
+-				id: FolderActionsType.EDIT,
+-				icon: 'Edit2Outline',
+-				label: folder?.folder?.isLink
+-					? t('folder_panel.action.edit_properties', 'Edit Properties')
+-					: t('label.edit', 'Edit'),
+-				click: (e: MouseEvent): void => {
+-					if (e) {
+-						e.stopPropagation();
+-					}
+-					const closeModal = createModal(
+-						{
+-							maxHeight: '90vh',
+-							children: (
+-								<>
+-									<EditModal onClose={(): void => closeModal()} folder={folder} />
+-								</>
+-							)
+-						},
+-						true
+-					);
+-				}
+-			},
+-			{
+-				id: FolderActionsType.DELETE,
+-				icon: 'Trash2Outline',
+-				label: startsWith(folder.folder?.absFolderPath, '/Trash')
+-					? t('label.delete_permanently', 'Delete Permanently')
+-					: t('label.delete', 'Delete'),
+-				click: (e: MouseEvent): void => {
+-					if (e) {
+-						e.stopPropagation();
+-					}
+-					const closeModal = createModal(
+-						{
+-							children: (
+-								<>
+-									<DeleteModal onClose={(): void => closeModal()} folder={folder} />
+-								</>
+-							)
+-						},
+-						true
+-					);
+-				}
+-			},
+-			{
+-				id: FolderActionsType.SHARE,
+-				icon: 'ShareOutline',
+-				label: t('action.share_folder', 'Share folder'),
+-				click: (e: MouseEvent): void => {
+-					if (e) {
+-						e.stopPropagation();
+-					}
+-					const closeModal = createModal(
+-						{
+-							children: (
+-								<>
+-									<ShareFolderModal
+-										onClose={(): void => closeModal()}
+-										folder={folder}
+-										activeGrant={activeGrant}
+-										goBack={goBack}
+-									/>
+-								</>
+-							)
+-						},
+-						true
+-					);
+-				}
+-			},
+-			{
+-				id: FolderActionsType.REMOVE_FROM_LIST,
+-				icon: 'CloseOutline',
+-				label: t('label.remove_from_this_list', 'Remove from this list'),
+-				click: (e): void => {
+-					if (e) {
+-						e.stopPropagation();
+-						dispatch(folderAction({ folder: folder.folder, op: 'delete' }));
+-					}
+-				}
+-			},
+-			{
+-				id: FolderActionsType.SHARES_INFO,
+-				icon: 'InfoOutline',
+-				label: t('label.shares_info', `Shared folder's info`),
+-				click: (e): void => {
+-					if (e) {
+-						e.stopPropagation();
+-					}
+-					const closeModal = createModal(
+-						{
+-							children: (
+-								<>
+-									<SharesInfoModal onClose={(): void => closeModal()} folder={folder.folder} />
+-								</>
+-							)
+-						},
+-						true
+-					);
+-				}
+-			}
+-		],
+-		[activeGrant, createModal, dispatch, folder, goBack, t]
+-	);
+-
+-	const defaultFolderActions = useMemo(
+-		() =>
+-			actions.filter(
+-				(action) =>
+-					action.id !== FolderActionsType.SHARES_INFO &&
+-					action.id !== FolderActionsType.REMOVE_FROM_LIST
+-			),
+-		[actions]
+-	);
+-	const id =
+-		folder.id.indexOf(':') !== -1 ? folder.id.slice(folder.id.indexOf(':') + 1) : folder.id;
+-	switch (id) {
+-		// default folders
+-		case FOLDERS.INBOX:
+-		case FOLDERS.SENT:
+-		case FOLDERS.DRAFTS:
+-			return defaultFolderActions.map((action) =>
+-				action.id === FolderActionsType.MOVE || action.id === FolderActionsType.DELETE
+-					? { ...action, disabled: true }
+-					: action
+-			);
+-
+-		case FOLDERS.SPAM:
+-			return defaultFolderActions.map((action) =>
+-				action.id === FolderActionsType.NEW ||
+-				action.id === FolderActionsType.MOVE ||
+-				action.id === FolderActionsType.DELETE
+-					? { ...action, disabled: true }
+-					: action
+-			);
+-		case FOLDERS.TRASH:
+-			return defaultFolderActions.map((action) =>
+-				action.id === FolderActionsType.MOVE ||
+-				action.id === FolderActionsType.DELETE ||
+-				action.id === FolderActionsType.EDIT ||
+-				action.id === FolderActionsType.SHARE
+-					? { ...action, disabled: true }
+-					: action
+-			);
+-		// customizable folders
+-		default:
+-			return folder.folder?.isLink
+-				? actions.filter(
+-						(action) =>
+-							action.id === FolderActionsType.SHARES_INFO ||
+-							action.id === FolderActionsType.REMOVE_FROM_LIST ||
+-							action.id === FolderActionsType.EDIT
+-				  )
+-				: defaultFolderActions.map((action) => {
+-						if (
+-							startsWith(folder.folder?.absFolderPath, '/Trash') &&
+-							(action.id === FolderActionsType.NEW || action.id === FolderActionsType.EDIT)
+-						) {
+-							return { ...action, disabled: true };
+-						}
+-						return action;
+-				  });
+-	}
+-};
+-
+-type DragEnterAction =
++export type DragEnterAction =
+ 	| undefined
+ 	| {
+ 			success: false;
+ 	  };
+-
+-type OnDropActionProps = {
++export type OnDropActionProps = {
+ 	type: string;
+ 	data: DataProps;
+ };
+ 
+ const badgeCount = (v?: number): number | undefined => (v && v > 0 ? v : undefined);
+-export const AccordionCustomComponent: FC<{ item: AccordionFolder }> = ({ item }) => {
+-	const { folder } = item;
++
++const AccordionCustomComponent: FC<{ item: Folder }> = ({ item }) => {
++	console.count('@@AccordionCustomComponent');
+ 	const accountName = useUserAccount().name;
+ 	const [t] = useTranslation();
+ 	const dispatch = useDispatch();
+ 	const { folderId } = useParams<{ folderId: string }>();
+ 
+-	const onDragEnterAction = (data: OnDropActionProps): DragEnterAction => {
+-		if (data.type === 'conversation' || data.type === 'message') {
+-			if (
+-				data.data.parentFolderId === folder.id || // same folder not allowed
+-				(data.data.parentFolderId === FOLDERS.INBOX && [5, 6].includes(Number(folder.id))) || // from inbox not allowed in draft and sent
+-				(data.data.parentFolderId === FOLDERS.DRAFTS && ![3].includes(Number(folder.id))) || // from draft only allowed in Trash
+-				(folder.id === FOLDERS.DRAFTS && data.data.parentFolderId !== FOLDERS.TRASH) || // only from Trash can move in Draft
+-				(folder.isLink && folder.perm?.indexOf('w') === -1) || // only if shared folder have write permission
+-				folder.id === FOLDERS.USER_ROOT ||
+-				folder.oname === ROOT_NAME
+-			) {
+-				return { success: false };
+-			}
+-		}
+-		if (data.type === 'folder') {
+-			if (
+-				folder.id === data.data.id || // same folder not allowed
+-				folder.isLink || //  shared folder not allowed
+-				[FOLDERS.DRAFTS, FOLDERS.SPAM].includes(folder.id) // cannot be moved inside Draft and Spam
+-			)
+-				return { success: false };
+-		}
+-		return undefined;
+-	};
++	const onDragEnterAction = useCallback(
++		(data: OnDropActionProps): DragEnterAction => {
++			if (data.type === 'conversation' || data.type === 'message') {
++				if (
++					data.data.parentFolderId === item.id || // same folder not allowed
++					(data.data.parentFolderId === FOLDERS.INBOX && [5, 6].includes(Number(item.id))) || // from inbox not allowed in draft and sent
++					(data.data.parentFolderId === FOLDERS.DRAFTS && ![3].includes(Number(item.id))) || // from draft only allowed in Trash
++					(item.id === FOLDERS.DRAFTS && data.data.parentFolderId !== FOLDERS.TRASH) || // only from Trash can move in Draft
++					(item.isLink && item.perm?.indexOf('w') === -1) || // only if shared folder have write permission
++					item.id === FOLDERS.USER_ROOT ||
++					(item.isLink && item.oname === ROOT_NAME)
++				) {
++					return { success: false };
++				}
++			}
++			if (data.type === 'folder') {
++				if (
++					item.id === data.data.id || // same folder not allowed
++					item.isLink || //  shared folder not allowed
++					[FOLDERS.DRAFTS, FOLDERS.SPAM].includes(item.id) // cannot be moved inside Draft and Spam
++				)
++					return { success: false };
++			}
++			return undefined;
++		},
++		[item]
++	);
+ 
+ 	const onDropAction = (data: OnDropActionProps): void => {
+ 		const dragEnterResponse = onDragEnterAction(data);
+@@ -384,7 +122,7 @@
+ 		}
+ 
+ 		if (data.type === 'folder') {
+-			dispatch(folderAction({ folder: data.data, l: folder.id || FOLDERS.USER_ROOT, op: 'move' }))
++			dispatch(folderAction({ folder: data.data, l: item.id || FOLDERS.USER_ROOT, op: 'move' }))
+ 				// eslint-disable-next-line @typescript-eslint/ban-ts-comment
+ 				// @ts-ignore
+ 				.then((res) => {
+@@ -411,7 +149,7 @@
+ 				convAction({
+ 					operation: `move`,
+ 					ids: convMsgsIds,
+-					parent: folder.id
++					parent: item.id
+ 				})
+ 			)
+ 				// eslint-disable-next-line @typescript-eslint/ban-ts-comment
+@@ -427,7 +165,7 @@
+ 							autoHideTimeout: 3000,
+ 							actionLabel: t('action.goto_folder', 'GO TO FOLDER'),
+ 							onActionClick: () => {
+-								replaceHistory(`/folder/${folder.id}`);
++								replaceHistory(`/folder/${item.id}`);
+ 							}
+ 						});
+ 					} else {
+@@ -446,7 +184,7 @@
+ 				msgAction({
+ 					operation: `move`,
+ 					ids: convMsgsIds,
+-					parent: folder.id
++					parent: item.id
+ 				})
+ 			)
+ 				// eslint-disable-next-line @typescript-eslint/ban-ts-comment
+@@ -461,7 +199,7 @@
+ 							autoHideTimeout: 3000,
+ 							actionLabel: t('action.goto_folder', 'GO TO FOLDER'),
+ 							onActionClick: () => {
+-								replaceHistory(`/folder/${folder.id}`);
++								replaceHistory(`/folder/${item.id}`);
+ 							}
+ 						});
+ 					} else {
+@@ -481,9 +219,9 @@
+ 	const dragFolderDisable = useMemo(
+ 		() =>
+ 			[FOLDERS.INBOX, FOLDERS.TRASH, FOLDERS.SPAM, FOLDERS.SENT, FOLDERS.DRAFTS].includes(
+-				folder.id
+-			) || folder.isLink, // Default folders and shared folders not allowed to drag
+-		[folder.id, folder.isLink]
++				item.id
++			) || item.isLink, // Default folders and shared folders not allowed to drag
++		[item.id, item.isLink]
+ 	);
+ 	const { zimbraPrefGroupMailBy } = useUserSettings().prefs;
+ 
+@@ -501,20 +239,20 @@
+ 	// }, [zimbraPrefSortOrder, folder.id]) as 'dateDesc' | 'dateAsc';
+ 
+ 	const onClick = useCallback((): void => {
+-		pushHistory(`/folder/${folder.id}`);
++		pushHistory(`/folder/${item.id}`);
+ 		dispatch(
+ 			search({
+-				folderId: folder.id,
++				folderId: item.id,
+ 				limit: 101,
+ 				sortBy: 'dateDesc',
+ 				// folder.id === FOLDERS.DRAFTS ? 'message' : zimbraPrefGroupMailBy
+ 				types:
+-					folder.id === FOLDERS.DRAFTS || typeof zimbraPrefGroupMailBy !== 'string'
++					item.id === FOLDERS.DRAFTS || typeof zimbraPrefGroupMailBy !== 'string'
+ 						? 'message'
+ 						: zimbraPrefGroupMailBy
+ 			})
+ 		);
+-	}, [dispatch, folder.id, zimbraPrefGroupMailBy]);
++	}, [dispatch, item.id, zimbraPrefGroupMailBy]);
+ 
+ 	const accordionItem = useMemo(
+ 		() => ({
+@@ -522,11 +260,11 @@
+ 			label:
+ 				item.id === FOLDERS.USER_ROOT
+ 					? accountName
+-					: getFolderTranslatedName({ t, folderId: item.id, folderName: item.label }),
++					: getFolderTranslatedName({ t, folderId: item.id, folderName: item.name }),
+ 			icon: getFolderIconName(item),
+ 			iconColor: getFolderIconColor(item),
+ 			// open: openIds ? openIds.includes(folder.id) : false,
+-			badgeCounter: badgeCount(item.id === FOLDERS.DRAFTS ? item?.folder.n : item?.folder?.u),
++			badgeCounter: badgeCount(item.id === FOLDERS.DRAFTS ? item?.n : item?.u),
+ 			badgeType: item.id === FOLDERS.DRAFTS ? 'read' : 'unread',
+ 			to: `/folder/${item.id}`,
+ 			textProps: { size: 'small' }
+@@ -547,27 +285,27 @@
+ 			</Padding>
+ 		);
+ 
+-		if (folder.acl?.grant) {
++		if (item.acl?.grant) {
+ 			const tooltipText = t('tooltip.folder_sharing_status', {
+-				count: folder.acl.grant.length,
++				count: item.acl.grant.length,
+ 				defaultValue_one: 'Shared with {{count}} person',
+ 				defaultValue: 'Shared with {{count}} people'
+ 			});
+ 			return RowWithIcon('Shared', 'shared', tooltipText);
+ 		}
+-		if (folder.isLink) {
++		if (item.isLink) {
+ 			const tooltipText = t('tooltip.folder_linked_status', 'Linked to me');
+ 			return RowWithIcon('Linked', 'linked', tooltipText);
+ 		}
+ 		return '';
+-	}, [folder, t]);
++	}, [item, t]);
+ 
+ 	// hide folders where a share was provided and subsequently removed
+-	if (folder.broken) {
++	if (item.isLink && item.broken) {
+ 		return <></>;
+ 	}
+ 
+-	return folder.id === FOLDERS.USER_ROOT || folder.oname === ROOT_NAME ? (
++	return item.id === FOLDERS.USER_ROOT || (item.isLink && item.oname === ROOT_NAME) ? (
+ 		<FittedRow>
+ 			<Padding horizontal="small">
+ 				<Avatar label={accordionItem.label} colorLabel={accordionItem.iconColor} size="medium" />
+@@ -582,18 +320,18 @@
+ 				acceptType={['message', 'conversation', 'folder']}
+ 				onDrop={(data: OnDropActionProps): void => onDropAction(data)}
+ 				onDragEnter={(data: OnDropActionProps): unknown => onDragEnterAction(data)}
+-				overlayAcceptComponent={<DropOverlayContainer folder={folder} />}
+-				overlayDenyComponent={<DropDenyOverlayContainer folder={folder} />}
++				overlayAcceptComponent={<DropOverlayContainer folder={item} />}
++				overlayDenyComponent={<DropDenyOverlayContainer folder={item} />}
+ 			>
+ 				<Drag
+ 					type="folder"
+-					data={folder}
++					data={item}
+ 					dragDisabled={dragFolderDisable}
+ 					style={{ display: 'block' }}
+ 				>
+ 					<AppLink
+ 						onClick={onClick}
+-						to={`/folder/${folder.id}`}
++						to={`/folder/${item.id}`}
+ 						style={{ width: '100%', height: '100%', textDecoration: 'none' }}
+ 					>
+ 						<Dropdown contextMenu items={dropdownItems} display="block" width="100%">
+@@ -610,3 +348,5 @@
+ 		</Row>
+ 	);
+ };
++
++export default AccordionCustomComponent;
+Index: src/views/sidebar/shares-info-modal.jsx
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/views/sidebar/shares-info-modal.jsx b/src/views/sidebar/shares-info-modal.tsx
+rename from src/views/sidebar/shares-info-modal.jsx
+rename to src/views/sidebar/shares-info-modal.tsx
+--- a/src/views/sidebar/shares-info-modal.jsx	(revision 625354c8af746681a130d381c5881a3713632fe6)
++++ b/src/views/sidebar/shares-info-modal.tsx	(date 1661735931000)
+@@ -3,12 +3,19 @@
+  *
+  * SPDX-License-Identifier: AGPL-3.0-only
+  */
+-import React from 'react';
++import React, { FC } from 'react';
++import { Folder } from '@zextras/carbonio-shell-ui';
+ import { useTranslation } from 'react-i18next';
+ import { Container, Icon, Row, Text } from '@zextras/carbonio-design-system';
+ import { ModalHeader } from './commons/modal-header';
+ 
+-export const ShareInfoRow = ({ icon, label, text }) => (
++type ShareInfoRowProps = {
++	icon: string;
++	label: string;
++	text: string | undefined;
++};
++
++export const ShareInfoRow: FC<ShareInfoRowProps> = ({ icon, label, text }) => (
+ 	<Row width="fill" mainAlignment="flex-start" padding={{ all: 'small' }}>
+ 		<Row padding={{ right: 'small' }}>
+ 			<Icon icon={icon} />
+@@ -22,7 +29,12 @@
+ 	</Row>
+ );
+ 
+-export const SharesInfoModal = ({ onClose, folder }) => {
++type SharesInfoModalProps = {
++	onClose: () => void;
++	folder: Folder;
++};
++
++export const SharesInfoModal: FC<SharesInfoModalProps> = ({ onClose, folder }) => {
+ 	const [t] = useTranslation();
+ 
+ 	const text = (/r/.test(folder.perm || '') ? `${t('label.read', 'Read')}` : '')
+@@ -50,7 +62,7 @@
+ 			<ShareInfoRow
+ 				icon="PersonOutline"
+ 				label={`${t('label.owner', 'Owner: ')}`}
+-				text={folder.owner}
++				text={folder.isLink ? folder?.owner : ''}
+ 			/>
+ 			<ShareInfoRow
+ 				icon="MailModOutline"
+@@ -65,7 +77,7 @@
+ 			<ShareInfoRow
+ 				icon="EmailOutline"
+ 				label={`${t('label.messages', 'Messages')}`}
+-				text={folder.n}
++				text={String(folder.n)}
+ 			/>
+ 		</Container>
+ 	);
+Index: src/views/sidebar/parts/edit/folder-details.tsx
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport React, { FC } from 'react';\nimport { Container, Row, Padding, Text, Divider } from '@zextras/carbonio-design-system';\nimport { useTranslation } from 'react-i18next';\nimport { AccordionFolder } from '@zextras/carbonio-shell-ui';\n\nconst bytesToSize = (bytes: number): string => {\n\tconst sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\n\tif (bytes === 0) return '0 Byte';\n\tconst i = Math.floor(Math.log(bytes) / Math.log(1024));\n\treturn `${Math.round(bytes / 1024 ** i)} ${sizes[i]}`;\n};\n\nconst FolderDetails: FC<{ folder: AccordionFolder }> = ({ folder }) => {\n\tconst [t] = useTranslation();\n\treturn (\n\t\t<>\n\t\t\t<Container\n\t\t\t\tmainAlignment=\"flex-start\"\n\t\t\t\tpadding={{ all: 'small' }}\n\t\t\t\tcrossAlignment=\"flex-start\"\n\t\t\t\ttakeAvailableSpace\n\t\t\t\twidth=\"100%\"\n\t\t\t\torientation=\"horizontal\"\n\t\t\t>\n\t\t\t\t<Row orientation=\"vertical\" width=\"33.33%\" crossAlignment=\"flex-start\">\n\t\t\t\t\t<Text size=\"small\" color=\"secondary\">\n\t\t\t\t\t\t{t('label.type', 'Type')}\n\t\t\t\t\t</Text>\n\t\t\t\t\t<Padding top=\"extrasmall\" />\n\t\t\t\t\t<Text>{t('label.mail_folder', 'E-mail folder')}</Text>\n\t\t\t\t</Row>\n\t\t\t\t<Row orientation=\"vertical\" width=\"33.33%\" crossAlignment=\"flex-start\">\n\t\t\t\t\t<Text size=\"small\" color=\"secondary\">\n\t\t\t\t\t\t{t('label.messages', 'Messages')}\n\t\t\t\t\t</Text>\n\t\t\t\t\t<Padding top=\"extrasmall\" />\n\t\t\t\t\t<Text>{folder.folder?.n}</Text>\n\t\t\t\t</Row>\n\t\t\t\t<Row orientation=\"vertical\" width=\"33.33%\" crossAlignment=\"flex-start\">\n\t\t\t\t\t<Text size=\"small\" color=\"secondary\">\n\t\t\t\t\t\tSize{t('label.size', 'Size')}\n\t\t\t\t\t</Text>\n\t\t\t\t\t<Padding top=\"extrasmall\" />\n\t\t\t\t\t<Text>{bytesToSize(folder.folder?.s || 0)}</Text>\n\t\t\t\t</Row>\n\t\t\t</Container>\n\t\t\t<Divider />\n\t\t\t<Padding bottom=\"medium\" />\n\t\t</>\n\t);\n};\n\nexport default FolderDetails;\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/views/sidebar/parts/edit/folder-details.tsx b/src/views/sidebar/parts/edit/folder-details.tsx
+--- a/src/views/sidebar/parts/edit/folder-details.tsx	(revision 625354c8af746681a130d381c5881a3713632fe6)
++++ b/src/views/sidebar/parts/edit/folder-details.tsx	(date 1661736113000)
+@@ -6,7 +6,7 @@
+ import React, { FC } from 'react';
+ import { Container, Row, Padding, Text, Divider } from '@zextras/carbonio-design-system';
+ import { useTranslation } from 'react-i18next';
+-import { AccordionFolder } from '@zextras/carbonio-shell-ui';
++import { Folder } from '@zextras/carbonio-shell-ui';
+ 
+ const bytesToSize = (bytes: number): string => {
+ 	const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
+@@ -15,7 +15,7 @@
+ 	return `${Math.round(bytes / 1024 ** i)} ${sizes[i]}`;
+ };
+ 
+-const FolderDetails: FC<{ folder: AccordionFolder }> = ({ folder }) => {
++const FolderDetails: FC<{ folder: Folder }> = ({ folder }) => {
+ 	const [t] = useTranslation();
+ 	return (
+ 		<>
+@@ -39,14 +39,14 @@
+ 						{t('label.messages', 'Messages')}
+ 					</Text>
+ 					<Padding top="extrasmall" />
+-					<Text>{folder.folder?.n}</Text>
++					<Text>{folder.n}</Text>
+ 				</Row>
+ 				<Row orientation="vertical" width="33.33%" crossAlignment="flex-start">
+ 					<Text size="small" color="secondary">
+ 						Size{t('label.size', 'Size')}
+ 					</Text>
+ 					<Padding top="extrasmall" />
+-					<Text>{bytesToSize(folder.folder?.s || 0)}</Text>
++					<Text>{bytesToSize(folder.s || 0)}</Text>
+ 				</Row>
+ 			</Container>
+ 			<Divider />
+Index: src/views/sidebar/parts/edit/modal-accordion-custom-component.tsx
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport React, { FC, useLayoutEffect, useMemo, useRef, useState } from 'react';\nimport { Padding, Row, Icon, Container, TextWithTooltip } from '@zextras/carbonio-design-system';\n\nimport { AccordionFolder } from '@zextras/carbonio-shell-ui';\nimport { useTranslation } from 'react-i18next';\nimport { indexOf, lastIndexOf, min } from 'lodash';\nimport { getFolderIconColor, getFolderIconName, getSystemFolderTranslatedName } from '../../utils';\nimport { Crumb } from '../../../../types';\nimport { Breadcrumbs } from './breadcrumbs';\n\nconst ModalAccordionCustomComponent: FC<{\n\titem: AccordionFolder;\n}> = (folder) => {\n\tconst { item } = folder;\n\tconst [t] = useTranslation();\n\tconst systemFolder = useMemo(() => {\n\t\tlet result = '';\n\t\tif (item.folder.absFolderPath) {\n\t\t\tresult =\n\t\t\t\titem.folder.absFolderPath.indexOf('/', 1) === -1\n\t\t\t\t\t? item.folder.absFolderPath.slice(1, item.folder.absFolderPath.indexOf('/', 0))\n\t\t\t\t\t: item.folder.absFolderPath.slice(1, item.folder.absFolderPath.indexOf('/', 1));\n\t\t}\n\t\treturn result;\n\t}, [item.folder.absFolderPath]);\n\tconst translatedSystemFolder = getSystemFolderTranslatedName({ t, folderName: systemFolder });\n\tconst factor = 10;\n\tconst path = useMemo(\n\t\t() =>\n\t\t\titem.folder.absFolderPath &&\n\t\t\titem.folder.absFolderPath\n\t\t\t\t.slice(\n\t\t\t\t\titem.folder.absFolderPath.indexOf('/', 1) + 1,\n\t\t\t\t\titem.folder.absFolderPath.lastIndexOf('/')\n\t\t\t\t)\n\t\t\t\t.split('/'),\n\t\t[item.folder.absFolderPath]\n\t);\n\tconst targetFolder = useMemo(\n\t\t() => item.label || item.folder.name,\n\t\t[item.label, item.folder.name]\n\t);\n\tconst targetFolderWidth = useMemo(\n\t\t() => min([targetFolder.length * factor + 18, 150]) || 0,\n\t\t[targetFolder.length]\n\t);\n\tconst containerRef = useRef<HTMLDivElement>();\n\tconst [availableWidth, setAvailableWidth] = useState(\n\t\t(containerRef?.current?.clientWidth || 405) - targetFolderWidth\n\t);\n\tconst iconName = getFolderIconName(item);\n\tconst iconColor = getFolderIconColor(item);\n\n\tconst fullPath = useMemo(\n\t\t() => (path ? [translatedSystemFolder, ...path].join(' / ') : ''),\n\t\t[path, translatedSystemFolder]\n\t);\n\n\tuseLayoutEffect(() => {\n\t\tconst calculateAvailableWidth = (): void => {\n\t\t\tif (containerRef && containerRef.current) {\n\t\t\t\tsetAvailableWidth(containerRef?.current?.clientWidth || 0 - targetFolderWidth);\n\t\t\t}\n\t\t};\n\t\twindow.addEventListener('resize', calculateAvailableWidth);\n\t\treturn (): void => window.removeEventListener('resize', calculateAvailableWidth);\n\t}, [containerRef?.current?.clientWidth, targetFolderWidth]);\n\n\tconst crumbs: Array<Crumb> | undefined = useMemo(() => {\n\t\tconst result = [];\n\t\tlet exitLoop = false;\n\t\tlet stringRemainingWidth = availableWidth;\n\t\twhile (\n\t\t\t!(\n\t\t\t\texitLoop !== false ||\n\t\t\t\titem.folder.parent?.absFolderPath === '/' ||\n\t\t\t\t(item.folder.parent?.isLink === true &&\n\t\t\t\t\titem.folder.parent?.absFolderPath.lastIndexOf('/', 1) !== -1)\n\t\t\t)\n\t\t) {\n\t\t\tconst value = item.folder.absFolderPath.slice(\n\t\t\t\tlastIndexOf(item.folder.absFolderPath, '/') + 1\n\t\t\t);\n\t\t\tstringRemainingWidth -= item.folder.name.length * factor + 18;\n\t\t\tif (value !== '' && stringRemainingWidth > 0) {\n\t\t\t\tresult.push({\n\t\t\t\t\tlabel: value,\n\t\t\t\t\ttooltip: ''\n\t\t\t\t});\n\t\t\t\titem.folder = item.folder.parent;\n\t\t\t} else {\n\t\t\t\tresult.push({\n\t\t\t\t\tlabel: '...',\n\t\t\t\t\ttooltip: item.folder.absFolderPath.slice(indexOf(item.folder.absFolderPath, '/', 2) + 1)\n\t\t\t\t});\n\t\t\t\texitLoop = true;\n\t\t\t}\n\t\t}\n\t\tif (translatedSystemFolder) {\n\t\t\tresult.push({ label: translatedSystemFolder, tooltip: '' });\n\t\t}\n\t\tresult.shift();\n\t\treturn result.reverse();\n\t}, [availableWidth, item, translatedSystemFolder]);\n\treturn (\n\t\t<Container\n\t\t\tref={containerRef}\n\t\t\twidth=\"fill\"\n\t\t\tmain-alignment=\"flex-start\"\n\t\t\torientation=\"vertical\"\n\t\t\tcrossAlignment=\"flex-start\"\n\t\t>\n\t\t\t<Padding all=\"medium\">\n\t\t\t\t<Row orientation=\"horizontal\" width=\"fill\" crossAlignment=\"flex-start\">\n\t\t\t\t\t<Icon color={iconColor} icon={iconName || 'FolderOutline'} size=\"large\" />\n\t\t\t\t\t<Padding right=\"medium\" />\n\t\t\t\t\t{crumbs?.length > 0 && <Breadcrumbs breadcrumbs={crumbs} />}\n\t\t\t\t\t<Container width=\"fit\" maxWidth={availableWidth - fullPath.length + item.label.length}>\n\t\t\t\t\t\t<TextWithTooltip overflow=\"ellipsis\">&nbsp;{item.label}</TextWithTooltip>\n\t\t\t\t\t</Container>\n\t\t\t\t</Row>\n\t\t\t</Padding>\n\t\t</Container>\n\t);\n};\n\nexport default ModalAccordionCustomComponent;\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/views/sidebar/parts/edit/modal-accordion-custom-component.tsx b/src/views/sidebar/parts/edit/modal-accordion-custom-component.tsx
+--- a/src/views/sidebar/parts/edit/modal-accordion-custom-component.tsx	(revision 625354c8af746681a130d381c5881a3713632fe6)
++++ b/src/views/sidebar/parts/edit/modal-accordion-custom-component.tsx	(date 1661853294000)
+@@ -6,7 +6,7 @@
+ import React, { FC, useLayoutEffect, useMemo, useRef, useState } from 'react';
+ import { Padding, Row, Icon, Container, TextWithTooltip } from '@zextras/carbonio-design-system';
+ 
+-import { AccordionFolder } from '@zextras/carbonio-shell-ui';
++import { Folder } from '@zextras/carbonio-shell-ui';
+ import { useTranslation } from 'react-i18next';
+ import { indexOf, lastIndexOf, min } from 'lodash';
+ import { getFolderIconColor, getFolderIconName, getSystemFolderTranslatedName } from '../../utils';
+@@ -14,37 +14,30 @@
+ import { Breadcrumbs } from './breadcrumbs';
+ 
+ const ModalAccordionCustomComponent: FC<{
+-	item: AccordionFolder;
+-}> = (folder) => {
+-	const { item } = folder;
++	item: Folder;
++}> = ({ item }) => {
+ 	const [t] = useTranslation();
+ 	const systemFolder = useMemo(() => {
+ 		let result = '';
+-		if (item.folder.absFolderPath) {
++		if (item.absFolderPath) {
+ 			result =
+-				item.folder.absFolderPath.indexOf('/', 1) === -1
+-					? item.folder.absFolderPath.slice(1, item.folder.absFolderPath.indexOf('/', 0))
+-					: item.folder.absFolderPath.slice(1, item.folder.absFolderPath.indexOf('/', 1));
++				item.absFolderPath.indexOf('/', 1) === -1
++					? item.absFolderPath.slice(1, item.absFolderPath.indexOf('/', 0))
++					: item.absFolderPath.slice(1, item.absFolderPath.indexOf('/', 1));
+ 		}
+ 		return result;
+-	}, [item.folder.absFolderPath]);
++	}, [item.absFolderPath]);
+ 	const translatedSystemFolder = getSystemFolderTranslatedName({ t, folderName: systemFolder });
+ 	const factor = 10;
+ 	const path = useMemo(
+ 		() =>
+-			item.folder.absFolderPath &&
+-			item.folder.absFolderPath
+-				.slice(
+-					item.folder.absFolderPath.indexOf('/', 1) + 1,
+-					item.folder.absFolderPath.lastIndexOf('/')
+-				)
++			item.absFolderPath &&
++			item.absFolderPath
++				.slice(item.absFolderPath.indexOf('/', 1) + 1, item.absFolderPath.lastIndexOf('/'))
+ 				.split('/'),
+-		[item.folder.absFolderPath]
++		[item.absFolderPath]
+ 	);
+-	const targetFolder = useMemo(
+-		() => item.label || item.folder.name,
+-		[item.label, item.folder.name]
+-	);
++	const targetFolder = useMemo(() => item.name, [item.name]);
+ 	const targetFolderWidth = useMemo(
+ 		() => min([targetFolder.length * factor + 18, 150]) || 0,
+ 		[targetFolder.length]
+@@ -73,30 +66,33 @@
+ 
+ 	const crumbs: Array<Crumb> | undefined = useMemo(() => {
+ 		const result = [];
++		let crumbItem = item;
+ 		let exitLoop = false;
+ 		let stringRemainingWidth = availableWidth;
+ 		while (
+ 			!(
+-				exitLoop !== false ||
+-				item.folder.parent?.absFolderPath === '/' ||
+-				(item.folder.parent?.isLink === true &&
+-					item.folder.parent?.absFolderPath.lastIndexOf('/', 1) !== -1)
++				exitLoop ||
++				crumbItem.parent?.absFolderPath === '/' ||
++				(crumbItem.parent?.isLink === true &&
++					crumbItem.parent?.absFolderPath?.lastIndexOf('/', 1) !== -1)
+ 			)
+ 		) {
+-			const value = item.folder.absFolderPath.slice(
+-				lastIndexOf(item.folder.absFolderPath, '/') + 1
+-			);
+-			stringRemainingWidth -= item.folder.name.length * factor + 18;
+-			if (value !== '' && stringRemainingWidth > 0) {
++			const value = crumbItem.absFolderPath?.slice(lastIndexOf(crumbItem.absFolderPath, '/') + 1);
++			stringRemainingWidth -= crumbItem.name.length * factor + 18;
++			if (value && value !== '' && stringRemainingWidth > 0) {
+ 				result.push({
+ 					label: value,
+ 					tooltip: ''
+ 				});
+-				item.folder = item.folder.parent;
++				if (crumbItem.parent) {
++					// eslint-disable-next-line no-param-reassign
++					crumbItem = crumbItem.parent;
++				}
+ 			} else {
+ 				result.push({
+ 					label: '...',
+-					tooltip: item.folder.absFolderPath.slice(indexOf(item.folder.absFolderPath, '/', 2) + 1)
++					tooltip:
++						crumbItem.absFolderPath?.slice(indexOf(crumbItem.absFolderPath, '/', 2) + 1) || ''
+ 				});
+ 				exitLoop = true;
+ 			}
+@@ -119,9 +115,9 @@
+ 				<Row orientation="horizontal" width="fill" crossAlignment="flex-start">
+ 					<Icon color={iconColor} icon={iconName || 'FolderOutline'} size="large" />
+ 					<Padding right="medium" />
+-					{crumbs?.length > 0 && <Breadcrumbs breadcrumbs={crumbs} />}
+-					<Container width="fit" maxWidth={availableWidth - fullPath.length + item.label.length}>
+-						<TextWithTooltip overflow="ellipsis">&nbsp;{item.label}</TextWithTooltip>
++					{crumbs && crumbs?.length > 0 && <Breadcrumbs breadcrumbs={crumbs} />}
++					<Container width="fit" maxWidth={availableWidth - fullPath.length + item.name.length}>
++						<TextWithTooltip overflow="ellipsis">&nbsp;{item.name}</TextWithTooltip>
+ 					</Container>
+ 				</Row>
+ 			</Padding>
+Index: src/views/sidebar/delete-modal.tsx
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport React, { FC, useCallback, useContext } from 'react';\nimport { FOLDERS, report } from '@zextras/carbonio-shell-ui';\nimport { Container, Text, Divider, SnackbarManagerContext } from '@zextras/carbonio-design-system';\nimport { useTranslation } from 'react-i18next';\nimport { useDispatch } from 'react-redux';\nimport { startsWith } from 'lodash';\nimport ModalFooter from './commons/modal-footer';\nimport { ModalHeader } from './commons/modal-header';\nimport { folderAction } from '../../store/actions/folder-action';\nimport { ModalProps } from '../../types';\nimport { FOLDER_ACTIONS } from '../../commons/utilities';\n\nexport const DeleteModal: FC<ModalProps> = ({ folder, onClose }) => {\n\tconst [t] = useTranslation();\n\tconst dispatch = useDispatch();\n\t// eslint-disable-next-line @typescript-eslint/ban-types\n\tconst createSnackbar = useContext(SnackbarManagerContext) as Function;\n\tconst onConfirm = useCallback(() => {\n\t\tlet inTrash = false;\n\t\tconst restoreFolder = (): void =>\n\t\t\tdispatch(\n\t\t\t\tfolderAction({ folder: folder.folder, l: folder.folder?.parent, op: FOLDER_ACTIONS.MOVE })\n\t\t\t)\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t\t// @ts-ignore\n\t\t\t\t.then((res) => {\n\t\t\t\t\tif (res.type.includes('fulfilled')) {\n\t\t\t\t\t\tcreateSnackbar({\n\t\t\t\t\t\t\tkey: `trash-folder`,\n\t\t\t\t\t\t\treplace: true,\n\t\t\t\t\t\t\ttype: 'success',\n\t\t\t\t\t\t\tlabel: t('messages.snackbar.folder_restored', 'Folder restored'),\n\t\t\t\t\t\t\tautoHideTimeout: 3000,\n\t\t\t\t\t\t\thideButton: true\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcreateSnackbar({\n\t\t\t\t\t\t\tkey: `trash`,\n\t\t\t\t\t\t\treplace: true,\n\t\t\t\t\t\t\ttype: 'error',\n\t\t\t\t\t\t\tlabel: t('label.error_try_again', 'Something went wrong, please try again'),\n\t\t\t\t\t\t\tautoHideTimeout: 3000,\n\t\t\t\t\t\t\thideButton: true\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.catch(report);\n\n\t\tif (startsWith(folder.folder?.absFolderPath, '/Trash')) {\n\t\t\tinTrash = true;\n\t\t}\n\t\tdispatch(\n\t\t\tfolderAction({\n\t\t\t\tfolder: folder.folder,\n\t\t\t\tl: FOLDERS.TRASH,\n\t\t\t\top: inTrash ? FOLDER_ACTIONS.DELETE : FOLDER_ACTIONS.MOVE\n\t\t\t})\n\t\t)\n\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t// @ts-ignore\n\t\t\t.then((res: { type: string }) => {\n\t\t\t\tif (res.type.includes('fulfilled')) {\n\t\t\t\t\tcreateSnackbar({\n\t\t\t\t\t\tkey: `trash-folder`,\n\t\t\t\t\t\treplace: true,\n\t\t\t\t\t\ttype: 'info',\n\t\t\t\t\t\tlabel: inTrash\n\t\t\t\t\t\t\t? t('messages.snackbar.folder_deleted', 'Folder permanently deleted.')\n\t\t\t\t\t\t\t: t('messages.snackbar.folder_moved_to_trash', 'Folder moved to trash'),\n\t\t\t\t\t\tautoHideTimeout: 5000,\n\t\t\t\t\t\thideButton: false,\n\t\t\t\t\t\tactionLabel: 'Undo',\n\t\t\t\t\t\tonActionClick: () => restoreFolder()\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tcreateSnackbar({\n\t\t\t\t\t\tkey: `trash`,\n\t\t\t\t\t\treplace: true,\n\t\t\t\t\t\ttype: 'error',\n\t\t\t\t\t\tlabel: t('label.error_try_again', 'Something went wrong, please try again'),\n\t\t\t\t\t\tautoHideTimeout: 3000,\n\t\t\t\t\t\thideButton: true\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(report);\n\t\tonClose();\n\t}, [folder, dispatch, onClose, createSnackbar, t]);\n\n\treturn folder.folder ? (\n\t\t<Container\n\t\t\tpadding={{ all: 'large' }}\n\t\t\tmainAlignment=\"center\"\n\t\t\tcrossAlignment=\"flex-start\"\n\t\t\theight=\"fit\"\n\t\t>\n\t\t\t<ModalHeader\n\t\t\t\ttitle={`${t('label.delete', 'Delete')} ${folder.folder?.name}`}\n\t\t\t\tonClose={onClose}\n\t\t\t/>\n\t\t\t<Container\n\t\t\t\tpadding={{ all: 'small' }}\n\t\t\t\tmainAlignment=\"center\"\n\t\t\t\tcrossAlignment=\"flex-start\"\n\t\t\t\theight=\"fit\"\n\t\t\t>\n\t\t\t\t{startsWith(folder.folder?.absFolderPath, '/Trash') ? (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<Text overflow=\"break-word\">\n\t\t\t\t\t\t\t{t(\n\t\t\t\t\t\t\t\t'folder_panel.modal.delete.body.message2',\n\t\t\t\t\t\t\t\t'Do you want to delete the selected folder permanently?'\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</Text>\n\t\t\t\t\t\t<Text overflow=\"break-word\">\n\t\t\t\t\t\t\t{t(\n\t\t\t\t\t\t\t\t'folder_panel.modal.delete.body.message4',\n\t\t\t\t\t\t\t\t'If you delete it, all the related content will be permanently removed and the folder will no longer be recoverable.'\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</Text>\n\t\t\t\t\t</>\n\t\t\t\t) : (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<Text overflow=\"break-word\">\n\t\t\t\t\t\t\t{t(\n\t\t\t\t\t\t\t\t'folder_panel.modal.delete.body.message1',\n\t\t\t\t\t\t\t\t'Do you want to delete the selected folder?'\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</Text>\n\t\t\t\t\t\t<Text overflow=\"break-word\">\n\t\t\t\t\t\t\t{t(\n\t\t\t\t\t\t\t\t'folder_panel.modal.delete.body.message3',\n\t\t\t\t\t\t\t\t'If you delete it, all the related content will be moved to Trash and the folder will no longer be visible.'\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</Text>\n\t\t\t\t\t</>\n\t\t\t\t)}\n\t\t\t</Container>\n\t\t\t<Divider />\n\t\t\t<ModalFooter\n\t\t\t\tonConfirm={onConfirm}\n\t\t\t\tsecondaryAction={onClose}\n\t\t\t\tlabel={t('action.ok', 'Ok')}\n\t\t\t\tcolor=\"error\"\n\t\t\t/>\n\t\t</Container>\n\t) : (\n\t\t<></>\n\t);\n};\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/views/sidebar/delete-modal.tsx b/src/views/sidebar/delete-modal.tsx
+--- a/src/views/sidebar/delete-modal.tsx	(revision 625354c8af746681a130d381c5881a3713632fe6)
++++ b/src/views/sidebar/delete-modal.tsx	(date 1661735643000)
+@@ -4,7 +4,7 @@
+  * SPDX-License-Identifier: AGPL-3.0-only
+  */
+ import React, { FC, useCallback, useContext } from 'react';
+-import { FOLDERS, report } from '@zextras/carbonio-shell-ui';
++import { Folder, FOLDERS, report } from '@zextras/carbonio-shell-ui';
+ import { Container, Text, Divider, SnackbarManagerContext } from '@zextras/carbonio-design-system';
+ import { useTranslation } from 'react-i18next';
+ import { useDispatch } from 'react-redux';
+@@ -24,7 +24,11 @@
+ 		let inTrash = false;
+ 		const restoreFolder = (): void =>
+ 			dispatch(
+-				folderAction({ folder: folder.folder, l: folder.folder?.parent, op: FOLDER_ACTIONS.MOVE })
++				folderAction({
++					folder,
++					l: folder.parent as unknown as string,
++					op: FOLDER_ACTIONS.MOVE
++				})
+ 			)
+ 				// eslint-disable-next-line @typescript-eslint/ban-ts-comment
+ 				// @ts-ignore
+@@ -51,12 +55,12 @@
+ 				})
+ 				.catch(report);
+ 
+-		if (startsWith(folder.folder?.absFolderPath, '/Trash')) {
++		if (startsWith(folder.absFolderPath, '/Trash')) {
+ 			inTrash = true;
+ 		}
+ 		dispatch(
+ 			folderAction({
+-				folder: folder.folder,
++				folder,
+ 				l: FOLDERS.TRASH,
+ 				op: inTrash ? FOLDER_ACTIONS.DELETE : FOLDER_ACTIONS.MOVE
+ 			})
+@@ -92,24 +96,21 @@
+ 		onClose();
+ 	}, [folder, dispatch, onClose, createSnackbar, t]);
+ 
+-	return folder.folder ? (
++	return folder ? (
+ 		<Container
+ 			padding={{ all: 'large' }}
+ 			mainAlignment="center"
+ 			crossAlignment="flex-start"
+ 			height="fit"
+ 		>
+-			<ModalHeader
+-				title={`${t('label.delete', 'Delete')} ${folder.folder?.name}`}
+-				onClose={onClose}
+-			/>
++			<ModalHeader title={`${t('label.delete', 'Delete')} ${folder.name}`} onClose={onClose} />
+ 			<Container
+ 				padding={{ all: 'small' }}
+ 				mainAlignment="center"
+ 				crossAlignment="flex-start"
+ 				height="fit"
+ 			>
+-				{startsWith(folder.folder?.absFolderPath, '/Trash') ? (
++				{startsWith(folder.absFolderPath, '/Trash') ? (
+ 					<>
+ 						<Text overflow="break-word">
+ 							{t(
+Index: src/hooks/use-local-storage.ts
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/hooks/use-local-storage.ts b/src/hooks/use-local-storage.ts
+new file mode 100644
+--- /dev/null	(date 1661736228000)
++++ b/src/hooks/use-local-storage.ts	(date 1661736228000)
+@@ -0,0 +1,29 @@
++/*
++ * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>
++ *
++ * SPDX-License-Identifier: AGPL-3.0-only
++ */
++
++import { Dispatch, SetStateAction, useState } from 'react';
++
++export function useLocalStorage<T>(key: string, initialValue: T): [T, Dispatch<SetStateAction<T>>] {
++	const [storedValue, setStoredValue] = useState<T>(() => {
++		try {
++			const item = window.localStorage.getItem(key);
++			return item ? JSON.parse(item) : initialValue;
++		} catch (error) {
++			console.error(error);
++			return initialValue;
++		}
++	});
++	const setValue = (value: T | ((val: T) => T)): any => {
++		try {
++			const valueToStore = value instanceof Function ? value(storedValue) : value;
++			setStoredValue(valueToStore);
++			localStorage.setItem(key, JSON.stringify(valueToStore));
++		} catch (error) {
++			console.error(error);
++		}
++	};
++	return [storedValue, setValue];
++}
+Index: src/views/sidebar/use-folder-actions.tsx
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/views/sidebar/use-folder-actions.tsx b/src/views/sidebar/use-folder-actions.tsx
+new file mode 100644
+--- /dev/null	(date 1661736228000)
++++ b/src/views/sidebar/use-folder-actions.tsx	(date 1661736228000)
+@@ -0,0 +1,302 @@
++/*
++ * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>
++ *
++ * SPDX-License-Identifier: AGPL-3.0-only
++ */
++
++import React, { useCallback, useContext, useMemo, useState } from 'react';
++import { ModalManagerContext } from '@zextras/carbonio-design-system';
++import { Folder, FOLDERS } from '@zextras/carbonio-shell-ui';
++import { startsWith } from 'lodash';
++import { useTranslation } from 'react-i18next';
++import { useDispatch } from 'react-redux';
++import { FolderActionsType } from '../../commons/utils';
++import { folderAction } from '../../store/actions/folder-action';
++import { DeleteModal } from './delete-modal';
++import { EditModal } from './edit-modal';
++import { EmptyModal } from './empty-modal';
++import { MoveModal } from './move-modal';
++import { NewModal } from './new-modal';
++import ShareFolderModal from './share-folder-modal';
++import { SharesInfoModal } from './shares-info-modal';
++
++type FolderActionsProps = {
++	id: string;
++	icon: string;
++	label: string;
++	click: (e: MouseEvent) => void;
++	disabled?: boolean;
++};
++export const useFolderActions = (folder: Folder): Array<FolderActionsProps> => {
++	console.time('@@useFolderActions');
++	const [t] = useTranslation();
++	const dispatch = useDispatch();
++	// eslint-disable-next-line @typescript-eslint/ban-types
++	const createModal = useContext(ModalManagerContext) as Function;
++	const [activeModal, setActiveModal] = useState('default');
++	const [activeGrant, setActiveGrant] = useState({});
++	const goBack = useCallback(() => {
++		setActiveModal('default');
++	}, [setActiveModal]);
++
++	// const newFolder = useCallback(
++	// 	(_folder, _createModal, t) => ({
++	// 		id: FolderActionsType.NEW,
++	// 		icon: 'FolderAddOutline',
++	// 		label: t('label.new_folder', 'New Folder'),
++	// 		click: (e: MouseEvent): void => {
++	// 			if (e) {
++	// 				e.stopPropagation();
++	// 			}
++	// 			const closeModal = createModal(
++	// 				{
++	// 					maxHeight: '90vh',
++	// 					children: (
++	// 						<>
++	// 							<NewModal folder={_folder} onClose={(): void => closeModal()} />
++	// 						</>
++	// 					)
++	// 				},
++	// 				true
++	// 			);
++	// 		}
++	// 	}),
++	// 	[folder, createModal, t]
++	// );
++
++	const actions = useMemo(
++		() => [
++			{
++				id: FolderActionsType.NEW,
++				icon: 'FolderAddOutline',
++				label: t('label.new_folder', 'New Folder'),
++				click: (e: MouseEvent): void => {
++					if (e) {
++						e.stopPropagation();
++					}
++					const closeModal = createModal(
++						{
++							maxHeight: '90vh',
++							children: (
++								<>
++									<NewModal folder={folder} onClose={(): void => closeModal()} />
++								</>
++							)
++						},
++						true
++					);
++				}
++			},
++			{
++				id: FolderActionsType.MOVE,
++				icon: 'MoveOutline',
++				label: startsWith(folder.absFolderPath, '/Trash')
++					? t('label.restore', 'Restore')
++					: t('label.move', 'Move'),
++				click: (e: MouseEvent): void => {
++					if (e) {
++						e.stopPropagation();
++					}
++					const closeModal = createModal(
++						{
++							maxHeight: '90vh',
++							children: (
++								<>
++									<MoveModal folder={folder} onClose={(): void => closeModal()} />
++								</>
++							)
++						},
++						true
++					);
++				}
++			},
++			{
++				id: FolderActionsType.EMPTY,
++				icon: folder.id === FOLDERS.TRASH ? 'DeletePermanentlyOutline' : 'EmptyFolderOutline',
++				label:
++					folder.id === FOLDERS.TRASH
++						? t('folder_panel.action.empty.trash', 'Empty Trash')
++						: t('folder_panel.action.wipe.folder_panel', 'Wipe Folder'),
++				disabled: folder.n === 0 && folder.children?.length === 0,
++				click: (e: MouseEvent): void => {
++					if (e) {
++						e.stopPropagation();
++					}
++					const closeModal = createModal(
++						{
++							children: (
++								<>
++									<EmptyModal onClose={(): void => closeModal()} folder={folder} />
++								</>
++							)
++						},
++						true
++					);
++				}
++			},
++			{
++				id: FolderActionsType.EDIT,
++				icon: 'Edit2Outline',
++				label: folder.isLink
++					? t('folder_panel.action.edit_properties', 'Edit Properties')
++					: t('label.edit', 'Edit'),
++				click: (e: MouseEvent): void => {
++					if (e) {
++						e.stopPropagation();
++					}
++					const closeModal = createModal(
++						{
++							maxHeight: '90vh',
++							children: (
++								<>
++									<EditModal onClose={(): void => closeModal()} folder={folder} />
++								</>
++							)
++						},
++						true
++					);
++				}
++			},
++			{
++				id: FolderActionsType.DELETE,
++				icon: 'Trash2Outline',
++				label: startsWith(folder.absFolderPath, '/Trash')
++					? t('label.delete_permanently', 'Delete Permanently')
++					: t('label.delete', 'Delete'),
++				click: (e: MouseEvent): void => {
++					if (e) {
++						e.stopPropagation();
++					}
++					const closeModal = createModal(
++						{
++							children: (
++								<>
++									<DeleteModal onClose={(): void => closeModal()} folder={folder} />
++								</>
++							)
++						},
++						true
++					);
++				}
++			},
++			{
++				id: FolderActionsType.SHARE,
++				icon: 'ShareOutline',
++				label: t('action.share_folder', 'Share folder'),
++				click: (e: MouseEvent): void => {
++					if (e) {
++						e.stopPropagation();
++					}
++					const closeModal = createModal(
++						{
++							children: (
++								<>
++									<ShareFolderModal
++										onClose={(): void => closeModal()}
++										folder={folder}
++										activeGrant={activeGrant}
++										goBack={goBack}
++									/>
++								</>
++							)
++						},
++						true
++					);
++				}
++			},
++			{
++				id: FolderActionsType.REMOVE_FROM_LIST,
++				icon: 'CloseOutline',
++				label: t('label.remove_from_this_list', 'Remove from this list'),
++				click: (e): void => {
++					if (e) {
++						e.stopPropagation();
++						dispatch(folderAction({ folder, op: 'delete' }));
++					}
++				}
++			},
++			{
++				id: FolderActionsType.SHARES_INFO,
++				icon: 'InfoOutline',
++				label: t('label.shares_info', `Shared folder's info`),
++				click: (e): void => {
++					if (e) {
++						e.stopPropagation();
++					}
++					const closeModal = createModal(
++						{
++							children: (
++								<>
++									<SharesInfoModal onClose={(): void => closeModal()} folder={folder} />
++								</>
++							)
++						},
++						true
++					);
++				}
++			}
++		],
++		[activeGrant, createModal, dispatch, folder, goBack, t]
++	);
++
++	const defaultFolderActions = useMemo(
++		() =>
++			actions.filter(
++				(action) =>
++					action.id !== FolderActionsType.SHARES_INFO &&
++					action.id !== FolderActionsType.REMOVE_FROM_LIST
++			),
++		[actions]
++	);
++	const id =
++		folder.id.indexOf(':') !== -1 ? folder.id.slice(folder.id.indexOf(':') + 1) : folder.id;
++
++	console.count('@@folderActions');
++	switch (id) {
++		// default folders
++		case FOLDERS.INBOX:
++		case FOLDERS.SENT:
++		case FOLDERS.DRAFTS:
++			return defaultFolderActions.map((action) =>
++				action.id === FolderActionsType.MOVE || action.id === FolderActionsType.DELETE
++					? { ...action, disabled: true }
++					: action
++			);
++
++		case FOLDERS.SPAM:
++			return defaultFolderActions.map((action) =>
++				action.id === FolderActionsType.NEW ||
++				action.id === FolderActionsType.MOVE ||
++				action.id === FolderActionsType.DELETE
++					? { ...action, disabled: true }
++					: action
++			);
++		case FOLDERS.TRASH:
++			return defaultFolderActions.map((action) =>
++				action.id === FolderActionsType.MOVE ||
++				action.id === FolderActionsType.DELETE ||
++				action.id === FolderActionsType.EDIT ||
++				action.id === FolderActionsType.SHARE
++					? { ...action, disabled: true }
++					: action
++			);
++		// customizable folders
++		default:
++			return folder.isLink
++				? actions.filter(
++						(action) =>
++							action.id === FolderActionsType.SHARES_INFO ||
++							action.id === FolderActionsType.REMOVE_FROM_LIST ||
++							action.id === FolderActionsType.EDIT
++				  )
++				: defaultFolderActions.map((action) => {
++						if (
++							startsWith(folder.absFolderPath, '/Trash') &&
++							(action.id === FolderActionsType.NEW || action.id === FolderActionsType.EDIT)
++						) {
++							return { ...action, disabled: true };
++						}
++						return action;
++				  });
++	}
++};
+Index: src/views/sidebar/utils.ts
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport {\n\tZIMBRA_STANDARD_COLORS,\n\tFOLDERS,\n\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t// @ts-ignore\n\tROOT_NAME,\n\tAccordionFolder,\n\tFolder,\n\tLinkFolderFields\n} from '@zextras/carbonio-shell-ui';\nimport { isNil, omitBy, reduce } from 'lodash';\nimport { TFunction } from 'react-i18next';\n\nconst folderIdRegex = /^(.+:)*(\\d+)$/;\n\nexport const normalizeFolder = (\n\tfolder: Folder & Partial<LinkFolderFields>\n): Partial<Folder & Partial<LinkFolderFields>> =>\n\tomitBy(\n\t\t{\n\t\t\tid: folder.id,\n\t\t\tuuid: folder.uuid,\n\t\t\tcolor: folder.color,\n\t\t\tname: folder.name,\n\t\t\tpath: folder.absFolderPath,\n\t\t\tparent: folder.l,\n\t\t\tparentUuid: folder.luuid,\n\t\t\titemsCount: folder.n,\n\t\t\tsize: folder.s,\n\t\t\tunreadCount: folder.u,\n\t\t\tsynced: true,\n\t\t\trgb: folder.rgb,\n\t\t\towner: folder.owner,\n\t\t\trid: folder.rid,\n\t\t\tzid: folder.zid,\n\t\t\tacl: folder.acl,\n\t\t\tperm: folder.perm,\n\t\t\tisSharedFolder: !!folder.owner,\n\t\t\tretentionPolicy: folder.retentionPolicy,\n\t\t\tview: folder.view\n\t\t},\n\t\tisNil\n\t);\n\nexport const extractFolders = (accordion: Array<any>, acc = {}): any =>\n\treduce(\n\t\taccordion,\n\t\t(acc2, folder) => {\n\t\t\tif (folder.folder) {\n\t\t\t\treturn (folder.view === 'message' &&\n\t\t\t\t\tfolder.id !== FOLDERS.IM_LOGS &&\n\t\t\t\t\tfolder.id !== FOLDERS.USER_ROOT) ||\n\t\t\t\t\tfolder.id === FOLDERS.TRASH\n\t\t\t\t\t? {\n\t\t\t\t\t\t\t...acc2,\n\t\t\t\t\t\t\t[folder.id]: normalizeFolder(folder),\n\t\t\t\t\t\t\t...extractFolders(folder.folder, acc2)\n\t\t\t\t\t  }\n\t\t\t\t\t: { ...acc2, ...extractFolders(folder.folder, acc2) };\n\t\t\t}\n\t\t\treturn (folder.view === 'message' &&\n\t\t\t\tfolder.id !== FOLDERS.IM_LOGS &&\n\t\t\t\tfolder.id !== FOLDERS.USER_ROOT) ||\n\t\t\t\tfolder.id === FOLDERS.TRASH\n\t\t\t\t? {\n\t\t\t\t\t\t...acc2,\n\t\t\t\t\t\t[folder.id]: normalizeFolder(folder)\n\t\t\t\t  }\n\t\t\t\t: acc2;\n\t\t},\n\t\tacc\n\t);\n\nexport const capitalise = (word: string): string => {\n\tconst asciiRef = word?.charCodeAt(0);\n\tconst newAsciiRef = asciiRef - 32;\n\tconst newChar = String.fromCharCode(newAsciiRef);\n\treturn word ? newChar + word.substring(1) : '';\n};\n\nexport const getFolderIconColor = (f: AccordionFolder): string => {\n\tif (f?.folder?.color) {\n\t\treturn f.folder.color < 10\n\t\t\t? ZIMBRA_STANDARD_COLORS[f.folder.color].hex\n\t\t\t: f?.folder.rgb ?? ZIMBRA_STANDARD_COLORS[0].hex;\n\t}\n\treturn ZIMBRA_STANDARD_COLORS[0].hex;\n};\n\nexport const getFolderIconName = (folder: AccordionFolder): string | null => {\n\tconst systemFolders = [\n\t\tFOLDERS.USER_ROOT,\n\t\tFOLDERS.INBOX,\n\t\tFOLDERS.TRASH,\n\t\tFOLDERS.DRAFTS,\n\t\tFOLDERS.SPAM,\n\t\tFOLDERS.SENT\n\t];\n\n\tif (folder.id === FOLDERS.USER_ROOT || folder.folder?.oname === ROOT_NAME) {\n\t\treturn null;\n\t}\n\n\tif (folder.id && systemFolders.includes(folder.id)) {\n\t\tswitch (folder.id) {\n\t\t\tcase FOLDERS.INBOX:\n\t\t\t\treturn 'InboxOutline';\n\t\t\tcase FOLDERS.DRAFTS:\n\t\t\t\treturn 'FileOutline';\n\t\t\tcase FOLDERS.SENT:\n\t\t\t\treturn 'PaperPlaneOutline';\n\t\t\tcase FOLDERS.SPAM:\n\t\t\t\treturn 'SlashOutline';\n\t\t\tcase FOLDERS.TRASH:\n\t\t\t\treturn 'Trash2Outline';\n\t\t\tdefault:\n\t\t\t\treturn 'FolderOutline';\n\t\t}\n\t}\n\tif (\n\t\tfolder.id?.charAt(folder.id.length - 2) === ':' &&\n\t\tsystemFolders.includes(folder.id.slice(-1))\n\t) {\n\t\tswitch (folder.id.slice(-1)) {\n\t\t\tcase FOLDERS.INBOX:\n\t\t\t\treturn 'InboxOutline';\n\t\t\tcase FOLDERS.DRAFTS:\n\t\t\t\treturn 'FileOutline';\n\t\t\tcase FOLDERS.SENT:\n\t\t\t\treturn 'PaperPlaneOutline';\n\t\t\tcase FOLDERS.SPAM:\n\t\t\t\treturn 'SlashOutline';\n\t\t\tcase FOLDERS.TRASH:\n\t\t\t\treturn 'Trash2Outline';\n\t\t\tdefault:\n\t\t\t\treturn 'FolderOutline';\n\t\t}\n\t}\n\treturn 'FolderOutline';\n};\n\nexport const translatedSystemFolders = (t: TFunction): Array<string> => [\n\tt('folders.inbox', 'Inbox'),\n\tt('folders.sent', 'Sent'),\n\tt('folders.drafts', 'Drafts'),\n\tt('folders.trash', 'Trash'),\n\tt('folders.spam', 'Spam'),\n\tt('folders.junk', 'Junk')\n];\n\ntype GetSystemFolderProps = {\n\tt: TFunction;\n\tfolderId?: string;\n\tfolderName: string;\n};\n\nexport const getSystemFolderTranslatedName = ({ t, folderName }: GetSystemFolderProps): string => {\n\tif (folderName) {\n\t\tswitch (folderName) {\n\t\t\tcase 'Inbox':\n\t\t\t\treturn t('folders.inbox', 'Inbox');\n\t\t\tcase 'Sent':\n\t\t\t\treturn t('folders.sent', 'Sent');\n\t\t\tcase 'Drafts':\n\t\t\t\treturn t('folders.drafts', 'Drafts');\n\t\t\tcase 'Trash':\n\t\t\t\treturn t('folders.trash', 'Trash');\n\t\t\tcase 'Spam':\n\t\t\t\treturn t('folders.spam', 'Spam');\n\t\t\tcase 'Junk':\n\t\t\t\treturn t('folders.junk', 'Junk');\n\t\t\tdefault:\n\t\t\t\treturn folderName;\n\t\t}\n\t}\n\treturn folderName;\n};\n\nexport const getFolderTranslatedName = ({\n\tt,\n\tfolderId,\n\tfolderName\n}: GetSystemFolderProps): string => {\n\tconst id = folderIdRegex.exec(folderId ?? '')?.[2];\n\tif (id && Object.values(FOLDERS).includes(id)) {\n\t\treturn getSystemFolderTranslatedName({ t, folderName });\n\t}\n\n\treturn folderName;\n};\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/views/sidebar/utils.ts b/src/views/sidebar/utils.ts
+--- a/src/views/sidebar/utils.ts	(revision 625354c8af746681a130d381c5881a3713632fe6)
++++ b/src/views/sidebar/utils.ts	(date 1661736228000)
+@@ -9,11 +9,10 @@
+ 	// eslint-disable-next-line @typescript-eslint/ban-ts-comment
+ 	// @ts-ignore
+ 	ROOT_NAME,
+-	AccordionFolder,
+ 	Folder,
+ 	LinkFolderFields
+ } from '@zextras/carbonio-shell-ui';
+-import { isNil, omitBy, reduce } from 'lodash';
++import { isNil, reduce, omitBy } from 'lodash';
+ import { TFunction } from 'react-i18next';
+ 
+ const folderIdRegex = /^(.+:)*(\d+)$/;
+@@ -83,16 +82,16 @@
+ 	return word ? newChar + word.substring(1) : '';
+ };
+ 
+-export const getFolderIconColor = (f: AccordionFolder): string => {
+-	if (f?.folder?.color) {
+-		return f.folder.color < 10
+-			? ZIMBRA_STANDARD_COLORS[f.folder.color].hex
+-			: f?.folder.rgb ?? ZIMBRA_STANDARD_COLORS[0].hex;
++export const getFolderIconColor = (f: Folder): string => {
++	if (f?.color) {
++		return Number(f.color) < 10
++			? ZIMBRA_STANDARD_COLORS[Number(f.color)].hex
++			: f?.rgb ?? ZIMBRA_STANDARD_COLORS[0].hex;
+ 	}
+ 	return ZIMBRA_STANDARD_COLORS[0].hex;
+ };
+ 
+-export const getFolderIconName = (folder: AccordionFolder): string | null => {
++export const getFolderIconName = (folder: Folder): string | null => {
+ 	const systemFolders = [
+ 		FOLDERS.USER_ROOT,
+ 		FOLDERS.INBOX,
+@@ -102,7 +101,7 @@
+ 		FOLDERS.SENT
+ 	];
+ 
+-	if (folder.id === FOLDERS.USER_ROOT || folder.folder?.oname === ROOT_NAME) {
++	if (folder.id === FOLDERS.USER_ROOT || (folder.isLink && folder.oname === ROOT_NAME)) {
+ 		return null;
+ 	}
+ 
+Index: .idea/prettier.xml
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/.idea/prettier.xml b/.idea/prettier.xml
+new file mode 100644
+--- /dev/null	(date 1661736228000)
++++ b/.idea/prettier.xml	(date 1661736228000)
+@@ -0,0 +1,7 @@
++<?xml version="1.0" encoding="UTF-8"?>
++<project version="4">
++  <component name="PrettierConfiguration">
++    <option name="myRunOnSave" value="true" />
++    <option name="myRunOnReformat" value="true" />
++  </component>
++</project>
+\ No newline at end of file
+Index: src/types/actions/index.d.ts
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>/*\n * SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nexport type ActionProps = {\n\tfolder: Folder;\n\tgrant: Grant;\n\tsetActiveModal: (arg: string) => void;\n\tonMouseLeave: () => void;\n\tonMouseEnter: () => void;\n};\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/types/actions/index.d.ts b/src/types/actions/index.d.ts
+--- a/src/types/actions/index.d.ts	(revision 625354c8af746681a130d381c5881a3713632fe6)
++++ b/src/types/actions/index.d.ts	(date 1661736228000)
+@@ -7,6 +7,7 @@
+ export type ActionProps = {
+ 	folder: Folder;
+ 	grant: Grant;
++	createSnackbar: CreateSnackbar;
+ 	setActiveModal: (arg: string) => void;
+ 	onMouseLeave: () => void;
+ 	onMouseEnter: () => void;
+Index: src/theme/theme-mui.ts
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/theme/theme-mui.ts b/src/theme/theme-mui.ts
+new file mode 100644
+--- /dev/null	(date 1661889587000)
++++ b/src/theme/theme-mui.ts	(date 1661889587000)
+@@ -0,0 +1,70 @@
++/*
++ * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>
++ *
++ * SPDX-License-Identifier: AGPL-3.0-only
++ */
++
++import { createTheme, CSSInterpolation } from '@mui/material';
++
++export const themeMui = createTheme({
++	components: {
++		MuiAccordionSummary: {
++			styleOverrides: {
++				root: {
++					padding: '0px',
++					margin: '0px',
++					// background: 'red',
++					minHeight: '0px'
++				},
++				content: {
++					margin: '0px'
++				}
++			}
++		},
++		MuiAccordionDetails: {
++			styleOverrides: {
++				root: {
++					padding: '0 0 0 8px',
++					margin: '0px'
++				}
++			}
++		},
++		MuiButtonBase: {
++			styleOverrides: {
++				root: {
++					padding: '0px'
++				}
++			}
++		},
++		MuiPaper: {
++			styleOverrides: {
++				root: {
++					borderBottomLeftRadius: '0px',
++					borderTopLeftRadius: '0px',
++					borderBottomRightRadius: '0px',
++					borderTopRightRadius: '0px'
++				}
++			}
++		},
++		MuiAccordion: {
++			styleOverrides: {
++				root: {
++					':last-of-type': {
++						borderBottomLeftRadius: '0px',
++						borderTopLeftRadius: '0px',
++						borderBottomRightRadius: '0px',
++						borderTopRightRadius: '0px'
++					},
++					':first-of-type': {
++						borderBottomLeftRadius: '0px',
++						borderTopLeftRadius: '0px',
++						borderBottomRightRadius: '0px',
++						borderTopRightRadius: '0px'
++					},
++					boxShadow: 'none',
++					background: '#f5f6f8'
++				}
++			}
++		}
++	}
++});
+Index: src/views/search/parts/folder-modal.tsx
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>/*\n * SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { ChangeEvent, FC, ReactElement, useCallback, useMemo, useState } from 'react';\nimport {\n\tContainer,\n\tCustomModal,\n\tInput,\n\tText,\n\tAccordion,\n\tAccordionItem,\n\tTooltip,\n\tAvatar,\n\tIcon,\n\tRow,\n\tPadding\n} from '@zextras/carbonio-design-system';\nimport { TFunction } from 'i18next';\nimport { filter, isEmpty, reduce, startsWith } from 'lodash';\n\nimport {\n\tAccordionFolder,\n\tFOLDERS,\n\tuseFolders,\n\tuseFoldersAccordionByView,\n\tuseUserAccount\n} from '@zextras/carbonio-shell-ui';\n\nimport styled from 'styled-components';\nimport ModalFooter from '../../sidebar/commons/modal-footer';\nimport { ModalHeader } from '../../sidebar/commons/modal-header';\nimport { FolderType } from '../../../types';\nimport { getFolderIconColor, getFolderTranslatedName } from '../../sidebar/utils';\nimport { FOLDER_VIEW } from '../../../constants';\nimport AccordionCustomComponent from './folder-accordion-custom-comp';\n\ntype ComponentProps = {\n\tcompProps: { open: boolean; onClose: () => void; setFolder: (arg: any) => void; t: TFunction };\n};\nconst ContainerEl = styled(Container)`\n\toverflow-y: auto;\n\tdisplay: block;\n`;\nconst FittedRow = styled(Row)`\n\tmax-width: calc(100% - (2 * ${({ theme }): string => theme.sizes.padding.small}));\n\theight: 48px;\n`;\nconst getFolderOwner = (item: any): string => {\n\tif (item.owner) return item.owner;\n\tif (item.parent) {\n\t\treturn getFolderOwner(item.parent);\n\t}\n\treturn item.name;\n};\n\nconst CustomComponent: FC<{ item: AccordionFolder }> = ({ item }): ReactElement => (\n\t<FittedRow>\n\t\t<Padding horizontal=\"small\">\n\t\t\t<Avatar label={item.label} size=\"medium\" />\n\t\t</Padding>\n\t\t<Tooltip label={item.label} placement=\"right\" maxWidth=\"100%\">\n\t\t\t<AccordionItem item={item} />\n\t\t</Tooltip>\n\t</FittedRow>\n);\n\ntype CustomComponent = {\n\tCustomComponent: ReactElement;\n\tdivider: boolean;\n\tbackground: string | undefined;\n\tonClick: () => void;\n\titems: Array<any>;\n};\nconst FolderSelectModal: FC<ComponentProps> = ({ compProps }): ReactElement => {\n\tconst { open, onClose, setFolder, t } = compProps;\n\n\tconst [input, setInput] = useState('');\n\tconst [folderDestination, setFolderDestination] = useState<FolderType | any>({});\n\n\tconst foldersFromStore = useFolders();\n\n\tconst getFolderAbsPath = useCallback(\n\t\t(fid: string) => {\n\t\t\tconst path = foldersFromStore[fid]?.absFolderPath;\n\t\t\treturn filter(path?.split('/'), (p) => p !== '').join('/');\n\t\t},\n\t\t[foldersFromStore]\n\t);\n\tconst accountName = useUserAccount().name;\n\tconst [openIds, setOpenIds] = useState(['USER_ROOT']);\n\tconst additionalProps = (item: AccordionFolder): Record<string, any> => ({\n\t\tonClick: (): void => {\n\t\t\tsetFolderDestination(item);\n\t\t},\n\t\tonOpen: () => setOpenIds((s: Array<string>) => (s.includes(item.id) ? s : [...s, item.id])),\n\t\tonClose: () => setOpenIds((s: Array<string>) => s.filter((id: string) => id !== item.id)),\n\t\topenIds\n\t});\n\n\tconst accordions = useFoldersAccordionByView(\n\t\tFOLDER_VIEW.message,\n\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t// @ts-ignore\n\t\tAccordionCustomComponent,\n\t\tadditionalProps\n\t);\n\n\tconst requiredAcc = useMemo(() => {\n\t\tconst temp = reduce(\n\t\t\taccordions,\n\t\t\t(acc: Array<AccordionFolder & CustomComponent>, v) => {\n\t\t\t\tacc.push({\n\t\t\t\t\tid: v.id,\n\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\tCustomComponent,\n\t\t\t\t\tlabel:\n\t\t\t\t\t\tv.id === FOLDERS.USER_ROOT\n\t\t\t\t\t\t\t? accountName\n\t\t\t\t\t\t\t: getFolderTranslatedName({ t, folderId: v.id, folderName: v.label }),\n\t\t\t\t\tdivider: true,\n\t\t\t\t\titems: v.items,\n\t\t\t\t\tbackground: folderDestination.id === v.id ? 'highlight' : undefined,\n\t\t\t\t\tonClick: () => {\n\t\t\t\t\t\tv.id !== FOLDERS.USER_ROOT && setFolderDestination(v);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\treturn acc;\n\t\t\t},\n\t\t\t[]\n\t\t);\n\n\t\treturn temp;\n\t}, [accordions, accountName, folderDestination.id, t]);\n\n\tconst filteredFolders = useMemo(\n\t\t() =>\n\t\t\tfilter(requiredAcc, (v) => {\n\t\t\t\tif (isEmpty(v)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tconst folderName = getFolderTranslatedName({\n\t\t\t\t\tt,\n\t\t\t\t\tfolderId: v?.id,\n\t\t\t\t\tfolderName: v?.label\n\t\t\t\t})?.toLowerCase();\n\n\t\t\t\treturn startsWith(folderName, input.toLowerCase());\n\t\t\t}),\n\t\t[input, requiredAcc, t]\n\t);\n\n\tconst getFolderPath = useCallback(\n\t\t(folder: AccordionFolder) => {\n\t\t\tconst absoluteParent = getFolderOwner(folder.folder);\n\t\t\tconst relativePath = getFolderAbsPath(folder?.id);\n\n\t\t\tif (absoluteParent === 'USER_ROOT') {\n\t\t\t\treturn relativePath;\n\t\t\t}\n\t\t\tif (relativePath) {\n\t\t\t\treturn `${absoluteParent}/${relativePath}`;\n\t\t\t}\n\t\t\treturn absoluteParent;\n\t\t},\n\t\t[getFolderAbsPath]\n\t);\n\tconst onConfirm = useCallback(() => {\n\t\tconst folderPath = getFolderPath(folderDestination);\n\t\tsetFolder([\n\t\t\t{\n\t\t\t\tlabel: `in:${folderPath}`,\n\t\t\t\thasAvatar: true,\n\t\t\t\tmaxWidth: '200px',\n\t\t\t\tisGeneric: false,\n\t\t\t\tbackground: 'gray2',\n\t\t\t\tavatarBackground: getFolderIconColor(folderDestination),\n\t\t\t\tavatarIcon: 'FolderOutline',\n\t\t\t\tisQueryFilter: true,\n\t\t\t\tvalue: `in:\"${folderPath}\"`\n\t\t\t}\n\t\t]);\n\t\tonClose();\n\t}, [folderDestination, getFolderPath, setFolder, onClose]);\n\n\tconst disabled = useMemo(() => isEmpty(folderDestination), [folderDestination]);\n\n\treturn (\n\t\t<CustomModal open={open} onClose={onClose} maxHeight=\"90vh\" size=\"medium\">\n\t\t\t<Container\n\t\t\t\tpadding={{ all: 'large' }}\n\t\t\t\tmainAlignment=\"center\"\n\t\t\t\tcrossAlignment=\"flex-start\"\n\t\t\t\theight=\"fit\"\n\t\t\t>\n\t\t\t\t<ModalHeader title={t('share.is_contained_in', 'Is contained in')} onClose={onClose} />\n\t\t\t\t<Container mainAlignment=\"center\" crossAlignment=\"flex-start\">\n\t\t\t\t\t<Container\n\t\t\t\t\t\tpadding={{ all: 'small' }}\n\t\t\t\t\t\tmainAlignment=\"center\"\n\t\t\t\t\t\tcrossAlignment=\"flex-start\"\n\t\t\t\t\t\theight=\"fit\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<Container\n\t\t\t\t\t\t\tpadding={{ all: 'small' }}\n\t\t\t\t\t\t\tmainAlignment=\"center\"\n\t\t\t\t\t\t\tcrossAlignment=\"flex-start\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<Text overflow=\"break-word\">\n\t\t\t\t\t\t\t\t{t(\n\t\t\t\t\t\t\t\t\t'share.filter_folder_message',\n\t\t\t\t\t\t\t\t\t'Select a folder where to start your advanced search'\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</Text>\n\t\t\t\t\t\t</Container>\n\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\tinputName=\"test\"\n\t\t\t\t\t\t\tlabel={t('label.filter_folders', 'Filter folders')}\n\t\t\t\t\t\t\tbackgroundColor=\"gray5\"\n\t\t\t\t\t\t\tvalue={input}\n\t\t\t\t\t\t\tCustomIcon={({ hasFocus }: { hasFocus: boolean }): ReactElement => (\n\t\t\t\t\t\t\t\t<Icon icon=\"FunnelOutline\" size=\"large\" color={hasFocus ? 'primary' : 'text'} />\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\tonChange={(e: ChangeEvent<HTMLInputElement>): void => setInput(e.target.value)}\n\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t<ContainerEl\n\t\t\t\t\t\t\torientation=\"vertical\"\n\t\t\t\t\t\t\tmainAlignment=\"flex-start\"\n\t\t\t\t\t\t\tminHeight=\"30vh\"\n\t\t\t\t\t\t\tmaxHeight=\"60vh\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<Accordion\n\t\t\t\t\t\t\t\titems={filteredFolders}\n\t\t\t\t\t\t\t\tactiveId={folderDestination?.id}\n\t\t\t\t\t\t\t\topenIds={openIds}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</ContainerEl>\n\t\t\t\t\t</Container>\n\t\t\t\t\t<ModalFooter\n\t\t\t\t\t\tonConfirm={onConfirm}\n\t\t\t\t\t\tsecondaryAction={onClose}\n\t\t\t\t\t\tlabel={t('label.choose_folder', 'Choose folder')}\n\t\t\t\t\t\tsecondaryLabel={t('label.go_back', 'Go Back')}\n\t\t\t\t\t\tdisabled={disabled}\n\t\t\t\t\t/>\n\t\t\t\t</Container>\n\t\t\t</Container>\n\t\t</CustomModal>\n\t);\n};\n\nexport default FolderSelectModal;\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/views/search/parts/folder-modal.tsx b/src/views/search/parts/folder-modal.tsx
+--- a/src/views/search/parts/folder-modal.tsx	(revision 625354c8af746681a130d381c5881a3713632fe6)
++++ b/src/views/search/parts/folder-modal.tsx	(date 1661736228000)
+@@ -22,10 +22,10 @@
+ import { filter, isEmpty, reduce, startsWith } from 'lodash';
+ 
+ import {
+-	AccordionFolder,
++	Folder,
+ 	FOLDERS,
+ 	useFolders,
+-	useFoldersAccordionByView,
++	useFoldersByView,
+ 	useUserAccount
+ } from '@zextras/carbonio-shell-ui';
+ 
+@@ -56,12 +56,12 @@
+ 	return item.name;
+ };
+ 
+-const CustomComponent: FC<{ item: AccordionFolder }> = ({ item }): ReactElement => (
++const CustomComponent: FC<{ item: Folder }> = ({ item }): ReactElement => (
+ 	<FittedRow>
+ 		<Padding horizontal="small">
+-			<Avatar label={item.label} size="medium" />
++			<Avatar label={item.name} size="medium" />
+ 		</Padding>
+-		<Tooltip label={item.label} placement="right" maxWidth="100%">
++		<Tooltip label={item.name} placement="right" maxWidth="100%">
+ 			<AccordionItem item={item} />
+ 		</Tooltip>
+ 	</FittedRow>
+@@ -91,7 +91,7 @@
+ 	);
+ 	const accountName = useUserAccount().name;
+ 	const [openIds, setOpenIds] = useState(['USER_ROOT']);
+-	const additionalProps = (item: AccordionFolder): Record<string, any> => ({
++	const additionalProps = (item: Folder): Record<string, any> => ({
+ 		onClick: (): void => {
+ 			setFolderDestination(item);
+ 		},
+@@ -100,18 +100,13 @@
+ 		openIds
+ 	});
+ 
+-	const accordions = useFoldersAccordionByView(
+-		FOLDER_VIEW.message,
+-		// eslint-disable-next-line @typescript-eslint/ban-ts-comment
+-		// @ts-ignore
+-		AccordionCustomComponent,
+-		additionalProps
+-	);
++	// @@ finish conversion to use useFoldersByView
++	const accordions = useFoldersByView(FOLDER_VIEW.message);
+ 
+ 	const requiredAcc = useMemo(() => {
+ 		const temp = reduce(
+ 			accordions,
+-			(acc: Array<AccordionFolder & CustomComponent>, v) => {
++			(acc: Array<Folder & CustomComponent>, v) => {
+ 				acc.push({
+ 					id: v.id,
+ 					// eslint-disable-next-line @typescript-eslint/ban-ts-comment
+@@ -120,9 +115,9 @@
+ 					label:
+ 						v.id === FOLDERS.USER_ROOT
+ 							? accountName
+-							: getFolderTranslatedName({ t, folderId: v.id, folderName: v.label }),
++							: getFolderTranslatedName({ t, folderId: v.id, folderName: v.name }),
+ 					divider: true,
+-					items: v.items,
++					items: v.children,
+ 					background: folderDestination.id === v.id ? 'highlight' : undefined,
+ 					onClick: () => {
+ 						v.id !== FOLDERS.USER_ROOT && setFolderDestination(v);
+@@ -146,7 +141,7 @@
+ 				const folderName = getFolderTranslatedName({
+ 					t,
+ 					folderId: v?.id,
+-					folderName: v?.label
++					folderName: v?.name
+ 				})?.toLowerCase();
+ 
+ 				return startsWith(folderName, input.toLowerCase());
+@@ -155,8 +150,8 @@
+ 	);
+ 
+ 	const getFolderPath = useCallback(
+-		(folder: AccordionFolder) => {
+-			const absoluteParent = getFolderOwner(folder.folder);
++		(folder: Folder) => {
++			const absoluteParent = getFolderOwner(folder);
+ 			const relativePath = getFolderAbsPath(folder?.id);
+ 
+ 			if (absoluteParent === 'USER_ROOT') {
+Index: src/views/app/detail-panel/conversation-preview-panel.jsx
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport React, { useMemo, useEffect } from 'react';\nimport { Container, Padding, Shimmer } from '@zextras/carbonio-design-system';\nimport { FOLDERS, useCurrentRoute, useTags, useUserSettings } from '@zextras/carbonio-shell-ui';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport { map, sortBy, find, filter } from 'lodash';\nimport PreviewPanelHeader from './preview/preview-panel-header';\nimport {\n\tselectConversationExpandedStatus,\n\tselectConversationsArray,\n\tselectCurrentFolderExpandedStatus\n} from '../../../store/conversations-slice';\nimport { getConv, searchConv } from '../../../store/actions';\nimport MailPreview from './preview/mail-preview';\nimport { selectMessages } from '../../../store/messages-slice';\n\nconst MessagesComponent = ({ conversation }) => {\n\tconst { conversationId, folderId } = useParams();\n\tconst settings = useUserSettings();\n\tconst messages = useSelector(selectMessages);\n\tconst conversationStatus = useSelector(selectCurrentFolderExpandedStatus)[conversationId];\n\tconst activeRoute = useCurrentRoute();\n\tconst convMessages = useMemo(() => {\n\t\tconst msgs =\n\t\t\tfolderId !== FOLDERS.TRASH && activeRoute.id !== 'search'\n\t\t\t\t? map(\n\t\t\t\t\t\tfilter(conversation?.messages, (m) => m.parent !== FOLDERS.TRASH),\n\t\t\t\t\t\t(item) => messages[item.id] ?? item\n\t\t\t\t  )\n\t\t\t\t: map(conversation?.messages, (item) => messages[item.id] ?? item);\n\n\t\tif (settings.prefs.zimbraPrefConversationOrder === 'dateAsc' && msgs?.length > 0) {\n\t\t\treturn sortBy(msgs, [(o) => o.date]);\n\t\t}\n\t\treturn msgs ?? [];\n\t}, [\n\t\tfolderId,\n\t\tactiveRoute.id,\n\t\tconversation?.messages,\n\t\tsettings.prefs.zimbraPrefConversationOrder,\n\t\tmessages\n\t]);\n\n\tconst expand = (message, index) => {\n\t\tif (settings.prefs.zimbraPrefConversationOrder === 'dateAsc') {\n\t\t\treturn index === convMessages.length - 1;\n\t\t}\n\t\treturn index === 0;\n\t};\n\n\tif (conversation && conversationStatus === 'complete') {\n\t\treturn map(convMessages, (message, index) =>\n\t\t\tmessage ? (\n\t\t\t\t<Padding key={`${conversationId}-${message.id}`} bottom=\"medium\" width=\"100%\">\n\t\t\t\t\t<MailPreview\n\t\t\t\t\t\tmessage={message}\n\t\t\t\t\t\texpanded={expand(message, index)}\n\t\t\t\t\t\tisAlone={convMessages?.length === 1}\n\t\t\t\t\t\tisMessageView={false}\n\t\t\t\t\t/>\n\t\t\t\t</Padding>\n\t\t\t) : (\n\t\t\t\t<Shimmer.Logo size=\"large\" />\n\t\t\t)\n\t\t);\n\t}\n\treturn null;\n};\n\nexport default function ConversationPreviewPanel() {\n\tconst { conversationId, folderId } = useParams();\n\tconst tagsFromStore = useTags();\n\n\tconst dispatch = useDispatch();\n\tconst conversations = useSelector(selectConversationsArray);\n\tconst conversationsStatus = useSelector((state) =>\n\t\tselectConversationExpandedStatus(state, conversationId)\n\t);\n\n\tconst conversation = useMemo(\n\t\t() => find(conversations, ['id', conversationId]),\n\t\t[conversationId, conversations]\n\t);\n\tuseEffect(() => {\n\t\tif (!conversation) {\n\t\t\tdispatch(getConv({ conversationId }));\n\t\t}\n\t}, [conversation, dispatch, conversationId]);\n\tuseEffect(() => {\n\t\tif (conversationsStatus !== 'complete' && conversationsStatus !== 'pending') {\n\t\t\tdispatch(searchConv({ conversationId, fetch: 'all', folderId, tags: tagsFromStore }));\n\t\t}\n\t}, [conversationId, conversationsStatus, dispatch, folderId, tagsFromStore]);\n\n\tconst showPreviewPanel = useMemo(\n\t\t() =>\n\t\t\tfolderId === FOLDERS.TRASH\n\t\t\t\t? conversation?.messages?.length > 0\n\t\t\t\t: filter(conversation?.messages, (m) => m.parent !== FOLDERS.TRASH).length > 0,\n\t\t[conversation?.messages, folderId]\n\t);\n\n\treturn (\n\t\t<Container orientation=\"vertical\" mainAlignment=\"flex-start\" crossAlignment=\"flex-start\">\n\t\t\t{showPreviewPanel && (\n\t\t\t\t<>\n\t\t\t\t\t<PreviewPanelHeader item={conversation} folderId={folderId} />\n\t\t\t\t\t{/* commented to hide the panel actions */}\n\t\t\t\t\t{/* <PreviewPanelActions item={conversation} folderId={folderId} /> */}\n\t\t\t\t\t<Container\n\t\t\t\t\t\tstyle={{ overflowY: 'auto' }}\n\t\t\t\t\t\theight=\"fill\"\n\t\t\t\t\t\tbackground=\"gray5\"\n\t\t\t\t\t\tpadding={{ horizontal: 'large', bottom: 'small', top: 'large' }}\n\t\t\t\t\t\tmainAlignment=\"flex-start\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<Container height=\"fit\" mainAlignment=\"flex-start\" background=\"gray5\">\n\t\t\t\t\t\t\t<MessagesComponent conversation={conversation} />\n\t\t\t\t\t\t</Container>\n\t\t\t\t\t</Container>\n\t\t\t\t</>\n\t\t\t)}\n\t\t</Container>\n\t);\n}\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/views/app/detail-panel/conversation-preview-panel.jsx b/src/views/app/detail-panel/conversation-preview-panel.jsx
+--- a/src/views/app/detail-panel/conversation-preview-panel.jsx	(revision 625354c8af746681a130d381c5881a3713632fe6)
++++ b/src/views/app/detail-panel/conversation-preview-panel.jsx	(date 1661934640254)
+@@ -21,6 +21,7 @@
+ 
+ const MessagesComponent = ({ conversation }) => {
+ 	const { conversationId, folderId } = useParams();
++	console.log('@@conversationId', conversationId);
+ 	const settings = useUserSettings();
+ 	const messages = useSelector(selectMessages);
+ 	const conversationStatus = useSelector(selectCurrentFolderExpandedStatus)[conversationId];
+Index: src/store/utils.ts
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport { max, map, filter, find, reduce, some, merge, isNil, omitBy } from 'lodash';\nimport { FolderType, MailsFolderMap, FoldersStateType } from '../types';\n\nexport function findDepth(subFolder: FolderType, depth = 1): number {\n\tif (subFolder && subFolder.items && subFolder.items.length) {\n\t\treturn <number>max(map(subFolder.items, (item) => findDepth(item, depth + 1)));\n\t}\n\treturn depth;\n}\n\nexport function calcFolderItems(\n\tfolders: MailsFolderMap,\n\tsubFolders: FolderType | undefined,\n\tid: string\n): FolderType[] {\n\treturn map(\n\t\tfilter(folders, (item) => item.parent === id),\n\t\t(item) => ({\n\t\t\t...item,\n\t\t\titems: calcFolderItems(folders, subFolders, item.id),\n\t\t\tto: `/folder/${item.id}`\n\t\t})\n\t);\n}\n\nexport function calcFolderAbsParentLevelAndPath(\n\tfolders: MailsFolderMap,\n\tsubFolder: FolderType | undefined,\n\tpath = subFolder && subFolder.name,\n\tlevel = 1\n): { absParent: string; level: number; path: string | undefined } | undefined {\n\tif (!subFolder) return undefined;\n\tconst nextFolder = find(folders, (item) => item.id === subFolder.parent);\n\tconst nextPath = `${nextFolder ? nextFolder.name : ''}/${path}`;\n\treturn (\n\t\tcalcFolderAbsParentLevelAndPath(folders, nextFolder, nextPath, level + 1) || {\n\t\t\tabsParent: level > 1 ? subFolder.id : subFolder.parent,\n\t\t\tlevel,\n\t\t\tpath\n\t\t}\n\t);\n}\n\n// replaced lodash \"reduce\" method with vanilla JS in order to decrease iterations and improve performance\nexport function updateFolders(state: FoldersStateType, folders: FolderType[]): void {\n\tstate.folders = Object.values(state.folders).reduce((acc, item) => {\n\t\tconst newFolder = omitBy(\n\t\t\tObject.values(folders).find((c) => c.id === item.id),\n\t\t\tisNil\n\t\t);\n\t\tconst toRet = newFolder ? { ...item, ...newFolder } : item;\n\n\t\treturn {\n\t\t\t...acc,\n\t\t\t[toRet.id]: {\n\t\t\t\t...toRet\n\t\t\t}\n\t\t};\n\t}, {});\n}\n\nexport function updateFolderInStore(state: FoldersStateType, folders: FolderType[]): void {\n\tstate.folders = reduce(\n\t\tstate.folders,\n\t\t(acc, item) => {\n\t\t\tconst toRet = find(folders, (c) => c.id === item.id) || item;\n\n\t\t\tconst items = calcFolderItems(state.folders, toRet, toRet.id);\n\t\t\tconst moreParams = calcFolderAbsParentLevelAndPath(state.folders, toRet);\n\t\t\treturn {\n\t\t\t\t...acc,\n\t\t\t\t[toRet.id]: {\n\t\t\t\t\t...toRet,\n\t\t\t\t\t...moreParams,\n\t\t\t\t\tdepth: findDepth({ ...toRet, items }),\n\t\t\t\t\titems,\n\t\t\t\t\tpath: moreParams ? `/${moreParams.path}` : undefined\n\t\t\t\t}\n\t\t\t};\n\t\t},\n\t\t{}\n\t);\n}\n\nexport function updatePartialFolderInStore(state: FoldersStateType, folders: FolderType[]): void {\n\tstate.folders = reduce(\n\t\tstate.folders,\n\t\t(acc, item) => {\n\t\t\tconst itemToUpdate = find(folders, (c) => c.id === item.id);\n\t\t\tconst toRet = merge(item, itemToUpdate ?? {});\n\n\t\t\tconst items = calcFolderItems(state.folders, toRet, toRet.id);\n\t\t\tconst moreParams = calcFolderAbsParentLevelAndPath(state.folders, toRet);\n\t\t\treturn {\n\t\t\t\t...acc,\n\t\t\t\t[toRet.id]: {\n\t\t\t\t\t...toRet,\n\t\t\t\t\t...moreParams,\n\t\t\t\t\tdepth: findDepth({ ...toRet, items }),\n\t\t\t\t\titems,\n\t\t\t\t\tpath: moreParams ? `/${moreParams.path}` : undefined\n\t\t\t\t}\n\t\t\t};\n\t\t},\n\t\t{}\n\t);\n}\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport function addFoldersToStore(state: FoldersStateType, folders: any): void {\n\tstate.folders = reduce(folders, (acc, v, k) => ({ ...acc, [v.id]: v }), state.folders);\n}\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport function removeFoldersFromStore(state: FoldersStateType, idsToDelete: any): void {\n\t// state.folders = omit(state.folders, idsToDelete); Maybe?\n\tstate.folders = reduce(\n\t\tstate.folders,\n\t\t(acc, v, k) => {\n\t\t\tconst value = some(idsToDelete, (cid) => cid === v.id);\n\t\t\treturn value ? { ...acc } : { ...acc, [v.id]: v };\n\t\t},\n\t\t{} as MailsFolderMap\n\t);\n}\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/store/utils.ts b/src/store/utils.ts
+--- a/src/store/utils.ts	(revision 625354c8af746681a130d381c5881a3713632fe6)
++++ b/src/store/utils.ts	(date 1661736228000)
+@@ -3,7 +3,7 @@
+  *
+  * SPDX-License-Identifier: AGPL-3.0-only
+  */
+-import { max, map, filter, find, reduce, some, merge, isNil, omitBy } from 'lodash';
++import { max, map, filter, find, reduce, omitBy, some, merge, isNil } from 'lodash';
+ import { FolderType, MailsFolderMap, FoldersStateType } from '../types';
+ 
+ export function findDepth(subFolder: FolderType, depth = 1): number {
+Index: src/types/share/index.d.ts
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { Dispatch } from '@reduxjs/toolkit';\n\nexport type ShareCalendarModalProps = {\n\topenModal: () => void;\n\tsetModal: (a: any) => void;\n\tdispatch: Dispatch;\n\tt: (...args: any[]) => string;\n\ttoggleSnackbar: () => void;\n\tfolder: string;\n\tfolders: any;\n\tallCalendars: any;\n};\n\nexport type ShareFolderModalProps = {\n\topenModal: () => void;\n\tsetModal: (a: any) => void;\n\tdispatch: Dispatch;\n\tt: (...args: any[]) => string;\n\tcreateSnackbar: (obj: any) => void;\n\tfolder: any;\n\tfolders: any;\n\tallFolders: any;\n};\n\nexport type ResponseActionsProps = {\n\tdispatch: Dispatch;\n\tt: (...args: any[]) => string;\n\tcreateSnackbar: any;\n\tzid: string;\n\tview: string;\n\trid: string;\n\tmsgId: string;\n\tsharedCalendarName: string;\n\tgrantee: string;\n\towner: string;\n\trole: string;\n\tallowedActions: string;\n\tparticipants: any;\n};\n\nexport type ReplyShareParameters = {\n\tdata: any;\n};\n\nexport type GranteeInfoProps = {\n\tgrant: Grant;\n\tshareCalendarRoleOptions: ShareCalendarRoleOptions;\n\thovered?: boolean;\n};\n\nexport type GranteeProps = {\n\tgrant: Grant;\n\tfolder: FolderType;\n\tonMouseLeave?: () => void;\n\tonMouseEnter?: () => void;\n\tsetActiveModal: (modal: string) => void;\n\tshareCalendarRoleOptions: ShareCalendarRoleOptions;\n};\n\nexport type ShareFolderPropertiesProps = {\n\tfolder: FolderType;\n\tsetActiveModal;\n};\n\nexport type ShareCalendarRoleOptions = {\n\tlabel: string;\n\tvalue: string;\n};\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/types/share/index.d.ts b/src/types/share/index.d.ts
+--- a/src/types/share/index.d.ts	(revision 625354c8af746681a130d381c5881a3713632fe6)
++++ b/src/types/share/index.d.ts	(date 1661853447000)
+@@ -64,7 +64,7 @@
+ };
+ 
+ export type ShareFolderPropertiesProps = {
+-	folder: FolderType;
++	folder: FolderType | Folder;
+ 	setActiveModal;
+ };
+ 
+Index: src/commons/utils.tsx
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport moment from 'moment';\nimport { find, isArray } from 'lodash';\nimport { TFunction } from 'react-i18next';\nimport { Account } from '@zextras/carbonio-shell-ui';\nimport { Participant } from '../types/participant';\n\nexport const getTimeLabel = (date: number): string => {\n\tconst momentDate = moment(date);\n\tif (momentDate.isSame(new Date(), 'day')) {\n\t\treturn momentDate.format('LT');\n\t}\n\tif (momentDate.isSame(new Date(), 'week')) {\n\t\treturn momentDate.format('dddd, LT');\n\t}\n\tif (momentDate.isSame(new Date(), 'month')) {\n\t\treturn momentDate.format('DD MMMM');\n\t}\n\treturn momentDate.format('DD/MM/YYYY');\n};\n\nexport const participantToString = (\n\tparticipant: Participant | undefined,\n\tt: TFunction,\n\taccounts: Array<Account>\n): string => {\n\tconst me = find(accounts, ['name', participant?.address]);\n\tif (me) {\n\t\treturn t('label.me', 'Me');\n\t}\n\treturn participant?.fullName || participant?.name || participant?.address || '';\n};\n\nexport const isAvailableInTrusteeList = (\n\ttrusteeList: Array<string> | string,\n\taddress: string\n): boolean => {\n\tlet trusteeAddress: Array<string> = [];\n\tlet availableInTrusteeList = false;\n\tif (trusteeList) {\n\t\ttrusteeAddress = isArray(trusteeList) ? trusteeList : trusteeList.split(',');\n\t}\n\tif (trusteeAddress.length > 0) {\n\t\tconst domain = address.substring(address.lastIndexOf('@') + 1);\n\t\ttrusteeAddress.forEach((ta) => {\n\t\t\tif (ta === domain || ta === address) {\n\t\t\t\tavailableInTrusteeList = true;\n\t\t\t}\n\t\t});\n\t}\n\treturn availableInTrusteeList;\n};\n\n// eslint-disable-next-line no-shadow\nexport enum LineType {\n\tORIG_UNKNOWN = 'UNKNOWN',\n\tORIG_QUOTED = 'QUOTED',\n\tORIG_SEP_STRONG = 'SEP_STRONG',\n\tORIG_WROTE_STRONG = 'WROTE_STRONG',\n\tORIG_WROTE_WEAK = 'WROTE_WEAK',\n\tORIG_HEADER = 'HEADER',\n\tORIG_LINE = 'LINE',\n\tHTML_SEP_ID = 'zwchr',\n\tNOTES_SEPARATOR = '*~*~*~*~*~*~*~*~*~*'\n}\n\n// eslint-disable-next-line no-shadow\nexport enum FolderActionsType {\n\tNEW = 'new',\n\tMOVE = 'move',\n\tDELETE = 'delete',\n\tEDIT = 'edit',\n\tEMPTY = 'empty',\n\tREMOVE_FROM_LIST = 'removeFromList',\n\tSHARES_INFO = 'sharesInfo',\n\tSHARE = 'share'\n}\n\n// eslint-disable-next-line no-shadow\nexport enum ParticipantRole {\n\tFROM = 'f',\n\tTO = 't',\n\tCARBON_COPY = 'c',\n\tBLIND_CARBON_COPY = 'b',\n\tREPLY_TO = 'r',\n\tSENDER = 's',\n\tREAD_RECEIPT_NOTIFICATION = 'n',\n\tRESENT_FROM = 'rf'\n}\n\n// eslint-disable-next-line no-shadow\nexport enum ActionsType {\n\tNEW = 'new',\n\tEDIT_AS_DRAFT = 'editAsDraft',\n\tEDIT_AS_NEW = 'editAsNew',\n\tREPLY = 'reply',\n\tREPLY_ALL = 'replyAll',\n\tFORWARD = 'forward',\n\tMAIL_TO = 'mailTo',\n\tCOMPOSE = 'compose',\n\tPREFILL_COMPOSE = 'prefillCompose'\n}\n\n// eslint-disable-next-line no-shadow\nexport enum TagsActionsType {\n\tNEW = 'new',\n\tDELETE = 'delete',\n\tEDIT = 'edit',\n\tApply = 'apply'\n}\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/commons/utils.tsx b/src/commons/utils.tsx
+--- a/src/commons/utils.tsx	(revision 625354c8af746681a130d381c5881a3713632fe6)
++++ b/src/commons/utils.tsx	(date 1661736228000)
+@@ -112,3 +112,12 @@
+ 	EDIT = 'edit',
+ 	Apply = 'apply'
+ }
++
++// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
++export const omitBy = (obj: any, check: (arg: unknown) => boolean): any => {
++	// eslint-disable-next-line no-param-reassign
++	obj = { ...obj };
++	// eslint-disable-next-line no-param-reassign
++	Object.entries(obj).forEach(([key, value]) => check(value) && delete obj[key]);
++	return obj;
++};
+Index: src/views/sidebar/parts/edit/share-folder-properties.tsx
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport {\n\tButton,\n\tChip,\n\tContainer,\n\tDivider,\n\tPadding,\n\tSnackbarManagerContext,\n\tText,\n\tTooltip\n} from '@zextras/carbonio-design-system';\nimport { Grant, soapFetch, useUserAccounts } from '@zextras/carbonio-shell-ui';\nimport { map, replace, split } from 'lodash';\nimport React, { FC, useCallback, useContext, useEffect, useMemo, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useDispatch } from 'react-redux';\n\nimport styled from 'styled-components';\nimport {\n\tfindLabel,\n\tShareCalendarRoleOptions\n} from '../../../../integrations/shared-invite-reply/parts/utils';\nimport { sendShareNotification } from '../../../../store/actions/send-share-notification';\nimport {\n\tActionProps,\n\tGranteeInfoProps,\n\tGranteeProps,\n\tShareFolderPropertiesProps\n} from '../../../../types';\nimport { capitalise } from '../../utils';\nimport { Context } from './edit-context';\n\nconst HoverChip = styled(Chip)`\n\tbackground-color: ${({ theme, hovered }): string =>\n\t\thovered ? theme.palette.gray3.hover : theme.palette.gray3.regular};\n`;\n\nexport const GranteeInfo: FC<GranteeInfoProps> = ({ grant, shareCalendarRoleOptions, hovered }) => {\n\tconst role = useMemo(\n\t\t() => findLabel(shareCalendarRoleOptions, grant.perm || ''),\n\t\t[shareCalendarRoleOptions, grant.perm]\n\t);\n\tconst label = useMemo(\n\t\t() => `${replace(split(grant.d, '@')?.[0], '.', ' ')} - ${role}`,\n\t\t[grant.d, role]\n\t);\n\tconst upperCaseLabel = useMemo(() => capitalise(label), [label]);\n\treturn (\n\t\t<Container crossAlignment=\"flex-start\">\n\t\t\t<Text>\n\t\t\t\t<HoverChip label={upperCaseLabel} hovered={hovered} />\n\t\t\t</Text>\n\t\t</Container>\n\t);\n};\n\nconst Actions: FC<ActionProps> = ({\n\tfolder,\n\tgrant,\n\tsetActiveModal,\n\tonMouseLeave,\n\tonMouseEnter\n}) => {\n\tconst [t] = useTranslation();\n\t// eslint-disable-next-line @typescript-eslint/ban-types\n\tconst createSnackbar = useContext(SnackbarManagerContext) as Function;\n\tconst accounts = useUserAccounts();\n\tconst { setActiveGrant } = useContext(Context);\n\t// eslint-disable-next-line @typescript-eslint/ban-types\n\tconst dispatch = useDispatch() as Function;\n\tconst onRevoke = useCallback(() => {\n\t\tsetActiveGrant(grant);\n\t\tsetActiveModal('revoke');\n\t}, [setActiveModal, setActiveGrant, grant]);\n\n\tconst onResend = useCallback(() => {\n\t\tdispatch(\n\t\t\tsendShareNotification({\n\t\t\t\tstandardMessage: '',\n\t\t\t\tcontacts: [{ email: grant.d }],\n\t\t\t\tfolder,\n\t\t\t\taccounts\n\t\t\t})\n\t\t).then((res: Response) => {\n\t\t\tif (res.type.includes('fulfilled')) {\n\t\t\t\tcreateSnackbar({\n\t\t\t\t\tkey: `resend-${folder.id}`,\n\t\t\t\t\treplace: true,\n\t\t\t\t\ttype: 'info',\n\t\t\t\t\tlabel: t('snackbar.share_resend', 'Share invite resent'),\n\t\t\t\t\tautoHideTimeout: 2000,\n\t\t\t\t\thideButton: true\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}, [accounts, dispatch, folder, t, grant.d, createSnackbar]);\n\tconst onEdit = useCallback(() => {\n\t\tsetActiveGrant(grant);\n\t\tsetActiveModal('edit');\n\t}, [setActiveModal, setActiveGrant, grant]);\n\n\treturn (\n\t\t<Container\n\t\t\torientation=\"horizontal\"\n\t\t\tmainAlignment=\"flex-end\"\n\t\t\tonMouseEnter={onMouseEnter}\n\t\t\tonMouseLeave={onMouseLeave}\n\t\t\tmaxWidth=\"fit\"\n\t\t>\n\t\t\t<Tooltip label={t('tooltip.edit', 'Edit share properties')} placement=\"top\">\n\t\t\t\t<Button type=\"outlined\" label={t('label.edit', 'Edit')} onClick={onEdit} isSmall />\n\t\t\t</Tooltip>\n\t\t\t<Padding horizontal=\"extrasmall\" />\n\t\t\t<Tooltip label={t('tooltip.revoke', 'Revoke access')} placement=\"top\">\n\t\t\t\t<Button\n\t\t\t\t\ttype=\"outlined\"\n\t\t\t\t\tlabel={t('label.revoke', 'Revoke')}\n\t\t\t\t\tcolor=\"error\"\n\t\t\t\t\tonClick={onRevoke}\n\t\t\t\t\tisSmall\n\t\t\t\t/>\n\t\t\t</Tooltip>\n\t\t\t<Padding horizontal=\"extrasmall\" />\n\t\t\t<Tooltip\n\t\t\t\tlabel={t('tooltip.resend', 'Send mail notification about this share')}\n\t\t\t\tplacement=\"top\"\n\t\t\t\tmaxWidth=\"300px\"\n\t\t\t>\n\t\t\t\t<Button type=\"outlined\" label={t('label.resend', 'Resend')} onClick={onResend} isSmall />\n\t\t\t</Tooltip>\n\t\t</Container>\n\t);\n};\nconst Grantee: FC<GranteeProps> = ({ grant, folder, setActiveModal, shareCalendarRoleOptions }) => {\n\tconst [hovered, setHovered] = useState(false);\n\tconst onMouseEnter = useCallback(() => {\n\t\tsetHovered(true);\n\t}, []);\n\tconst onMouseLeave = useCallback(() => {\n\t\tsetHovered(false);\n\t}, []);\n\treturn (\n\t\t<Container orientation=\"horizontal\" mainAlignment=\"flex-end\" padding={{ bottom: 'small' }}>\n\t\t\t<GranteeInfo\n\t\t\t\tgrant={grant}\n\t\t\t\tshareCalendarRoleOptions={shareCalendarRoleOptions}\n\t\t\t\thovered={hovered}\n\t\t\t/>\n\t\t\t<Actions\n\t\t\t\tfolder={folder}\n\t\t\t\tonMouseLeave={onMouseLeave}\n\t\t\t\tonMouseEnter={onMouseEnter}\n\t\t\t\tgrant={grant}\n\t\t\t\tsetActiveModal={setActiveModal}\n\t\t\t/>\n\t\t</Container>\n\t);\n};\n\nexport const ShareFolderProperties: FC<ShareFolderPropertiesProps> = ({\n\tfolder,\n\tsetActiveModal\n}) => {\n\tconst [t] = useTranslation();\n\tconst [grant, setGrant] = useState<Array<Grant>>(folder.folder.acl.grant);\n\tconst shareCalendarRoleOptions = useCallback(\n\t\t(_grant: Grant) => ShareCalendarRoleOptions(t, _grant.perm.includes('p')),\n\t\t[t]\n\t);\n\tuseEffect(() => {\n\t\tsoapFetch('GetFolder', {\n\t\t\t_jsns: 'urn:zimbraMail',\n\t\t\tfolder: { l: folder.id }\n\t\t}).then((res: any): void => {\n\t\t\tif (res?.folder) {\n\t\t\t\tsetGrant(res.folder[0].acl.grant);\n\t\t\t}\n\t\t});\n\t}, [folder.id]);\n\n\treturn (\n\t\t<Container mainAlignment=\"center\" crossAlignment=\"flex-start\" height=\"fit\">\n\t\t\t<Padding vertical=\"small\" />\n\t\t\t<Text weight=\"bold\">{t('label.shares_folder_edit', 'Sharing of this folder')}</Text>\n\t\t\t<Padding vertical=\"small\" />\n\t\t\t{map(grant, (item) => (\n\t\t\t\t<Grantee\n\t\t\t\t\tkey={item?.zid}\n\t\t\t\t\tgrant={item}\n\t\t\t\t\tfolder={folder}\n\t\t\t\t\tsetActiveModal={setActiveModal}\n\t\t\t\t\tshareCalendarRoleOptions={shareCalendarRoleOptions(item)}\n\t\t\t\t/>\n\t\t\t))}\n\t\t\t<Padding top=\"medium\" />\n\t\t\t<Divider />\n\t\t\t<Padding bottom=\"medium\" />\n\t\t</Container>\n\t);\n};\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/views/sidebar/parts/edit/share-folder-properties.tsx b/src/views/sidebar/parts/edit/share-folder-properties.tsx
+--- a/src/views/sidebar/parts/edit/share-folder-properties.tsx	(revision 625354c8af746681a130d381c5881a3713632fe6)
++++ b/src/views/sidebar/parts/edit/share-folder-properties.tsx	(date 1661864954000)
+@@ -9,9 +9,9 @@
+ 	Container,
+ 	Divider,
+ 	Padding,
+-	SnackbarManagerContext,
+ 	Text,
+-	Tooltip
++	Tooltip,
++	SnackbarManagerContext
+ } from '@zextras/carbonio-design-system';
+ import { Grant, soapFetch, useUserAccounts } from '@zextras/carbonio-shell-ui';
+ import { map, replace, split } from 'lodash';
+@@ -66,10 +66,10 @@
+ 	onMouseEnter
+ }) => {
+ 	const [t] = useTranslation();
++	const accounts = useUserAccounts();
++	const { setActiveGrant } = useContext(Context);
+ 	// eslint-disable-next-line @typescript-eslint/ban-types
+ 	const createSnackbar = useContext(SnackbarManagerContext) as Function;
+-	const accounts = useUserAccounts();
+-	const { setActiveGrant } = useContext(Context);
+ 	// eslint-disable-next-line @typescript-eslint/ban-types
+ 	const dispatch = useDispatch() as Function;
+ 	const onRevoke = useCallback(() => {
+@@ -136,6 +136,7 @@
+ 	);
+ };
+ const Grantee: FC<GranteeProps> = ({ grant, folder, setActiveModal, shareCalendarRoleOptions }) => {
++	const createSnackbar = useContext(SnackbarManagerContext);
+ 	const [hovered, setHovered] = useState(false);
+ 	const onMouseEnter = useCallback(() => {
+ 		setHovered(true);
+@@ -155,6 +156,7 @@
+ 				onMouseLeave={onMouseLeave}
+ 				onMouseEnter={onMouseEnter}
+ 				grant={grant}
++				createSnackbar={createSnackbar}
+ 				setActiveModal={setActiveModal}
+ 			/>
+ 		</Container>
+@@ -166,24 +168,25 @@
+ 	setActiveModal
+ }) => {
+ 	const [t] = useTranslation();
+-	const [grant, setGrant] = useState<Array<Grant>>(folder.folder.acl.grant);
+-	const shareCalendarRoleOptions = useCallback(
+-		(_grant: Grant) => ShareCalendarRoleOptions(t, _grant.perm.includes('p')),
+-		[t]
+-	);
++	const [grant, setGrant] = useState<Array<Grant> | undefined>();
++
+ 	useEffect(() => {
+ 		soapFetch('GetFolder', {
+ 			_jsns: 'urn:zimbraMail',
+ 			folder: { l: folder.id }
+-		}).then((res: any): void => {
++		}).then((res: any) => {
+ 			if (res?.folder) {
+ 				setGrant(res.folder[0].acl.grant);
+ 			}
+ 		});
+ 	}, [folder.id]);
+ 
++	const shareCalendarRoleOptions = useMemo(
++		() => ShareCalendarRoleOptions(t, grant?.[0]?.perm?.includes('p')),
++		[t, grant]
++	);
+ 	return (
+-		<Container mainAlignment="center" crossAlignment="flex-start" height="fit">
++		<Container mainAlignmenEt="center" crossAlignment="flex-start" height="fit">
+ 			<Padding vertical="small" />
+ 			<Text weight="bold">{t('label.shares_folder_edit', 'Sharing of this folder')}</Text>
+ 			<Padding vertical="small" />
+@@ -193,7 +196,7 @@
+ 					grant={item}
+ 					folder={folder}
+ 					setActiveModal={setActiveModal}
+-					shareCalendarRoleOptions={shareCalendarRoleOptions(item)}
++					shareCalendarRoleOptions={shareCalendarRoleOptions}
+ 				/>
+ 			))}
+ 			<Padding top="medium" />
+Index: src/views/sidebar/new-modal.tsx
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport React, {\n\tChangeEvent,\n\tFC,\n\tuseCallback,\n\tuseContext,\n\tuseEffect,\n\tuseLayoutEffect,\n\tuseMemo,\n\tuseRef,\n\tuseState\n} from 'react';\nimport {\n\tContainer,\n\tInput,\n\tText,\n\tPadding,\n\tAccordion,\n\tSnackbarManagerContext\n} from '@zextras/carbonio-design-system';\n\nimport { cloneDeep, filter, includes, startsWith } from 'lodash';\nimport { nanoid } from '@reduxjs/toolkit';\nimport {\n\tAccordionFolder,\n\tFOLDERS,\n\tuseFoldersAccordionByView,\n\tuseUserAccount\n} from '@zextras/carbonio-shell-ui';\nimport { useTranslation } from 'react-i18next';\nimport { useDispatch } from 'react-redux';\nimport styled from 'styled-components';\nimport { useParams } from 'react-router-dom';\nimport ModalFooter from './commons/modal-footer';\nimport { ModalHeader } from './commons/modal-header';\nimport { createFolder } from '../../store/actions/create-folder';\nimport { FOLDER_VIEW } from '../../constants';\nimport ModalAccordionCustomComponent from './parts/edit/modal-accordion-custom-component';\nimport { ModalProps } from '../../types';\nimport { getFolderTranslatedName, translatedSystemFolders } from './utils';\n\nconst ContainerEl = styled(Container)`\n\toverflow-y: auto;\n\tdisplay: block;\n`;\n\nexport const NewModal: FC<ModalProps> = ({ folder, onClose }) => {\n\tconst [t] = useTranslation();\n\tconst dispatch = useDispatch();\n\t// eslint-disable-next-line @typescript-eslint/ban-types\n\tconst createSnackbar = useContext(SnackbarManagerContext) as Function;\n\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t// @ts-ignore\n\tconst folders = useFoldersAccordionByView(FOLDER_VIEW.message, null);\n\tconst [inputValue, setInputValue] = useState('');\n\tconst [searchString, setSearchString] = useState('');\n\tconst [folderDestination, setFolderDestination] = useState<AccordionFolder | undefined>(folder);\n\tconst [disabled, setDisabled] = useState(true);\n\tconst [hasError, setHasError] = useState(false);\n\tconst [label, setLabel] = useState(t('folder_panel.modal.new.input.name', 'Enter Folder Name'));\n\tconst { folderId } = useParams<{ folderId: string }>();\n\tconst accountName = useUserAccount().name;\n\tconst accordionRef = useRef<HTMLDivElement>();\n\tconst [accordionWidth, setAccordionWidth] = useState<number>();\n\n\tuseLayoutEffect(() => {\n\t\tconst calculateAvailableWidth = (): void => {\n\t\t\tif (accordionRef && accordionRef.current) {\n\t\t\t\tsetAccordionWidth(accordionRef?.current?.clientWidth);\n\t\t\t}\n\t\t};\n\t\twindow.addEventListener('resize', calculateAvailableWidth);\n\t\treturn (): void => window.removeEventListener('resize', calculateAvailableWidth);\n\t}, [accordionRef]);\n\n\tconst showWarning = useMemo(\n\t\t() => includes(translatedSystemFolders(t), inputValue),\n\t\t[t, inputValue]\n\t);\n\n\tconst flattenFolders = useCallback(\n\t\t(arr: Array<AccordionFolder>): Array<AccordionFolder> => {\n\t\t\tconst result: Array<AccordionFolder> = [];\n\t\t\tarr.forEach((item) => {\n\t\t\t\tconst { items } = item;\n\t\t\t\tif (\n\t\t\t\t\titem.folder.id !== FOLDERS.TRASH &&\n\t\t\t\t\titem.folder.id !== FOLDERS.SPAM &&\n\t\t\t\t\t!startsWith(item.folder.absFolderPath, '/Trash')\n\t\t\t\t)\n\t\t\t\t\tresult.push({\n\t\t\t\t\t\t...item,\n\t\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\tCustomComponent: ModalAccordionCustomComponent,\n\t\t\t\t\t\tonClick: () => {\n\t\t\t\t\t\t\tsetFolderDestination(item);\n\t\t\t\t\t\t},\n\t\t\t\t\t\tbackground:\n\t\t\t\t\t\t\ttypeof folderDestination !== 'undefined' && folderDestination.id === item.folder.id\n\t\t\t\t\t\t\t\t? 'highlight'\n\t\t\t\t\t\t\t\t: undefined,\n\t\t\t\t\t\tlabel:\n\t\t\t\t\t\t\titem.folder.id === FOLDERS.USER_ROOT\n\t\t\t\t\t\t\t\t? accountName\n\t\t\t\t\t\t\t\t: getFolderTranslatedName({\n\t\t\t\t\t\t\t\t\t\tt,\n\t\t\t\t\t\t\t\t\t\tfolderId: item.folder.id,\n\t\t\t\t\t\t\t\t\t\tfolderName: item.folder.name\n\t\t\t\t\t\t\t\t  }),\n\t\t\t\t\t\tactiveId: item.folder.id === folderId,\n\t\t\t\t\t\taccordionWidth,\n\t\t\t\t\t\titems: []\n\t\t\t\t\t});\n\t\t\t\tif (items) result.push(...flattenFolders(items));\n\t\t\t});\n\t\t\treturn result;\n\t\t},\n\t\t[folderDestination, accountName, t, folderId, accordionWidth]\n\t);\n\n\tconst getFolderRootName = useCallback((_folder: AccordionFolder): string => {\n\t\tlet result = _folder.folder;\n\t\twhile (result.parent?.parent) {\n\t\t\tresult = result.parent;\n\t\t}\n\t\treturn result.owner || result.parent?.name || result.name;\n\t}, []);\n\n\tconst filteredFolders = useMemo(\n\t\t() => folders.filter((item) => item.label === getFolderRootName(folder)),\n\t\t[folders, getFolderRootName, folder]\n\t);\n\n\tconst flattenedFolders = useMemo(\n\t\t() => flattenFolders(filteredFolders),\n\t\t[filteredFolders, flattenFolders]\n\t);\n\n\tuseEffect(() => {\n\t\tif (!folderDestination || !inputValue.length || showWarning) {\n\t\t\tsetDisabled(true);\n\t\t\treturn;\n\t\t}\n\t\tconst value = !!filter(folderDestination.folder.children, (item) => item.name === inputValue)\n\t\t\t.length;\n\t\tif (value) {\n\t\t\tsetLabel(t('folder_panel.modal.new.input.name_exist', 'Name already exists in this path'));\n\t\t} else {\n\t\t\tsetLabel(t('folder_panel.modal.new.input.name', 'Enter Folder Name'));\n\t\t}\n\t\tsetHasError(value);\n\t\tsetDisabled(value);\n\t}, [folderDestination, inputValue, showWarning, t]);\n\n\tconst filteredFromUserInput = useMemo(\n\t\t() =>\n\t\t\tfilter(flattenedFolders, (item) => {\n\t\t\t\tconst folderName = item.label.toLowerCase();\n\t\t\t\treturn startsWith(folderName, searchString.toLowerCase());\n\t\t\t}),\n\t\t[flattenedFolders, searchString]\n\t);\n\n\tconst onConfirm = useCallback(() => {\n\t\tdispatch(createFolder({ parentFolder: folderDestination, name: inputValue, id: nanoid() }))\n\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t// @ts-ignore\n\t\t\t.then((res: unknown & { type: string }) => {\n\t\t\t\tif (res.type.includes('fulfilled')) {\n\t\t\t\t\tcreateSnackbar({\n\t\t\t\t\t\tkey: `edit`,\n\t\t\t\t\t\treplace: true,\n\t\t\t\t\t\ttype: 'success',\n\t\t\t\t\t\tlabel: t('messages.snackbar.folder_created', 'New folder created'),\n\t\t\t\t\t\tautoHideTimeout: 3000,\n\t\t\t\t\t\thideButton: true\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tcreateSnackbar({\n\t\t\t\t\t\tkey: `edit`,\n\t\t\t\t\t\treplace: true,\n\t\t\t\t\t\ttype: 'error',\n\t\t\t\t\t\tlabel: t('label.error_try_again', 'Something went wrong, please try again'),\n\t\t\t\t\t\tautoHideTimeout: 3000,\n\t\t\t\t\t\thideButton: true\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\tsetSearchString('');\n\t\tsetInputValue('');\n\t\tsetLabel(t('folder_panel.modal.new.input.name', 'Enter Folder Name'));\n\t\tsetFolderDestination(undefined);\n\t\tsetHasError(false);\n\t\tonClose();\n\t}, [dispatch, folderDestination, inputValue, t, onClose, createSnackbar]);\n\n\treturn folder ? (\n\t\t<Container\n\t\t\tpadding={{ all: 'large' }}\n\t\t\tmainAlignment=\"center\"\n\t\t\tcrossAlignment=\"flex-start\"\n\t\t\theight=\"fit\"\n\t\t>\n\t\t\t<ModalHeader\n\t\t\t\ttitle={t('folder_panel.modal.new.title', 'Create a new folder')}\n\t\t\t\tonClose={onClose}\n\t\t\t/>\n\t\t\t<Container mainAlignment=\"center\" crossAlignment=\"flex-start\" height=\"fit\">\n\t\t\t\t<Input\n\t\t\t\t\tlabel={label}\n\t\t\t\t\tbackgroundColor=\"gray5\"\n\t\t\t\t\thasError={hasError}\n\t\t\t\t\tdefaultValue={inputValue}\n\t\t\t\t\tonChange={(e: ChangeEvent<HTMLInputElement>): void => setInputValue(e.target.value)}\n\t\t\t\t/>\n\t\t\t\t{showWarning && (\n\t\t\t\t\t<Padding all=\"small\">\n\t\t\t\t\t\t<Text size=\"small\" color=\"error\">\n\t\t\t\t\t\t\t{`${t(\n\t\t\t\t\t\t\t\t'folder.modal.edit.rename_warning',\n\t\t\t\t\t\t\t\t'You cannot rename a folder as a system one.'\n\t\t\t\t\t\t\t)}`}\n\t\t\t\t\t\t</Text>\n\t\t\t\t\t</Padding>\n\t\t\t\t)}\n\t\t\t\t<Input\n\t\t\t\t\tlabel={t('label.filter_folders', 'Filter folders')}\n\t\t\t\t\tbackgroundColor=\"gray5\"\n\t\t\t\t\tvalue={searchString}\n\t\t\t\t\tonChange={(e: ChangeEvent<HTMLInputElement>): void => setSearchString(e.target.value)}\n\t\t\t\t/>\n\t\t\t\t<ContainerEl\n\t\t\t\t\torientation=\"vertical\"\n\t\t\t\t\tmainAlignment=\"flex-start\"\n\t\t\t\t\tminHeight=\"30vh\"\n\t\t\t\t\tmaxHeight=\"60vh\"\n\t\t\t\t>\n\t\t\t\t\t<Accordion\n\t\t\t\t\t\tref={accordionRef}\n\t\t\t\t\t\tbackground=\"gray6\"\n\t\t\t\t\t\titems={filteredFromUserInput}\n\t\t\t\t\t\tstyle={{ overflowY: 'hidden' }}\n\t\t\t\t\t/>\n\t\t\t\t</ContainerEl>\n\t\t\t\t<ModalFooter\n\t\t\t\t\tonConfirm={onConfirm}\n\t\t\t\t\tsecondaryAction={onClose}\n\t\t\t\t\tlabel={t('label.create_and_move', 'Create and move')}\n\t\t\t\t\tdisabled={disabled}\n\t\t\t\t/>\n\t\t\t</Container>\n\t\t</Container>\n\t) : (\n\t\t<></>\n\t);\n};\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/views/sidebar/new-modal.tsx b/src/views/sidebar/new-modal.tsx
+--- a/src/views/sidebar/new-modal.tsx	(revision 625354c8af746681a130d381c5881a3713632fe6)
++++ b/src/views/sidebar/new-modal.tsx	(date 1661881947000)
+@@ -23,14 +23,9 @@
+ 	SnackbarManagerContext
+ } from '@zextras/carbonio-design-system';
+ 
+-import { cloneDeep, filter, includes, startsWith } from 'lodash';
++import { filter, includes, startsWith } from 'lodash';
+ import { nanoid } from '@reduxjs/toolkit';
+-import {
+-	AccordionFolder,
+-	FOLDERS,
+-	useFoldersAccordionByView,
+-	useUserAccount
+-} from '@zextras/carbonio-shell-ui';
++import { Folder, FOLDERS, useFoldersByView, useUserAccount } from '@zextras/carbonio-shell-ui';
+ import { useTranslation } from 'react-i18next';
+ import { useDispatch } from 'react-redux';
+ import styled from 'styled-components';
+@@ -55,10 +50,10 @@
+ 	const createSnackbar = useContext(SnackbarManagerContext) as Function;
+ 	// eslint-disable-next-line @typescript-eslint/ban-ts-comment
+ 	// @ts-ignore
+-	const folders = useFoldersAccordionByView(FOLDER_VIEW.message, null);
++	const folders = useFoldersByView(FOLDER_VIEW.message);
+ 	const [inputValue, setInputValue] = useState('');
+ 	const [searchString, setSearchString] = useState('');
+-	const [folderDestination, setFolderDestination] = useState<AccordionFolder | undefined>(folder);
++	const [folderDestination, setFolderDestination] = useState<Folder | undefined>(folder);
+ 	const [disabled, setDisabled] = useState(true);
+ 	const [hasError, setHasError] = useState(false);
+ 	const [label, setLabel] = useState(t('folder_panel.modal.new.input.name', 'Enter Folder Name'));
+@@ -83,14 +78,13 @@
+ 	);
+ 
+ 	const flattenFolders = useCallback(
+-		(arr: Array<AccordionFolder>): Array<AccordionFolder> => {
+-			const result: Array<AccordionFolder> = [];
++		(arr: Array<Folder>): Array<Folder> => {
++			const result: Array<Folder> = [];
+ 			arr.forEach((item) => {
+-				const { items } = item;
+ 				if (
+-					item.folder.id !== FOLDERS.TRASH &&
+-					item.folder.id !== FOLDERS.SPAM &&
+-					!startsWith(item.folder.absFolderPath, '/Trash')
++					item.id !== FOLDERS.TRASH &&
++					item.id !== FOLDERS.SPAM &&
++					!startsWith(item.absFolderPath, '/Trash')
+ 				)
+ 					result.push({
+ 						...item,
+@@ -101,38 +95,41 @@
+ 							setFolderDestination(item);
+ 						},
+ 						background:
+-							typeof folderDestination !== 'undefined' && folderDestination.id === item.folder.id
++							typeof folderDestination !== 'undefined' && folderDestination.id === item.id
+ 								? 'highlight'
+ 								: undefined,
+ 						label:
+-							item.folder.id === FOLDERS.USER_ROOT
++							item.id === FOLDERS.USER_ROOT
+ 								? accountName
+ 								: getFolderTranslatedName({
+ 										t,
+-										folderId: item.folder.id,
+-										folderName: item.folder.name
++										folderId: item.id,
++										folderName: item.name
+ 								  }),
+-						activeId: item.folder.id === folderId,
++						activeId: item.id === folderId,
+ 						accordionWidth,
+ 						items: []
+ 					});
+-				if (items) result.push(...flattenFolders(items));
++				if (item.children.length > 0) {
++					result.push(...flattenFolders(item.children));
++				}
+ 			});
+ 			return result;
+ 		},
+ 		[folderDestination, accountName, t, folderId, accordionWidth]
+ 	);
+ 
+-	const getFolderRootName = useCallback((_folder: AccordionFolder): string => {
+-		let result = _folder.folder;
++	const getFolderRootName = useCallback((_folder: Folder): string => {
++		let result = _folder;
++		console.log('@@_folder', _folder);
+ 		while (result.parent?.parent) {
+ 			result = result.parent;
+ 		}
+-		return result.owner || result.parent?.name || result.name;
++		return (result.isLink && result.owner) || result.parent?.name || result.name;
+ 	}, []);
+ 
+ 	const filteredFolders = useMemo(
+-		() => folders.filter((item) => item.label === getFolderRootName(folder)),
++		() => folders.filter((item: Folder) => item.name === getFolderRootName(folder)),
+ 		[folders, getFolderRootName, folder]
+ 	);
+ 
+@@ -146,8 +143,7 @@
+ 			setDisabled(true);
+ 			return;
+ 		}
+-		const value = !!filter(folderDestination.folder.children, (item) => item.name === inputValue)
+-			.length;
++		const value = !!filter(folderDestination.children, (item) => item.name === inputValue).length;
+ 		if (value) {
+ 			setLabel(t('folder_panel.modal.new.input.name_exist', 'Name already exists in this path'));
+ 		} else {
+@@ -157,10 +153,11 @@
+ 		setDisabled(value);
+ 	}, [folderDestination, inputValue, showWarning, t]);
+ 
++	// @TODO: optimize function
+ 	const filteredFromUserInput = useMemo(
+ 		() =>
+ 			filter(flattenedFolders, (item) => {
+-				const folderName = item.label.toLowerCase();
++				const folderName = item.name.toLowerCase();
+ 				return startsWith(folderName, searchString.toLowerCase());
+ 			}),
+ 		[flattenedFolders, searchString]
+Index: src/views/sidebar/sidebar-accordion-mui.tsx
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/views/sidebar/sidebar-accordion-mui.tsx b/src/views/sidebar/sidebar-accordion-mui.tsx
+new file mode 100644
+--- /dev/null	(date 1661885115000)
++++ b/src/views/sidebar/sidebar-accordion-mui.tsx	(date 1661885115000)
+@@ -0,0 +1,63 @@
++/*
++ * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>
++ *
++ * SPDX-License-Identifier: AGPL-3.0-only
++ */
++
++import ExpandMoreIcon from '@mui/icons-material/ExpandMore';
++import Accordion from '@mui/material/Accordion';
++import AccordionDetails from '@mui/material/AccordionDetails';
++import AccordionSummary from '@mui/material/AccordionSummary';
++import Container from '@mui/material/Container';
++import { Folder, useFoldersByView } from '@zextras/carbonio-shell-ui';
++import React, { FC, SyntheticEvent, useRef } from 'react';
++import { useLocalStorage } from '../../hooks/use-local-storage';
++import AccordionCustomComponent from './accordion-custom-component';
++import { ButtonFindShares } from './button-find-shares';
++
++export const SidebarAccordionMui: FC<{ accordions: Array<Folder> }> = ({ accordions }) => {
++	const [openIds, setOpenIds] = useLocalStorage<Array<string>>('open_mails_folders', []);
++	const sidebarRef = useRef<HTMLInputElement>(null);
++	const onChange = (accordion: Folder) => (event: SyntheticEvent, isExpanded: boolean) => {
++		if (isExpanded) {
++			setOpenIds((state: Array<string>) =>
++				state.includes(accordion.id) ? state : [...state, accordion.id]
++			);
++		} else {
++			setOpenIds((state: Array<string>) => state.filter((id) => id !== accordion.id));
++		}
++	};
++
++	return (
++		<Container disableGutters sx={{ backgroundColor: 'red', width: '100%' }}>
++			{accordions.map((accordion) =>
++				accordion.id === 'find_shares' ? (
++					<ButtonFindShares />
++				) : (
++					<div key={accordion.id} ref={sidebarRef}>
++						<Accordion
++							disableGutters
++							onChange={onChange(accordion)}
++							TransitionProps={{ unmountOnExit: true }}
++							sx={{ padding: '0px' }}
++							expanded={openIds.includes(accordion.id)}
++						>
++							<AccordionSummary
++								expandIcon={accordion.children.length > 0 && <ExpandMoreIcon />}
++								aria-controls="panel1a-content"
++								id={accordion.id}
++							>
++								<AccordionCustomComponent item={accordion} />
++							</AccordionSummary>
++							{accordion.children.length > 0 && (
++								<AccordionDetails>
++									<SidebarAccordionMui accordions={accordion.children} />
++								</AccordionDetails>
++							)}
++						</Accordion>
++					</div>
++				)
++			)}
++		</Container>
++	);
++};
+Index: package.json
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>{\n  \"name\": \"carbonio-mails-ui\",\n  \"version\": \"0.1.30\",\n  \"description\": \"Mails module for Zextras Carbonio\",\n  \"main\": \"src/app.jsx\",\n  \"scripts\": {\n    \"build\": \"sdk build\",\n    \"deploy\": \"sdk deploy\",\n    \"start\": \"sdk watch\",\n    \"postinstall\": \"is-ci || husky install\",\n    \"prepublishOnly\": \"pinst --disable\",\n    \"postpublish\": \"pinst --enable\",\n    \"type-check\": \"tsc --noEmit\",\n    \"type-check:watch\": \"npm run type-check -- --watch\",\n    \"lint\": \"eslint --ext .js,.jsx,.ts,.tsx --resolve-plugins-relative-to node_modules/@zextras/carbonio-ui-configs src\",\n    \"test\": \"jest\"\n  },\n  \"files\": [\n    \"src/types/\"\n  ],\n  \"types\": \"./src/types/index.d.ts\",\n  \"keywords\": [],\n  \"author\": \"Zextras Crab Onions Team <https://www.zextras.com/carbonio/>\",\n  \"maintainers\": [\n    \"Gabriele Marino <gabriele.marino@zextras.com>\",\n    \"Abhishek Kumar <abhishek.kumar@zextras.com>\",\n    \"Giuliano Caregnato <giuliano.caregnato@zextras.com>\",\n    \"Dhaval Dodiya <dhaval.dodiya@zextras.com>\",\n    \"Francesco Gottardi <francesco.gottardi@zextras.com>\",\n    \"Luca Stauble <luca.stauble@zextras.com>\"\n  ],\n  \"license\": \"AGPL-3.0-only\",\n  \"devDependencies\": {\n    \"@babel/core\": \"7.16.0\",\n    \"@babel/plugin-proposal-class-properties\": \"7.16.0\",\n    \"@babel/plugin-transform-runtime\": \"7.16.4\",\n    \"@babel/preset-env\": \"7.16.4\",\n    \"@babel/preset-react\": \"7.16.0\",\n    \"@babel/preset-typescript\": \"^7.16.0\",\n    \"@commitlint/cli\": \"14.1.0\",\n    \"@commitlint/config-conventional\": \"14.1.0\",\n    \"@testing-library/jest-dom\": \"^5.16.4\",\n    \"@testing-library/react\": \"^12.1.5\",\n    \"@testing-library/user-event\": \"^14.3.0\",\n    \"@types/history\": \"4.7.9\",\n    \"@types/jest\": \"^28.1.6\",\n    \"@types/lodash\": \"4.14.177\",\n    \"@types/react\": \"17.0.36\",\n    \"@types/react-dom\": \"17.0.11\",\n    \"@types/react-redux\": \"7.1.20\",\n    \"@types/react-router-dom\": \"5.3.2\",\n    \"@types/styled-components\": \"^5.1.15\",\n    \"@zextras/carbonio-ui-configs\": \"^0.1.11\",\n    \"@zextras/carbonio-ui-sdk\": \"1.3.1\",\n    \"babel-jest\": \"^28.1.3\",\n    \"babel-plugin-i18next-extract\": \"0.8.3\",\n    \"babel-plugin-styled-components\": \"2.0.1\",\n    \"eslint-plugin-import\": \"^2.26.0\",\n    \"eslint-plugin-jest-dom\": \"^4.0.2\",\n    \"eslint-plugin-notice\": \"^0.9.10\",\n    \"eslint-plugin-testing-library\": \"^5.5.1\",\n    \"eslint-plugin-unused-imports\": \"^2.0.0\",\n    \"husky\": \"^5.2.0\",\n    \"is-ci\": \"3.0.1\",\n    \"jest\": \"^28.1.3\",\n    \"jest-environment-jsdom\": \"^28.1.3\",\n    \"jest-fail-on-console\": \"^2.4.2\",\n    \"jest-junit\": \"^14.0.0\",\n    \"pinst\": \"2.1.6\"\n  },\n  \"dependencies\": {\n    \"@reduxjs/toolkit\": \"1.6.2\",\n    \"@zextras/carbonio-design-system\": \"^0.3.7\",\n    \"@zextras/carbonio-shell-ui\": \"^0.4.30\",\n    \"@zextras/carbonio-ui-preview\": \"^0.1.5\",\n    \"core-js\": \"3.19.1\",\n    \"i18next\": \"^21.5.4\",\n    \"immer\": \"7.0.14\",\n    \"lodash\": \"4.17.21\",\n    \"moment\": \"2.29.1\",\n    \"path-browserify\": \"^1.0.1\",\n    \"prop-types\": \"15.7.2\",\n    \"react\": \"17.0.2\",\n    \"react-dom\": \"17.0.2\",\n    \"react-hook-form\": \"^6.15.8\",\n    \"react-i18next\": \"11.14.3\",\n    \"react-redux\": \"7.2.6\",\n    \"react-router-dom\": \"^5.3.0\",\n    \"styled-components\": \"5.3.3\",\n    \"uuid\": \"^8.3.2\"\n  },\n  \"browserslist\": [\n    \">1%\",\n    \"last 1 version\",\n    \"Firefox ESR\",\n    \"not dead\"\n  ],\n  \"carbonio\": {\n    \"translations_repository\": \"git@bitbucket.org:zextras/com_zextras_zapp_mails.git\",\n    \"name\": \"carbonio-mails-ui\",\n    \"priority\": 5,\n    \"type\": \"carbonio\",\n    \"attrKey\": \"zimbraFeatureMailEnabled\",\n    \"display\": \"Mails\",\n    \"icon\": \"MailModOutline\",\n    \"sentryDsn\": \"https://90672cc95a43460485b50717c4be69ab@feedback.zextras.tools/7\"\n  }\n}\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/package.json b/package.json
+--- a/package.json	(revision 625354c8af746681a130d381c5881a3713632fe6)
++++ b/package.json	(date 1661736228000)
+@@ -69,14 +69,18 @@
+     "pinst": "2.1.6"
+   },
+   "dependencies": {
+-    "@reduxjs/toolkit": "1.6.2",
+-    "@zextras/carbonio-design-system": "^0.3.7",
+-    "@zextras/carbonio-shell-ui": "^0.4.30",
+-    "@zextras/carbonio-ui-preview": "^0.1.5",
+-    "core-js": "3.19.1",
+-    "i18next": "^21.5.4",
+-    "immer": "7.0.14",
+-    "lodash": "4.17.21",
++	  "@emotion/react": "^11.10.0",
++	  "@emotion/styled": "^11.10.0",
++	  "@mui/icons-material": "^5.10.2",
++	  "@mui/material": "^5.10.2",
++	  "@reduxjs/toolkit": "1.6.2",
++	  "@zextras/carbonio-design-system": "^0.3.7",
++	  "@zextras/carbonio-shell-ui": "^0.4.30",
++	  "@zextras/carbonio-ui-preview": "^0.1.5",
++	  "core-js": "3.19.1",
++	  "i18next": "^21.5.4",
++	  "immer": "7.0.14",
++	  "lodash": "4.17.21",
+     "moment": "2.29.1",
+     "path-browserify": "^1.0.1",
+     "prop-types": "15.7.2",
+Index: src/store/actions/get-conv.ts
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport { createAsyncThunk } from '@reduxjs/toolkit';\nimport { soapFetch } from '@zextras/carbonio-shell-ui';\nimport { map } from 'lodash';\nimport { normalizeConversation } from '../../normalizations/normalize-conversation';\nimport { normalizeMailMessageFromSoap } from '../../normalizations/normalize-message';\nimport {\n\tConversation,\n\tGetConvParameters,\n\tGetConvRequest,\n\tGetConvResponse,\n\tIncompleteMessage\n} from '../../types';\n\nexport const getConv = createAsyncThunk<\n\t{ conversation: Partial<Conversation>; messages: Array<IncompleteMessage> },\n\tGetConvParameters\n>(\n\t'conversations/getConv',\n\tasync ({ conversationId, fetch = 'all' }) => {\n\t\tconst result = (await soapFetch<GetConvRequest, GetConvResponse>('GetConv', {\n\t\t\t_jsns: 'urn:zimbraMail',\n\t\t\tc: {\n\t\t\t\tid: conversationId,\n\t\t\t\thtml: 1,\n\t\t\t\tneedExp: 1,\n\t\t\t\tfetch\n\t\t\t}\n\t\t})) as GetConvResponse;\n\t\tconst conversation = normalizeConversation(result.c[0]);\n\t\tconst messages = map(result.c[0].m, (item) =>\n\t\t\tnormalizeMailMessageFromSoap(item, false)\n\t\t) as unknown as Array<IncompleteMessage>;\n\t\treturn { conversation, messages };\n\t},\n\t{\n\t\tcondition: ({ folderId, conversationId }: GetConvParameters, { getState }: any) => {\n\t\t\tif (!folderId) return true;\n\t\t\treturn (\n\t\t\t\tgetState().conversations?.expandedStatus[conversationId] !== 'complete' &&\n\t\t\t\tgetState().conversations?.expandedStatus[conversationId] !== 'pending'\n\t\t\t);\n\t\t}\n\t}\n);\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/store/actions/get-conv.ts b/src/store/actions/get-conv.ts
+--- a/src/store/actions/get-conv.ts	(revision 625354c8af746681a130d381c5881a3713632fe6)
++++ b/src/store/actions/get-conv.ts	(date 1661736228000)
+@@ -4,7 +4,7 @@
+  * SPDX-License-Identifier: AGPL-3.0-only
+  */
+ import { createAsyncThunk } from '@reduxjs/toolkit';
+-import { soapFetch } from '@zextras/carbonio-shell-ui';
++import { getTags, soapFetch } from '@zextras/carbonio-shell-ui';
+ import { map } from 'lodash';
+ import { normalizeConversation } from '../../normalizations/normalize-conversation';
+ import { normalizeMailMessageFromSoap } from '../../normalizations/normalize-message';
+@@ -31,7 +31,8 @@
+ 				fetch
+ 			}
+ 		})) as GetConvResponse;
+-		const conversation = normalizeConversation(result.c[0]);
++		const tags = getTags();
++		const conversation = normalizeConversation({ c: result.c[0], tags });
+ 		const messages = map(result.c[0].m, (item) =>
+ 			normalizeMailMessageFromSoap(item, false)
+ 		) as unknown as Array<IncompleteMessage>;
+Index: .idea/shelf/fix__shared_with_information_on_edit_folder_modal/shelved.patch
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/.idea/shelf/fix__shared_with_information_on_edit_folder_modal/shelved.patch b/.idea/shelf/fix__shared_with_information_on_edit_folder_modal/shelved.patch
+new file mode 100644
+--- /dev/null	(date 1661736228000)
++++ b/.idea/shelf/fix__shared_with_information_on_edit_folder_modal/shelved.patch	(date 1661736228000)
+@@ -0,0 +1,293 @@
++Index: src/store/actions/conv-action.ts
++IDEA additional info:
++Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
++<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport { createAsyncThunk } from '@reduxjs/toolkit';\nimport { soapFetch } from '@zextras/carbonio-shell-ui';\nimport { isNil, omitBy } from 'lodash';\nimport {\n\tConvActionParameters,\n\tConvActionRequest,\n\tConvActionResponse,\n\tConvActionResult\n} from '../../types';\n\nexport const convAction = createAsyncThunk<ConvActionResult, ConvActionParameters>(\n\t'convAction',\n\tasync ({ ids, operation, parent, tagName }) => {\n\t\tconst { action } = (await soapFetch<ConvActionRequest, ConvActionResponse>('ConvAction', {\n\t\t\t_jsns: 'urn:zimbraMail',\n\n\t\t\taction: omitBy(\n\t\t\t\t{\n\t\t\t\t\tid: ids.join(','),\n\t\t\t\t\top: operation,\n\t\t\t\t\tl: parent,\n\t\t\t\t\ttn: tagName\n\t\t\t\t},\n\t\t\t\tisNil\n\t\t\t)\n\t\t})) as ConvActionResponse;\n\t\treturn {\n\t\t\tids: action.id.split(','),\n\t\t\toperation: action.op\n\t\t};\n\t}\n);\n
++Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
++<+>UTF-8
++===================================================================
++diff --git a/src/store/actions/conv-action.ts b/src/store/actions/conv-action.ts
++--- a/src/store/actions/conv-action.ts	(revision 4adaba21c8889cfd3cf44adf6271b75e82f59433)
+++++ b/src/store/actions/conv-action.ts	(date 1659976268999)
++@@ -6,6 +6,7 @@
++ import { createAsyncThunk } from '@reduxjs/toolkit';
++ import { soapFetch } from '@zextras/carbonio-shell-ui';
++ import { isNil, omitBy } from 'lodash';
+++// import { omitBy } from '../../commons/utils';
++ import {
++ 	ConvActionParameters,
++ 	ConvActionRequest,
++Index: src/commons/utils.tsx
++IDEA additional info:
++Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
++<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport moment from 'moment';\nimport { find, isArray } from 'lodash';\nimport { TFunction } from 'react-i18next';\nimport { Account } from '@zextras/carbonio-shell-ui';\nimport { Participant } from '../types/participant';\n\nexport const getTimeLabel = (date: number): string => {\n\tconst momentDate = moment(date);\n\tif (momentDate.isSame(new Date(), 'day')) {\n\t\treturn momentDate.format('LT');\n\t}\n\tif (momentDate.isSame(new Date(), 'week')) {\n\t\treturn momentDate.format('dddd, LT');\n\t}\n\tif (momentDate.isSame(new Date(), 'month')) {\n\t\treturn momentDate.format('DD MMMM');\n\t}\n\treturn momentDate.format('DD/MM/YYYY');\n};\n\nexport const participantToString = (\n\tparticipant: Participant | undefined,\n\tt: TFunction,\n\taccounts: Array<Account>\n): string => {\n\tconst me = find(accounts, ['name', participant?.address]);\n\tif (me) {\n\t\treturn t('label.me', 'Me');\n\t}\n\treturn participant?.fullName || participant?.name || participant?.address || '';\n};\n\nexport const isAvailableInTrusteeList = (\n\ttrusteeList: Array<string> | string,\n\taddress: string\n): boolean => {\n\tlet trusteeAddress: Array<string> = [];\n\tlet availableInTrusteeList = false;\n\tif (trusteeList) {\n\t\ttrusteeAddress = isArray(trusteeList) ? trusteeList : trusteeList.split(',');\n\t}\n\tif (trusteeAddress.length > 0) {\n\t\tconst domain = address.substring(address.lastIndexOf('@') + 1);\n\t\ttrusteeAddress.forEach((ta) => {\n\t\t\tif (ta === domain || ta === address) {\n\t\t\t\tavailableInTrusteeList = true;\n\t\t\t}\n\t\t});\n\t}\n\treturn availableInTrusteeList;\n};\n\n// eslint-disable-next-line no-shadow\nexport enum LineType {\n\tORIG_UNKNOWN = 'UNKNOWN',\n\tORIG_QUOTED = 'QUOTED',\n\tORIG_SEP_STRONG = 'SEP_STRONG',\n\tORIG_WROTE_STRONG = 'WROTE_STRONG',\n\tORIG_WROTE_WEAK = 'WROTE_WEAK',\n\tORIG_HEADER = 'HEADER',\n\tORIG_LINE = 'LINE',\n\tHTML_SEP_ID = 'zwchr',\n\tNOTES_SEPARATOR = '*~*~*~*~*~*~*~*~*~*'\n}\n\n// eslint-disable-next-line no-shadow\nexport enum FolderActionsType {\n\tNEW = 'new',\n\tMOVE = 'move',\n\tDELETE = 'delete',\n\tEDIT = 'edit',\n\tEMPTY = 'empty',\n\tREMOVE_FROM_LIST = 'removeFromList',\n\tSHARES_INFO = 'sharesInfo',\n\tSHARE = 'share'\n}\n\n// eslint-disable-next-line no-shadow\nexport enum ParticipantRole {\n\tFROM = 'f',\n\tTO = 't',\n\tCARBON_COPY = 'c',\n\tBLIND_CARBON_COPY = 'b',\n\tREPLY_TO = 'r',\n\tSENDER = 's',\n\tREAD_RECEIPT_NOTIFICATION = 'n',\n\tRESENT_FROM = 'rf'\n}\n\n// eslint-disable-next-line no-shadow\nexport enum ActionsType {\n\tNEW = 'new',\n\tEDIT_AS_DRAFT = 'editAsDraft',\n\tEDIT_AS_NEW = 'editAsNew',\n\tREPLY = 'reply',\n\tREPLY_ALL = 'replyAll',\n\tFORWARD = 'forward',\n\tMAIL_TO = 'mailTo',\n\tCOMPOSE = 'compose',\n\tPREFILL_COMPOSE = 'prefillCompose'\n}\n\n// eslint-disable-next-line no-shadow\nexport enum TagsActionsType {\n\tNEW = 'new',\n\tDELETE = 'delete',\n\tEDIT = 'edit',\n\tApply = 'apply'\n}\n
++Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
++<+>UTF-8
++===================================================================
++diff --git a/src/commons/utils.tsx b/src/commons/utils.tsx
++--- a/src/commons/utils.tsx	(revision 4adaba21c8889cfd3cf44adf6271b75e82f59433)
+++++ b/src/commons/utils.tsx	(date 1659976157630)
++@@ -112,3 +112,12 @@
++ 	EDIT = 'edit',
++ 	Apply = 'apply'
++ }
+++
+++// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
+++export const omitBy = (obj: any, check: (arg: unknown) => boolean): any => {
+++	// eslint-disable-next-line no-param-reassign
+++	obj = { ...obj };
+++	// eslint-disable-next-line no-param-reassign
+++	Object.entries(obj).forEach(([key, value]) => check(value) && delete obj[key]);
+++	return obj;
+++};
++Index: src/store/actions/search.ts
++IDEA additional info:
++Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
++<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n/* eslint no-param-reassign: [\"error\", { \"props\": true, \"ignorePropertyModificationsFor\": [\"conversation\"] }] */\n\nimport { createAsyncThunk } from '@reduxjs/toolkit';\nimport { soapFetch } from '@zextras/carbonio-shell-ui';\nimport { keyBy, map, reduce } from 'lodash';\nimport { normalizeConversation } from '../../normalizations/normalize-conversation';\nimport { normalizeMailMessageFromSoap } from '../../normalizations/normalize-message';\nimport {\n\tConversation,\n\tSearchRequest,\n\tSearchResponse,\n\tFetchConversationsReturn,\n\tFetchConversationsParameters\n} from '../../types';\n\nexport const search = createAsyncThunk<\n\tFetchConversationsReturn | undefined,\n\tFetchConversationsParameters\n>(\n\t'fetchConversations',\n\tasync ({\n\t\tfolderId,\n\t\tlimit = 100,\n\t\tbefore,\n\t\ttypes = 'conversation',\n\t\tsortBy = 'dateDesc',\n\t\tquery,\n\t\toffset,\n\t\trecip = '2',\n\t\twantContent = 'full'\n\t}) => {\n\t\tconst queryPart = [`inId:\"${folderId}\"`];\n\t\tif (before) queryPart.push(`before:${before.getTime()}`);\n\t\tconst result = await soapFetch<SearchRequest, SearchResponse>('Search', {\n\t\t\t_jsns: 'urn:zimbraMail',\n\t\t\tlimit,\n\t\t\tneedExp: 1,\n\t\t\trecip,\n\t\t\tfullConversation: 1,\n\t\t\twantContent,\n\t\t\tsortBy,\n\t\t\tquery: query || queryPart.join(' '),\n\t\t\toffset,\n\t\t\ttypes\n\t\t});\n\n\t\tif (types === 'conversation') {\n\t\t\tconst conversations = map(result?.c ?? [], (obj) =>\n\t\t\t\tnormalizeConversation(obj)\n\t\t\t) as unknown as Array<Conversation>;\n\t\t\treturn {\n\t\t\t\tconversations: keyBy(conversations, 'id'),\n\t\t\t\thasMore: result.more,\n\t\t\t\ttypes\n\t\t\t};\n\t\t}\n\t\tif (types === 'message') {\n\t\t\treturn {\n\t\t\t\tmessages: reduce(\n\t\t\t\t\tresult.m ?? [],\n\t\t\t\t\t(acc, msg) => {\n\t\t\t\t\t\tconst normalized = normalizeMailMessageFromSoap(msg, false);\n\t\t\t\t\t\treturn { ...acc, [normalized.id]: normalized };\n\t\t\t\t\t},\n\t\t\t\t\t{}\n\t\t\t\t),\n\t\t\t\thasMore: result.more,\n\t\t\t\ttypes\n\t\t\t};\n\t\t}\n\t\treturn undefined;\n\t}\n);\n
++Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
++<+>UTF-8
++===================================================================
++diff --git a/src/store/actions/search.ts b/src/store/actions/search.ts
++--- a/src/store/actions/search.ts	(revision 4adaba21c8889cfd3cf44adf6271b75e82f59433)
+++++ b/src/store/actions/search.ts	(date 1659976157631)
++@@ -6,7 +6,7 @@
++ /* eslint no-param-reassign: ["error", { "props": true, "ignorePropertyModificationsFor": ["conversation"] }] */
++ 
++ import { createAsyncThunk } from '@reduxjs/toolkit';
++-import { soapFetch } from '@zextras/carbonio-shell-ui';
+++import { getTags, soapFetch } from '@zextras/carbonio-shell-ui';
++ import { keyBy, map, reduce } from 'lodash';
++ import { normalizeConversation } from '../../normalizations/normalize-conversation';
++ import { normalizeMailMessageFromSoap } from '../../normalizations/normalize-message';
++@@ -49,9 +49,10 @@
++ 			types
++ 		});
++ 
+++		const tags = getTags();
++ 		if (types === 'conversation') {
++ 			const conversations = map(result?.c ?? [], (obj) =>
++-				normalizeConversation(obj)
+++				normalizeConversation({ c: obj, tags })
++ 			) as unknown as Array<Conversation>;
++ 			return {
++ 				conversations: keyBy(conversations, 'id'),
++Index: src/store/utils.ts
++IDEA additional info:
++Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
++<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport { max, map, filter, find, reduce, some, merge, isNil, omitBy } from 'lodash';\nimport { FolderType, MailsFolderMap, FoldersStateType } from '../types';\n\nexport function findDepth(subFolder: FolderType, depth = 1): number {\n\tif (subFolder && subFolder.items && subFolder.items.length) {\n\t\treturn <number>max(map(subFolder.items, (item) => findDepth(item, depth + 1)));\n\t}\n\treturn depth;\n}\n\nexport function calcFolderItems(\n\tfolders: MailsFolderMap,\n\tsubFolders: FolderType | undefined,\n\tid: string\n): FolderType[] {\n\treturn map(\n\t\tfilter(folders, (item) => item.parent === id),\n\t\t(item) => ({\n\t\t\t...item,\n\t\t\titems: calcFolderItems(folders, subFolders, item.id),\n\t\t\tto: `/folder/${item.id}`\n\t\t})\n\t);\n}\n\nexport function calcFolderAbsParentLevelAndPath(\n\tfolders: MailsFolderMap,\n\tsubFolder: FolderType | undefined,\n\tpath = subFolder && subFolder.name,\n\tlevel = 1\n): { absParent: string; level: number; path: string | undefined } | undefined {\n\tif (!subFolder) return undefined;\n\tconst nextFolder = find(folders, (item) => item.id === subFolder.parent);\n\tconst nextPath = `${nextFolder ? nextFolder.name : ''}/${path}`;\n\treturn (\n\t\tcalcFolderAbsParentLevelAndPath(folders, nextFolder, nextPath, level + 1) || {\n\t\t\tabsParent: level > 1 ? subFolder.id : subFolder.parent,\n\t\t\tlevel,\n\t\t\tpath\n\t\t}\n\t);\n}\n\n// replaced lodash \"reduce\" method with vanilla JS in order to decrease iterations and improve performance\nexport function updateFolders(state: FoldersStateType, folders: FolderType[]): void {\n\tstate.folders = Object.values(state.folders).reduce((acc, item) => {\n\t\tconst newFolder = omitBy(\n\t\t\tObject.values(folders).find((c) => c.id === item.id),\n\t\t\tisNil\n\t\t);\n\t\tconst toRet = newFolder ? { ...item, ...newFolder } : item;\n\n\t\treturn {\n\t\t\t...acc,\n\t\t\t[toRet.id]: {\n\t\t\t\t...toRet\n\t\t\t}\n\t\t};\n\t}, {});\n}\n\nexport function updateFolderInStore(state: FoldersStateType, folders: FolderType[]): void {\n\tstate.folders = reduce(\n\t\tstate.folders,\n\t\t(acc, item) => {\n\t\t\tconst toRet = find(folders, (c) => c.id === item.id) || item;\n\n\t\t\tconst items = calcFolderItems(state.folders, toRet, toRet.id);\n\t\t\tconst moreParams = calcFolderAbsParentLevelAndPath(state.folders, toRet);\n\t\t\treturn {\n\t\t\t\t...acc,\n\t\t\t\t[toRet.id]: {\n\t\t\t\t\t...toRet,\n\t\t\t\t\t...moreParams,\n\t\t\t\t\tdepth: findDepth({ ...toRet, items }),\n\t\t\t\t\titems,\n\t\t\t\t\tpath: moreParams ? `/${moreParams.path}` : undefined\n\t\t\t\t}\n\t\t\t};\n\t\t},\n\t\t{}\n\t);\n}\n\nexport function updatePartialFolderInStore(state: FoldersStateType, folders: FolderType[]): void {\n\tstate.folders = reduce(\n\t\tstate.folders,\n\t\t(acc, item) => {\n\t\t\tconst itemToUpdate = find(folders, (c) => c.id === item.id);\n\t\t\tconst toRet = merge(item, itemToUpdate ?? {});\n\n\t\t\tconst items = calcFolderItems(state.folders, toRet, toRet.id);\n\t\t\tconst moreParams = calcFolderAbsParentLevelAndPath(state.folders, toRet);\n\t\t\treturn {\n\t\t\t\t...acc,\n\t\t\t\t[toRet.id]: {\n\t\t\t\t\t...toRet,\n\t\t\t\t\t...moreParams,\n\t\t\t\t\tdepth: findDepth({ ...toRet, items }),\n\t\t\t\t\titems,\n\t\t\t\t\tpath: moreParams ? `/${moreParams.path}` : undefined\n\t\t\t\t}\n\t\t\t};\n\t\t},\n\t\t{}\n\t);\n}\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport function addFoldersToStore(state: FoldersStateType, folders: any): void {\n\tstate.folders = reduce(folders, (acc, v, k) => ({ ...acc, [v.id]: v }), state.folders);\n}\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport function removeFoldersFromStore(state: FoldersStateType, idsToDelete: any): void {\n\t// state.folders = omit(state.folders, idsToDelete); Maybe?\n\tstate.folders = reduce(\n\t\tstate.folders,\n\t\t(acc, v, k) => {\n\t\t\tconst value = some(idsToDelete, (cid) => cid === v.id);\n\t\t\treturn value ? { ...acc } : { ...acc, [v.id]: v };\n\t\t},\n\t\t{} as MailsFolderMap\n\t);\n}\n
++Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
++<+>UTF-8
++===================================================================
++diff --git a/src/store/utils.ts b/src/store/utils.ts
++--- a/src/store/utils.ts	(revision 4adaba21c8889cfd3cf44adf6271b75e82f59433)
+++++ b/src/store/utils.ts	(date 1659976428473)
++@@ -3,7 +3,7 @@
++  *
++  * SPDX-License-Identifier: AGPL-3.0-only
++  */
++-import { max, map, filter, find, reduce, some, merge, isNil, omitBy } from 'lodash';
+++import { max, map, filter, find, reduce, omitBy, some, merge, isNil } from 'lodash';
++ import { FolderType, MailsFolderMap, FoldersStateType } from '../types';
++ 
++ export function findDepth(subFolder: FolderType, depth = 1): number {
++Index: src/normalizations/normalize-message.ts
++IDEA additional info:
++Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
++<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport { getTags } from '@zextras/carbonio-shell-ui';\nimport { filter, find, isNil, map, omitBy, reduce } from 'lodash';\nimport { ParticipantRole } from '../commons/utils';\nimport {\n\tIncompleteMessage,\n\tMailMessagePart,\n\tSoapEmailParticipantRole,\n\tSoapMailParticipant,\n\tParticipant,\n\tSoapIncompleteMessage,\n\tSoapMailMessagePart\n} from '../types';\n\nexport function normalizeMailPartMapFn(v: SoapMailMessagePart): MailMessagePart {\n\tconst ret: MailMessagePart = {\n\t\tcontentType: v.ct,\n\t\tsize: v.s || 0,\n\t\tname: v.part,\n\t\tdisposition: v.cd\n\t};\n\tif (v.mp) {\n\t\tret.parts = map(v.mp || [], normalizeMailPartMapFn);\n\t}\n\tif (v.filename) ret.filename = v.filename;\n\tif (v.content) ret.content = v.content;\n\tif (v.ci) ret.ci = v.ci;\n\tif (v.cd) ret.disposition = v.cd;\n\treturn ret;\n}\n\nfunction findBodyPart(\n\tmp: Array<SoapMailMessagePart>,\n\tacc: { contentType: string; content: string },\n\tid: string\n): { contentType: string; content: string } {\n\tconst bodyPart = reduce(\n\t\tmp,\n\t\t(found, part) => {\n\t\t\tif (part.mp) return findBodyPart(part.mp, found, id);\n\t\t\tif (part && part.body) {\n\t\t\t\tif (!found.contentType.length) {\n\t\t\t\t\treturn { contentType: part.ct, content: part.content ?? '' };\n\t\t\t\t}\n\t\t\t\tif (\n\t\t\t\t\tpart.part &&\n\t\t\t\t\tpart.part.indexOf('.') === -1 &&\n\t\t\t\t\tpart.cd &&\n\t\t\t\t\tpart.cd === 'inline' &&\n\t\t\t\t\t!part.ci &&\n\t\t\t\t\t!(part.ct && part.ct === 'text/plain')\n\t\t\t\t) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...found,\n\t\t\t\t\t\tcontent: found.content.concat(\n\t\t\t\t\t\t\t`<img src='/service/home/~/?auth=co&loc=en&id=${id}&part=${part?.part}'>` ?? ''\n\t\t\t\t\t\t)\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\treturn { ...found, content: found.content.concat(part.content ?? '') };\n\t\t\t}\n\t\t\treturn found;\n\t\t},\n\t\tacc\n\t);\n\n\treturn bodyPart;\n}\n\nexport function generateBody(\n\tmp: Array<SoapMailMessagePart>,\n\tid: string\n): {\n\tcontentType: string;\n\tcontent: string;\n} {\n\treturn findBodyPart(mp, { contentType: '', content: '' }, id);\n}\n\nfunction participantTypeFromSoap(t: SoapEmailParticipantRole): ParticipantRole {\n\tswitch (t) {\n\t\tcase 'f':\n\t\t\treturn ParticipantRole.FROM;\n\t\tcase 't':\n\t\t\treturn ParticipantRole.TO;\n\t\tcase 'c':\n\t\t\treturn ParticipantRole.CARBON_COPY;\n\t\tcase 'b':\n\t\t\treturn ParticipantRole.BLIND_CARBON_COPY;\n\t\tcase 'r':\n\t\t\treturn ParticipantRole.REPLY_TO;\n\t\tcase 's':\n\t\t\treturn ParticipantRole.SENDER;\n\t\tcase 'n':\n\t\t\treturn ParticipantRole.READ_RECEIPT_NOTIFICATION;\n\t\tcase 'rf':\n\t\t\treturn ParticipantRole.RESENT_FROM;\n\t\tdefault:\n\t\t\tthrow new Error(`Participant type not handled: '${t}'`);\n\t}\n}\n\nexport function normalizeParticipantsFromSoap(e: SoapMailParticipant): Participant {\n\treturn {\n\t\ttype: participantTypeFromSoap(e.t),\n\t\taddress: e.a,\n\t\tname: e.d || e.a,\n\t\tfullName: e.p\n\t};\n}\nexport const getTagIdsFromName = (names: string | undefined): Array<string | undefined> => {\n\tconst tags = getTags();\n\treturn map(names?.split(','), (name) => find(tags, { name })?.id);\n};\n\nexport const getTagIds = (\n\tt: string | undefined,\n\ttn: string | undefined\n): Array<string | undefined> => {\n\tif (!isNil(t)) {\n\t\treturn filter(t.split(','), (tag) => tag !== '');\n\t}\n\tif (!isNil(tn)) {\n\t\treturn getTagIdsFromName(tn);\n\t}\n\treturn [];\n};\nexport const normalizeMailMessageFromSoap = (\n\tm: SoapIncompleteMessage,\n\tisComplete: boolean\n): IncompleteMessage => <IncompleteMessage>omitBy(\n\t\t{\n\t\t\tconversation: m.cid,\n\t\t\tid: m.id,\n\t\t\tdate: m.d,\n\t\t\tsize: m.s,\n\t\t\tparent: m.l,\n\t\t\tfragment: m.fr,\n\t\t\tsubject: m.su,\n\t\t\tparticipants: m.e ? map(m.e || [], normalizeParticipantsFromSoap) : undefined,\n\t\t\ttags: getTagIds(m.t, m.tn),\n\t\t\tparts: m.mp ? map(m.mp || [], normalizeMailPartMapFn) : undefined,\n\t\t\tinvite: m.inv,\n\t\t\tshr: m.shr,\n\t\t\tbody: m.mp ? generateBody(m.mp || [], m.id) : undefined,\n\t\t\tisComplete,\n\t\t\tread: !isNil(m.f) ? !/u/.test(m.f) : true,\n\t\t\tattachment: !isNil(m.f) ? /a/.test(m.f) : undefined,\n\t\t\tflagged: !isNil(m.f) ? /f/.test(m.f) : undefined,\n\t\t\turgent: !isNil(m.f) ? /!/.test(m.f) : undefined,\n\t\t\tisDeleted: !isNil(m.f) ? /x/.test(m.f) : undefined,\n\t\t\tisDraft: !isNil(m.f) ? /d/.test(m.f) : undefined,\n\t\t\tisForwarded: !isNil(m.f) ? /w/.test(m.f) : undefined,\n\t\t\tisSentByMe: !isNil(m.f) ? /s/.test(m.f) : undefined,\n\t\t\tisInvite: !isNil(m.f) ? /v/.test(m.f) : undefined,\n\t\t\tisReplied: !isNil(m.f) ? /r/.test(m.f) : undefined,\n\t\t\tisReadReceiptRequested: !isNil(m.f) ? !/n/.test(m.f) : true\n\t\t},\n\t\tisNil\n\t);\n
++Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
++<+>UTF-8
++===================================================================
++diff --git a/src/normalizations/normalize-message.ts b/src/normalizations/normalize-message.ts
++--- a/src/normalizations/normalize-message.ts	(revision 4adaba21c8889cfd3cf44adf6271b75e82f59433)
+++++ b/src/normalizations/normalize-message.ts	(date 1659976375980)
++@@ -4,7 +4,7 @@
++  * SPDX-License-Identifier: AGPL-3.0-only
++  */
++ import { getTags } from '@zextras/carbonio-shell-ui';
++-import { filter, find, isNil, map, omitBy, reduce } from 'lodash';
+++import { filter, find, isNil, map, reduce, omitBy } from 'lodash';
++ import { ParticipantRole } from '../commons/utils';
++ import {
++ 	IncompleteMessage,
++Index: src/normalizations/normalize-conversation.ts
++IDEA additional info:
++Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
++<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport { getTags } from '@zextras/carbonio-shell-ui';\nimport { filter, find, isNil, map, omitBy } from 'lodash';\nimport { Conversation, SoapIncompleteMessage, SoapConversation } from '../types';\nimport { normalizeParticipantsFromSoap } from './normalize-message';\n\nexport const getTagIdsFromName = (names: string | undefined): Array<string | undefined> => {\n\tconst tags = getTags();\n\treturn map(names?.split(','), (name) => find(tags, { name })?.id);\n};\n\nexport const getTagIds = (\n\tt: string | undefined,\n\ttn: string | undefined\n): Array<string | undefined> => {\n\tif (!isNil(t)) {\n\t\treturn filter(t.split(','), (tag) => tag !== '');\n\t}\n\tif (!isNil(tn)) {\n\t\treturn getTagIdsFromName(tn);\n\t}\n\treturn [];\n};\nexport const normalizeConversation = (\n\tc: SoapConversation,\n\tm?: Array<SoapIncompleteMessage>\n): Partial<Conversation> => {\n\tconst filteredMsgs = c?.m ?? filter(m ?? [], ['cid', c?.id]);\n\tconst messages = filteredMsgs?.length\n\t\t? map(filteredMsgs, (msg) => ({\n\t\t\t\tid: msg.id,\n\t\t\t\tparent: msg.l,\n\t\t\t\tdate: Number(msg?.d)\n\t\t  }))\n\t\t: undefined;\n\n\treturn omitBy(\n\t\t{\n\t\t\ttags: getTagIds(c.t, c.tn),\n\t\t\tid: c.id,\n\t\t\tdate: c.d,\n\t\t\tmsgCount: c.n,\n\t\t\tunreadMsgCount: c.u,\n\t\t\tmessages,\n\t\t\tparticipants: c.e ? map(c.e, normalizeParticipantsFromSoap) : undefined,\n\t\t\tsubject: c.su,\n\t\t\tfragment: c.fr,\n\t\t\tread: !isNil(c.f) ? !/u/.test(c.f) : !(c.u > 0),\n\t\t\tattachment: !isNil(c.f) ? /a/.test(c.f) : undefined,\n\t\t\tflagged: !isNil(c.f) ? /f/.test(c.f) : undefined,\n\t\t\turgent: !isNil(c.f) ? /!/.test(c.f) : undefined\n\t\t},\n\t\tisNil\n\t);\n};\n
++Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
++<+>UTF-8
++===================================================================
++diff --git a/src/normalizations/normalize-conversation.ts b/src/normalizations/normalize-conversation.ts
++--- a/src/normalizations/normalize-conversation.ts	(revision 4adaba21c8889cfd3cf44adf6271b75e82f59433)
+++++ b/src/normalizations/normalize-conversation.ts	(date 1659976157630)
++@@ -3,32 +3,41 @@
++  *
++  * SPDX-License-Identifier: AGPL-3.0-only
++  */
++-import { getTags } from '@zextras/carbonio-shell-ui';
++-import { filter, find, isNil, map, omitBy } from 'lodash';
+++import { Tags } from '@zextras/carbonio-shell-ui';
+++import { filter, find, isNil, map } from 'lodash';
+++import { omitBy } from '../commons/utils';
++ import { Conversation, SoapIncompleteMessage, SoapConversation } from '../types';
++ import { normalizeParticipantsFromSoap } from './normalize-message';
++ 
++-export const getTagIdsFromName = (names: string | undefined): Array<string | undefined> => {
++-	const tags = getTags();
++-	return map(names?.split(','), (name) => find(tags, { name })?.id);
++-};
++-
+++export const getTagIdsFromName = (
+++	names: string | undefined,
+++	tags?: Tags
+++): Array<string | undefined> => map(names?.split(','), (name) => find(tags, { name })?.id);
++ export const getTagIds = (
++ 	t: string | undefined,
++-	tn: string | undefined
+++	tn: string | undefined,
+++	tags?: Tags
++ ): Array<string | undefined> => {
++ 	if (!isNil(t)) {
++ 		return filter(t.split(','), (tag) => tag !== '');
++ 	}
++ 	if (!isNil(tn)) {
++-		return getTagIdsFromName(tn);
+++		return getTagIdsFromName(tn, tags);
++ 	}
++ 	return [];
++ };
++-export const normalizeConversation = (
++-	c: SoapConversation,
++-	m?: Array<SoapIncompleteMessage>
++-): Partial<Conversation> => {
+++
+++export type NormalizeConversationProps = {
+++	c: SoapConversation;
+++	tags: Tags;
+++	m?: Array<SoapIncompleteMessage>;
+++};
+++
+++export const normalizeConversation = ({
+++	c,
+++	m,
+++	tags
+++}: NormalizeConversationProps): Partial<Conversation> => {
++ 	const filteredMsgs = c?.m ?? filter(m ?? [], ['cid', c?.id]);
++ 	const messages = filteredMsgs?.length
++ 		? map(filteredMsgs, (msg) => ({
++@@ -38,9 +47,10 @@
++ 		  }))
++ 		: undefined;
++ 
++-	return omitBy(
+++	console.time('@@normalizeConversation');
+++	const result = omitBy(
++ 		{
++-			tags: getTagIds(c.t, c.tn),
+++			tags: getTagIds(c.t, c.tn, tags),
++ 			id: c.id,
++ 			date: c.d,
++ 			msgCount: c.n,
++@@ -56,4 +66,7 @@
++ 		},
++ 		isNil
++ 	);
+++	console.timeEnd('@@normalizeConversation');
+++
+++	return result;
++ };
++Index: src/views/sidebar/sync-data-handler.jsx
++IDEA additional info:
++Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
++<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport {\n\tFOLDERS,\n\tstore,\n\tuseNotify,\n\tuseRefresh,\n\tupdatePrimaryBadge\n} from '@zextras/carbonio-shell-ui';\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { isEmpty, map, keyBy, find, filter, forEach, sortBy, reduce } from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport {\n\thandleCreatedFolders,\n\thandleModifiedFolders,\n\thandleDeletedFolders,\n\thandleRefresh,\n\tselectFolder\n} from '../../store/folders-slice';\nimport {\n\thandleNotifyCreatedConversations,\n\thandleNotifyModifiedConversations,\n\thandleNotifyDeletedConversations,\n\thandleModifiedMessagesInConversation,\n\thandleDeletedMessagesInConversation,\n\tsetSearchedInFolder,\n\tselectCurrentFolder,\n\thandleCreatedMessagesInConversation,\n\thandleAddMessagesInConversation\n} from '../../store/conversations-slice';\nimport {\n\thandleCreatedMessages,\n\thandleModifiedMessages,\n\thandleDeletedMessages,\n\tselectMessages\n} from '../../store/messages-slice';\nimport { storeReducers } from '../../store/reducers';\nimport { normalizeConversation } from '../../normalizations/normalize-conversation';\nimport { normalizeMailMessageFromSoap } from '../../normalizations/normalize-message';\nimport { extractFolders } from './utils';\nimport { MAILS_ROUTE } from '../../constants';\n\nconst InboxBadgeUpdater = () => {\n\tconst folder = useSelector(selectFolder(FOLDERS.INBOX));\n\tuseEffect(() => {\n\t\tupdatePrimaryBadge(\n\t\t\t{\n\t\t\t\tshow: folder.unreadCount > 0,\n\t\t\t\tcount: folder.unreadCount,\n\t\t\t\tshowCount: true\n\t\t\t},\n\t\t\tMAILS_ROUTE\n\t\t);\n\t}, [folder.unreadCount]);\n\treturn null;\n};\n\nexport const SyncDataHandler = () => {\n\tconst [t] = useTranslation();\n\tconst refresh = useRefresh();\n\tconst notifyList = useNotify();\n\tconst [seq, setSeq] = useState(-1);\n\tconst dispatch = useDispatch();\n\tconst [initialized, setInitialized] = useState(false);\n\tconst currentFolder = useSelector(selectCurrentFolder);\n\tconst messagesState = useSelector(selectMessages);\n\n\tuseEffect(() => {\n\t\tif (!isEmpty(refresh) && !initialized) {\n\t\t\tstore.setReducer(storeReducers);\n\t\t\t// this also normalize folders so no need to normalize it later\n\t\t\tconst extractedFolders = extractFolders([\n\t\t\t\t...(refresh?.folder?.[0]?.folder ?? []),\n\t\t\t\t...(refresh?.folder?.[0]?.link ?? [])\n\t\t\t]);\n\t\t\tdispatch(handleRefresh(extractedFolders));\n\t\t\tsetInitialized(true);\n\t\t}\n\t}, [dispatch, initialized, refresh]);\n\n\tuseEffect(() => {\n\t\tforEach(notifyList, (notify) => {\n\t\t\t// this intercept all changes made from different folders towards the current one, it triggers a search request if it finds at least one item which affect currentFolder\n\t\t\tif (find(notify?.modified?.m, ['l', currentFolder])) {\n\t\t\t\tdispatch(setSearchedInFolder({ [currentFolder]: 'incomplete' }));\n\t\t\t}\n\t\t});\n\t}, [currentFolder, dispatch, notifyList]);\n\n\tuseEffect(() => {\n\t\tif (initialized) {\n\t\t\tif (notifyList.length > 0) {\n\t\t\t\tforEach(sortBy(notifyList, 'seq'), (notify) => {\n\t\t\t\t\tif (!isEmpty(notify) && (notify.seq > seq || (seq > 1 && notify.seq === 1))) {\n\t\t\t\t\t\tif (notify.created) {\n\t\t\t\t\t\t\tif (notify.created.folder || notify.created.link) {\n\t\t\t\t\t\t\t\tdispatch(\n\t\t\t\t\t\t\t\t\thandleCreatedFolders([\n\t\t\t\t\t\t\t\t\t\t...(notify.created.folder ?? []),\n\t\t\t\t\t\t\t\t\t\t...(notify.created.link ?? [])\n\t\t\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (notify.created.c && notify.created.m) {\n\t\t\t\t\t\t\t\tconst conversations = map(notify.created.c, (i) =>\n\t\t\t\t\t\t\t\t\tnormalizeConversation(i, notify.created.m)\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tdispatch(handleNotifyCreatedConversations(keyBy(conversations, 'id')));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (notify.created.m) {\n\t\t\t\t\t\t\t\tdispatch(handleCreatedMessages({ m: notify.created.m }));\n\t\t\t\t\t\t\t\tdispatch(handleCreatedMessagesInConversation({ m: notify.created.m }));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (notify.modified) {\n\t\t\t\t\t\t\tif (notify.modified.folder || notify.modified.link) {\n\t\t\t\t\t\t\t\tdispatch(\n\t\t\t\t\t\t\t\t\thandleModifiedFolders([\n\t\t\t\t\t\t\t\t\t\t...(notify.modified.folder ?? []),\n\t\t\t\t\t\t\t\t\t\t...(notify.modified.link ?? [])\n\t\t\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (notify.modified.c) {\n\t\t\t\t\t\t\t\tconst conversations = map(notify.modified.c, normalizeConversation);\n\t\t\t\t\t\t\t\tdispatch(handleNotifyModifiedConversations(keyBy(conversations, 'id')));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (notify.modified.m) {\n\t\t\t\t\t\t\t\tconst messages = map(notify.modified.m, (obj) =>\n\t\t\t\t\t\t\t\t\tnormalizeMailMessageFromSoap(obj, false)\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tdispatch(handleModifiedMessages(messages));\n\n\t\t\t\t\t\t\t\t// the condition filters messages with parent property (the only ones we need to update)\n\t\t\t\t\t\t\t\tconst toUpdate = filter(messages, 'parent');\n\t\t\t\t\t\t\t\tif (toUpdate?.length > 0) {\n\t\t\t\t\t\t\t\t\t// this function updates messages' parent in conversations. If parent never changes it does not need to be called\n\t\t\t\t\t\t\t\t\tdispatch(handleModifiedMessagesInConversation(toUpdate));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// the condition filters messages with conversation property (the only ones we need to add to conversation)\n\t\t\t\t\t\t\t\tconst conversationToUpdate = filter(messages, 'conversation');\n\t\t\t\t\t\t\t\tif (conversationToUpdate?.length > 0) {\n\t\t\t\t\t\t\t\t\tconst msgsReference = reduce(\n\t\t\t\t\t\t\t\t\t\tconversationToUpdate,\n\t\t\t\t\t\t\t\t\t\t(acc, msg) => {\n\t\t\t\t\t\t\t\t\t\t\tif (messagesState?.[msg?.id]) {\n\t\t\t\t\t\t\t\t\t\t\t\treturn [\n\t\t\t\t\t\t\t\t\t\t\t\t\t...acc,\n\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tid: messagesState?.[msg?.id].id,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tparent: messagesState?.[msg?.id].parent,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tdate: messagesState?.[msg?.id].date,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tconversation: msg.conversation\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t];\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\treturn acc;\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t[]\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t// this function add messages' in conversations. If conversation never changes it does not need to be called\n\t\t\t\t\t\t\t\t\tdispatch(handleAddMessagesInConversation(msgsReference));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (notify.deleted) {\n\t\t\t\t\t\t\tdispatch(handleDeletedFolders(notify.deleted));\n\t\t\t\t\t\t\tdispatch(handleNotifyDeletedConversations(notify.deleted));\n\t\t\t\t\t\t\tdispatch(handleDeletedMessages(notify.deleted));\n\t\t\t\t\t\t\tdispatch(handleDeletedMessagesInConversation(notify.deleted));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tsetSeq(notify.seq);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}, [dispatch, initialized, messagesState, notifyList, seq, t]);\n\treturn <InboxBadgeUpdater />;\n};\n
++Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
++<+>UTF-8
++===================================================================
++diff --git a/src/views/sidebar/sync-data-handler.jsx b/src/views/sidebar/sync-data-handler.jsx
++--- a/src/views/sidebar/sync-data-handler.jsx	(revision 4adaba21c8889cfd3cf44adf6271b75e82f59433)
+++++ b/src/views/sidebar/sync-data-handler.jsx	(date 1659976157631)
++@@ -8,7 +8,8 @@
++ 	store,
++ 	useNotify,
++ 	useRefresh,
++-	updatePrimaryBadge
+++	updatePrimaryBadge,
+++	getTags
++ } from '@zextras/carbonio-shell-ui';
++ import React, { useEffect, useState } from 'react';
++ import { useDispatch, useSelector } from 'react-redux';
++@@ -106,8 +107,9 @@
++ 								);
++ 							}
++ 							if (notify.created.c && notify.created.m) {
+++								const tags = getTags();
++ 								const conversations = map(notify.created.c, (i) =>
++-									normalizeConversation(i, notify.created.m)
+++									normalizeConversation({ c: i, m: notify.created.m, tags })
++ 								);
++ 								dispatch(handleNotifyCreatedConversations(keyBy(conversations, 'id')));
++ 							}
++Index: src/store/actions/get-conv.ts
++IDEA additional info:
++Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
++<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport { createAsyncThunk } from '@reduxjs/toolkit';\nimport { soapFetch } from '@zextras/carbonio-shell-ui';\nimport { map } from 'lodash';\nimport { normalizeConversation } from '../../normalizations/normalize-conversation';\nimport { normalizeMailMessageFromSoap } from '../../normalizations/normalize-message';\nimport {\n\tConversation,\n\tGetConvParameters,\n\tGetConvRequest,\n\tGetConvResponse,\n\tIncompleteMessage\n} from '../../types';\n\nexport const getConv = createAsyncThunk<\n\t{ conversation: Partial<Conversation>; messages: Array<IncompleteMessage> },\n\tGetConvParameters\n>(\n\t'conversations/getConv',\n\tasync ({ conversationId, fetch = 'all' }) => {\n\t\tconst result = (await soapFetch<GetConvRequest, GetConvResponse>('GetConv', {\n\t\t\t_jsns: 'urn:zimbraMail',\n\t\t\tc: {\n\t\t\t\tid: conversationId,\n\t\t\t\thtml: 1,\n\t\t\t\tneedExp: 1,\n\t\t\t\tfetch\n\t\t\t}\n\t\t})) as GetConvResponse;\n\t\tconst conversation = normalizeConversation(result.c[0]);\n\t\tconst messages = map(result.c[0].m, (item) =>\n\t\t\tnormalizeMailMessageFromSoap(item, false)\n\t\t) as unknown as Array<IncompleteMessage>;\n\t\treturn { conversation, messages };\n\t},\n\t{\n\t\tcondition: ({ folderId, conversationId }: GetConvParameters, { getState }: any) => {\n\t\t\tif (!folderId) return true;\n\t\t\treturn (\n\t\t\t\tgetState().conversations?.expandedStatus[conversationId] !== 'complete' &&\n\t\t\t\tgetState().conversations?.expandedStatus[conversationId] !== 'pending'\n\t\t\t);\n\t\t}\n\t}\n);\n
++Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
++<+>UTF-8
++===================================================================
++diff --git a/src/store/actions/get-conv.ts b/src/store/actions/get-conv.ts
++--- a/src/store/actions/get-conv.ts	(revision 4adaba21c8889cfd3cf44adf6271b75e82f59433)
+++++ b/src/store/actions/get-conv.ts	(date 1659976157631)
++@@ -4,7 +4,7 @@
++  * SPDX-License-Identifier: AGPL-3.0-only
++  */
++ import { createAsyncThunk } from '@reduxjs/toolkit';
++-import { soapFetch } from '@zextras/carbonio-shell-ui';
+++import { getTags, soapFetch } from '@zextras/carbonio-shell-ui';
++ import { map } from 'lodash';
++ import { normalizeConversation } from '../../normalizations/normalize-conversation';
++ import { normalizeMailMessageFromSoap } from '../../normalizations/normalize-message';
++@@ -31,7 +31,8 @@
++ 				fetch
++ 			}
++ 		})) as GetConvResponse;
++-		const conversation = normalizeConversation(result.c[0]);
+++		const tags = getTags();
+++		const conversation = normalizeConversation({ c: result.c[0], tags });
++ 		const messages = map(result.c[0].m, (item) =>
++ 			normalizeMailMessageFromSoap(item, false)
++ 		) as unknown as Array<IncompleteMessage>;
++Index: src/views/sidebar/utils.ts
++IDEA additional info:
++Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
++<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport {\n\tZIMBRA_STANDARD_COLORS,\n\tFOLDERS,\n\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t// @ts-ignore\n\tROOT_NAME,\n\tAccordionFolder,\n\tFolder,\n\tLinkFolderFields\n} from '@zextras/carbonio-shell-ui';\nimport { isNil, omitBy, reduce } from 'lodash';\nimport { TFunction } from 'react-i18next';\n\nconst folderIdRegex = /^(.+:)*(\\d+)$/;\n\nexport const normalizeFolder = (\n\tfolder: Folder & Partial<LinkFolderFields>\n): Partial<Folder & Partial<LinkFolderFields>> =>\n\tomitBy(\n\t\t{\n\t\t\tid: folder.id,\n\t\t\tuuid: folder.uuid,\n\t\t\tcolor: folder.color,\n\t\t\tname: folder.name,\n\t\t\tpath: folder.absFolderPath,\n\t\t\tparent: folder.l,\n\t\t\tparentUuid: folder.luuid,\n\t\t\titemsCount: folder.n,\n\t\t\tsize: folder.s,\n\t\t\tunreadCount: folder.u,\n\t\t\tsynced: true,\n\t\t\trgb: folder.rgb,\n\t\t\towner: folder.owner,\n\t\t\trid: folder.rid,\n\t\t\tzid: folder.zid,\n\t\t\tacl: folder.acl,\n\t\t\tperm: folder.perm,\n\t\t\tisSharedFolder: !!folder.owner,\n\t\t\tretentionPolicy: folder.retentionPolicy,\n\t\t\tview: folder.view\n\t\t},\n\t\tisNil\n\t);\n\nexport const extractFolders = (accordion: Array<any>, acc = {}): any =>\n\treduce(\n\t\taccordion,\n\t\t(acc2, folder) => {\n\t\t\tif (folder.folder) {\n\t\t\t\treturn (folder.view === 'message' &&\n\t\t\t\t\tfolder.id !== FOLDERS.IM_LOGS &&\n\t\t\t\t\tfolder.id !== FOLDERS.USER_ROOT) ||\n\t\t\t\t\tfolder.id === FOLDERS.TRASH\n\t\t\t\t\t? {\n\t\t\t\t\t\t\t...acc2,\n\t\t\t\t\t\t\t[folder.id]: normalizeFolder(folder),\n\t\t\t\t\t\t\t...extractFolders(folder.folder, acc2)\n\t\t\t\t\t  }\n\t\t\t\t\t: { ...acc2, ...extractFolders(folder.folder, acc2) };\n\t\t\t}\n\t\t\treturn (folder.view === 'message' &&\n\t\t\t\tfolder.id !== FOLDERS.IM_LOGS &&\n\t\t\t\tfolder.id !== FOLDERS.USER_ROOT) ||\n\t\t\t\tfolder.id === FOLDERS.TRASH\n\t\t\t\t? {\n\t\t\t\t\t\t...acc2,\n\t\t\t\t\t\t[folder.id]: normalizeFolder(folder)\n\t\t\t\t  }\n\t\t\t\t: acc2;\n\t\t},\n\t\tacc\n\t);\n\nexport const capitalise = (word: string): string => {\n\tconst asciiRef = word?.charCodeAt(0);\n\tconst newAsciiRef = asciiRef - 32;\n\tconst newChar = String.fromCharCode(newAsciiRef);\n\treturn word ? newChar + word.substring(1) : '';\n};\n\nexport const getFolderIconColor = (f: AccordionFolder): string => {\n\tif (f?.folder?.color) {\n\t\treturn f.folder.color < 10\n\t\t\t? ZIMBRA_STANDARD_COLORS[f.folder.color].hex\n\t\t\t: f?.folder.rgb ?? ZIMBRA_STANDARD_COLORS[0].hex;\n\t}\n\treturn ZIMBRA_STANDARD_COLORS[0].hex;\n};\n\nexport const getFolderIconName = (folder: AccordionFolder): string | null => {\n\tconst systemFolders = [\n\t\tFOLDERS.USER_ROOT,\n\t\tFOLDERS.INBOX,\n\t\tFOLDERS.TRASH,\n\t\tFOLDERS.DRAFTS,\n\t\tFOLDERS.SPAM,\n\t\tFOLDERS.SENT\n\t];\n\n\tif (folder.id === FOLDERS.USER_ROOT || folder.folder?.oname === ROOT_NAME) {\n\t\treturn null;\n\t}\n\n\tif (folder.id && systemFolders.includes(folder.id)) {\n\t\tswitch (folder.id) {\n\t\t\tcase FOLDERS.INBOX:\n\t\t\t\treturn 'InboxOutline';\n\t\t\tcase FOLDERS.DRAFTS:\n\t\t\t\treturn 'FileOutline';\n\t\t\tcase FOLDERS.SENT:\n\t\t\t\treturn 'PaperPlaneOutline';\n\t\t\tcase FOLDERS.SPAM:\n\t\t\t\treturn 'SlashOutline';\n\t\t\tcase FOLDERS.TRASH:\n\t\t\t\treturn 'Trash2Outline';\n\t\t\tdefault:\n\t\t\t\treturn 'FolderOutline';\n\t\t}\n\t}\n\tif (\n\t\tfolder.id?.charAt(folder.id.length - 2) === ':' &&\n\t\tsystemFolders.includes(folder.id.slice(-1))\n\t) {\n\t\tswitch (folder.id.slice(-1)) {\n\t\t\tcase FOLDERS.INBOX:\n\t\t\t\treturn 'InboxOutline';\n\t\t\tcase FOLDERS.DRAFTS:\n\t\t\t\treturn 'FileOutline';\n\t\t\tcase FOLDERS.SENT:\n\t\t\t\treturn 'PaperPlaneOutline';\n\t\t\tcase FOLDERS.SPAM:\n\t\t\t\treturn 'SlashOutline';\n\t\t\tcase FOLDERS.TRASH:\n\t\t\t\treturn 'Trash2Outline';\n\t\t\tdefault:\n\t\t\t\treturn 'FolderOutline';\n\t\t}\n\t}\n\treturn 'FolderOutline';\n};\n\nexport const translatedSystemFolders = (t: TFunction): Array<string> => [\n\tt('folders.inbox', 'Inbox'),\n\tt('folders.sent', 'Sent'),\n\tt('folders.drafts', 'Drafts'),\n\tt('folders.trash', 'Trash'),\n\tt('folders.spam', 'Spam'),\n\tt('folders.junk', 'Junk')\n];\n\ntype GetSystemFolderProps = {\n\tt: TFunction;\n\tfolderId?: string;\n\tfolderName: string;\n};\n\nexport const getSystemFolderTranslatedName = ({ t, folderName }: GetSystemFolderProps): string => {\n\tif (folderName) {\n\t\tswitch (folderName) {\n\t\t\tcase 'Inbox':\n\t\t\t\treturn t('folders.inbox', 'Inbox');\n\t\t\tcase 'Sent':\n\t\t\t\treturn t('folders.sent', 'Sent');\n\t\t\tcase 'Drafts':\n\t\t\t\treturn t('folders.drafts', 'Drafts');\n\t\t\tcase 'Trash':\n\t\t\t\treturn t('folders.trash', 'Trash');\n\t\t\tcase 'Spam':\n\t\t\t\treturn t('folders.spam', 'Spam');\n\t\t\tcase 'Junk':\n\t\t\t\treturn t('folders.junk', 'Junk');\n\t\t\tdefault:\n\t\t\t\treturn folderName;\n\t\t}\n\t}\n\treturn folderName;\n};\n\nexport const getFolderTranslatedName = ({\n\tt,\n\tfolderId,\n\tfolderName\n}: GetSystemFolderProps): string => {\n\tconst id = folderIdRegex.exec(folderId ?? '')?.[2];\n\tif (id && Object.values(FOLDERS).includes(id)) {\n\t\treturn getSystemFolderTranslatedName({ t, folderName });\n\t}\n\n\treturn folderName;\n};\n
++Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
++<+>UTF-8
++===================================================================
++diff --git a/src/views/sidebar/utils.ts b/src/views/sidebar/utils.ts
++--- a/src/views/sidebar/utils.ts	(revision 4adaba21c8889cfd3cf44adf6271b75e82f59433)
+++++ b/src/views/sidebar/utils.ts	(date 1659976441039)
++@@ -13,7 +13,7 @@
++ 	Folder,
++ 	LinkFolderFields
++ } from '@zextras/carbonio-shell-ui';
++-import { isNil, omitBy, reduce } from 'lodash';
+++import { isNil, reduce, omitBy } from 'lodash';
++ import { TFunction } from 'react-i18next';
++ 
++ const folderIdRegex = /^(.+:)*(\d+)$/;
++Index: .idea/prettier.xml
++IDEA additional info:
++Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
++<+>UTF-8
++===================================================================
++diff --git a/.idea/prettier.xml b/.idea/prettier.xml
++new file mode 100644
++--- /dev/null	(date 1659976157630)
+++++ b/.idea/prettier.xml	(date 1659976157630)
++@@ -0,0 +1,7 @@
+++<?xml version="1.0" encoding="UTF-8"?>
+++<project version="4">
+++  <component name="PrettierConfiguration">
+++    <option name="myRunOnSave" value="true" />
+++    <option name="myRunOnReformat" value="true" />
+++  </component>
+++</project>
++\ No newline at end of file
+Index: .syncignore
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/.syncignore b/.syncignore
+new file mode 100644
+--- /dev/null	(date 1661736228000)
++++ b/.syncignore	(date 1661736228000)
+@@ -0,0 +1,16 @@
++# CodeSync won't sync the files in the .syncignore. It follows same format as .gitignore.
++# SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>
++
++# SPDX-License-Identifier: CC0-1.0
++/node_modules/
++/pkg/
++/build/
++/sdk/
++/dist/
++/.idea/workspace.xml
++/.idea/compiler.xml
++/e2e/output/
++.idea/jsLibraryMappings.xml
++/junit.xml
++/coverage/cobertura-coverage.xml
++.DS_Store
+Index: src/views/app/detail-panel/preview/mail-preview.jsx
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n/* eslint-disable no-nested-ternary */\nimport React, { useMemo, useState, useRef, useCallback, useEffect, useContext } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { filter, find } from 'lodash';\nimport {\n\tuseUserAccounts,\n\tuseIntegratedComponent,\n\tuseUserSettings,\n\tFOLDERS\n} from '@zextras/carbonio-shell-ui';\nimport { useParams } from 'react-router-dom';\nimport {\n\tContainer,\n\tText,\n\tCollapse,\n\tIcon,\n\tPadding,\n\tButton,\n\tRow,\n\tSnackbarManagerContext\n} from '@zextras/carbonio-design-system';\nimport { useDispatch } from 'react-redux';\nimport MailMessageRenderer from '../../../../commons/mail-message-renderer';\nimport AttachmentsBlock from './attachments-block';\nimport { setMsgAsSpam } from '../../../../ui-actions/message-actions';\nimport { getMsg, msgAction } from '../../../../store/actions';\nimport SharedInviteReply from '../../../../integrations/shared-invite-reply';\nimport ReadReceiptModal from './read-receipt-modal';\nimport PreviewHeader from './parts/preview-header';\n\nconst MailContent = ({ message, isMailPreviewOpen }) => {\n\tconst [InviteResponse, integrationAvailable] = useIntegratedComponent('invites-reply');\n\tconst [showModal, setShowModal] = useState(true);\n\tconst dispatch = useDispatch();\n\tconst accounts = useUserAccounts();\n\tconst { prefs } = useUserSettings();\n\tconst moveToTrash = useCallback(() => {\n\t\tdispatch(\n\t\t\tmsgAction({\n\t\t\t\toperation: `trash`,\n\t\t\t\tids: [message.id]\n\t\t\t})\n\t\t);\n\t}, [message, dispatch]);\n\n\t// this is necessary because if somebody click a message in the same conversation\n\t// already open that message will not be expanded\n\tuseEffect(() => {\n\t\tif (!message.isComplete) {\n\t\t\tdispatch(getMsg({ msgId: message.id }));\n\t\t}\n\t}, [dispatch, message.id, message.isComplete]);\n\n\tconst showAppointmentInvite = useMemo(\n\t\t() =>\n\t\t\tmessage.isInvite &&\n\t\t\tmessage.invite?.[0]?.comp &&\n\t\t\tmessage.isInvite &&\n\t\t\t(message.invite?.[0]?.comp[0].method === 'REQUEST' ||\n\t\t\t\tmessage.invite?.[0]?.comp[0].method === 'COUNTER') &&\n\t\t\tintegrationAvailable &&\n\t\t\tInviteResponse,\n\t\t[integrationAvailable, InviteResponse, message]\n\t);\n\tconst readReceiptRequester = useMemo(\n\t\t() => find(message?.participants, { type: 'n' }),\n\t\t[message?.participants]\n\t);\n\n\tconst readReceiptSetting = useMemo(() => prefs?.zimbraPrefMailSendReadReceipts, [prefs]);\n\tconst showReadReceiptModal = useMemo(\n\t\t() =>\n\t\t\t!!readReceiptRequester &&\n\t\t\tshowModal &&\n\t\t\tmessage.isReadReceiptRequested &&\n\t\t\t!message?.isSentByMe &&\n\t\t\treadReceiptSetting === 'prompt',\n\t\t[readReceiptRequester, showModal, message, readReceiptSetting]\n\t);\n\n\tconst showShareInvite = useMemo(\n\t\t() =>\n\t\t\tmessage.shr &&\n\t\t\tmessage.shr.length > 0 &&\n\t\t\t!message.fragment.includes('revoked') &&\n\t\t\t!message.fragment.includes('has accepted') &&\n\t\t\t!message.fragment.includes('has declined'),\n\t\t[message]\n\t);\n\n\tconst onModalClose = useCallback(() => {\n\t\tsetShowModal(false);\n\t}, []);\n\tconst loggedInUser = useMemo(() => accounts[0]?.name, [accounts]);\n\tconst isAttendee = useMemo(\n\t\t() => message.invite?.[0]?.comp?.[0]?.or?.a !== loggedInUser,\n\t\t[loggedInUser, message]\n\t);\n\n\tconst collapsedContent = useMemo(\n\t\t() => (\n\t\t\t<Container\n\t\t\t\tdata-testid=\"MessageBody\"\n\t\t\t\twidth=\"100%\"\n\t\t\t\theight=\"fit\"\n\t\t\t\tcrossAlignment=\"stretch\"\n\t\t\t\tpadding={{ horizontal: 'large', vertical: 'small' }}\n\t\t\t\tbackground=\"gray6\"\n\t\t\t>\n\t\t\t\t<Row>\n\t\t\t\t\t<AttachmentsBlock message={message} />\n\t\t\t\t</Row>\n\t\t\t\t<Padding style={{ width: '100%' }} vertical=\"medium\">\n\t\t\t\t\t{showAppointmentInvite ? (\n\t\t\t\t\t\t<Container width=\"100%\">\n\t\t\t\t\t\t\t<InviteResponse\n\t\t\t\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-empty-function\n\t\t\t\t\t\t\t\tonLoadChange={() => {}}\n\t\t\t\t\t\t\t\tmailMsg={message}\n\t\t\t\t\t\t\t\tinviteId={`${message.invite[0].comp[0].apptId}-${message.id}`}\n\t\t\t\t\t\t\t\tparticipationStatus={\n\t\t\t\t\t\t\t\t\tmessage.invite[0].replies ? message.invite[0].replies[0].reply[0].ptst : ''\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tto={filter(message.participants, { type: 'f' })}\n\t\t\t\t\t\t\t\tinvite={message.invite}\n\t\t\t\t\t\t\t\tmethod={message.invite[0]?.comp[0].method}\n\t\t\t\t\t\t\t\tmoveToTrash={moveToTrash}\n\t\t\t\t\t\t\t\tisAttendee={isAttendee}\n\t\t\t\t\t\t\t\tparent={message.parent}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</Container>\n\t\t\t\t\t) : showShareInvite ? (\n\t\t\t\t\t\t<SharedInviteReply\n\t\t\t\t\t\t\ttitle={message.fragment.split('Shared item:')[0]}\n\t\t\t\t\t\t\tsharedContent={message.shr[0].content}\n\t\t\t\t\t\t\tmailMsg={message}\n\t\t\t\t\t\t/>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<MailMessageRenderer\n\t\t\t\t\t\t\tkey={message.id}\n\t\t\t\t\t\t\tmailMsg={message}\n\t\t\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-empty-function\n\t\t\t\t\t\t\tonLoadChange={() => {}}\n\t\t\t\t\t\t/>\n\t\t\t\t\t)}\n\t\t\t\t</Padding>\n\t\t\t\t<ReadReceiptModal\n\t\t\t\t\topen={showReadReceiptModal}\n\t\t\t\t\tonClose={onModalClose}\n\t\t\t\t\tmessage={message}\n\t\t\t\t\treadReceiptSetting={readReceiptSetting}\n\t\t\t\t/>\n\t\t\t</Container>\n\t\t),\n\t\t[\n\t\t\tmessage,\n\t\t\tshowAppointmentInvite,\n\t\t\treadReceiptSetting,\n\t\t\tInviteResponse,\n\t\t\tmoveToTrash,\n\t\t\tisAttendee,\n\t\t\tshowShareInvite,\n\t\t\tshowReadReceiptModal,\n\t\t\tonModalClose\n\t\t]\n\t);\n\treturn (\n\t\t<Collapse\n\t\t\topen={isMailPreviewOpen}\n\t\t\tcrossSize=\"100%\"\n\t\t\torientation=\"vertical\"\n\t\t\tdisableTransition\n\t\t\tdata-testid=\"MailMessageRendererCollapse\"\n\t\t>\n\t\t\t{message.isComplete && collapsedContent}\n\t\t</Collapse>\n\t);\n};\n\nconst MailPreviewBlock = ({ message, open, onClick, isAlone }) => {\n\tconst [t] = useTranslation();\n\tconst { folderId } = useParams();\n\n\tconst createSnackbar = useContext(SnackbarManagerContext);\n\tconst dispatch = useDispatch();\n\tconst compProps = useMemo(\n\t\t() => ({ message, onClick, open, isAlone }),\n\t\t[message, onClick, open, isAlone]\n\t);\n\tconst markAsNotSpam = useCallback(\n\t\t() =>\n\t\t\tsetMsgAsSpam({\n\t\t\t\tids: [message.id],\n\t\t\t\tvalue: true,\n\t\t\t\tt,\n\t\t\t\tdispatch,\n\t\t\t\tcreateSnackbar,\n\t\t\t\tshouldReplaceHistory: true,\n\t\t\t\tfolderId\n\t\t\t}).click(),\n\t\t[createSnackbar, dispatch, folderId, message.id, t]\n\t);\n\treturn (\n\t\t<>\n\t\t\t{folderId === FOLDERS.SPAM && (\n\t\t\t\t<Container\n\t\t\t\t\tmainAlignment=\"flex-start\"\n\t\t\t\t\tcrossAlignment=\"flex-start\"\n\t\t\t\t\theight=\"fit\"\n\t\t\t\t\tpadding={{ bottom: 'medium' }}\n\t\t\t\t>\n\t\t\t\t\t<Container background=\"gray6\" orientation=\"horizontal\" padding={{ all: 'small' }}>\n\t\t\t\t\t\t<Row width=\"50%\" display=\"flex\" crossAlignment=\"center\" mainAlignment=\"baseline\">\n\t\t\t\t\t\t\t<Padding right=\"small\">\n\t\t\t\t\t\t\t\t<Icon icon=\"AlertCircleOutline\" size=\"medium\" />\n\t\t\t\t\t\t\t</Padding>\n\t\t\t\t\t\t\t<Text>\n\t\t\t\t\t\t\t\t{t('messages.snackbar.marked_as_spam', 'You’ve marked this e-mail as Spam')}\n\t\t\t\t\t\t\t</Text>\n\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t<Row width=\"50%\" mainAlignment=\"flex-end\">\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\ttype=\"ghost\"\n\t\t\t\t\t\t\t\tlabel={t('action.mark_as_non_spam', 'Not Spam')}\n\t\t\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\t\t\tonClick={markAsNotSpam}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</Row>\n\t\t\t\t\t</Container>\n\t\t\t\t</Container>\n\t\t\t)}\n\t\t\t{message && <PreviewHeader compProps={compProps} />}\n\t\t</>\n\t);\n};\n\nexport default function MailPreview({ message, expanded, isAlone, isMessageView }) {\n\tconst mailContainerRef = useRef(undefined);\n\tconst settings = useUserSettings();\n\tconst timezone = useMemo(\n\t\t() => settings?.prefs.zimbraPrefTimeZoneId,\n\t\t[settings?.prefs.zimbraPrefTimeZoneId]\n\t);\n\tconst [open, setOpen] = useState(expanded || isAlone);\n\n\tconst onClick = useCallback(() => {\n\t\tsetOpen((o) => !o);\n\t}, []);\n\n\tconst isMailPreviewOpen = useMemo(\n\t\t() => (isMessageView ? true : isAlone ? true : open),\n\t\t[isAlone, isMessageView, open]\n\t);\n\treturn (\n\t\t<Container ref={mailContainerRef} height=\"fit\" data-testid={`MailPreview-${message.id}`}>\n\t\t\t<MailPreviewBlock\n\t\t\t\tonClick={onClick}\n\t\t\t\tmessage={message}\n\t\t\t\ttimezone={timezone}\n\t\t\t\topen={isMailPreviewOpen}\n\t\t\t\tisAlone={isAlone}\n\t\t\t/>\n\n\t\t\t<Container\n\t\t\t\twidth=\"fill\"\n\t\t\t\theight=\"fit\"\n\t\t\t\tstyle={{\n\t\t\t\t\toverflowY: 'auto'\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t{(open || isAlone) && (\n\t\t\t\t\t<MailContent message={message} isMailPreviewOpen={isMailPreviewOpen} />\n\t\t\t\t)}\n\t\t\t</Container>\n\t\t</Container>\n\t);\n}\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/views/app/detail-panel/preview/mail-preview.jsx b/src/views/app/detail-panel/preview/mail-preview.jsx
+--- a/src/views/app/detail-panel/preview/mail-preview.jsx	(revision 625354c8af746681a130d381c5881a3713632fe6)
++++ b/src/views/app/detail-panel/preview/mail-preview.jsx	(date 1661849257000)
+@@ -119,8 +119,7 @@
+ 					{showAppointmentInvite ? (
+ 						<Container width="100%">
+ 							<InviteResponse
+-								// eslint-disable-next-line @typescript-eslint/no-empty-function
+-								onLoadChange={() => {}}
++								onLoadChange={() => null}
+ 								mailMsg={message}
+ 								inviteId={`${message.invite[0].comp[0].apptId}-${message.id}`}
+ 								participationStatus={
+@@ -139,14 +138,10 @@
+ 							title={message.fragment.split('Shared item:')[0]}
+ 							sharedContent={message.shr[0].content}
+ 							mailMsg={message}
++							onLoadChange={() => null}
+ 						/>
+ 					) : (
+-						<MailMessageRenderer
+-							key={message.id}
+-							mailMsg={message}
+-							// eslint-disable-next-line @typescript-eslint/no-empty-function
+-							onLoadChange={() => {}}
+-						/>
++						<MailMessageRenderer key={message.id} mailMsg={message} onLoadChange={() => null} />
+ 					)}
+ 				</Padding>
+ 				<ReadReceiptModal
+Index: src/views/sidebar/sync-data-handler.jsx
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport {\n\tFOLDERS,\n\tstore,\n\tuseNotify,\n\tuseRefresh,\n\tupdatePrimaryBadge\n} from '@zextras/carbonio-shell-ui';\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { isEmpty, map, keyBy, find, filter, forEach, sortBy, reduce } from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport {\n\thandleCreatedFolders,\n\thandleModifiedFolders,\n\thandleDeletedFolders,\n\thandleRefresh,\n\tselectFolder\n} from '../../store/folders-slice';\nimport {\n\thandleNotifyCreatedConversations,\n\thandleNotifyModifiedConversations,\n\thandleNotifyDeletedConversations,\n\thandleModifiedMessagesInConversation,\n\thandleDeletedMessagesInConversation,\n\tsetSearchedInFolder,\n\tselectCurrentFolder,\n\thandleCreatedMessagesInConversation,\n\thandleAddMessagesInConversation\n} from '../../store/conversations-slice';\nimport {\n\thandleCreatedMessages,\n\thandleModifiedMessages,\n\thandleDeletedMessages,\n\tselectMessages\n} from '../../store/messages-slice';\nimport { storeReducers } from '../../store/reducers';\nimport { normalizeConversation } from '../../normalizations/normalize-conversation';\nimport { normalizeMailMessageFromSoap } from '../../normalizations/normalize-message';\nimport { extractFolders } from './utils';\nimport { MAILS_ROUTE } from '../../constants';\n\nconst InboxBadgeUpdater = () => {\n\tconst folder = useSelector(selectFolder(FOLDERS.INBOX));\n\tuseEffect(() => {\n\t\tupdatePrimaryBadge(\n\t\t\t{\n\t\t\t\tshow: folder.unreadCount > 0,\n\t\t\t\tcount: folder.unreadCount,\n\t\t\t\tshowCount: true\n\t\t\t},\n\t\t\tMAILS_ROUTE\n\t\t);\n\t}, [folder.unreadCount]);\n\treturn null;\n};\n\nexport const SyncDataHandler = () => {\n\tconst [t] = useTranslation();\n\tconst refresh = useRefresh();\n\tconst notifyList = useNotify();\n\tconst [seq, setSeq] = useState(-1);\n\tconst dispatch = useDispatch();\n\tconst [initialized, setInitialized] = useState(false);\n\tconst currentFolder = useSelector(selectCurrentFolder);\n\tconst messagesState = useSelector(selectMessages);\n\n\tuseEffect(() => {\n\t\tif (!isEmpty(refresh) && !initialized) {\n\t\t\tstore.setReducer(storeReducers);\n\t\t\t// this also normalize folders so no need to normalize it later\n\t\t\tconst extractedFolders = extractFolders([\n\t\t\t\t...(refresh?.folder?.[0]?.folder ?? []),\n\t\t\t\t...(refresh?.folder?.[0]?.link ?? [])\n\t\t\t]);\n\t\t\tdispatch(handleRefresh(extractedFolders));\n\t\t\tsetInitialized(true);\n\t\t}\n\t}, [dispatch, initialized, refresh]);\n\n\tuseEffect(() => {\n\t\tforEach(notifyList, (notify) => {\n\t\t\t// this intercept all changes made from different folders towards the current one, it triggers a search request if it finds at least one item which affect currentFolder\n\t\t\tif (find(notify?.modified?.m, ['l', currentFolder])) {\n\t\t\t\tdispatch(setSearchedInFolder({ [currentFolder]: 'incomplete' }));\n\t\t\t}\n\t\t});\n\t}, [currentFolder, dispatch, notifyList]);\n\n\tuseEffect(() => {\n\t\tif (initialized) {\n\t\t\tif (notifyList.length > 0) {\n\t\t\t\tforEach(sortBy(notifyList, 'seq'), (notify) => {\n\t\t\t\t\tif (!isEmpty(notify) && (notify.seq > seq || (seq > 1 && notify.seq === 1))) {\n\t\t\t\t\t\tif (notify.created) {\n\t\t\t\t\t\t\tif (notify.created.folder || notify.created.link) {\n\t\t\t\t\t\t\t\tdispatch(\n\t\t\t\t\t\t\t\t\thandleCreatedFolders([\n\t\t\t\t\t\t\t\t\t\t...(notify.created.folder ?? []),\n\t\t\t\t\t\t\t\t\t\t...(notify.created.link ?? [])\n\t\t\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (notify.created.c && notify.created.m) {\n\t\t\t\t\t\t\t\tconst conversations = map(notify.created.c, (i) =>\n\t\t\t\t\t\t\t\t\tnormalizeConversation(i, notify.created.m)\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tdispatch(handleNotifyCreatedConversations(keyBy(conversations, 'id')));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (notify.created.m) {\n\t\t\t\t\t\t\t\tdispatch(handleCreatedMessages({ m: notify.created.m }));\n\t\t\t\t\t\t\t\tdispatch(handleCreatedMessagesInConversation({ m: notify.created.m }));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (notify.modified) {\n\t\t\t\t\t\t\tif (notify.modified.folder || notify.modified.link) {\n\t\t\t\t\t\t\t\tdispatch(\n\t\t\t\t\t\t\t\t\thandleModifiedFolders([\n\t\t\t\t\t\t\t\t\t\t...(notify.modified.folder ?? []),\n\t\t\t\t\t\t\t\t\t\t...(notify.modified.link ?? [])\n\t\t\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (notify.modified.c) {\n\t\t\t\t\t\t\t\tconst conversations = map(notify.modified.c, normalizeConversation);\n\t\t\t\t\t\t\t\tdispatch(handleNotifyModifiedConversations(keyBy(conversations, 'id')));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (notify.modified.m) {\n\t\t\t\t\t\t\t\tconst messages = map(notify.modified.m, (obj) =>\n\t\t\t\t\t\t\t\t\tnormalizeMailMessageFromSoap(obj, false)\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tdispatch(handleModifiedMessages(messages));\n\n\t\t\t\t\t\t\t\t// the condition filters messages with parent property (the only ones we need to update)\n\t\t\t\t\t\t\t\tconst toUpdate = filter(messages, 'parent');\n\t\t\t\t\t\t\t\tif (toUpdate?.length > 0) {\n\t\t\t\t\t\t\t\t\t// this function updates messages' parent in conversations. If parent never changes it does not need to be called\n\t\t\t\t\t\t\t\t\tdispatch(handleModifiedMessagesInConversation(toUpdate));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// the condition filters messages with conversation property (the only ones we need to add to conversation)\n\t\t\t\t\t\t\t\tconst conversationToUpdate = filter(messages, 'conversation');\n\t\t\t\t\t\t\t\tif (conversationToUpdate?.length > 0) {\n\t\t\t\t\t\t\t\t\tconst msgsReference = reduce(\n\t\t\t\t\t\t\t\t\t\tconversationToUpdate,\n\t\t\t\t\t\t\t\t\t\t(acc, msg) => {\n\t\t\t\t\t\t\t\t\t\t\tif (messagesState?.[msg?.id]) {\n\t\t\t\t\t\t\t\t\t\t\t\treturn [\n\t\t\t\t\t\t\t\t\t\t\t\t\t...acc,\n\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tid: messagesState?.[msg?.id].id,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tparent: messagesState?.[msg?.id].parent,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tdate: messagesState?.[msg?.id].date,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tconversation: msg.conversation\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t];\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\treturn acc;\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t[]\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t// this function add messages' in conversations. If conversation never changes it does not need to be called\n\t\t\t\t\t\t\t\t\tdispatch(handleAddMessagesInConversation(msgsReference));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (notify.deleted) {\n\t\t\t\t\t\t\tdispatch(handleDeletedFolders(notify.deleted));\n\t\t\t\t\t\t\tdispatch(handleNotifyDeletedConversations(notify.deleted));\n\t\t\t\t\t\t\tdispatch(handleDeletedMessages(notify.deleted));\n\t\t\t\t\t\t\tdispatch(handleDeletedMessagesInConversation(notify.deleted));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tsetSeq(notify.seq);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}, [dispatch, initialized, messagesState, notifyList, seq, t]);\n\treturn <InboxBadgeUpdater />;\n};\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/views/sidebar/sync-data-handler.jsx b/src/views/sidebar/sync-data-handler.jsx
+--- a/src/views/sidebar/sync-data-handler.jsx	(revision 625354c8af746681a130d381c5881a3713632fe6)
++++ b/src/views/sidebar/sync-data-handler.jsx	(date 1661736228000)
+@@ -8,7 +8,8 @@
+ 	store,
+ 	useNotify,
+ 	useRefresh,
+-	updatePrimaryBadge
++	updatePrimaryBadge,
++	getTags
+ } from '@zextras/carbonio-shell-ui';
+ import React, { useEffect, useState } from 'react';
+ import { useDispatch, useSelector } from 'react-redux';
+@@ -106,8 +107,9 @@
+ 								);
+ 							}
+ 							if (notify.created.c && notify.created.m) {
++								const tags = getTags();
+ 								const conversations = map(notify.created.c, (i) =>
+-									normalizeConversation(i, notify.created.m)
++									normalizeConversation({ c: i, m: notify.created.m, tags })
+ 								);
+ 								dispatch(handleNotifyCreatedConversations(keyBy(conversations, 'id')));
+ 							}
+Index: package-lock.json
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/package-lock.json b/package-lock.json
+--- a/package-lock.json	(revision 625354c8af746681a130d381c5881a3713632fe6)
++++ b/package-lock.json	(date 1661931654760)
+@@ -10,6 +10,10 @@
+       "hasInstallScript": true,
+       "license": "AGPL-3.0-only",
+       "dependencies": {
++        "@emotion/react": "^11.10.0",
++        "@emotion/styled": "^11.10.0",
++        "@mui/icons-material": "^5.10.2",
++        "@mui/material": "^5.10.2",
+         "@reduxjs/toolkit": "1.6.2",
+         "@zextras/carbonio-design-system": "^0.3.7",
+         "@zextras/carbonio-shell-ui": "^0.4.30",
+@@ -82,7 +86,6 @@
+     "node_modules/@babel/compat-data": {
+       "version": "7.16.8",
+       "integrity": "sha512-m7OkX0IdKLKPpBlJtF561YJal5y/jyI5fNfWbPxh2D/nbzzGI4qRyrD8xO2jB24u7l+5I2a43scCG2IrfjC50Q==",
+-      "dev": true,
+       "engines": {
+         "node": ">=6.9.0"
+       }
+@@ -90,7 +93,6 @@
+     "node_modules/@babel/core": {
+       "version": "7.16.0",
+       "integrity": "sha512-mYZEvshBRHGsIAiyH5PzCFTCfbWfoYbO/jcSdXQSUQu1/pW0xDZAUP7KEc32heqWTAfAHhV9j1vH8Sav7l+JNQ==",
+-      "dev": true,
+       "dependencies": {
+         "@babel/code-frame": "^7.16.0",
+         "@babel/generator": "^7.16.0",
+@@ -119,7 +121,6 @@
+     "node_modules/@babel/core/node_modules/@babel/helper-compilation-targets": {
+       "version": "7.16.7",
+       "integrity": "sha512-mGojBwIWcwGD6rfqgRXVlVYmPAv7eOpIemUG3dGnDdCY4Pae70ROij3XmfrH6Fa1h1aiDylpglbZyktfzyo/hA==",
+-      "dev": true,
+       "dependencies": {
+         "@babel/compat-data": "^7.16.4",
+         "@babel/helper-validator-option": "^7.16.7",
+@@ -244,7 +245,6 @@
+     "node_modules/@babel/helper-module-transforms": {
+       "version": "7.16.7",
+       "integrity": "sha512-gaqtLDxJEFCeQbYp9aLAefjhkKdjKcdh6DB7jniIGU3Pz52WAmP268zK0VgPz9hUNkMSYeH976K2/Y6yPadpng==",
+-      "dev": true,
+       "dependencies": {
+         "@babel/helper-environment-visitor": "^7.16.7",
+         "@babel/helper-module-imports": "^7.16.7",
+@@ -274,7 +274,6 @@
+       "version": "7.18.9",
+       "resolved": "https://registry.npmjs.org/@babel/helper-plugin-utils/-/helper-plugin-utils-7.18.9.tgz",
+       "integrity": "sha512-aBXPT3bmtLryXaoJLyYPXPlSD4p1ld9aYeR+sJNOZjJJGiOpb+fKfh3NkcCu7J54nUJwCERPBExCCpyCOHnu/w==",
+-      "dev": true,
+       "engines": {
+         "node": ">=6.9.0"
+       }
+@@ -310,7 +309,6 @@
+     "node_modules/@babel/helper-simple-access": {
+       "version": "7.16.7",
+       "integrity": "sha512-ZIzHVyoeLMvXMN/vok/a4LWRy8G2v205mNP0XOuf9XRLyX5/u9CnVulUtDgUTama3lT+bf/UqucuZjqiGuTS1g==",
+-      "dev": true,
+       "dependencies": {
+         "@babel/types": "^7.16.7"
+       },
+@@ -349,7 +347,6 @@
+     "node_modules/@babel/helper-validator-option": {
+       "version": "7.16.7",
+       "integrity": "sha512-TRtenOuRUVo9oIQGPC5G9DgK4743cdxvtOw0weQNpZXaS16SCBi5MNjZF8vba3ETURjZpTbVn7Vvcf2eAwFozQ==",
+-      "dev": true,
+       "engines": {
+         "node": ">=6.9.0"
+       }
+@@ -371,7 +368,6 @@
+     "node_modules/@babel/helpers": {
+       "version": "7.16.7",
+       "integrity": "sha512-9ZDoqtfY7AuEOt3cxchfii6C7GDyyMBffktR5B2jvWv8u2+efwvpnVKXMWzNehqy68tKgAfSwfdw/lWpthS2bw==",
+-      "dev": true,
+       "dependencies": {
+         "@babel/template": "^7.16.7",
+         "@babel/traverse": "^7.16.7",
+@@ -494,6 +490,20 @@
+       "dependencies": {
+         "@babel/helper-plugin-utils": "^7.8.0"
+       },
++      "peerDependencies": {
++        "@babel/core": "^7.0.0-0"
++      }
++    },
++    "node_modules/@babel/plugin-syntax-jsx": {
++      "version": "7.18.6",
++      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-jsx/-/plugin-syntax-jsx-7.18.6.tgz",
++      "integrity": "sha512-6mmljtAedFGTWu2p/8WIORGwy+61PLgOMPOdazc7YoJ9ZCWUyFy3A6CpPkRKLKD1ToAesxX8KGEViAiLo9N+7Q==",
++      "dependencies": {
++        "@babel/helper-plugin-utils": "^7.18.6"
++      },
++      "engines": {
++        "node": ">=6.9.0"
++      },
+       "peerDependencies": {
+         "@babel/core": "^7.0.0-0"
+       }
+@@ -1926,20 +1936,6 @@
+         "@babel/core": "^7.0.0-0"
+       }
+     },
+-    "node_modules/@babel/preset-react/node_modules/@babel/plugin-transform-react-jsx/node_modules/@babel/plugin-syntax-jsx": {
+-      "version": "7.16.7",
+-      "integrity": "sha512-Esxmk7YjA8QysKeT3VhTXvF6y77f/a91SIs4pWb4H2eWGQkCKFgQaG6hdoEVZtGsrAcb2K5BW66XsOErD4WU3Q==",
+-      "dev": true,
+-      "dependencies": {
+-        "@babel/helper-plugin-utils": "^7.16.7"
+-      },
+-      "engines": {
+-        "node": ">=6.9.0"
+-      },
+-      "peerDependencies": {
+-        "@babel/core": "^7.0.0-0"
+-      }
+-    },
+     "node_modules/@babel/preset-react/node_modules/@babel/plugin-transform-react-pure-annotations": {
+       "version": "7.16.7",
+       "integrity": "sha512-hs71ToC97k3QWxswh2ElzMFABXHvGiJ01IB1TbYQDGeWRKWz/MPUTh5jGExdHvosYKpnJW5Pm3S4+TA3FyX+GA==",
+@@ -2009,8 +2005,9 @@
+       }
+     },
+     "node_modules/@babel/runtime": {
+-      "version": "7.16.7",
+-      "integrity": "sha512-9E9FJowqAsytyOY6LG+1KuueckRL+aQW+mKvXRXnuFGyRAyepJPmEo9vgMfXUA6O9u3IeEdv9MAkppFcaQwogQ==",
++      "version": "7.18.9",
++      "resolved": "https://registry.npmjs.org/@babel/runtime/-/runtime-7.18.9.tgz",
++      "integrity": "sha512-lkqXDcvlFT5rvEjiu6+QYO+1GXrEHRo2LOtS7E4GtX5ESIZOgepqsZBVIj6Pv+a6zqsya9VCgiK1KAK4BvJDAw==",
+       "dependencies": {
+         "regenerator-runtime": "^0.13.4"
+       },
+@@ -2488,6 +2485,66 @@
+         "node": ">=8"
+       }
+     },
++    "node_modules/@emotion/babel-plugin": {
++      "version": "11.10.2",
++      "resolved": "https://registry.npmjs.org/@emotion/babel-plugin/-/babel-plugin-11.10.2.tgz",
++      "integrity": "sha512-xNQ57njWTFVfPAc3cjfuaPdsgLp5QOSuRsj9MA6ndEhH/AzuZM86qIQzt6rq+aGBwj3n5/TkLmU5lhAfdRmogA==",
++      "dependencies": {
++        "@babel/helper-module-imports": "^7.16.7",
++        "@babel/plugin-syntax-jsx": "^7.17.12",
++        "@babel/runtime": "^7.18.3",
++        "@emotion/hash": "^0.9.0",
++        "@emotion/memoize": "^0.8.0",
++        "@emotion/serialize": "^1.1.0",
++        "babel-plugin-macros": "^3.1.0",
++        "convert-source-map": "^1.5.0",
++        "escape-string-regexp": "^4.0.0",
++        "find-root": "^1.1.0",
++        "source-map": "^0.5.7",
++        "stylis": "4.0.13"
++      },
++      "peerDependencies": {
++        "@babel/core": "^7.0.0"
++      }
++    },
++    "node_modules/@emotion/babel-plugin/node_modules/@emotion/memoize": {
++      "version": "0.8.0",
++      "resolved": "https://registry.npmjs.org/@emotion/memoize/-/memoize-0.8.0.tgz",
++      "integrity": "sha512-G/YwXTkv7Den9mXDO7AhLWkE3q+I92B+VqAE+dYG4NGPaHZGvt3G8Q0p9vmE+sq7rTGphUbAvmQ9YpbfMQGGlA=="
++    },
++    "node_modules/@emotion/babel-plugin/node_modules/escape-string-regexp": {
++      "version": "4.0.0",
++      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-4.0.0.tgz",
++      "integrity": "sha512-TtpcNJ3XAzx3Gq8sWRzJaVajRs0uVxA2YAkdb1jm2YkPz4G6egUFAyA3n5vtEIZefPk5Wa4UXbKuS5fKkJWdgA==",
++      "engines": {
++        "node": ">=10"
++      },
++      "funding": {
++        "url": "https://github.com/sponsors/sindresorhus"
++      }
++    },
++    "node_modules/@emotion/cache": {
++      "version": "11.10.3",
++      "resolved": "https://registry.npmjs.org/@emotion/cache/-/cache-11.10.3.tgz",
++      "integrity": "sha512-Psmp/7ovAa8appWh3g51goxu/z3iVms7JXOreq136D8Bbn6dYraPnmL6mdM8GThEx9vwSn92Fz+mGSjBzN8UPQ==",
++      "dependencies": {
++        "@emotion/memoize": "^0.8.0",
++        "@emotion/sheet": "^1.2.0",
++        "@emotion/utils": "^1.2.0",
++        "@emotion/weak-memoize": "^0.3.0",
++        "stylis": "4.0.13"
++      }
++    },
++    "node_modules/@emotion/cache/node_modules/@emotion/memoize": {
++      "version": "0.8.0",
++      "resolved": "https://registry.npmjs.org/@emotion/memoize/-/memoize-0.8.0.tgz",
++      "integrity": "sha512-G/YwXTkv7Den9mXDO7AhLWkE3q+I92B+VqAE+dYG4NGPaHZGvt3G8Q0p9vmE+sq7rTGphUbAvmQ9YpbfMQGGlA=="
++    },
++    "node_modules/@emotion/hash": {
++      "version": "0.9.0",
++      "resolved": "https://registry.npmjs.org/@emotion/hash/-/hash-0.9.0.tgz",
++      "integrity": "sha512-14FtKiHhy2QoPIzdTcvh//8OyBlknNs2nXRwIhG904opCby3l+9Xaf/wuPvICBF0rc1ZCNBd3nKe9cd2mecVkQ=="
++    },
+     "node_modules/@emotion/is-prop-valid": {
+       "version": "0.8.8",
+       "integrity": "sha512-u5WtneEAr5IDG2Wv65yhunPSMLIpuKsbuOktRojfrEiEvRyC85LgPMZI63cr7NUqT8ZIGdSVg8ZKGxIug4lXcA==",
+@@ -2499,6 +2556,97 @@
+       "version": "0.7.4",
+       "integrity": "sha512-Ja/Vfqe3HpuzRsG1oBtWTHk2PGZ7GR+2Vz5iYGelAw8dx32K0y7PjVuxK6z1nMpZOqAFsRUPCkK1YjJ56qJlgw=="
+     },
++    "node_modules/@emotion/react": {
++      "version": "11.10.0",
++      "resolved": "https://registry.npmjs.org/@emotion/react/-/react-11.10.0.tgz",
++      "integrity": "sha512-K6z9zlHxxBXwN8TcpwBKcEsBsOw4JWCCmR+BeeOWgqp8GIU1yA2Odd41bwdAAr0ssbQrbJbVnndvv7oiv1bZeQ==",
++      "dependencies": {
++        "@babel/runtime": "^7.18.3",
++        "@emotion/babel-plugin": "^11.10.0",
++        "@emotion/cache": "^11.10.0",
++        "@emotion/serialize": "^1.1.0",
++        "@emotion/utils": "^1.2.0",
++        "@emotion/weak-memoize": "^0.3.0",
++        "hoist-non-react-statics": "^3.3.1"
++      },
++      "peerDependencies": {
++        "@babel/core": "^7.0.0",
++        "react": ">=16.8.0"
++      },
++      "peerDependenciesMeta": {
++        "@babel/core": {
++          "optional": true
++        },
++        "@types/react": {
++          "optional": true
++        }
++      }
++    },
++    "node_modules/@emotion/serialize": {
++      "version": "1.1.0",
++      "resolved": "https://registry.npmjs.org/@emotion/serialize/-/serialize-1.1.0.tgz",
++      "integrity": "sha512-F1ZZZW51T/fx+wKbVlwsfchr5q97iW8brAnXmsskz4d0hVB4O3M/SiA3SaeH06x02lSNzkkQv+n3AX3kCXKSFA==",
++      "dependencies": {
++        "@emotion/hash": "^0.9.0",
++        "@emotion/memoize": "^0.8.0",
++        "@emotion/unitless": "^0.8.0",
++        "@emotion/utils": "^1.2.0",
++        "csstype": "^3.0.2"
++      }
++    },
++    "node_modules/@emotion/serialize/node_modules/@emotion/memoize": {
++      "version": "0.8.0",
++      "resolved": "https://registry.npmjs.org/@emotion/memoize/-/memoize-0.8.0.tgz",
++      "integrity": "sha512-G/YwXTkv7Den9mXDO7AhLWkE3q+I92B+VqAE+dYG4NGPaHZGvt3G8Q0p9vmE+sq7rTGphUbAvmQ9YpbfMQGGlA=="
++    },
++    "node_modules/@emotion/serialize/node_modules/@emotion/unitless": {
++      "version": "0.8.0",
++      "resolved": "https://registry.npmjs.org/@emotion/unitless/-/unitless-0.8.0.tgz",
++      "integrity": "sha512-VINS5vEYAscRl2ZUDiT3uMPlrFQupiKgHz5AA4bCH1miKBg4qtwkim1qPmJj/4WG6TreYMY111rEFsjupcOKHw=="
++    },
++    "node_modules/@emotion/sheet": {
++      "version": "1.2.0",
++      "resolved": "https://registry.npmjs.org/@emotion/sheet/-/sheet-1.2.0.tgz",
++      "integrity": "sha512-OiTkRgpxescko+M51tZsMq7Puu/KP55wMT8BgpcXVG2hqXc0Vo0mfymJ/Uj24Hp0i083ji/o0aLddh08UEjq8w=="
++    },
++    "node_modules/@emotion/styled": {
++      "version": "11.10.0",
++      "resolved": "https://registry.npmjs.org/@emotion/styled/-/styled-11.10.0.tgz",
++      "integrity": "sha512-V9oaEH6V4KePeQpgUE83i8ht+4Ri3E8Djp/ZPJ4DQlqWhSKITvgzlR3/YQE2hdfP4Jw3qVRkANJz01LLqK9/TA==",
++      "dependencies": {
++        "@babel/runtime": "^7.18.3",
++        "@emotion/babel-plugin": "^11.10.0",
++        "@emotion/is-prop-valid": "^1.2.0",
++        "@emotion/serialize": "^1.1.0",
++        "@emotion/utils": "^1.2.0"
++      },
++      "peerDependencies": {
++        "@babel/core": "^7.0.0",
++        "@emotion/react": "^11.0.0-rc.0",
++        "react": ">=16.8.0"
++      },
++      "peerDependenciesMeta": {
++        "@babel/core": {
++          "optional": true
++        },
++        "@types/react": {
++          "optional": true
++        }
++      }
++    },
++    "node_modules/@emotion/styled/node_modules/@emotion/is-prop-valid": {
++      "version": "1.2.0",
++      "resolved": "https://registry.npmjs.org/@emotion/is-prop-valid/-/is-prop-valid-1.2.0.tgz",
++      "integrity": "sha512-3aDpDprjM0AwaxGE09bOPkNxHpBd+kA6jty3RnaEXdweX1DF1U3VQpPYb0g1IStAuK7SVQ1cy+bNBBKp4W3Fjg==",
++      "dependencies": {
++        "@emotion/memoize": "^0.8.0"
++      }
++    },
++    "node_modules/@emotion/styled/node_modules/@emotion/memoize": {
++      "version": "0.8.0",
++      "resolved": "https://registry.npmjs.org/@emotion/memoize/-/memoize-0.8.0.tgz",
++      "integrity": "sha512-G/YwXTkv7Den9mXDO7AhLWkE3q+I92B+VqAE+dYG4NGPaHZGvt3G8Q0p9vmE+sq7rTGphUbAvmQ9YpbfMQGGlA=="
++    },
+     "node_modules/@emotion/stylis": {
+       "version": "0.8.5",
+       "integrity": "sha512-h6KtPihKFn3T9fuIrwvXXUOwlx3rfUvfZIcP5a6rh8Y7zjE3O06hT5Ss4S/YI1AYhuZ1kjaE/5EaOOI2NqSylQ=="
+@@ -2507,6 +2655,16 @@
+       "version": "0.7.5",
+       "integrity": "sha512-OWORNpfjMsSSUBVrRBVGECkhWcULOAJz9ZW8uK9qgxD+87M7jHRcvh/A96XXNhXTLmKcoYSQtBEX7lHMO7YRwg=="
+     },
++    "node_modules/@emotion/utils": {
++      "version": "1.2.0",
++      "resolved": "https://registry.npmjs.org/@emotion/utils/-/utils-1.2.0.tgz",
++      "integrity": "sha512-sn3WH53Kzpw8oQ5mgMmIzzyAaH2ZqFEbozVVBSYp538E06OSE6ytOp7pRAjNQR+Q/orwqdQYJSe2m3hCOeznkw=="
++    },
++    "node_modules/@emotion/weak-memoize": {
++      "version": "0.3.0",
++      "resolved": "https://registry.npmjs.org/@emotion/weak-memoize/-/weak-memoize-0.3.0.tgz",
++      "integrity": "sha512-AHPmaAx+RYfZz0eYu6Gviiagpmiyw98ySSlQvCUhVGDRtDFe4DBS0x1bSjdF3gqUDYOczB+yYvBTtEylYSdRhg=="
++    },
+     "node_modules/@endemolshinegroup/cosmiconfig-typescript-loader": {
+       "version": "3.0.2",
+       "integrity": "sha512-QRVtqJuS1mcT56oHpVegkKBlgtWjXw/gHNWO3eL9oyB5Sc7HBoc2OLG/nYpVfT/Jejvo3NUrD0Udk7XgoyDKkA==",
+@@ -3422,6 +3580,398 @@
+         "@jridgewell/sourcemap-codec": "^1.4.10"
+       }
+     },
++    "node_modules/@mui/base": {
++      "version": "5.0.0-alpha.94",
++      "resolved": "https://registry.npmjs.org/@mui/base/-/base-5.0.0-alpha.94.tgz",
++      "integrity": "sha512-IJXmgTF07H1Iv5zjDV7zJZGUmb9cN8ERzd2dgA1akh6NWZgwyIGyQx+Au9+QSDoM5vN3FqZvU/0YCU6inUwgeQ==",
++      "dependencies": {
++        "@babel/runtime": "^7.17.2",
++        "@emotion/is-prop-valid": "^1.2.0",
++        "@mui/types": "^7.1.5",
++        "@mui/utils": "^5.9.3",
++        "@popperjs/core": "^2.11.6",
++        "clsx": "^1.2.1",
++        "prop-types": "^15.8.1",
++        "react-is": "^18.2.0"
++      },
++      "engines": {
++        "node": ">=12.0.0"
++      },
++      "funding": {
++        "type": "opencollective",
++        "url": "https://opencollective.com/mui"
++      },
++      "peerDependencies": {
++        "@types/react": "^17.0.0 || ^18.0.0",
++        "react": "^17.0.0 || ^18.0.0",
++        "react-dom": "^17.0.0 || ^18.0.0"
++      },
++      "peerDependenciesMeta": {
++        "@types/react": {
++          "optional": true
++        }
++      }
++    },
++    "node_modules/@mui/base/node_modules/@emotion/is-prop-valid": {
++      "version": "1.2.0",
++      "resolved": "https://registry.npmjs.org/@emotion/is-prop-valid/-/is-prop-valid-1.2.0.tgz",
++      "integrity": "sha512-3aDpDprjM0AwaxGE09bOPkNxHpBd+kA6jty3RnaEXdweX1DF1U3VQpPYb0g1IStAuK7SVQ1cy+bNBBKp4W3Fjg==",
++      "dependencies": {
++        "@emotion/memoize": "^0.8.0"
++      }
++    },
++    "node_modules/@mui/base/node_modules/@emotion/memoize": {
++      "version": "0.8.0",
++      "resolved": "https://registry.npmjs.org/@emotion/memoize/-/memoize-0.8.0.tgz",
++      "integrity": "sha512-G/YwXTkv7Den9mXDO7AhLWkE3q+I92B+VqAE+dYG4NGPaHZGvt3G8Q0p9vmE+sq7rTGphUbAvmQ9YpbfMQGGlA=="
++    },
++    "node_modules/@mui/base/node_modules/@popperjs/core": {
++      "version": "2.11.6",
++      "resolved": "https://registry.npmjs.org/@popperjs/core/-/core-2.11.6.tgz",
++      "integrity": "sha512-50/17A98tWUfQ176raKiOGXuYpLyyVMkxxG6oylzL3BPOlA6ADGdK7EYunSa4I064xerltq9TGXs8HmOk5E+vw==",
++      "funding": {
++        "type": "opencollective",
++        "url": "https://opencollective.com/popperjs"
++      }
++    },
++    "node_modules/@mui/base/node_modules/prop-types": {
++      "version": "15.8.1",
++      "resolved": "https://registry.npmjs.org/prop-types/-/prop-types-15.8.1.tgz",
++      "integrity": "sha512-oj87CgZICdulUohogVAR7AjlC0327U4el4L6eAvOqCeudMDVU0NThNaV+b9Df4dXgSP1gXMTnPdhfe/2qDH5cg==",
++      "dependencies": {
++        "loose-envify": "^1.4.0",
++        "object-assign": "^4.1.1",
++        "react-is": "^16.13.1"
++      }
++    },
++    "node_modules/@mui/base/node_modules/prop-types/node_modules/react-is": {
++      "version": "16.13.1",
++      "resolved": "https://registry.npmjs.org/react-is/-/react-is-16.13.1.tgz",
++      "integrity": "sha512-24e6ynE2H+OKt4kqsOvNd8kBpV65zoxbA4BVsEOB3ARVWQki/DHzaUoC5KuON/BiccDaCCTZBuOcfZs70kR8bQ=="
++    },
++    "node_modules/@mui/base/node_modules/react-is": {
++      "version": "18.2.0",
++      "resolved": "https://registry.npmjs.org/react-is/-/react-is-18.2.0.tgz",
++      "integrity": "sha512-xWGDIW6x921xtzPkhiULtthJHoJvBbF3q26fzloPCK0hsvxtPVelvftw3zjbHWSkR2km9Z+4uxbDDK/6Zw9B8w=="
++    },
++    "node_modules/@mui/core-downloads-tracker": {
++      "version": "5.10.2",
++      "resolved": "https://registry.npmjs.org/@mui/core-downloads-tracker/-/core-downloads-tracker-5.10.2.tgz",
++      "integrity": "sha512-1guoGvL3QZ7VjA3y9zye9Rpm+jz18rVZIo3AauTGyW5ntDMxr/cR0M18nuc/NH2KqpMt+coh4NwPEO1uPuKM5w==",
++      "funding": {
++        "type": "opencollective",
++        "url": "https://opencollective.com/mui"
++      }
++    },
++    "node_modules/@mui/icons-material": {
++      "version": "5.10.2",
++      "resolved": "https://registry.npmjs.org/@mui/icons-material/-/icons-material-5.10.2.tgz",
++      "integrity": "sha512-p7ku+43JeKRz0ONGzPZbRXZRbE7vCKP1Cr8l/Yj9sUIGVQ6CM/m37u6udacJZkDXD+G2FoxJPixrVvvjx6f64w==",
++      "dependencies": {
++        "@babel/runtime": "^7.17.2"
++      },
++      "engines": {
++        "node": ">=12.0.0"
++      },
++      "funding": {
++        "type": "opencollective",
++        "url": "https://opencollective.com/mui"
++      },
++      "peerDependencies": {
++        "@mui/material": "^5.0.0",
++        "@types/react": "^17.0.0 || ^18.0.0",
++        "react": "^17.0.0 || ^18.0.0"
++      },
++      "peerDependenciesMeta": {
++        "@types/react": {
++          "optional": true
++        }
++      }
++    },
++    "node_modules/@mui/material": {
++      "version": "5.10.2",
++      "resolved": "https://registry.npmjs.org/@mui/material/-/material-5.10.2.tgz",
++      "integrity": "sha512-ay43fuQLXROXkxFd6tqbj394Hu8BlbmpCdEDFtAisijulla2ZLfQa24pjhdX+56HrHReB3cZsf/sRq+DSfIgiA==",
++      "dependencies": {
++        "@babel/runtime": "^7.17.2",
++        "@mui/base": "5.0.0-alpha.94",
++        "@mui/core-downloads-tracker": "^5.10.2",
++        "@mui/system": "^5.10.2",
++        "@mui/types": "^7.1.5",
++        "@mui/utils": "^5.9.3",
++        "@types/react-transition-group": "^4.4.5",
++        "clsx": "^1.2.1",
++        "csstype": "^3.1.0",
++        "prop-types": "^15.8.1",
++        "react-is": "^18.2.0",
++        "react-transition-group": "^4.4.5"
++      },
++      "engines": {
++        "node": ">=12.0.0"
++      },
++      "funding": {
++        "type": "opencollective",
++        "url": "https://opencollective.com/mui"
++      },
++      "peerDependencies": {
++        "@emotion/react": "^11.5.0",
++        "@emotion/styled": "^11.3.0",
++        "@types/react": "^17.0.0 || ^18.0.0",
++        "react": "^17.0.0 || ^18.0.0",
++        "react-dom": "^17.0.0 || ^18.0.0"
++      },
++      "peerDependenciesMeta": {
++        "@emotion/react": {
++          "optional": true
++        },
++        "@emotion/styled": {
++          "optional": true
++        },
++        "@types/react": {
++          "optional": true
++        }
++      }
++    },
++    "node_modules/@mui/material/node_modules/dom-helpers": {
++      "version": "5.2.1",
++      "resolved": "https://registry.npmjs.org/dom-helpers/-/dom-helpers-5.2.1.tgz",
++      "integrity": "sha512-nRCa7CK3VTrM2NmGkIy4cbK7IZlgBE/PYMn55rrXefr5xXDP0LdtfPnblFDoVdcAfslJ7or6iqAUnx0CCGIWQA==",
++      "dependencies": {
++        "@babel/runtime": "^7.8.7",
++        "csstype": "^3.0.2"
++      }
++    },
++    "node_modules/@mui/material/node_modules/prop-types": {
++      "version": "15.8.1",
++      "resolved": "https://registry.npmjs.org/prop-types/-/prop-types-15.8.1.tgz",
++      "integrity": "sha512-oj87CgZICdulUohogVAR7AjlC0327U4el4L6eAvOqCeudMDVU0NThNaV+b9Df4dXgSP1gXMTnPdhfe/2qDH5cg==",
++      "dependencies": {
++        "loose-envify": "^1.4.0",
++        "object-assign": "^4.1.1",
++        "react-is": "^16.13.1"
++      }
++    },
++    "node_modules/@mui/material/node_modules/prop-types/node_modules/react-is": {
++      "version": "16.13.1",
++      "resolved": "https://registry.npmjs.org/react-is/-/react-is-16.13.1.tgz",
++      "integrity": "sha512-24e6ynE2H+OKt4kqsOvNd8kBpV65zoxbA4BVsEOB3ARVWQki/DHzaUoC5KuON/BiccDaCCTZBuOcfZs70kR8bQ=="
++    },
++    "node_modules/@mui/material/node_modules/react-is": {
++      "version": "18.2.0",
++      "resolved": "https://registry.npmjs.org/react-is/-/react-is-18.2.0.tgz",
++      "integrity": "sha512-xWGDIW6x921xtzPkhiULtthJHoJvBbF3q26fzloPCK0hsvxtPVelvftw3zjbHWSkR2km9Z+4uxbDDK/6Zw9B8w=="
++    },
++    "node_modules/@mui/material/node_modules/react-transition-group": {
++      "version": "4.4.5",
++      "resolved": "https://registry.npmjs.org/react-transition-group/-/react-transition-group-4.4.5.tgz",
++      "integrity": "sha512-pZcd1MCJoiKiBR2NRxeCRg13uCXbydPnmB4EOeRrY7480qNWO8IIgQG6zlDkm6uRMsURXPuKq0GWtiM59a5Q6g==",
++      "dependencies": {
++        "@babel/runtime": "^7.5.5",
++        "dom-helpers": "^5.0.1",
++        "loose-envify": "^1.4.0",
++        "prop-types": "^15.6.2"
++      },
++      "peerDependencies": {
++        "react": ">=16.6.0",
++        "react-dom": ">=16.6.0"
++      }
++    },
++    "node_modules/@mui/private-theming": {
++      "version": "5.9.3",
++      "resolved": "https://registry.npmjs.org/@mui/private-theming/-/private-theming-5.9.3.tgz",
++      "integrity": "sha512-Ys3WO39WqoGciGX9k5AIi/k2zJhlydv4FzlEEwtw9OqdMaV0ydK/TdZekKzjP9sTI/JcdAP3H5DWtUaPLQJjWg==",
++      "dependencies": {
++        "@babel/runtime": "^7.17.2",
++        "@mui/utils": "^5.9.3",
++        "prop-types": "^15.8.1"
++      },
++      "engines": {
++        "node": ">=12.0.0"
++      },
++      "funding": {
++        "type": "opencollective",
++        "url": "https://opencollective.com/mui"
++      },
++      "peerDependencies": {
++        "@types/react": "^17.0.0 || ^18.0.0",
++        "react": "^17.0.0 || ^18.0.0"
++      },
++      "peerDependenciesMeta": {
++        "@types/react": {
++          "optional": true
++        }
++      }
++    },
++    "node_modules/@mui/private-theming/node_modules/prop-types": {
++      "version": "15.8.1",
++      "resolved": "https://registry.npmjs.org/prop-types/-/prop-types-15.8.1.tgz",
++      "integrity": "sha512-oj87CgZICdulUohogVAR7AjlC0327U4el4L6eAvOqCeudMDVU0NThNaV+b9Df4dXgSP1gXMTnPdhfe/2qDH5cg==",
++      "dependencies": {
++        "loose-envify": "^1.4.0",
++        "object-assign": "^4.1.1",
++        "react-is": "^16.13.1"
++      }
++    },
++    "node_modules/@mui/private-theming/node_modules/react-is": {
++      "version": "16.13.1",
++      "resolved": "https://registry.npmjs.org/react-is/-/react-is-16.13.1.tgz",
++      "integrity": "sha512-24e6ynE2H+OKt4kqsOvNd8kBpV65zoxbA4BVsEOB3ARVWQki/DHzaUoC5KuON/BiccDaCCTZBuOcfZs70kR8bQ=="
++    },
++    "node_modules/@mui/styled-engine": {
++      "version": "5.10.2",
++      "resolved": "https://registry.npmjs.org/@mui/styled-engine/-/styled-engine-5.10.2.tgz",
++      "integrity": "sha512-YqnptNQ2E0cWwOTmLCEvrddiiR/neUfn2AD/4TDUXZu8B2n7NfDb9d3bAUfWZV+KmulQdAedoaZDqyXBFGLdbQ==",
++      "dependencies": {
++        "@babel/runtime": "^7.17.2",
++        "@emotion/cache": "^11.10.1",
++        "csstype": "^3.1.0",
++        "prop-types": "^15.8.1"
++      },
++      "engines": {
++        "node": ">=12.0.0"
++      },
++      "funding": {
++        "type": "opencollective",
++        "url": "https://opencollective.com/mui"
++      },
++      "peerDependencies": {
++        "@emotion/react": "^11.4.1",
++        "@emotion/styled": "^11.3.0",
++        "react": "^17.0.0 || ^18.0.0"
++      },
++      "peerDependenciesMeta": {
++        "@emotion/react": {
++          "optional": true
++        },
++        "@emotion/styled": {
++          "optional": true
++        }
++      }
++    },
++    "node_modules/@mui/styled-engine/node_modules/prop-types": {
++      "version": "15.8.1",
++      "resolved": "https://registry.npmjs.org/prop-types/-/prop-types-15.8.1.tgz",
++      "integrity": "sha512-oj87CgZICdulUohogVAR7AjlC0327U4el4L6eAvOqCeudMDVU0NThNaV+b9Df4dXgSP1gXMTnPdhfe/2qDH5cg==",
++      "dependencies": {
++        "loose-envify": "^1.4.0",
++        "object-assign": "^4.1.1",
++        "react-is": "^16.13.1"
++      }
++    },
++    "node_modules/@mui/styled-engine/node_modules/react-is": {
++      "version": "16.13.1",
++      "resolved": "https://registry.npmjs.org/react-is/-/react-is-16.13.1.tgz",
++      "integrity": "sha512-24e6ynE2H+OKt4kqsOvNd8kBpV65zoxbA4BVsEOB3ARVWQki/DHzaUoC5KuON/BiccDaCCTZBuOcfZs70kR8bQ=="
++    },
++    "node_modules/@mui/system": {
++      "version": "5.10.2",
++      "resolved": "https://registry.npmjs.org/@mui/system/-/system-5.10.2.tgz",
++      "integrity": "sha512-YudwJhLcEoQiwCAmzeMr9P3ISiVGNsxBIIPzFxaGwJ8+mMrx3qoPVOV2sfm0ZuNiQuABshEw4KqHa5ftNC+pOQ==",
++      "dependencies": {
++        "@babel/runtime": "^7.17.2",
++        "@mui/private-theming": "^5.9.3",
++        "@mui/styled-engine": "^5.10.2",
++        "@mui/types": "^7.1.5",
++        "@mui/utils": "^5.9.3",
++        "clsx": "^1.2.1",
++        "csstype": "^3.1.0",
++        "prop-types": "^15.8.1"
++      },
++      "engines": {
++        "node": ">=12.0.0"
++      },
++      "funding": {
++        "type": "opencollective",
++        "url": "https://opencollective.com/mui"
++      },
++      "peerDependencies": {
++        "@emotion/react": "^11.5.0",
++        "@emotion/styled": "^11.3.0",
++        "@types/react": "^17.0.0 || ^18.0.0",
++        "react": "^17.0.0 || ^18.0.0"
++      },
++      "peerDependenciesMeta": {
++        "@emotion/react": {
++          "optional": true
++        },
++        "@emotion/styled": {
++          "optional": true
++        },
++        "@types/react": {
++          "optional": true
++        }
++      }
++    },
++    "node_modules/@mui/system/node_modules/prop-types": {
++      "version": "15.8.1",
++      "resolved": "https://registry.npmjs.org/prop-types/-/prop-types-15.8.1.tgz",
++      "integrity": "sha512-oj87CgZICdulUohogVAR7AjlC0327U4el4L6eAvOqCeudMDVU0NThNaV+b9Df4dXgSP1gXMTnPdhfe/2qDH5cg==",
++      "dependencies": {
++        "loose-envify": "^1.4.0",
++        "object-assign": "^4.1.1",
++        "react-is": "^16.13.1"
++      }
++    },
++    "node_modules/@mui/system/node_modules/react-is": {
++      "version": "16.13.1",
++      "resolved": "https://registry.npmjs.org/react-is/-/react-is-16.13.1.tgz",
++      "integrity": "sha512-24e6ynE2H+OKt4kqsOvNd8kBpV65zoxbA4BVsEOB3ARVWQki/DHzaUoC5KuON/BiccDaCCTZBuOcfZs70kR8bQ=="
++    },
++    "node_modules/@mui/types": {
++      "version": "7.1.5",
++      "resolved": "https://registry.npmjs.org/@mui/types/-/types-7.1.5.tgz",
++      "integrity": "sha512-HnRXrxgHJYJcT8ZDdDCQIlqk0s0skOKD7eWs9mJgBUu70hyW4iA6Kiv3yspJR474RFH8hysKR65VVSzUSzkuwA==",
++      "peerDependencies": {
++        "@types/react": "*"
++      },
++      "peerDependenciesMeta": {
++        "@types/react": {
++          "optional": true
++        }
++      }
++    },
++    "node_modules/@mui/utils": {
++      "version": "5.9.3",
++      "resolved": "https://registry.npmjs.org/@mui/utils/-/utils-5.9.3.tgz",
++      "integrity": "sha512-l0N5bcrenE9hnwZ/jPecpIRqsDFHkPXoFUcmkgysaJwVZzJ3yQkGXB47eqmXX5yyGrSc6HksbbqXEaUya+siew==",
++      "dependencies": {
++        "@babel/runtime": "^7.17.2",
++        "@types/prop-types": "^15.7.5",
++        "@types/react-is": "^16.7.1 || ^17.0.0",
++        "prop-types": "^15.8.1",
++        "react-is": "^18.2.0"
++      },
++      "engines": {
++        "node": ">=12.0.0"
++      },
++      "funding": {
++        "type": "opencollective",
++        "url": "https://opencollective.com/mui"
++      },
++      "peerDependencies": {
++        "react": "^17.0.0 || ^18.0.0"
++      }
++    },
++    "node_modules/@mui/utils/node_modules/prop-types": {
++      "version": "15.8.1",
++      "resolved": "https://registry.npmjs.org/prop-types/-/prop-types-15.8.1.tgz",
++      "integrity": "sha512-oj87CgZICdulUohogVAR7AjlC0327U4el4L6eAvOqCeudMDVU0NThNaV+b9Df4dXgSP1gXMTnPdhfe/2qDH5cg==",
++      "dependencies": {
++        "loose-envify": "^1.4.0",
++        "object-assign": "^4.1.1",
++        "react-is": "^16.13.1"
++      }
++    },
++    "node_modules/@mui/utils/node_modules/prop-types/node_modules/react-is": {
++      "version": "16.13.1",
++      "resolved": "https://registry.npmjs.org/react-is/-/react-is-16.13.1.tgz",
++      "integrity": "sha512-24e6ynE2H+OKt4kqsOvNd8kBpV65zoxbA4BVsEOB3ARVWQki/DHzaUoC5KuON/BiccDaCCTZBuOcfZs70kR8bQ=="
++    },
++    "node_modules/@mui/utils/node_modules/react-is": {
++      "version": "18.2.0",
++      "resolved": "https://registry.npmjs.org/react-is/-/react-is-18.2.0.tgz",
++      "integrity": "sha512-xWGDIW6x921xtzPkhiULtthJHoJvBbF3q26fzloPCK0hsvxtPVelvftw3zjbHWSkR2km9Z+4uxbDDK/6Zw9B8w=="
++    },
+     "node_modules/@nodelib/fs.scandir": {
+       "version": "2.1.5",
+       "integrity": "sha512-vq24Bq3ym5HEQm2NKCr3yXDwjc7vTsEThRDnkp2DK9p1uqLR+DHurm/NOTo0KG7HYHU7eppKZj3MyqYuMBf62g==",
+@@ -4207,8 +4757,7 @@
+     },
+     "node_modules/@types/parse-json": {
+       "version": "4.0.0",
+-      "integrity": "sha512-//oorEZjL6sbPcKUaCdIGlIUeH26mgzimjBB77G6XRgnDl/L5wOnpyBGRe/Mmf5CVW3PwEBE1NjiMZ/ssFh4wA==",
+-      "dev": true
++      "integrity": "sha512-//oorEZjL6sbPcKUaCdIGlIUeH26mgzimjBB77G6XRgnDl/L5wOnpyBGRe/Mmf5CVW3PwEBE1NjiMZ/ssFh4wA=="
+     },
+     "node_modules/@types/parse5": {
+       "version": "6.0.3",
+@@ -4223,8 +4772,9 @@
+       "dev": true
+     },
+     "node_modules/@types/prop-types": {
+-      "version": "15.7.4",
+-      "integrity": "sha512-rZ5drC/jWjrArrS8BR6SIr4cWpW09RNTYt9AMZo3Jwwif+iacXAqgVjm0B0Bv/S1jhDXKHqRVNCbACkJ89RAnQ=="
++      "version": "15.7.5",
++      "resolved": "https://registry.npmjs.org/@types/prop-types/-/prop-types-15.7.5.tgz",
++      "integrity": "sha512-JCB8C6SnDoQf0cNycqd/35A7MjcnK+ZTqE7judS6o7utxUCg6imJg3QK2qzHKszlTjcj2cn+NwMB2i96ubpj7w=="
+     },
+     "node_modules/@types/qs": {
+       "version": "6.9.7",
+@@ -4253,6 +4803,14 @@
+         "@types/react": "*"
+       }
+     },
++    "node_modules/@types/react-is": {
++      "version": "17.0.3",
++      "resolved": "https://registry.npmjs.org/@types/react-is/-/react-is-17.0.3.tgz",
++      "integrity": "sha512-aBTIWg1emtu95bLTLx0cpkxwGW3ueZv71nE2YFBpL8k/z5czEW8yYpOo8Dp+UUAFAtKwNaOsh/ioSeQnWlZcfw==",
++      "dependencies": {
++        "@types/react": "*"
++      }
++    },
+     "node_modules/@types/react-redux": {
+       "version": "7.1.20",
+       "integrity": "sha512-q42es4c8iIeTgcnB+yJgRTTzftv3eYYvCZOh1Ckn2eX/3o5TdsQYKUWpLoLuGlcY/p+VAhV9IOEZJcWk/vfkXw==",
+@@ -4287,6 +4845,14 @@
+       "integrity": "sha512-qjDJRrmvBMiTx+jyLxvLfJU7UznFuokDv4f3WRuriHKERccVpFU+8XMQUAbDzoiJCsmexxRExQeMwwCdamSKDA==",
+       "dev": true
+     },
++    "node_modules/@types/react-transition-group": {
++      "version": "4.4.5",
++      "resolved": "https://registry.npmjs.org/@types/react-transition-group/-/react-transition-group-4.4.5.tgz",
++      "integrity": "sha512-juKD/eiSM3/xZYzjuzH6ZwpP+/lejltmiS3QEzV/vmb/Q8+HfDmxu+Baga8UEMGBqV88Nbg4l2hY/K2DkyaLLA==",
++      "dependencies": {
++        "@types/react": "*"
++      }
++    },
+     "node_modules/@types/retry": {
+       "version": "0.12.1",
+       "integrity": "sha512-xoDlM2S4ortawSWORYqsdU+2rxdh4LRW9ytc3zmT37RIKQh6IHyKwwtKhKis9ah8ol07DCkZxPt8BBvPjC6v4g==",
+@@ -5919,6 +6485,20 @@
+         "node": "^12.13.0 || ^14.15.0 || ^16.10.0 || >=17.0.0"
+       }
+     },
++    "node_modules/babel-plugin-macros": {
++      "version": "3.1.0",
++      "resolved": "https://registry.npmjs.org/babel-plugin-macros/-/babel-plugin-macros-3.1.0.tgz",
++      "integrity": "sha512-Cg7TFGpIr01vOQNODXOOaGz2NpCU5gl8x1qJFbb6hbZxR7XrcE2vtbAsTAbJ7/xwJtUuJEw8K8Zr/AE0LHlesg==",
++      "dependencies": {
++        "@babel/runtime": "^7.12.5",
++        "cosmiconfig": "^7.0.0",
++        "resolve": "^1.19.0"
++      },
++      "engines": {
++        "node": ">=10",
++        "npm": ">=6"
++      }
++    },
+     "node_modules/babel-plugin-styled-components": {
+       "version": "2.0.1",
+       "integrity": "sha512-U3wmORxerYBiqcRCo6thItIosEIga3F+ph0jJPkiOZJjyhpZyUZFQV9XvrZ2CbBIihJ3rDBC/itQ+Wx3VHMauw==",
+@@ -6228,7 +6808,6 @@
+     "node_modules/callsites": {
+       "version": "3.1.0",
+       "integrity": "sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==",
+-      "dev": true,
+       "engines": {
+         "node": ">=6"
+       }
+@@ -6467,6 +7046,14 @@
+         "node": ">=0.8"
+       }
+     },
++    "node_modules/clsx": {
++      "version": "1.2.1",
++      "resolved": "https://registry.npmjs.org/clsx/-/clsx-1.2.1.tgz",
++      "integrity": "sha512-EcR6r5a8bj6pu3ycsa/E/cKVGuTgZJZdsyUYHOksG/UHIiKfjxzRxYJpyVBwYaQeOvghal9fcc4PidlgzugAQg==",
++      "engines": {
++        "node": ">=6"
++      }
++    },
+     "node_modules/co": {
+       "version": "4.6.0",
+       "resolved": "https://registry.npmjs.org/co/-/co-4.6.0.tgz",
+@@ -6707,7 +7294,6 @@
+     "node_modules/convert-source-map": {
+       "version": "1.8.0",
+       "integrity": "sha512-+OQdjP49zViI/6i7nIJpA8rAl4sV/JdPfU9nZs3VqOwGIgizICvuN2ru6fMd+4llL0tar18UYJXfZ/TWtmhUjA==",
+-      "dev": true,
+       "dependencies": {
+         "safe-buffer": "~5.1.1"
+       }
+@@ -6850,7 +7436,6 @@
+     "node_modules/cosmiconfig": {
+       "version": "7.0.1",
+       "integrity": "sha512-a1YWNUV2HwGimB7dU2s1wUMurNKjpx60HxBB6xUM8Re+2s1g1IIfJvFR0/iCF+XHdE0GMTKTuLR32UQff4TEyQ==",
+-      "dev": true,
+       "dependencies": {
+         "@types/parse-json": "^4.0.0",
+         "import-fresh": "^3.2.1",
+@@ -7023,8 +7608,9 @@
+       "dev": true
+     },
+     "node_modules/csstype": {
+-      "version": "3.0.10",
+-      "integrity": "sha512-2u44ZG2OcNUO9HDp/Jl8C07x6pU/eTR3ncV91SiK3dhG9TWvRVsCoJw14Ckx5DgWkzGA3waZWO3d7pgqpUI/XA=="
++      "version": "3.1.0",
++      "resolved": "https://registry.npmjs.org/csstype/-/csstype-3.1.0.tgz",
++      "integrity": "sha512-uX1KG+x9h5hIJsaKR9xHUeUraxf8IODOwq9JLNPq6BwB04a/xgpq3rcx47l5BZu5zBPlgD342tdke3Hom/nJRA=="
+     },
+     "node_modules/damerau-levenshtein": {
+       "version": "1.0.8",
+@@ -7599,7 +8185,6 @@
+     "node_modules/error-ex": {
+       "version": "1.3.2",
+       "integrity": "sha512-7dFHNmqeFSEt2ZBsCriorKnn3Z2pj+fd9kmI6QoWw4//DL+icEBfc0U7qJCisqrTsKTjw4fNFy2pW9OqStD84g==",
+-      "dev": true,
+       "dependencies": {
+         "is-arrayish": "^0.2.1"
+       }
+@@ -8926,8 +9511,7 @@
+     },
+     "node_modules/find-root": {
+       "version": "1.1.0",
+-      "integrity": "sha512-NKfW6bec6GfKc0SGx1e07QZY9PE99u0Bft/0rzSD5k3sO/vwkVUpDUKVm5Gpp5Ue3YfShPFTX2070tDs5kB9Ng==",
+-      "dev": true
++      "integrity": "sha512-NKfW6bec6GfKc0SGx1e07QZY9PE99u0Bft/0rzSD5k3sO/vwkVUpDUKVm5Gpp5Ue3YfShPFTX2070tDs5kB9Ng=="
+     },
+     "node_modules/find-up": {
+       "version": "5.0.0",
+@@ -9073,8 +9657,7 @@
+     },
+     "node_modules/function-bind": {
+       "version": "1.1.1",
+-      "integrity": "sha512-yIovAzMX49sF8Yl58fSCWJ5svSLuaibPxXQJFLmBObTuCr0Mf1KiPopGM9NiFjiYBCbfaa2Fh6breQ6ANVTI0A==",
+-      "dev": true
++      "integrity": "sha512-yIovAzMX49sF8Yl58fSCWJ5svSLuaibPxXQJFLmBObTuCr0Mf1KiPopGM9NiFjiYBCbfaa2Fh6breQ6ANVTI0A=="
+     },
+     "node_modules/functional-red-black-tree": {
+       "version": "1.0.1",
+@@ -9084,7 +9667,6 @@
+     "node_modules/gensync": {
+       "version": "1.0.0-beta.2",
+       "integrity": "sha512-3hN7NaskYvMDLQY55gnW3NQ+mesEAepTqlg+VEbj7zzqEMBVNhzcGYYeqFo/TlYz6eQiFcp1HcsCZO+nGgS8zg==",
+-      "dev": true,
+       "engines": {
+         "node": ">=6.9.0"
+       }
+@@ -9360,7 +9942,6 @@
+     "node_modules/has": {
+       "version": "1.0.3",
+       "integrity": "sha512-f2dvO0VU6Oej7RkWJGrehjbzMAjFp5/VKPp5tTpWIV4JHHZK1/BxbFRtf/siA2SWTe09caDmVtYYzWEIbBS4zw==",
+-      "dev": true,
+       "dependencies": {
+         "function-bind": "^1.1.1"
+       },
+@@ -9796,7 +10377,6 @@
+     "node_modules/import-fresh": {
+       "version": "3.3.0",
+       "integrity": "sha512-veYYhQa+D1QBKznvhUHxb8faxlrwUnxseDAbAp457E0wLNio2bOSKnjYDhMj+YiAq61xrMGhQk9iXVk5FzgQMw==",
+-      "dev": true,
+       "dependencies": {
+         "parent-module": "^1.0.0",
+         "resolve-from": "^4.0.0"
+@@ -9811,7 +10391,6 @@
+     "node_modules/import-fresh/node_modules/resolve-from": {
+       "version": "4.0.0",
+       "integrity": "sha512-pb/MYmXstAkysRFx8piNI1tGFNQIFA3vkE3Gq4EuA1dF6gHp/+vgZqsCGJapvy8N3Q+4o7FwvquPJcnZ7RYy4g==",
+-      "dev": true,
+       "engines": {
+         "node": ">=4"
+       }
+@@ -9924,8 +10503,7 @@
+     },
+     "node_modules/is-arrayish": {
+       "version": "0.2.1",
+-      "integrity": "sha512-zz06S8t0ozoDXMG+ube26zeCTNXcKIPJZJi8hBrF4idCLms4CG9QtK7qBl1boi5ODzFpjswb5JPmHCbMpjaYzg==",
+-      "dev": true
++      "integrity": "sha512-zz06S8t0ozoDXMG+ube26zeCTNXcKIPJZJi8hBrF4idCLms4CG9QtK7qBl1boi5ODzFpjswb5JPmHCbMpjaYzg=="
+     },
+     "node_modules/is-bigint": {
+       "version": "1.0.4",
+@@ -10010,7 +10588,6 @@
+     "node_modules/is-core-module": {
+       "version": "2.8.1",
+       "integrity": "sha512-SdNCUs284hr40hFTFP6l0IfZ/RSrMXF3qgoRHd3/79unUTvrFO/JoXwkGm+5J/Oe3E/b5GsnG330uUNgRpu1PA==",
+-      "dev": true,
+       "dependencies": {
+         "has": "^1.0.3"
+       },
+@@ -12681,8 +13258,7 @@
+     },
+     "node_modules/json-parse-even-better-errors": {
+       "version": "2.3.1",
+-      "integrity": "sha512-xyFwyhro/JEof6Ghe2iz2NcXoj2sloNsWr/XsERDK/oiPCfaNhl5ONfp+jQdAZRQQ0IJWNzH9zIZF7li91kh2w==",
+-      "dev": true
++      "integrity": "sha512-xyFwyhro/JEof6Ghe2iz2NcXoj2sloNsWr/XsERDK/oiPCfaNhl5ONfp+jQdAZRQQ0IJWNzH9zIZF7li91kh2w=="
+     },
+     "node_modules/json-schema-traverse": {
+       "version": "0.4.1",
+@@ -12884,8 +13460,7 @@
+     },
+     "node_modules/lines-and-columns": {
+       "version": "1.2.4",
+-      "integrity": "sha512-7ylylesZQ/PV29jhEDl3Ufjo6ZX7gCqJr5F7PKrqc93v7fzSymt1BpwEU8nAUXs8qzzvqhbjhK5QZg6Mt/HkBg==",
+-      "dev": true
++      "integrity": "sha512-7ylylesZQ/PV29jhEDl3Ufjo6ZX7gCqJr5F7PKrqc93v7fzSymt1BpwEU8nAUXs8qzzvqhbjhK5QZg6Mt/HkBg=="
+     },
+     "node_modules/loader-runner": {
+       "version": "4.2.0",
+@@ -14696,7 +15271,6 @@
+     "node_modules/parent-module": {
+       "version": "1.0.1",
+       "integrity": "sha512-GQ2EWRpQV8/o+Aw8YqtfZZPfNRWZYkbidE9k5rpl/hC3vtHHBfGm2Ifi6qWV+coDGkrUKZAxE3Lot5kcsRlh+g==",
+-      "dev": true,
+       "dependencies": {
+         "callsites": "^3.0.0"
+       },
+@@ -14707,7 +15281,6 @@
+     "node_modules/parse-json": {
+       "version": "5.2.0",
+       "integrity": "sha512-ayCKvm/phCGxOkYRSCM82iDwct8/EonSEgCSxWxD7ve6jHggsFl4fZVQBPRNgQoKiuV/odhFrGzQXZwbifC8Rg==",
+-      "dev": true,
+       "dependencies": {
+         "@babel/code-frame": "^7.0.0",
+         "error-ex": "^1.3.1",
+@@ -14784,8 +15357,7 @@
+     },
+     "node_modules/path-parse": {
+       "version": "1.0.7",
+-      "integrity": "sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw==",
+-      "dev": true
++      "integrity": "sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw=="
+     },
+     "node_modules/path-to-regexp": {
+       "version": "1.8.0",
+@@ -14797,7 +15369,6 @@
+     "node_modules/path-type": {
+       "version": "4.0.0",
+       "integrity": "sha512-gDKb8aZMDeD/tZWs9P6+q0J9Mwkdl6xMV8TjnGP3qJVJ06bdMgkbBlLU8IdfOsIsFz2BW1rNVT3XuNEl8zPAvw==",
+-      "dev": true,
+       "engines": {
+         "node": ">=8"
+       }
+@@ -16486,7 +17057,6 @@
+     "node_modules/resolve": {
+       "version": "1.22.0",
+       "integrity": "sha512-Hhtrw0nLeSrFQ7phPp4OOcVjLPIeMnRlr5mcnVuMe7M/7eBn98A3hmFRLoFo3DLZkivSYwhRUJTyPyWAk56WLw==",
+-      "dev": true,
+       "dependencies": {
+         "is-core-module": "^2.8.1",
+         "path-parse": "^1.0.7",
+@@ -16726,7 +17296,6 @@
+     "node_modules/semver": {
+       "version": "6.3.0",
+       "integrity": "sha512-b39TBaTSfV6yBrapU89p5fKekE2m/NwnDocOVruQFS1/veMgdzuPcnOM34M6CwxW8jH/lxEa5rBoDeUwu5HHTw==",
+-      "dev": true,
+       "bin": {
+         "semver": "bin/semver.js"
+       }
+@@ -17332,6 +17901,11 @@
+         "react-is": ">= 16.8.0"
+       }
+     },
++    "node_modules/stylis": {
++      "version": "4.0.13",
++      "resolved": "https://registry.npmjs.org/stylis/-/stylis-4.0.13.tgz",
++      "integrity": "sha512-xGPXiFVl4YED9Jh7Euv2V220mriG9u4B2TA6Ybjc1catrstKD2PpIdU3U0RKpkVBC2EhmL/F0sPCr9vrFTNRag=="
++    },
+     "node_modules/supports-color": {
+       "version": "5.5.0",
+       "integrity": "sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==",
+@@ -17379,7 +17953,6 @@
+     "node_modules/supports-preserve-symlinks-flag": {
+       "version": "1.0.0",
+       "integrity": "sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w==",
+-      "dev": true,
+       "engines": {
+         "node": ">= 0.4"
+       },
+@@ -18815,7 +19388,6 @@
+     "node_modules/yaml": {
+       "version": "1.10.2",
+       "integrity": "sha512-r3vXyErRCYJ7wg28yvBY5VSoAF8ZvlcW9/BwUzEtUsjvX/DKs24dIkuwjtuprwJJHsbyUbLApepYTR1BN4uHrg==",
+-      "dev": true,
+       "engines": {
+         "node": ">= 6"
+       }
+@@ -18915,13 +19487,11 @@
+     },
+     "@babel/compat-data": {
+       "version": "7.16.8",
+-      "integrity": "sha512-m7OkX0IdKLKPpBlJtF561YJal5y/jyI5fNfWbPxh2D/nbzzGI4qRyrD8xO2jB24u7l+5I2a43scCG2IrfjC50Q==",
+-      "dev": true
++      "integrity": "sha512-m7OkX0IdKLKPpBlJtF561YJal5y/jyI5fNfWbPxh2D/nbzzGI4qRyrD8xO2jB24u7l+5I2a43scCG2IrfjC50Q=="
+     },
+     "@babel/core": {
+       "version": "7.16.0",
+       "integrity": "sha512-mYZEvshBRHGsIAiyH5PzCFTCfbWfoYbO/jcSdXQSUQu1/pW0xDZAUP7KEc32heqWTAfAHhV9j1vH8Sav7l+JNQ==",
+-      "dev": true,
+       "requires": {
+         "@babel/code-frame": "^7.16.0",
+         "@babel/generator": "^7.16.0",
+@@ -18943,7 +19513,6 @@
+         "@babel/helper-compilation-targets": {
+           "version": "7.16.7",
+           "integrity": "sha512-mGojBwIWcwGD6rfqgRXVlVYmPAv7eOpIemUG3dGnDdCY4Pae70ROij3XmfrH6Fa1h1aiDylpglbZyktfzyo/hA==",
+-          "dev": true,
+           "requires": {
+             "@babel/compat-data": "^7.16.4",
+             "@babel/helper-validator-option": "^7.16.7",
+@@ -19034,7 +19603,6 @@
+     "@babel/helper-module-transforms": {
+       "version": "7.16.7",
+       "integrity": "sha512-gaqtLDxJEFCeQbYp9aLAefjhkKdjKcdh6DB7jniIGU3Pz52WAmP268zK0VgPz9hUNkMSYeH976K2/Y6yPadpng==",
+-      "dev": true,
+       "requires": {
+         "@babel/helper-environment-visitor": "^7.16.7",
+         "@babel/helper-module-imports": "^7.16.7",
+@@ -19057,8 +19625,7 @@
+     "@babel/helper-plugin-utils": {
+       "version": "7.18.9",
+       "resolved": "https://registry.npmjs.org/@babel/helper-plugin-utils/-/helper-plugin-utils-7.18.9.tgz",
+-      "integrity": "sha512-aBXPT3bmtLryXaoJLyYPXPlSD4p1ld9aYeR+sJNOZjJJGiOpb+fKfh3NkcCu7J54nUJwCERPBExCCpyCOHnu/w==",
+-      "dev": true
++      "integrity": "sha512-aBXPT3bmtLryXaoJLyYPXPlSD4p1ld9aYeR+sJNOZjJJGiOpb+fKfh3NkcCu7J54nUJwCERPBExCCpyCOHnu/w=="
+     },
+     "@babel/helper-remap-async-to-generator": {
+       "version": "7.16.8",
+@@ -19085,7 +19652,6 @@
+     "@babel/helper-simple-access": {
+       "version": "7.16.7",
+       "integrity": "sha512-ZIzHVyoeLMvXMN/vok/a4LWRy8G2v205mNP0XOuf9XRLyX5/u9CnVulUtDgUTama3lT+bf/UqucuZjqiGuTS1g==",
+-      "dev": true,
+       "requires": {
+         "@babel/types": "^7.16.7"
+       }
+@@ -19111,8 +19677,7 @@
+     },
+     "@babel/helper-validator-option": {
+       "version": "7.16.7",
+-      "integrity": "sha512-TRtenOuRUVo9oIQGPC5G9DgK4743cdxvtOw0weQNpZXaS16SCBi5MNjZF8vba3ETURjZpTbVn7Vvcf2eAwFozQ==",
+-      "dev": true
++      "integrity": "sha512-TRtenOuRUVo9oIQGPC5G9DgK4743cdxvtOw0weQNpZXaS16SCBi5MNjZF8vba3ETURjZpTbVn7Vvcf2eAwFozQ=="
+     },
+     "@babel/helper-wrap-function": {
+       "version": "7.16.8",
+@@ -19128,7 +19693,6 @@
+     "@babel/helpers": {
+       "version": "7.16.7",
+       "integrity": "sha512-9ZDoqtfY7AuEOt3cxchfii6C7GDyyMBffktR5B2jvWv8u2+efwvpnVKXMWzNehqy68tKgAfSwfdw/lWpthS2bw==",
+-      "dev": true,
+       "requires": {
+         "@babel/template": "^7.16.7",
+         "@babel/traverse": "^7.16.7",
+@@ -19218,6 +19782,14 @@
+         "@babel/helper-plugin-utils": "^7.8.0"
+       }
+     },
++    "@babel/plugin-syntax-jsx": {
++      "version": "7.18.6",
++      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-jsx/-/plugin-syntax-jsx-7.18.6.tgz",
++      "integrity": "sha512-6mmljtAedFGTWu2p/8WIORGwy+61PLgOMPOdazc7YoJ9ZCWUyFy3A6CpPkRKLKD1ToAesxX8KGEViAiLo9N+7Q==",
++      "requires": {
++        "@babel/helper-plugin-utils": "^7.18.6"
++      }
++    },
+     "@babel/plugin-syntax-logical-assignment-operators": {
+       "version": "7.10.4",
+       "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-logical-assignment-operators/-/plugin-syntax-logical-assignment-operators-7.10.4.tgz",
+@@ -20195,16 +20767,6 @@
+             "@babel/helper-plugin-utils": "^7.16.7",
+             "@babel/plugin-syntax-jsx": "^7.16.7",
+             "@babel/types": "^7.16.7"
+-          },
+-          "dependencies": {
+-            "@babel/plugin-syntax-jsx": {
+-              "version": "7.16.7",
+-              "integrity": "sha512-Esxmk7YjA8QysKeT3VhTXvF6y77f/a91SIs4pWb4H2eWGQkCKFgQaG6hdoEVZtGsrAcb2K5BW66XsOErD4WU3Q==",
+-              "dev": true,
+-              "requires": {
+-                "@babel/helper-plugin-utils": "^7.16.7"
+-              }
+-            }
+           }
+         },
+         "@babel/plugin-transform-react-jsx-development": {
+@@ -20266,8 +20828,9 @@
+       }
+     },
+     "@babel/runtime": {
+-      "version": "7.16.7",
+-      "integrity": "sha512-9E9FJowqAsytyOY6LG+1KuueckRL+aQW+mKvXRXnuFGyRAyepJPmEo9vgMfXUA6O9u3IeEdv9MAkppFcaQwogQ==",
++      "version": "7.18.9",
++      "resolved": "https://registry.npmjs.org/@babel/runtime/-/runtime-7.18.9.tgz",
++      "integrity": "sha512-lkqXDcvlFT5rvEjiu6+QYO+1GXrEHRo2LOtS7E4GtX5ESIZOgepqsZBVIj6Pv+a6zqsya9VCgiK1KAK4BvJDAw==",
+       "requires": {
+         "regenerator-runtime": "^0.13.4"
+       }
+@@ -20618,6 +21181,61 @@
+         }
+       }
+     },
++    "@emotion/babel-plugin": {
++      "version": "11.10.2",
++      "resolved": "https://registry.npmjs.org/@emotion/babel-plugin/-/babel-plugin-11.10.2.tgz",
++      "integrity": "sha512-xNQ57njWTFVfPAc3cjfuaPdsgLp5QOSuRsj9MA6ndEhH/AzuZM86qIQzt6rq+aGBwj3n5/TkLmU5lhAfdRmogA==",
++      "requires": {
++        "@babel/helper-module-imports": "^7.16.7",
++        "@babel/plugin-syntax-jsx": "^7.17.12",
++        "@babel/runtime": "^7.18.3",
++        "@emotion/hash": "^0.9.0",
++        "@emotion/memoize": "^0.8.0",
++        "@emotion/serialize": "^1.1.0",
++        "babel-plugin-macros": "^3.1.0",
++        "convert-source-map": "^1.5.0",
++        "escape-string-regexp": "^4.0.0",
++        "find-root": "^1.1.0",
++        "source-map": "^0.5.7",
++        "stylis": "4.0.13"
++      },
++      "dependencies": {
++        "@emotion/memoize": {
++          "version": "0.8.0",
++          "resolved": "https://registry.npmjs.org/@emotion/memoize/-/memoize-0.8.0.tgz",
++          "integrity": "sha512-G/YwXTkv7Den9mXDO7AhLWkE3q+I92B+VqAE+dYG4NGPaHZGvt3G8Q0p9vmE+sq7rTGphUbAvmQ9YpbfMQGGlA=="
++        },
++        "escape-string-regexp": {
++          "version": "4.0.0",
++          "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-4.0.0.tgz",
++          "integrity": "sha512-TtpcNJ3XAzx3Gq8sWRzJaVajRs0uVxA2YAkdb1jm2YkPz4G6egUFAyA3n5vtEIZefPk5Wa4UXbKuS5fKkJWdgA=="
++        }
++      }
++    },
++    "@emotion/cache": {
++      "version": "11.10.3",
++      "resolved": "https://registry.npmjs.org/@emotion/cache/-/cache-11.10.3.tgz",
++      "integrity": "sha512-Psmp/7ovAa8appWh3g51goxu/z3iVms7JXOreq136D8Bbn6dYraPnmL6mdM8GThEx9vwSn92Fz+mGSjBzN8UPQ==",
++      "requires": {
++        "@emotion/memoize": "^0.8.0",
++        "@emotion/sheet": "^1.2.0",
++        "@emotion/utils": "^1.2.0",
++        "@emotion/weak-memoize": "^0.3.0",
++        "stylis": "4.0.13"
++      },
++      "dependencies": {
++        "@emotion/memoize": {
++          "version": "0.8.0",
++          "resolved": "https://registry.npmjs.org/@emotion/memoize/-/memoize-0.8.0.tgz",
++          "integrity": "sha512-G/YwXTkv7Den9mXDO7AhLWkE3q+I92B+VqAE+dYG4NGPaHZGvt3G8Q0p9vmE+sq7rTGphUbAvmQ9YpbfMQGGlA=="
++        }
++      }
++    },
++    "@emotion/hash": {
++      "version": "0.9.0",
++      "resolved": "https://registry.npmjs.org/@emotion/hash/-/hash-0.9.0.tgz",
++      "integrity": "sha512-14FtKiHhy2QoPIzdTcvh//8OyBlknNs2nXRwIhG904opCby3l+9Xaf/wuPvICBF0rc1ZCNBd3nKe9cd2mecVkQ=="
++    },
+     "@emotion/is-prop-valid": {
+       "version": "0.8.8",
+       "integrity": "sha512-u5WtneEAr5IDG2Wv65yhunPSMLIpuKsbuOktRojfrEiEvRyC85LgPMZI63cr7NUqT8ZIGdSVg8ZKGxIug4lXcA==",
+@@ -20629,6 +21247,76 @@
+       "version": "0.7.4",
+       "integrity": "sha512-Ja/Vfqe3HpuzRsG1oBtWTHk2PGZ7GR+2Vz5iYGelAw8dx32K0y7PjVuxK6z1nMpZOqAFsRUPCkK1YjJ56qJlgw=="
+     },
++    "@emotion/react": {
++      "version": "11.10.0",
++      "resolved": "https://registry.npmjs.org/@emotion/react/-/react-11.10.0.tgz",
++      "integrity": "sha512-K6z9zlHxxBXwN8TcpwBKcEsBsOw4JWCCmR+BeeOWgqp8GIU1yA2Odd41bwdAAr0ssbQrbJbVnndvv7oiv1bZeQ==",
++      "requires": {
++        "@babel/runtime": "^7.18.3",
++        "@emotion/babel-plugin": "^11.10.0",
++        "@emotion/cache": "^11.10.0",
++        "@emotion/serialize": "^1.1.0",
++        "@emotion/utils": "^1.2.0",
++        "@emotion/weak-memoize": "^0.3.0",
++        "hoist-non-react-statics": "^3.3.1"
++      }
++    },
++    "@emotion/serialize": {
++      "version": "1.1.0",
++      "resolved": "https://registry.npmjs.org/@emotion/serialize/-/serialize-1.1.0.tgz",
++      "integrity": "sha512-F1ZZZW51T/fx+wKbVlwsfchr5q97iW8brAnXmsskz4d0hVB4O3M/SiA3SaeH06x02lSNzkkQv+n3AX3kCXKSFA==",
++      "requires": {
++        "@emotion/hash": "^0.9.0",
++        "@emotion/memoize": "^0.8.0",
++        "@emotion/unitless": "^0.8.0",
++        "@emotion/utils": "^1.2.0",
++        "csstype": "^3.0.2"
++      },
++      "dependencies": {
++        "@emotion/memoize": {
++          "version": "0.8.0",
++          "resolved": "https://registry.npmjs.org/@emotion/memoize/-/memoize-0.8.0.tgz",
++          "integrity": "sha512-G/YwXTkv7Den9mXDO7AhLWkE3q+I92B+VqAE+dYG4NGPaHZGvt3G8Q0p9vmE+sq7rTGphUbAvmQ9YpbfMQGGlA=="
++        },
++        "@emotion/unitless": {
++          "version": "0.8.0",
++          "resolved": "https://registry.npmjs.org/@emotion/unitless/-/unitless-0.8.0.tgz",
++          "integrity": "sha512-VINS5vEYAscRl2ZUDiT3uMPlrFQupiKgHz5AA4bCH1miKBg4qtwkim1qPmJj/4WG6TreYMY111rEFsjupcOKHw=="
++        }
++      }
++    },
++    "@emotion/sheet": {
++      "version": "1.2.0",
++      "resolved": "https://registry.npmjs.org/@emotion/sheet/-/sheet-1.2.0.tgz",
++      "integrity": "sha512-OiTkRgpxescko+M51tZsMq7Puu/KP55wMT8BgpcXVG2hqXc0Vo0mfymJ/Uj24Hp0i083ji/o0aLddh08UEjq8w=="
++    },
++    "@emotion/styled": {
++      "version": "11.10.0",
++      "resolved": "https://registry.npmjs.org/@emotion/styled/-/styled-11.10.0.tgz",
++      "integrity": "sha512-V9oaEH6V4KePeQpgUE83i8ht+4Ri3E8Djp/ZPJ4DQlqWhSKITvgzlR3/YQE2hdfP4Jw3qVRkANJz01LLqK9/TA==",
++      "requires": {
++        "@babel/runtime": "^7.18.3",
++        "@emotion/babel-plugin": "^11.10.0",
++        "@emotion/is-prop-valid": "^1.2.0",
++        "@emotion/serialize": "^1.1.0",
++        "@emotion/utils": "^1.2.0"
++      },
++      "dependencies": {
++        "@emotion/is-prop-valid": {
++          "version": "1.2.0",
++          "resolved": "https://registry.npmjs.org/@emotion/is-prop-valid/-/is-prop-valid-1.2.0.tgz",
++          "integrity": "sha512-3aDpDprjM0AwaxGE09bOPkNxHpBd+kA6jty3RnaEXdweX1DF1U3VQpPYb0g1IStAuK7SVQ1cy+bNBBKp4W3Fjg==",
++          "requires": {
++            "@emotion/memoize": "^0.8.0"
++          }
++        },
++        "@emotion/memoize": {
++          "version": "0.8.0",
++          "resolved": "https://registry.npmjs.org/@emotion/memoize/-/memoize-0.8.0.tgz",
++          "integrity": "sha512-G/YwXTkv7Den9mXDO7AhLWkE3q+I92B+VqAE+dYG4NGPaHZGvt3G8Q0p9vmE+sq7rTGphUbAvmQ9YpbfMQGGlA=="
++        }
++      }
++    },
+     "@emotion/stylis": {
+       "version": "0.8.5",
+       "integrity": "sha512-h6KtPihKFn3T9fuIrwvXXUOwlx3rfUvfZIcP5a6rh8Y7zjE3O06hT5Ss4S/YI1AYhuZ1kjaE/5EaOOI2NqSylQ=="
+@@ -20637,6 +21325,16 @@
+       "version": "0.7.5",
+       "integrity": "sha512-OWORNpfjMsSSUBVrRBVGECkhWcULOAJz9ZW8uK9qgxD+87M7jHRcvh/A96XXNhXTLmKcoYSQtBEX7lHMO7YRwg=="
+     },
++    "@emotion/utils": {
++      "version": "1.2.0",
++      "resolved": "https://registry.npmjs.org/@emotion/utils/-/utils-1.2.0.tgz",
++      "integrity": "sha512-sn3WH53Kzpw8oQ5mgMmIzzyAaH2ZqFEbozVVBSYp538E06OSE6ytOp7pRAjNQR+Q/orwqdQYJSe2m3hCOeznkw=="
++    },
++    "@emotion/weak-memoize": {
++      "version": "0.3.0",
++      "resolved": "https://registry.npmjs.org/@emotion/weak-memoize/-/weak-memoize-0.3.0.tgz",
++      "integrity": "sha512-AHPmaAx+RYfZz0eYu6Gviiagpmiyw98ySSlQvCUhVGDRtDFe4DBS0x1bSjdF3gqUDYOczB+yYvBTtEylYSdRhg=="
++    },
+     "@endemolshinegroup/cosmiconfig-typescript-loader": {
+       "version": "3.0.2",
+       "integrity": "sha512-QRVtqJuS1mcT56oHpVegkKBlgtWjXw/gHNWO3eL9oyB5Sc7HBoc2OLG/nYpVfT/Jejvo3NUrD0Udk7XgoyDKkA==",
+@@ -21335,6 +22033,268 @@
+         "@jridgewell/sourcemap-codec": "^1.4.10"
+       }
+     },
++    "@mui/base": {
++      "version": "5.0.0-alpha.94",
++      "resolved": "https://registry.npmjs.org/@mui/base/-/base-5.0.0-alpha.94.tgz",
++      "integrity": "sha512-IJXmgTF07H1Iv5zjDV7zJZGUmb9cN8ERzd2dgA1akh6NWZgwyIGyQx+Au9+QSDoM5vN3FqZvU/0YCU6inUwgeQ==",
++      "requires": {
++        "@babel/runtime": "^7.17.2",
++        "@emotion/is-prop-valid": "^1.2.0",
++        "@mui/types": "^7.1.5",
++        "@mui/utils": "^5.9.3",
++        "@popperjs/core": "^2.11.6",
++        "clsx": "^1.2.1",
++        "prop-types": "^15.8.1",
++        "react-is": "^18.2.0"
++      },
++      "dependencies": {
++        "@emotion/is-prop-valid": {
++          "version": "1.2.0",
++          "resolved": "https://registry.npmjs.org/@emotion/is-prop-valid/-/is-prop-valid-1.2.0.tgz",
++          "integrity": "sha512-3aDpDprjM0AwaxGE09bOPkNxHpBd+kA6jty3RnaEXdweX1DF1U3VQpPYb0g1IStAuK7SVQ1cy+bNBBKp4W3Fjg==",
++          "requires": {
++            "@emotion/memoize": "^0.8.0"
++          }
++        },
++        "@emotion/memoize": {
++          "version": "0.8.0",
++          "resolved": "https://registry.npmjs.org/@emotion/memoize/-/memoize-0.8.0.tgz",
++          "integrity": "sha512-G/YwXTkv7Den9mXDO7AhLWkE3q+I92B+VqAE+dYG4NGPaHZGvt3G8Q0p9vmE+sq7rTGphUbAvmQ9YpbfMQGGlA=="
++        },
++        "@popperjs/core": {
++          "version": "2.11.6",
++          "resolved": "https://registry.npmjs.org/@popperjs/core/-/core-2.11.6.tgz",
++          "integrity": "sha512-50/17A98tWUfQ176raKiOGXuYpLyyVMkxxG6oylzL3BPOlA6ADGdK7EYunSa4I064xerltq9TGXs8HmOk5E+vw=="
++        },
++        "prop-types": {
++          "version": "15.8.1",
++          "resolved": "https://registry.npmjs.org/prop-types/-/prop-types-15.8.1.tgz",
++          "integrity": "sha512-oj87CgZICdulUohogVAR7AjlC0327U4el4L6eAvOqCeudMDVU0NThNaV+b9Df4dXgSP1gXMTnPdhfe/2qDH5cg==",
++          "requires": {
++            "loose-envify": "^1.4.0",
++            "object-assign": "^4.1.1",
++            "react-is": "^16.13.1"
++          },
++          "dependencies": {
++            "react-is": {
++              "version": "16.13.1",
++              "resolved": "https://registry.npmjs.org/react-is/-/react-is-16.13.1.tgz",
++              "integrity": "sha512-24e6ynE2H+OKt4kqsOvNd8kBpV65zoxbA4BVsEOB3ARVWQki/DHzaUoC5KuON/BiccDaCCTZBuOcfZs70kR8bQ=="
++            }
++          }
++        },
++        "react-is": {
++          "version": "18.2.0",
++          "resolved": "https://registry.npmjs.org/react-is/-/react-is-18.2.0.tgz",
++          "integrity": "sha512-xWGDIW6x921xtzPkhiULtthJHoJvBbF3q26fzloPCK0hsvxtPVelvftw3zjbHWSkR2km9Z+4uxbDDK/6Zw9B8w=="
++        }
++      }
++    },
++    "@mui/core-downloads-tracker": {
++      "version": "5.10.2",
++      "resolved": "https://registry.npmjs.org/@mui/core-downloads-tracker/-/core-downloads-tracker-5.10.2.tgz",
++      "integrity": "sha512-1guoGvL3QZ7VjA3y9zye9Rpm+jz18rVZIo3AauTGyW5ntDMxr/cR0M18nuc/NH2KqpMt+coh4NwPEO1uPuKM5w=="
++    },
++    "@mui/icons-material": {
++      "version": "5.10.2",
++      "resolved": "https://registry.npmjs.org/@mui/icons-material/-/icons-material-5.10.2.tgz",
++      "integrity": "sha512-p7ku+43JeKRz0ONGzPZbRXZRbE7vCKP1Cr8l/Yj9sUIGVQ6CM/m37u6udacJZkDXD+G2FoxJPixrVvvjx6f64w==",
++      "requires": {
++        "@babel/runtime": "^7.17.2"
++      }
++    },
++    "@mui/material": {
++      "version": "5.10.2",
++      "resolved": "https://registry.npmjs.org/@mui/material/-/material-5.10.2.tgz",
++      "integrity": "sha512-ay43fuQLXROXkxFd6tqbj394Hu8BlbmpCdEDFtAisijulla2ZLfQa24pjhdX+56HrHReB3cZsf/sRq+DSfIgiA==",
++      "requires": {
++        "@babel/runtime": "^7.17.2",
++        "@mui/base": "5.0.0-alpha.94",
++        "@mui/core-downloads-tracker": "^5.10.2",
++        "@mui/system": "^5.10.2",
++        "@mui/types": "^7.1.5",
++        "@mui/utils": "^5.9.3",
++        "@types/react-transition-group": "^4.4.5",
++        "clsx": "^1.2.1",
++        "csstype": "^3.1.0",
++        "prop-types": "^15.8.1",
++        "react-is": "^18.2.0",
++        "react-transition-group": "^4.4.5"
++      },
++      "dependencies": {
++        "dom-helpers": {
++          "version": "5.2.1",
++          "resolved": "https://registry.npmjs.org/dom-helpers/-/dom-helpers-5.2.1.tgz",
++          "integrity": "sha512-nRCa7CK3VTrM2NmGkIy4cbK7IZlgBE/PYMn55rrXefr5xXDP0LdtfPnblFDoVdcAfslJ7or6iqAUnx0CCGIWQA==",
++          "requires": {
++            "@babel/runtime": "^7.8.7",
++            "csstype": "^3.0.2"
++          }
++        },
++        "prop-types": {
++          "version": "15.8.1",
++          "resolved": "https://registry.npmjs.org/prop-types/-/prop-types-15.8.1.tgz",
++          "integrity": "sha512-oj87CgZICdulUohogVAR7AjlC0327U4el4L6eAvOqCeudMDVU0NThNaV+b9Df4dXgSP1gXMTnPdhfe/2qDH5cg==",
++          "requires": {
++            "loose-envify": "^1.4.0",
++            "object-assign": "^4.1.1",
++            "react-is": "^16.13.1"
++          },
++          "dependencies": {
++            "react-is": {
++              "version": "16.13.1",
++              "resolved": "https://registry.npmjs.org/react-is/-/react-is-16.13.1.tgz",
++              "integrity": "sha512-24e6ynE2H+OKt4kqsOvNd8kBpV65zoxbA4BVsEOB3ARVWQki/DHzaUoC5KuON/BiccDaCCTZBuOcfZs70kR8bQ=="
++            }
++          }
++        },
++        "react-is": {
++          "version": "18.2.0",
++          "resolved": "https://registry.npmjs.org/react-is/-/react-is-18.2.0.tgz",
++          "integrity": "sha512-xWGDIW6x921xtzPkhiULtthJHoJvBbF3q26fzloPCK0hsvxtPVelvftw3zjbHWSkR2km9Z+4uxbDDK/6Zw9B8w=="
++        },
++        "react-transition-group": {
++          "version": "4.4.5",
++          "resolved": "https://registry.npmjs.org/react-transition-group/-/react-transition-group-4.4.5.tgz",
++          "integrity": "sha512-pZcd1MCJoiKiBR2NRxeCRg13uCXbydPnmB4EOeRrY7480qNWO8IIgQG6zlDkm6uRMsURXPuKq0GWtiM59a5Q6g==",
++          "requires": {
++            "@babel/runtime": "^7.5.5",
++            "dom-helpers": "^5.0.1",
++            "loose-envify": "^1.4.0",
++            "prop-types": "^15.6.2"
++          }
++        }
++      }
++    },
++    "@mui/private-theming": {
++      "version": "5.9.3",
++      "resolved": "https://registry.npmjs.org/@mui/private-theming/-/private-theming-5.9.3.tgz",
++      "integrity": "sha512-Ys3WO39WqoGciGX9k5AIi/k2zJhlydv4FzlEEwtw9OqdMaV0ydK/TdZekKzjP9sTI/JcdAP3H5DWtUaPLQJjWg==",
++      "requires": {
++        "@babel/runtime": "^7.17.2",
++        "@mui/utils": "^5.9.3",
++        "prop-types": "^15.8.1"
++      },
++      "dependencies": {
++        "prop-types": {
++          "version": "15.8.1",
++          "resolved": "https://registry.npmjs.org/prop-types/-/prop-types-15.8.1.tgz",
++          "integrity": "sha512-oj87CgZICdulUohogVAR7AjlC0327U4el4L6eAvOqCeudMDVU0NThNaV+b9Df4dXgSP1gXMTnPdhfe/2qDH5cg==",
++          "requires": {
++            "loose-envify": "^1.4.0",
++            "object-assign": "^4.1.1",
++            "react-is": "^16.13.1"
++          }
++        },
++        "react-is": {
++          "version": "16.13.1",
++          "resolved": "https://registry.npmjs.org/react-is/-/react-is-16.13.1.tgz",
++          "integrity": "sha512-24e6ynE2H+OKt4kqsOvNd8kBpV65zoxbA4BVsEOB3ARVWQki/DHzaUoC5KuON/BiccDaCCTZBuOcfZs70kR8bQ=="
++        }
++      }
++    },
++    "@mui/styled-engine": {
++      "version": "5.10.2",
++      "resolved": "https://registry.npmjs.org/@mui/styled-engine/-/styled-engine-5.10.2.tgz",
++      "integrity": "sha512-YqnptNQ2E0cWwOTmLCEvrddiiR/neUfn2AD/4TDUXZu8B2n7NfDb9d3bAUfWZV+KmulQdAedoaZDqyXBFGLdbQ==",
++      "requires": {
++        "@babel/runtime": "^7.17.2",
++        "@emotion/cache": "^11.10.1",
++        "csstype": "^3.1.0",
++        "prop-types": "^15.8.1"
++      },
++      "dependencies": {
++        "prop-types": {
++          "version": "15.8.1",
++          "resolved": "https://registry.npmjs.org/prop-types/-/prop-types-15.8.1.tgz",
++          "integrity": "sha512-oj87CgZICdulUohogVAR7AjlC0327U4el4L6eAvOqCeudMDVU0NThNaV+b9Df4dXgSP1gXMTnPdhfe/2qDH5cg==",
++          "requires": {
++            "loose-envify": "^1.4.0",
++            "object-assign": "^4.1.1",
++            "react-is": "^16.13.1"
++          }
++        },
++        "react-is": {
++          "version": "16.13.1",
++          "resolved": "https://registry.npmjs.org/react-is/-/react-is-16.13.1.tgz",
++          "integrity": "sha512-24e6ynE2H+OKt4kqsOvNd8kBpV65zoxbA4BVsEOB3ARVWQki/DHzaUoC5KuON/BiccDaCCTZBuOcfZs70kR8bQ=="
++        }
++      }
++    },
++    "@mui/system": {
++      "version": "5.10.2",
++      "resolved": "https://registry.npmjs.org/@mui/system/-/system-5.10.2.tgz",
++      "integrity": "sha512-YudwJhLcEoQiwCAmzeMr9P3ISiVGNsxBIIPzFxaGwJ8+mMrx3qoPVOV2sfm0ZuNiQuABshEw4KqHa5ftNC+pOQ==",
++      "requires": {
++        "@babel/runtime": "^7.17.2",
++        "@mui/private-theming": "^5.9.3",
++        "@mui/styled-engine": "^5.10.2",
++        "@mui/types": "^7.1.5",
++        "@mui/utils": "^5.9.3",
++        "clsx": "^1.2.1",
++        "csstype": "^3.1.0",
++        "prop-types": "^15.8.1"
++      },
++      "dependencies": {
++        "prop-types": {
++          "version": "15.8.1",
++          "resolved": "https://registry.npmjs.org/prop-types/-/prop-types-15.8.1.tgz",
++          "integrity": "sha512-oj87CgZICdulUohogVAR7AjlC0327U4el4L6eAvOqCeudMDVU0NThNaV+b9Df4dXgSP1gXMTnPdhfe/2qDH5cg==",
++          "requires": {
++            "loose-envify": "^1.4.0",
++            "object-assign": "^4.1.1",
++            "react-is": "^16.13.1"
++          }
++        },
++        "react-is": {
++          "version": "16.13.1",
++          "resolved": "https://registry.npmjs.org/react-is/-/react-is-16.13.1.tgz",
++          "integrity": "sha512-24e6ynE2H+OKt4kqsOvNd8kBpV65zoxbA4BVsEOB3ARVWQki/DHzaUoC5KuON/BiccDaCCTZBuOcfZs70kR8bQ=="
++        }
++      }
++    },
++    "@mui/types": {
++      "version": "7.1.5",
++      "resolved": "https://registry.npmjs.org/@mui/types/-/types-7.1.5.tgz",
++      "integrity": "sha512-HnRXrxgHJYJcT8ZDdDCQIlqk0s0skOKD7eWs9mJgBUu70hyW4iA6Kiv3yspJR474RFH8hysKR65VVSzUSzkuwA==",
++      "requires": {}
++    },
++    "@mui/utils": {
++      "version": "5.9.3",
++      "resolved": "https://registry.npmjs.org/@mui/utils/-/utils-5.9.3.tgz",
++      "integrity": "sha512-l0N5bcrenE9hnwZ/jPecpIRqsDFHkPXoFUcmkgysaJwVZzJ3yQkGXB47eqmXX5yyGrSc6HksbbqXEaUya+siew==",
++      "requires": {
++        "@babel/runtime": "^7.17.2",
++        "@types/prop-types": "^15.7.5",
++        "@types/react-is": "^16.7.1 || ^17.0.0",
++        "prop-types": "^15.8.1",
++        "react-is": "^18.2.0"
++      },
++      "dependencies": {
++        "prop-types": {
++          "version": "15.8.1",
++          "resolved": "https://registry.npmjs.org/prop-types/-/prop-types-15.8.1.tgz",
++          "integrity": "sha512-oj87CgZICdulUohogVAR7AjlC0327U4el4L6eAvOqCeudMDVU0NThNaV+b9Df4dXgSP1gXMTnPdhfe/2qDH5cg==",
++          "requires": {
++            "loose-envify": "^1.4.0",
++            "object-assign": "^4.1.1",
++            "react-is": "^16.13.1"
++          },
++          "dependencies": {
++            "react-is": {
++              "version": "16.13.1",
++              "resolved": "https://registry.npmjs.org/react-is/-/react-is-16.13.1.tgz",
++              "integrity": "sha512-24e6ynE2H+OKt4kqsOvNd8kBpV65zoxbA4BVsEOB3ARVWQki/DHzaUoC5KuON/BiccDaCCTZBuOcfZs70kR8bQ=="
++            }
++          }
++        },
++        "react-is": {
++          "version": "18.2.0",
++          "resolved": "https://registry.npmjs.org/react-is/-/react-is-18.2.0.tgz",
++          "integrity": "sha512-xWGDIW6x921xtzPkhiULtthJHoJvBbF3q26fzloPCK0hsvxtPVelvftw3zjbHWSkR2km9Z+4uxbDDK/6Zw9B8w=="
++        }
++      }
++    },
+     "@nodelib/fs.scandir": {
+       "version": "2.1.5",
+       "integrity": "sha512-vq24Bq3ym5HEQm2NKCr3yXDwjc7vTsEThRDnkp2DK9p1uqLR+DHurm/NOTo0KG7HYHU7eppKZj3MyqYuMBf62g==",
+@@ -21996,8 +22956,7 @@
+     },
+     "@types/parse-json": {
+       "version": "4.0.0",
+-      "integrity": "sha512-//oorEZjL6sbPcKUaCdIGlIUeH26mgzimjBB77G6XRgnDl/L5wOnpyBGRe/Mmf5CVW3PwEBE1NjiMZ/ssFh4wA==",
+-      "dev": true
++      "integrity": "sha512-//oorEZjL6sbPcKUaCdIGlIUeH26mgzimjBB77G6XRgnDl/L5wOnpyBGRe/Mmf5CVW3PwEBE1NjiMZ/ssFh4wA=="
+     },
+     "@types/parse5": {
+       "version": "6.0.3",
+@@ -22012,8 +22971,9 @@
+       "dev": true
+     },
+     "@types/prop-types": {
+-      "version": "15.7.4",
+-      "integrity": "sha512-rZ5drC/jWjrArrS8BR6SIr4cWpW09RNTYt9AMZo3Jwwif+iacXAqgVjm0B0Bv/S1jhDXKHqRVNCbACkJ89RAnQ=="
++      "version": "15.7.5",
++      "resolved": "https://registry.npmjs.org/@types/prop-types/-/prop-types-15.7.5.tgz",
++      "integrity": "sha512-JCB8C6SnDoQf0cNycqd/35A7MjcnK+ZTqE7judS6o7utxUCg6imJg3QK2qzHKszlTjcj2cn+NwMB2i96ubpj7w=="
+     },
+     "@types/qs": {
+       "version": "6.9.7",
+@@ -22040,6 +23000,14 @@
+       "dev": true,
+       "requires": {
+         "@types/react": "*"
++      }
++    },
++    "@types/react-is": {
++      "version": "17.0.3",
++      "resolved": "https://registry.npmjs.org/@types/react-is/-/react-is-17.0.3.tgz",
++      "integrity": "sha512-aBTIWg1emtu95bLTLx0cpkxwGW3ueZv71nE2YFBpL8k/z5czEW8yYpOo8Dp+UUAFAtKwNaOsh/ioSeQnWlZcfw==",
++      "requires": {
++        "@types/react": "*"
+       }
+     },
+     "@types/react-redux": {
+@@ -22078,6 +23046,14 @@
+         "@types/react-router": "*"
+       }
+     },
++    "@types/react-transition-group": {
++      "version": "4.4.5",
++      "resolved": "https://registry.npmjs.org/@types/react-transition-group/-/react-transition-group-4.4.5.tgz",
++      "integrity": "sha512-juKD/eiSM3/xZYzjuzH6ZwpP+/lejltmiS3QEzV/vmb/Q8+HfDmxu+Baga8UEMGBqV88Nbg4l2hY/K2DkyaLLA==",
++      "requires": {
++        "@types/react": "*"
++      }
++    },
+     "@types/retry": {
+       "version": "0.12.1",
+       "integrity": "sha512-xoDlM2S4ortawSWORYqsdU+2rxdh4LRW9ytc3zmT37RIKQh6IHyKwwtKhKis9ah8ol07DCkZxPt8BBvPjC6v4g==",
+@@ -23280,6 +24256,16 @@
+         "@types/babel__traverse": "^7.0.6"
+       }
+     },
++    "babel-plugin-macros": {
++      "version": "3.1.0",
++      "resolved": "https://registry.npmjs.org/babel-plugin-macros/-/babel-plugin-macros-3.1.0.tgz",
++      "integrity": "sha512-Cg7TFGpIr01vOQNODXOOaGz2NpCU5gl8x1qJFbb6hbZxR7XrcE2vtbAsTAbJ7/xwJtUuJEw8K8Zr/AE0LHlesg==",
++      "requires": {
++        "@babel/runtime": "^7.12.5",
++        "cosmiconfig": "^7.0.0",
++        "resolve": "^1.19.0"
++      }
++    },
+     "babel-plugin-styled-components": {
+       "version": "2.0.1",
+       "integrity": "sha512-U3wmORxerYBiqcRCo6thItIosEIga3F+ph0jJPkiOZJjyhpZyUZFQV9XvrZ2CbBIihJ3rDBC/itQ+Wx3VHMauw==",
+@@ -23511,8 +24497,7 @@
+     },
+     "callsites": {
+       "version": "3.1.0",
+-      "integrity": "sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==",
+-      "dev": true
++      "integrity": "sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ=="
+     },
+     "camel-case": {
+       "version": "4.1.2",
+@@ -23673,6 +24658,11 @@
+       "integrity": "sha512-JQHZ2QMW6l3aH/j6xCqQThY/9OH4D/9ls34cgkUBiEeocRTU04tHfKPBsUK1PqZCUQM7GiA0IIXJSuXHI64Kbg==",
+       "dev": true
+     },
++    "clsx": {
++      "version": "1.2.1",
++      "resolved": "https://registry.npmjs.org/clsx/-/clsx-1.2.1.tgz",
++      "integrity": "sha512-EcR6r5a8bj6pu3ycsa/E/cKVGuTgZJZdsyUYHOksG/UHIiKfjxzRxYJpyVBwYaQeOvghal9fcc4PidlgzugAQg=="
++    },
+     "co": {
+       "version": "4.6.0",
+       "resolved": "https://registry.npmjs.org/co/-/co-4.6.0.tgz",
+@@ -23856,7 +24846,6 @@
+     "convert-source-map": {
+       "version": "1.8.0",
+       "integrity": "sha512-+OQdjP49zViI/6i7nIJpA8rAl4sV/JdPfU9nZs3VqOwGIgizICvuN2ru6fMd+4llL0tar18UYJXfZ/TWtmhUjA==",
+-      "dev": true,
+       "requires": {
+         "safe-buffer": "~5.1.1"
+       }
+@@ -23952,7 +24941,6 @@
+     "cosmiconfig": {
+       "version": "7.0.1",
+       "integrity": "sha512-a1YWNUV2HwGimB7dU2s1wUMurNKjpx60HxBB6xUM8Re+2s1g1IIfJvFR0/iCF+XHdE0GMTKTuLR32UQff4TEyQ==",
+-      "dev": true,
+       "requires": {
+         "@types/parse-json": "^4.0.0",
+         "import-fresh": "^3.2.1",
+@@ -24085,8 +25073,9 @@
+       }
+     },
+     "csstype": {
+-      "version": "3.0.10",
+-      "integrity": "sha512-2u44ZG2OcNUO9HDp/Jl8C07x6pU/eTR3ncV91SiK3dhG9TWvRVsCoJw14Ckx5DgWkzGA3waZWO3d7pgqpUI/XA=="
++      "version": "3.1.0",
++      "resolved": "https://registry.npmjs.org/csstype/-/csstype-3.1.0.tgz",
++      "integrity": "sha512-uX1KG+x9h5hIJsaKR9xHUeUraxf8IODOwq9JLNPq6BwB04a/xgpq3rcx47l5BZu5zBPlgD342tdke3Hom/nJRA=="
+     },
+     "damerau-levenshtein": {
+       "version": "1.0.8",
+@@ -24521,7 +25510,6 @@
+     "error-ex": {
+       "version": "1.3.2",
+       "integrity": "sha512-7dFHNmqeFSEt2ZBsCriorKnn3Z2pj+fd9kmI6QoWw4//DL+icEBfc0U7qJCisqrTsKTjw4fNFy2pW9OqStD84g==",
+-      "dev": true,
+       "requires": {
+         "is-arrayish": "^0.2.1"
+       }
+@@ -25481,8 +26469,7 @@
+     },
+     "find-root": {
+       "version": "1.1.0",
+-      "integrity": "sha512-NKfW6bec6GfKc0SGx1e07QZY9PE99u0Bft/0rzSD5k3sO/vwkVUpDUKVm5Gpp5Ue3YfShPFTX2070tDs5kB9Ng==",
+-      "dev": true
++      "integrity": "sha512-NKfW6bec6GfKc0SGx1e07QZY9PE99u0Bft/0rzSD5k3sO/vwkVUpDUKVm5Gpp5Ue3YfShPFTX2070tDs5kB9Ng=="
+     },
+     "find-up": {
+       "version": "5.0.0",
+@@ -25572,8 +26559,7 @@
+     },
+     "function-bind": {
+       "version": "1.1.1",
+-      "integrity": "sha512-yIovAzMX49sF8Yl58fSCWJ5svSLuaibPxXQJFLmBObTuCr0Mf1KiPopGM9NiFjiYBCbfaa2Fh6breQ6ANVTI0A==",
+-      "dev": true
++      "integrity": "sha512-yIovAzMX49sF8Yl58fSCWJ5svSLuaibPxXQJFLmBObTuCr0Mf1KiPopGM9NiFjiYBCbfaa2Fh6breQ6ANVTI0A=="
+     },
+     "functional-red-black-tree": {
+       "version": "1.0.1",
+@@ -25582,8 +26568,7 @@
+     },
+     "gensync": {
+       "version": "1.0.0-beta.2",
+-      "integrity": "sha512-3hN7NaskYvMDLQY55gnW3NQ+mesEAepTqlg+VEbj7zzqEMBVNhzcGYYeqFo/TlYz6eQiFcp1HcsCZO+nGgS8zg==",
+-      "dev": true
++      "integrity": "sha512-3hN7NaskYvMDLQY55gnW3NQ+mesEAepTqlg+VEbj7zzqEMBVNhzcGYYeqFo/TlYz6eQiFcp1HcsCZO+nGgS8zg=="
+     },
+     "get-caller-file": {
+       "version": "2.0.5",
+@@ -25777,7 +26762,6 @@
+     "has": {
+       "version": "1.0.3",
+       "integrity": "sha512-f2dvO0VU6Oej7RkWJGrehjbzMAjFp5/VKPp5tTpWIV4JHHZK1/BxbFRtf/siA2SWTe09caDmVtYYzWEIbBS4zw==",
+-      "dev": true,
+       "requires": {
+         "function-bind": "^1.1.1"
+       }
+@@ -26064,7 +27048,6 @@
+     "import-fresh": {
+       "version": "3.3.0",
+       "integrity": "sha512-veYYhQa+D1QBKznvhUHxb8faxlrwUnxseDAbAp457E0wLNio2bOSKnjYDhMj+YiAq61xrMGhQk9iXVk5FzgQMw==",
+-      "dev": true,
+       "requires": {
+         "parent-module": "^1.0.0",
+         "resolve-from": "^4.0.0"
+@@ -26072,8 +27055,7 @@
+       "dependencies": {
+         "resolve-from": {
+           "version": "4.0.0",
+-          "integrity": "sha512-pb/MYmXstAkysRFx8piNI1tGFNQIFA3vkE3Gq4EuA1dF6gHp/+vgZqsCGJapvy8N3Q+4o7FwvquPJcnZ7RYy4g==",
+-          "dev": true
++          "integrity": "sha512-pb/MYmXstAkysRFx8piNI1tGFNQIFA3vkE3Gq4EuA1dF6gHp/+vgZqsCGJapvy8N3Q+4o7FwvquPJcnZ7RYy4g=="
+         }
+       }
+     },
+@@ -26158,8 +27140,7 @@
+     },
+     "is-arrayish": {
+       "version": "0.2.1",
+-      "integrity": "sha512-zz06S8t0ozoDXMG+ube26zeCTNXcKIPJZJi8hBrF4idCLms4CG9QtK7qBl1boi5ODzFpjswb5JPmHCbMpjaYzg==",
+-      "dev": true
++      "integrity": "sha512-zz06S8t0ozoDXMG+ube26zeCTNXcKIPJZJi8hBrF4idCLms4CG9QtK7qBl1boi5ODzFpjswb5JPmHCbMpjaYzg=="
+     },
+     "is-bigint": {
+       "version": "1.0.4",
+@@ -26206,7 +27187,6 @@
+     "is-core-module": {
+       "version": "2.8.1",
+       "integrity": "sha512-SdNCUs284hr40hFTFP6l0IfZ/RSrMXF3qgoRHd3/79unUTvrFO/JoXwkGm+5J/Oe3E/b5GsnG330uUNgRpu1PA==",
+-      "dev": true,
+       "requires": {
+         "has": "^1.0.3"
+       }
+@@ -28157,8 +29137,7 @@
+     },
+     "json-parse-even-better-errors": {
+       "version": "2.3.1",
+-      "integrity": "sha512-xyFwyhro/JEof6Ghe2iz2NcXoj2sloNsWr/XsERDK/oiPCfaNhl5ONfp+jQdAZRQQ0IJWNzH9zIZF7li91kh2w==",
+-      "dev": true
++      "integrity": "sha512-xyFwyhro/JEof6Ghe2iz2NcXoj2sloNsWr/XsERDK/oiPCfaNhl5ONfp+jQdAZRQQ0IJWNzH9zIZF7li91kh2w=="
+     },
+     "json-schema-traverse": {
+       "version": "0.4.1",
+@@ -28302,8 +29281,7 @@
+     },
+     "lines-and-columns": {
+       "version": "1.2.4",
+-      "integrity": "sha512-7ylylesZQ/PV29jhEDl3Ufjo6ZX7gCqJr5F7PKrqc93v7fzSymt1BpwEU8nAUXs8qzzvqhbjhK5QZg6Mt/HkBg==",
+-      "dev": true
++      "integrity": "sha512-7ylylesZQ/PV29jhEDl3Ufjo6ZX7gCqJr5F7PKrqc93v7fzSymt1BpwEU8nAUXs8qzzvqhbjhK5QZg6Mt/HkBg=="
+     },
+     "loader-runner": {
+       "version": "4.2.0",
+@@ -29504,7 +30482,6 @@
+     "parent-module": {
+       "version": "1.0.1",
+       "integrity": "sha512-GQ2EWRpQV8/o+Aw8YqtfZZPfNRWZYkbidE9k5rpl/hC3vtHHBfGm2Ifi6qWV+coDGkrUKZAxE3Lot5kcsRlh+g==",
+-      "dev": true,
+       "requires": {
+         "callsites": "^3.0.0"
+       }
+@@ -29512,7 +30489,6 @@
+     "parse-json": {
+       "version": "5.2.0",
+       "integrity": "sha512-ayCKvm/phCGxOkYRSCM82iDwct8/EonSEgCSxWxD7ve6jHggsFl4fZVQBPRNgQoKiuV/odhFrGzQXZwbifC8Rg==",
+-      "dev": true,
+       "requires": {
+         "@babel/code-frame": "^7.0.0",
+         "error-ex": "^1.3.1",
+@@ -29568,8 +30544,7 @@
+     },
+     "path-parse": {
+       "version": "1.0.7",
+-      "integrity": "sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw==",
+-      "dev": true
++      "integrity": "sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw=="
+     },
+     "path-to-regexp": {
+       "version": "1.8.0",
+@@ -29580,8 +30555,7 @@
+     },
+     "path-type": {
+       "version": "4.0.0",
+-      "integrity": "sha512-gDKb8aZMDeD/tZWs9P6+q0J9Mwkdl6xMV8TjnGP3qJVJ06bdMgkbBlLU8IdfOsIsFz2BW1rNVT3XuNEl8zPAvw==",
+-      "dev": true
++      "integrity": "sha512-gDKb8aZMDeD/tZWs9P6+q0J9Mwkdl6xMV8TjnGP3qJVJ06bdMgkbBlLU8IdfOsIsFz2BW1rNVT3XuNEl8zPAvw=="
+     },
+     "pdfjs-dist": {
+       "version": "2.12.313",
+@@ -30791,7 +31765,6 @@
+     "resolve": {
+       "version": "1.22.0",
+       "integrity": "sha512-Hhtrw0nLeSrFQ7phPp4OOcVjLPIeMnRlr5mcnVuMe7M/7eBn98A3hmFRLoFo3DLZkivSYwhRUJTyPyWAk56WLw==",
+-      "dev": true,
+       "requires": {
+         "is-core-module": "^2.8.1",
+         "path-parse": "^1.0.7",
+@@ -30958,8 +31931,7 @@
+     },
+     "semver": {
+       "version": "6.3.0",
+-      "integrity": "sha512-b39TBaTSfV6yBrapU89p5fKekE2m/NwnDocOVruQFS1/veMgdzuPcnOM34M6CwxW8jH/lxEa5rBoDeUwu5HHTw==",
+-      "dev": true
++      "integrity": "sha512-b39TBaTSfV6yBrapU89p5fKekE2m/NwnDocOVruQFS1/veMgdzuPcnOM34M6CwxW8jH/lxEa5rBoDeUwu5HHTw=="
+     },
+     "send": {
+       "version": "0.17.2",
+@@ -31460,6 +32432,11 @@
+         "supports-color": "^5.5.0"
+       }
+     },
++    "stylis": {
++      "version": "4.0.13",
++      "resolved": "https://registry.npmjs.org/stylis/-/stylis-4.0.13.tgz",
++      "integrity": "sha512-xGPXiFVl4YED9Jh7Euv2V220mriG9u4B2TA6Ybjc1catrstKD2PpIdU3U0RKpkVBC2EhmL/F0sPCr9vrFTNRag=="
++    },
+     "supports-color": {
+       "version": "5.5.0",
+       "integrity": "sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==",
+@@ -31496,8 +32473,7 @@
+     },
+     "supports-preserve-symlinks-flag": {
+       "version": "1.0.0",
+-      "integrity": "sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w==",
+-      "dev": true
++      "integrity": "sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w=="
+     },
+     "symbol-tree": {
+       "version": "3.2.4",
+@@ -32505,8 +33481,7 @@
+     },
+     "yaml": {
+       "version": "1.10.2",
+-      "integrity": "sha512-r3vXyErRCYJ7wg28yvBY5VSoAF8ZvlcW9/BwUzEtUsjvX/DKs24dIkuwjtuprwJJHsbyUbLApepYTR1BN4uHrg==",
+-      "dev": true
++      "integrity": "sha512-r3vXyErRCYJ7wg28yvBY5VSoAF8ZvlcW9/BwUzEtUsjvX/DKs24dIkuwjtuprwJJHsbyUbLApepYTR1BN4uHrg=="
+     },
+     "yargs": {
+       "version": "17.3.1",
+Index: src/normalizations/normalize-conversation.ts
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport { getTags } from '@zextras/carbonio-shell-ui';\nimport { filter, find, isNil, map, omitBy } from 'lodash';\nimport { Conversation, SoapIncompleteMessage, SoapConversation } from '../types';\nimport { normalizeParticipantsFromSoap } from './normalize-message';\n\nexport const getTagIdsFromName = (names: string | undefined): Array<string | undefined> => {\n\tconst tags = getTags();\n\treturn map(names?.split(','), (name) => find(tags, { name })?.id);\n};\n\nexport const getTagIds = (\n\tt: string | undefined,\n\ttn: string | undefined\n): Array<string | undefined> => {\n\tif (!isNil(t)) {\n\t\treturn filter(t.split(','), (tag) => tag !== '');\n\t}\n\tif (!isNil(tn)) {\n\t\treturn getTagIdsFromName(tn);\n\t}\n\treturn [];\n};\nexport const normalizeConversation = (\n\tc: SoapConversation,\n\tm?: Array<SoapIncompleteMessage>\n): Partial<Conversation> => {\n\tconst filteredMsgs = c?.m ?? filter(m ?? [], ['cid', c?.id]);\n\tconst messages = filteredMsgs?.length\n\t\t? map(filteredMsgs, (msg) => ({\n\t\t\t\tid: msg.id,\n\t\t\t\tparent: msg.l,\n\t\t\t\tdate: Number(msg?.d)\n\t\t  }))\n\t\t: undefined;\n\n\treturn omitBy(\n\t\t{\n\t\t\ttags: getTagIds(c.t, c.tn),\n\t\t\tid: c.id,\n\t\t\tdate: c.d,\n\t\t\tmsgCount: c.n,\n\t\t\tunreadMsgCount: c.u,\n\t\t\tmessages,\n\t\t\tparticipants: c.e ? map(c.e, normalizeParticipantsFromSoap) : undefined,\n\t\t\tsubject: c.su,\n\t\t\tfragment: c.fr,\n\t\t\tread: !isNil(c.f) ? !/u/.test(c.f) : !(c.u > 0),\n\t\t\tattachment: !isNil(c.f) ? /a/.test(c.f) : undefined,\n\t\t\tflagged: !isNil(c.f) ? /f/.test(c.f) : undefined,\n\t\t\turgent: !isNil(c.f) ? /!/.test(c.f) : undefined\n\t\t},\n\t\tisNil\n\t);\n};\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/normalizations/normalize-conversation.ts b/src/normalizations/normalize-conversation.ts
+--- a/src/normalizations/normalize-conversation.ts	(revision 625354c8af746681a130d381c5881a3713632fe6)
++++ b/src/normalizations/normalize-conversation.ts	(date 1661736228000)
+@@ -3,32 +3,41 @@
+  *
+  * SPDX-License-Identifier: AGPL-3.0-only
+  */
+-import { getTags } from '@zextras/carbonio-shell-ui';
+-import { filter, find, isNil, map, omitBy } from 'lodash';
++import { Tags } from '@zextras/carbonio-shell-ui';
++import { filter, find, isNil, map } from 'lodash';
++import { omitBy } from '../commons/utils';
+ import { Conversation, SoapIncompleteMessage, SoapConversation } from '../types';
+ import { normalizeParticipantsFromSoap } from './normalize-message';
+ 
+-export const getTagIdsFromName = (names: string | undefined): Array<string | undefined> => {
+-	const tags = getTags();
+-	return map(names?.split(','), (name) => find(tags, { name })?.id);
+-};
+-
++export const getTagIdsFromName = (
++	names: string | undefined,
++	tags?: Tags
++): Array<string | undefined> => map(names?.split(','), (name) => find(tags, { name })?.id);
+ export const getTagIds = (
+ 	t: string | undefined,
+-	tn: string | undefined
++	tn: string | undefined,
++	tags?: Tags
+ ): Array<string | undefined> => {
+ 	if (!isNil(t)) {
+ 		return filter(t.split(','), (tag) => tag !== '');
+ 	}
+ 	if (!isNil(tn)) {
+-		return getTagIdsFromName(tn);
++		return getTagIdsFromName(tn, tags);
+ 	}
+ 	return [];
+ };
+-export const normalizeConversation = (
+-	c: SoapConversation,
+-	m?: Array<SoapIncompleteMessage>
+-): Partial<Conversation> => {
++
++export type NormalizeConversationProps = {
++	c: SoapConversation;
++	tags: Tags;
++	m?: Array<SoapIncompleteMessage>;
++};
++
++export const normalizeConversation = ({
++	c,
++	m,
++	tags
++}: NormalizeConversationProps): Partial<Conversation> => {
+ 	const filteredMsgs = c?.m ?? filter(m ?? [], ['cid', c?.id]);
+ 	const messages = filteredMsgs?.length
+ 		? map(filteredMsgs, (msg) => ({
+@@ -38,9 +47,9 @@
+ 		  }))
+ 		: undefined;
+ 
+-	return omitBy(
++	const result = omitBy(
+ 		{
+-			tags: getTagIds(c.t, c.tn),
++			tags: getTagIds(c.t, c.tn, tags),
+ 			id: c.id,
+ 			date: c.d,
+ 			msgCount: c.n,
+@@ -56,4 +65,6 @@
+ 		},
+ 		isNil
+ 	);
++
++	return result;
+ };
+Index: src/views/sidebar/parts/edit/edit-default-modal.tsx
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport { Container, SnackbarManagerContext } from '@zextras/carbonio-design-system';\nimport { FOLDERS } from '@zextras/carbonio-shell-ui';\nimport { filter, includes, isEmpty } from 'lodash';\nimport React, { FC, useCallback, useContext, useEffect, useMemo, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useDispatch } from 'react-redux';\nimport { folderAction } from '../../../../store/actions/folder-action';\nimport { ModalProps } from '../../../../types';\nimport ModalFooter from '../../commons/modal-footer';\nimport { ModalHeader } from '../../commons/modal-header';\nimport { translatedSystemFolders } from '../../utils';\nimport FolderDetails from './folder-details';\nimport NameInputRow from './name-input';\nimport RetentionPolicies from './retention-policies';\nimport { ShareFolderProperties } from './share-folder-properties';\n\nconst retentionPeriod = [\n\t{\n\t\tlabel: 'Days',\n\t\tvalue: 'd'\n\t},\n\t{\n\t\tlabel: 'Weeks',\n\t\tvalue: 'w'\n\t},\n\t{\n\t\tlabel: 'Months',\n\t\tvalue: 'm'\n\t},\n\t{\n\t\tlabel: 'Years',\n\t\tvalue: 'y'\n\t}\n];\nconst numberRegex = /^\\d+$/;\n\ntype EditModalProps = ModalProps & {\n\tsetActiveModal: (modal: string) => void;\n};\n\nconst EditDefaultModal: FC<EditModalProps> = ({ folder, onClose, setActiveModal }) => {\n\tconst [t] = useTranslation();\n\tconst dispatch = useDispatch();\n\t// eslint-disable-next-line @typescript-eslint/ban-types\n\tconst createSnackbar = useContext(SnackbarManagerContext) as Function;\n\n\tconst [inputValue, setInputValue] = useState(folder.folder?.name);\n\tconst [showPolicy, setShowPolicy] = useState(false);\n\tconst [rtnValue, setRtnValue] = useState<number | string>(0);\n\tconst [purgeValue, setPurgeValue] = useState<number | string>(0);\n\tconst [rtnYear, setRtnYear] = useState('d');\n\tconst [dspYear, setDspYear] = useState('d');\n\tconst [rtnRange, setRtnRange] = useState('');\n\tconst [dspRange, setDspRange] = useState<string>('');\n\tconst [dsblMsgDis, setDsblMsgDis] = useState(false);\n\tconst [dsblMsgRet, setDsblMsgRet] = useState(false);\n\tconst [emptyRtnValue, setEmptyRtnValue] = useState(false);\n\tconst [emptyDisValue, setEmptyDisValue] = useState(false);\n\tconst [folderColor, setFolderColor] = useState(folder.folder?.color);\n\n\tuseEffect(() => {\n\t\tif (\n\t\t\tfolder.folder?.retentionPolicy &&\n\t\t\tfolder.folder?.retentionPolicy?.length &&\n\t\t\tfolder.folder?.retentionPolicy[0].keep !== undefined &&\n\t\t\tfolder.folder?.retentionPolicy[0].keep &&\n\t\t\tObject.keys(folder.folder?.retentionPolicy[0].keep[0]).length !== 0\n\t\t) {\n\t\t\tconst lifetime = folder.folder?.retentionPolicy[0]?.keep[0]?.policy[0]?.lifetime;\n\t\t\t// eslint-disable-next-line radix\n\t\t\tconst d = parseInt(lifetime);\n\t\t\tsetDsblMsgRet(true);\n\t\t\tsetShowPolicy(true);\n\n\t\t\tif (d % 365 === 0) {\n\t\t\t\tsetRtnYear('y');\n\t\t\t\tsetRtnValue(d / 365);\n\t\t\t\tsetRtnRange('Years');\n\t\t\t} else if (d % 31 === 0) {\n\t\t\t\tsetRtnYear('m');\n\t\t\t\tsetRtnValue(d / 31);\n\t\t\t\tsetRtnRange('Months');\n\t\t\t} else if (d % 7 === 0) {\n\t\t\t\tsetRtnYear('w');\n\t\t\t\tsetRtnValue(d / 7);\n\t\t\t\tsetRtnRange('Weeks');\n\t\t\t} else {\n\t\t\t\tsetRtnYear('d');\n\t\t\t\tsetRtnValue(d);\n\t\t\t\tsetRtnRange('Days');\n\t\t\t}\n\t\t} else {\n\t\t\tsetRtnYear('d');\n\t\t\tsetRtnRange('Days');\n\t\t}\n\n\t\tif (\n\t\t\tfolder.folder?.retentionPolicy &&\n\t\t\tfolder.folder?.retentionPolicy.length &&\n\t\t\tfolder.folder?.retentionPolicy[0].purge !== undefined &&\n\t\t\tfolder.folder?.retentionPolicy[0].purge &&\n\t\t\tObject.keys(folder.folder?.retentionPolicy[0].purge[0]).length !== 0\n\t\t) {\n\t\t\tconst lifetime = folder.folder?.retentionPolicy[0]?.purge[0]?.policy[0]?.lifetime;\n\t\t\t// eslint-disable-next-line radix\n\t\t\tconst d = parseInt(lifetime);\n\t\t\tsetDsblMsgDis(true);\n\t\t\tsetShowPolicy(true);\n\n\t\t\tif (d % 365 === 0) {\n\t\t\t\tsetDspYear('y');\n\t\t\t\tsetPurgeValue(d / 365);\n\t\t\t\tsetDspRange('Years');\n\t\t\t} else if (d % 31 === 0) {\n\t\t\t\tsetDspYear('m');\n\t\t\t\tsetPurgeValue(d / 31);\n\t\t\t\tsetDspRange('Months');\n\t\t\t} else if (d % 7 === 0) {\n\t\t\t\tsetDspYear('w');\n\t\t\t\tsetPurgeValue(d / 7);\n\t\t\t\tsetDspRange('Weeks');\n\t\t\t} else {\n\t\t\t\tsetDspYear('d');\n\t\t\t\tsetPurgeValue(d);\n\t\t\t\tsetDspRange('Days');\n\t\t\t}\n\t\t} else {\n\t\t\tsetDspYear('d');\n\t\t\tsetDspRange('Days');\n\t\t}\n\t}, [folder.folder?.retentionPolicy]);\n\n\tconst showWarning = useMemo(\n\t\t() =>\n\t\t\tincludes(\n\t\t\t\tfilter(translatedSystemFolders, (f) => f !== folder.folder?.name),\n\t\t\t\tinputValue\n\t\t\t),\n\t\t[inputValue, folder]\n\t);\n\tconst inpDisable = useMemo(\n\t\t() =>\n\t\t\tincludes(\n\t\t\t\t[FOLDERS.INBOX, FOLDERS.TRASH, FOLDERS.SPAM, FOLDERS.SENT, FOLDERS.DRAFTS],\n\t\t\t\tfolder.id\n\t\t\t),\n\t\t[folder]\n\t);\n\tconst disableSubmit = useMemo(() => showWarning || emptyRtnValue, [showWarning, emptyRtnValue]);\n\n\tconst onConfirm = useCallback(() => {\n\t\tlet submit = true;\n\t\tif (dsblMsgRet) {\n\t\t\tsubmit = false;\n\t\t\tif (rtnValue && numberRegex.test(rtnValue.toString())) {\n\t\t\t\tsubmit = true;\n\t\t\t} else {\n\t\t\t\tsetEmptyRtnValue(true);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tif (dsblMsgDis) {\n\t\t\tsubmit = false;\n\t\t\tif (purgeValue && numberRegex.test(purgeValue.toString())) {\n\t\t\t\tsubmit = true;\n\t\t\t} else {\n\t\t\t\tsetEmptyDisValue(true);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (inputValue && submit) {\n\t\t\tlet lt = 1;\n\t\t\tlet pr = 1;\n\n\t\t\tif (rtnYear === 'w') lt = Number(rtnValue) * 7;\n\t\t\telse if (rtnYear === 'm') lt = Number(rtnValue) * 31;\n\t\t\telse if (rtnYear === 'y') lt = Number(rtnValue) * 365;\n\t\t\telse lt = Number(rtnValue);\n\n\t\t\tif (dspYear === 'w') pr = Number(purgeValue) * 7;\n\t\t\telse if (dspYear === 'm') pr = Number(purgeValue) * 31;\n\t\t\telse if (dspYear === 'y') pr = Number(purgeValue) * 365;\n\t\t\telse pr = Number(purgeValue);\n\n\t\t\tdispatch(\n\t\t\t\tfolderAction({\n\t\t\t\t\tfolder: {\n\t\t\t\t\t\t...folder.folder,\n\t\t\t\t\t\tparent: folder.folder?.l,\n\t\t\t\t\t\tpath: folder.folder?.absFolderPath,\n\t\t\t\t\t\tabsParent: '2',\n\t\t\t\t\t\tchildren: []\n\t\t\t\t\t},\n\t\t\t\t\tname: inputValue,\n\t\t\t\t\top: 'update',\n\t\t\t\t\tcolor: folderColor,\n\t\t\t\t\tretentionPolicy:\n\t\t\t\t\t\tdsblMsgRet || dsblMsgDis || folder?.folder.retentionPolicy\n\t\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\t\tkeep: dsblMsgRet\n\t\t\t\t\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\t\t\t\t\tpolicy: {\n\t\t\t\t\t\t\t\t\t\t\t\t\tlifetime: `${lt}d`,\n\t\t\t\t\t\t\t\t\t\t\t\t\ttype: 'user'\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t\t\t: {},\n\t\t\t\t\t\t\t\t\tpurge: dsblMsgDis\n\t\t\t\t\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\t\t\t\t\tpolicy: {\n\t\t\t\t\t\t\t\t\t\t\t\t\tlifetime: `${pr}d`,\n\t\t\t\t\t\t\t\t\t\t\t\t\ttype: 'user'\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t\t\t: {}\n\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t: {}\n\t\t\t\t})\n\t\t\t)\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t\t// @ts-ignore\n\t\t\t\t.then((res) => {\n\t\t\t\t\tif (res.type.includes('fulfilled')) {\n\t\t\t\t\t\tcreateSnackbar({\n\t\t\t\t\t\t\tkey: `edit`,\n\t\t\t\t\t\t\treplace: true,\n\t\t\t\t\t\t\ttype: 'info',\n\t\t\t\t\t\t\thideButton: true,\n\t\t\t\t\t\t\tlabel: t('messages.snackbar.folder_edited', 'Changes correctly saved'),\n\t\t\t\t\t\t\tautoHideTimeout: 3000\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcreateSnackbar({\n\t\t\t\t\t\t\tkey: `edit`,\n\t\t\t\t\t\t\treplace: true,\n\t\t\t\t\t\t\ttype: 'error',\n\t\t\t\t\t\t\thideButton: true,\n\t\t\t\t\t\t\tlabel: t('label.error_try_again', 'Something went wrong, please try again'),\n\t\t\t\t\t\t\tautoHideTimeout: 3000\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t}\n\t\tsetInputValue('');\n\t\tonClose();\n\t}, [\n\t\tdsblMsgRet,\n\t\tdsblMsgDis,\n\t\tinputValue,\n\t\tonClose,\n\t\trtnValue,\n\t\tpurgeValue,\n\t\trtnYear,\n\t\tdspYear,\n\t\tdispatch,\n\t\tfolder,\n\t\tfolderColor,\n\t\tcreateSnackbar,\n\t\tt\n\t]);\n\n\treturn (\n\t\t<>\n\t\t\t<ModalHeader\n\t\t\t\tonClose={onClose}\n\t\t\t\ttitle={`${t('label.edit_folder_properties', {\n\t\t\t\t\tname: folder.folder?.name,\n\t\t\t\t\tdefaultValue: 'Edit {{name}} properties'\n\t\t\t\t})}`}\n\t\t\t/>\n\n\t\t\t<NameInputRow\n\t\t\t\tshowWarning={showWarning}\n\t\t\t\tsetInputValue={setInputValue}\n\t\t\t\tinputValue={inputValue}\n\t\t\t\tinpDisable={inpDisable}\n\t\t\t\tfolderColor={folderColor}\n\t\t\t\tsetFolderColor={setFolderColor}\n\t\t\t/>\n\t\t\t<Container mainAlignment=\"flex-start\" crossAlignment=\"flex-start\" padding={{ top: 'medium' }}>\n\t\t\t\t<FolderDetails folder={folder} />\n\n\t\t\t\t{!isEmpty(folder?.folder.acl) && !folder.folder?.owner && (\n\t\t\t\t\t<ShareFolderProperties folder={folder} setActiveModal={setActiveModal} />\n\t\t\t\t)}\n\t\t\t\t<RetentionPolicies\n\t\t\t\t\tsetShowPolicy={setShowPolicy}\n\t\t\t\t\temptyRtnValue={emptyRtnValue}\n\t\t\t\t\tsetEmptyRtnValue={setEmptyRtnValue}\n\t\t\t\t\tshowPolicy={showPolicy}\n\t\t\t\t\tdsblMsgRet={dsblMsgRet}\n\t\t\t\t\tsetDsblMsgRet={setDsblMsgRet}\n\t\t\t\t\tsetRtnValue={setRtnValue}\n\t\t\t\t\trtnValue={rtnValue}\n\t\t\t\t\tretentionPeriod={retentionPeriod}\n\t\t\t\t\tsetRtnYear={setRtnYear}\n\t\t\t\t\tdsblMsgDis={dsblMsgDis}\n\t\t\t\t\temptyDisValue={emptyDisValue}\n\t\t\t\t\tsetEmptyDisValue={setEmptyDisValue}\n\t\t\t\t\tsetDsblMsgDis={setDsblMsgDis}\n\t\t\t\t\tsetPurgeValue={setPurgeValue}\n\t\t\t\t\tsetDspYear={setDspYear}\n\t\t\t\t\trtnYear={rtnYear}\n\t\t\t\t\trtnRange={rtnRange}\n\t\t\t\t\tdspYear={dspYear}\n\t\t\t\t\tdspRange={dspRange}\n\t\t\t\t\tpurgeValue={purgeValue}\n\t\t\t\t/>\n\t\t\t</Container>\n\n\t\t\t<ModalFooter\n\t\t\t\tonConfirm={onConfirm}\n\t\t\t\tlabel={t('label.edit', 'Edit')}\n\t\t\t\tsecondaryAction={(): void => setActiveModal('share')}\n\t\t\t\tsecondaryLabel={t('folder.modal.edit.add_share', 'Add Share')}\n\t\t\t\tdisabled={disableSubmit}\n\t\t\t\tsecondaryBtnType=\"outlined\"\n\t\t\t\tsecondaryColor=\"primary\"\n\t\t\t/>\n\t\t</>\n\t);\n};\n\nexport default EditDefaultModal;\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/views/sidebar/parts/edit/edit-default-modal.tsx b/src/views/sidebar/parts/edit/edit-default-modal.tsx
+--- a/src/views/sidebar/parts/edit/edit-default-modal.tsx	(revision 625354c8af746681a130d381c5881a3713632fe6)
++++ b/src/views/sidebar/parts/edit/edit-default-modal.tsx	(date 1661844962000)
+@@ -4,7 +4,7 @@
+  * SPDX-License-Identifier: AGPL-3.0-only
+  */
+ import { Container, SnackbarManagerContext } from '@zextras/carbonio-design-system';
+-import { FOLDERS } from '@zextras/carbonio-shell-ui';
++import { Folder, FOLDERS } from '@zextras/carbonio-shell-ui';
+ import { filter, includes, isEmpty } from 'lodash';
+ import React, { FC, useCallback, useContext, useEffect, useMemo, useState } from 'react';
+ import { useTranslation } from 'react-i18next';
+@@ -49,7 +49,7 @@
+ 	// eslint-disable-next-line @typescript-eslint/ban-types
+ 	const createSnackbar = useContext(SnackbarManagerContext) as Function;
+ 
+-	const [inputValue, setInputValue] = useState(folder.folder?.name);
++	const [inputValue, setInputValue] = useState(folder.name);
+ 	const [showPolicy, setShowPolicy] = useState(false);
+ 	const [rtnValue, setRtnValue] = useState<number | string>(0);
+ 	const [purgeValue, setPurgeValue] = useState<number | string>(0);
+@@ -61,17 +61,19 @@
+ 	const [dsblMsgRet, setDsblMsgRet] = useState(false);
+ 	const [emptyRtnValue, setEmptyRtnValue] = useState(false);
+ 	const [emptyDisValue, setEmptyDisValue] = useState(false);
+-	const [folderColor, setFolderColor] = useState(folder.folder?.color);
++	const [folderColor, setFolderColor] = useState(folder.color);
+ 
+ 	useEffect(() => {
+ 		if (
+-			folder.folder?.retentionPolicy &&
+-			folder.folder?.retentionPolicy?.length &&
+-			folder.folder?.retentionPolicy[0].keep !== undefined &&
+-			folder.folder?.retentionPolicy[0].keep &&
+-			Object.keys(folder.folder?.retentionPolicy[0].keep[0]).length !== 0
++			folder.retentionPolicy &&
++			folder.retentionPolicy?.length &&
++			folder.retentionPolicy[0].keep !== undefined &&
++			folder.retentionPolicy[0].keep &&
++			Object.keys(folder.retentionPolicy[0].keep[0]).length !== 0
+ 		) {
+-			const lifetime = folder.folder?.retentionPolicy[0]?.keep[0]?.policy[0]?.lifetime;
++			// eslint-disable-next-line @typescript-eslint/ban-ts-comment
++			// @ts-ignore
++			const lifetime = folder.retentionPolicy[0]?.keep[0]?.policy[0]?.lifetime;
+ 			// eslint-disable-next-line radix
+ 			const d = parseInt(lifetime);
+ 			setDsblMsgRet(true);
+@@ -100,15 +102,16 @@
+ 		}
+ 
+ 		if (
+-			folder.folder?.retentionPolicy &&
+-			folder.folder?.retentionPolicy.length &&
+-			folder.folder?.retentionPolicy[0].purge !== undefined &&
+-			folder.folder?.retentionPolicy[0].purge &&
+-			Object.keys(folder.folder?.retentionPolicy[0].purge[0]).length !== 0
++			folder.retentionPolicy &&
++			folder.retentionPolicy.length &&
++			folder.retentionPolicy[0].purge !== undefined &&
++			folder.retentionPolicy[0].purge &&
++			Object.keys(folder.retentionPolicy[0].purge[0]).length !== 0
+ 		) {
+-			const lifetime = folder.folder?.retentionPolicy[0]?.purge[0]?.policy[0]?.lifetime;
+-			// eslint-disable-next-line radix
+-			const d = parseInt(lifetime);
++			// eslint-disable-next-line @typescript-eslint/ban-ts-comment
++			// @ts-ignore
++			const lifetime = folder.retentionPolicy[0]?.purge[0]?.policy[0]?.lifetime;
++			const d = parseInt(lifetime, 10);
+ 			setDsblMsgDis(true);
+ 			setShowPolicy(true);
+ 
+@@ -133,12 +136,12 @@
+ 			setDspYear('d');
+ 			setDspRange('Days');
+ 		}
+-	}, [folder.folder?.retentionPolicy]);
++	}, [folder.retentionPolicy]);
+ 
+ 	const showWarning = useMemo(
+ 		() =>
+ 			includes(
+-				filter(translatedSystemFolders, (f) => f !== folder.folder?.name),
++				filter(translatedSystemFolders, (f) => f !== folder.name),
+ 				inputValue
+ 			),
+ 		[inputValue, folder]
+@@ -191,17 +194,17 @@
+ 			dispatch(
+ 				folderAction({
+ 					folder: {
+-						...folder.folder,
+-						parent: folder.folder?.l,
+-						path: folder.folder?.absFolderPath,
++						...folder,
++						parent: folder.l || '',
++						path: folder.absFolderPath,
+ 						absParent: '2',
+ 						children: []
+ 					},
+ 					name: inputValue,
+ 					op: 'update',
+-					color: folderColor,
++					color: Number(folderColor),
+ 					retentionPolicy:
+-						dsblMsgRet || dsblMsgDis || folder?.folder.retentionPolicy
++						dsblMsgRet || dsblMsgDis || folder?.retentionPolicy
+ 							? {
+ 									keep: dsblMsgRet
+ 										? {
+@@ -270,7 +273,7 @@
+ 			<ModalHeader
+ 				onClose={onClose}
+ 				title={`${t('label.edit_folder_properties', {
+-					name: folder.folder?.name,
++					name: folder.name,
+ 					defaultValue: 'Edit {{name}} properties'
+ 				})}`}
+ 			/>
+@@ -280,13 +283,13 @@
+ 				setInputValue={setInputValue}
+ 				inputValue={inputValue}
+ 				inpDisable={inpDisable}
+-				folderColor={folderColor}
++				folderColor={String(folderColor)}
+ 				setFolderColor={setFolderColor}
+ 			/>
+ 			<Container mainAlignment="flex-start" crossAlignment="flex-start" padding={{ top: 'medium' }}>
+ 				<FolderDetails folder={folder} />
+ 
+-				{!isEmpty(folder?.folder.acl) && !folder.folder?.owner && (
++				{!isEmpty(folder?.acl) && folder.isLink && !folder.owner && (
+ 					<ShareFolderProperties folder={folder} setActiveModal={setActiveModal} />
+ 				)}
+ 				<RetentionPolicies
+Index: src/views/sidebar/move-modal.tsx
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport React, {\n\tChangeEvent,\n\tFC,\n\tuseCallback,\n\tuseContext,\n\tuseLayoutEffect,\n\tuseMemo,\n\tuseRef,\n\tuseState\n} from 'react';\nimport {\n\tInput,\n\tText,\n\tContainer,\n\tAccordion,\n\tPadding,\n\tButton,\n\tSnackbarManagerContext\n} from '@zextras/carbonio-design-system';\nimport { cloneDeep, filter, startsWith } from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { useDispatch } from 'react-redux';\nimport {\n\tAccordionFolder,\n\tFolder,\n\tFOLDERS,\n\tuseFoldersAccordionByView,\n\tuseUserAccount\n} from '@zextras/carbonio-shell-ui';\nimport { useParams } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { folderAction } from '../../store/actions/folder-action';\nimport ModalFooter from './commons/modal-footer';\nimport { ModalHeader } from './commons/modal-header';\nimport { FOLDER_VIEW } from '../../constants';\nimport ModalAccordionCustomComponent from './parts/edit/modal-accordion-custom-component';\nimport { ModalProps } from '../../types';\nimport { getFolderTranslatedName } from './utils';\n\nconst ContainerEl = styled(Container)`\n\toverflow-y: auto;\n\tdisplay: block;\n`;\n\nexport const MoveModal: FC<ModalProps> = ({ folder, onClose }) => {\n\tconst [t] = useTranslation();\n\tconst dispatch = useDispatch();\n\t// eslint-disable-next-line @typescript-eslint/ban-types\n\tconst createSnackbar = useContext(SnackbarManagerContext) as Function;\n\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t// @ts-ignore\n\tconst folders = useFoldersAccordionByView(FOLDER_VIEW.message, null);\n\tconst [searchString, setSearchString] = useState('');\n\tconst [folderDestination, setFolderDestination] = useState<Folder | undefined>(folder.folder);\n\tconst { folderId } = useParams<{ folderId: string }>();\n\tconst accountName = useUserAccount().name;\n\tconst accordionRef = useRef<HTMLDivElement>();\n\tconst [accordionWidth, setAccordionWidth] = useState<number>();\n\n\tuseLayoutEffect(() => {\n\t\tconst calculateAvailableWidth = (): void => {\n\t\t\tif (accordionRef && accordionRef.current) {\n\t\t\t\tsetAccordionWidth(accordionRef?.current?.clientWidth);\n\t\t\t}\n\t\t};\n\t\twindow.addEventListener('resize', calculateAvailableWidth);\n\t\treturn (): void => window.removeEventListener('resize', calculateAvailableWidth);\n\t}, [accordionRef]);\n\n\tconst flattenFolders = useCallback(\n\t\t(arr: Array<AccordionFolder>): Array<AccordionFolder> => {\n\t\t\tconst result: Array<AccordionFolder> = [];\n\t\t\tarr.forEach((item) => {\n\t\t\t\tconst { items } = item;\n\t\t\t\tif (\n\t\t\t\t\titem.folder.id !== FOLDERS.TRASH &&\n\t\t\t\t\titem.folder.id !== FOLDERS.SPAM &&\n\t\t\t\t\t!startsWith(item.folder.absFolderPath, '/Trash')\n\t\t\t\t)\n\t\t\t\t\tresult.push({\n\t\t\t\t\t\t...item,\n\t\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\tCustomComponent: ModalAccordionCustomComponent,\n\t\t\t\t\t\tonClick: () => {\n\t\t\t\t\t\t\tsetFolderDestination(item.folder);\n\t\t\t\t\t\t},\n\t\t\t\t\t\tbackground:\n\t\t\t\t\t\t\ttypeof folderDestination !== 'undefined' && folderDestination.id === item.folder.id\n\t\t\t\t\t\t\t\t? 'highlight'\n\t\t\t\t\t\t\t\t: undefined,\n\t\t\t\t\t\tlabel:\n\t\t\t\t\t\t\titem.folder.id === FOLDERS.USER_ROOT\n\t\t\t\t\t\t\t\t? accountName\n\t\t\t\t\t\t\t\t: getFolderTranslatedName({\n\t\t\t\t\t\t\t\t\t\tt,\n\t\t\t\t\t\t\t\t\t\tfolderId: item.folder.id,\n\t\t\t\t\t\t\t\t\t\tfolderName: item.folder.name\n\t\t\t\t\t\t\t\t  }),\n\t\t\t\t\t\tactiveId: item.folder.id === folderId,\n\t\t\t\t\t\taccordionWidth,\n\t\t\t\t\t\titems: []\n\t\t\t\t\t});\n\t\t\t\tif (items) result.push(...flattenFolders(items));\n\t\t\t});\n\t\t\treturn result;\n\t\t},\n\t\t[folderDestination, accountName, t, folderId, accordionWidth]\n\t);\n\tconst getFolderRootName = (_folder: AccordionFolder): string => {\n\t\tlet result = cloneDeep(_folder.folder);\n\t\twhile (result.parent?.parent) {\n\t\t\tresult = result.parent;\n\t\t}\n\t\treturn result.owner || result.parent?.name || result.name;\n\t};\n\n\tconst filteredFolders = folders.filter((item) => item.label === getFolderRootName(folder));\n\n\tconst flattenedFolders = useMemo(\n\t\t() => flattenFolders(filteredFolders),\n\t\t[filteredFolders, flattenFolders]\n\t);\n\n\tconst filteredFromUserInput = useMemo(\n\t\t() =>\n\t\t\tfilter(flattenedFolders, (item) => {\n\t\t\t\tconst folderName = item.label.toLowerCase();\n\t\t\t\treturn startsWith(folderName, searchString.toLowerCase());\n\t\t\t}),\n\t\t[flattenedFolders, searchString]\n\t);\n\n\tconst onConfirm = useCallback(() => {\n\t\tconst restoreFolder = (): void =>\n\t\t\tdispatch(folderAction({ folder: folder.folder, l: folder.folder.l, op: 'move' }))\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t\t// @ts-ignore\n\t\t\t\t.then((res) => {\n\t\t\t\t\tif (res.type.includes('fulfilled')) {\n\t\t\t\t\t\tcreateSnackbar({\n\t\t\t\t\t\t\tkey: `move-folder`,\n\t\t\t\t\t\t\treplace: true,\n\t\t\t\t\t\t\ttype: 'success',\n\t\t\t\t\t\t\tlabel: t('messages.snackbar.folder_restored', 'Folder restored'),\n\t\t\t\t\t\t\tautoHideTimeout: 3000,\n\t\t\t\t\t\t\thideButton: true\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcreateSnackbar({\n\t\t\t\t\t\t\tkey: `move`,\n\t\t\t\t\t\t\treplace: true,\n\t\t\t\t\t\t\ttype: 'error',\n\t\t\t\t\t\t\tlabel: t('label.error_try_again', 'Something went wrong, please try again'),\n\t\t\t\t\t\t\tautoHideTimeout: 3000,\n\t\t\t\t\t\t\thideButton: true\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\tif (\n\t\t\tfolderDestination?.id !== folder.folder?.l &&\n\t\t\t!startsWith(folderDestination?.absFolderPath, folder.folder?.absFolderPath)\n\t\t) {\n\t\t\t// if (folderDestination?.id !== folder.id && folderDestination?.l !== folder.folder?.l) {\n\t\t\tdispatch(\n\t\t\t\tfolderAction({\n\t\t\t\t\tfolder: folder.folder,\n\t\t\t\t\tl: folderDestination?.id || FOLDERS.USER_ROOT,\n\t\t\t\t\top: 'move'\n\t\t\t\t})\n\t\t\t)\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t\t// @ts-ignore\n\t\t\t\t.then((res) => {\n\t\t\t\t\tif (res.type.includes('fulfilled')) {\n\t\t\t\t\t\tcreateSnackbar({\n\t\t\t\t\t\t\tkey: `move`,\n\t\t\t\t\t\t\treplace: true,\n\t\t\t\t\t\t\ttype: 'success',\n\t\t\t\t\t\t\tlabel: t('messages.snackbar.folder_moved', 'Folder successfully moved'),\n\t\t\t\t\t\t\tautoHideTimeout: 5000,\n\t\t\t\t\t\t\thideButton: false,\n\t\t\t\t\t\t\tactionLabel: 'Undo',\n\t\t\t\t\t\t\tonActionClick: () => restoreFolder()\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcreateSnackbar({\n\t\t\t\t\t\t\tkey: `move`,\n\t\t\t\t\t\t\treplace: true,\n\t\t\t\t\t\t\ttype: 'error',\n\t\t\t\t\t\t\tlabel: t('label.error_try_again', 'Something went wrong, please try again.'),\n\t\t\t\t\t\t\tautoHideTimeout: 3000\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t}\n\n\t\tsetFolderDestination(undefined);\n\t\tsetSearchString('');\n\t\tonClose();\n\t}, [folderDestination, folder, onClose, dispatch, createSnackbar, t]);\n\n\treturn folder ? (\n\t\t<Container\n\t\t\tpadding={{ all: 'large' }}\n\t\t\tmainAlignment=\"center\"\n\t\t\tcrossAlignment=\"flex-start\"\n\t\t\theight=\"fit\"\n\t\t>\n\t\t\t<ModalHeader onClose={onClose} title={`${t('label.move', 'Move')} ${folder.folder?.name}`} />\n\t\t\t<Container\n\t\t\t\tpadding={{ all: 'small' }}\n\t\t\t\tmainAlignment=\"center\"\n\t\t\t\tcrossAlignment=\"flex-start\"\n\t\t\t\theight=\"fit\"\n\t\t\t>\n\t\t\t\t<Container padding={{ all: 'small' }} mainAlignment=\"center\" crossAlignment=\"flex-start\">\n\t\t\t\t\t<Text overflow=\"break-word\">\n\t\t\t\t\t\t{t(\n\t\t\t\t\t\t\t'folder_panel.modal.move.body.message1',\n\t\t\t\t\t\t\t'Select a folder to move the considered one to:'\n\t\t\t\t\t\t)}\n\t\t\t\t\t</Text>\n\t\t\t\t</Container>\n\t\t\t\t<Input\n\t\t\t\t\tinputName={folder.folder?.name}\n\t\t\t\t\tlabel={t('label.filter_folders', 'Filter folders')}\n\t\t\t\t\tbackgroundColor=\"gray5\"\n\t\t\t\t\tvalue={searchString}\n\t\t\t\t\tonChange={(e: ChangeEvent<HTMLInputElement>): void => setSearchString(e.target.value)}\n\t\t\t\t/>\n\t\t\t\t<Padding vertical=\"medium\" />\n\t\t\t\t<ContainerEl\n\t\t\t\t\torientation=\"vertical\"\n\t\t\t\t\tmainAlignment=\"flex-start\"\n\t\t\t\t\tminHeight=\"30vh\"\n\t\t\t\t\tmaxHeight=\"60vh\"\n\t\t\t\t>\n\t\t\t\t\t<Accordion\n\t\t\t\t\t\tbackground=\"gray6\"\n\t\t\t\t\t\titems={filteredFromUserInput}\n\t\t\t\t\t\tstyle={{ overflowY: 'hidden' }}\n\t\t\t\t\t/>\n\t\t\t\t</ContainerEl>\n\n\t\t\t\t<Container\n\t\t\t\t\tpadding={{ top: 'medium', bottom: 'medium' }}\n\t\t\t\t\tmainAlignment=\"center\"\n\t\t\t\t\tcrossAlignment=\"flex-start\"\n\t\t\t\t>\n\t\t\t\t\t<Button type=\"ghost\" label={t('label.new_folder', 'New Folder')} color=\"primary\" />\n\t\t\t\t</Container>\n\t\t\t\t<ModalFooter\n\t\t\t\t\tonConfirm={onConfirm}\n\t\t\t\t\tsecondaryAction={onClose}\n\t\t\t\t\tlabel={t('label.move', 'Move')}\n\t\t\t\t\tsecondaryLabel={t('label.cancel', 'Cancel')}\n\t\t\t\t\tdisabled={typeof folderDestination === 'undefined'}\n\t\t\t\t/>\n\t\t\t</Container>\n\t\t</Container>\n\t) : (\n\t\t<></>\n\t);\n};\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/views/sidebar/move-modal.tsx b/src/views/sidebar/move-modal.tsx
+--- a/src/views/sidebar/move-modal.tsx	(revision 625354c8af746681a130d381c5881a3713632fe6)
++++ b/src/views/sidebar/move-modal.tsx	(date 1661735931000)
+@@ -25,13 +25,7 @@
+ import { cloneDeep, filter, startsWith } from 'lodash';
+ import { useTranslation } from 'react-i18next';
+ import { useDispatch } from 'react-redux';
+-import {
+-	AccordionFolder,
+-	Folder,
+-	FOLDERS,
+-	useFoldersAccordionByView,
+-	useUserAccount
+-} from '@zextras/carbonio-shell-ui';
++import { Folder, FOLDERS, useFoldersByView, useUserAccount } from '@zextras/carbonio-shell-ui';
+ import { useParams } from 'react-router-dom';
+ import styled from 'styled-components';
+ import { folderAction } from '../../store/actions/folder-action';
+@@ -54,9 +48,9 @@
+ 	const createSnackbar = useContext(SnackbarManagerContext) as Function;
+ 	// eslint-disable-next-line @typescript-eslint/ban-ts-comment
+ 	// @ts-ignore
+-	const folders = useFoldersAccordionByView(FOLDER_VIEW.message, null);
++	const folders = useFoldersByView(FOLDER_VIEW.message);
+ 	const [searchString, setSearchString] = useState('');
+-	const [folderDestination, setFolderDestination] = useState<Folder | undefined>(folder.folder);
++	const [folderDestination, setFolderDestination] = useState<Folder | undefined>(folder);
+ 	const { folderId } = useParams<{ folderId: string }>();
+ 	const accountName = useUserAccount().name;
+ 	const accordionRef = useRef<HTMLDivElement>();
+@@ -73,14 +67,13 @@
+ 	}, [accordionRef]);
+ 
+ 	const flattenFolders = useCallback(
+-		(arr: Array<AccordionFolder>): Array<AccordionFolder> => {
+-			const result: Array<AccordionFolder> = [];
++		(arr: Array<Folder>): Array<Folder> => {
++			const result: Array<Folder> = [];
+ 			arr.forEach((item) => {
+-				const { items } = item;
+ 				if (
+-					item.folder.id !== FOLDERS.TRASH &&
+-					item.folder.id !== FOLDERS.SPAM &&
+-					!startsWith(item.folder.absFolderPath, '/Trash')
++					item.id !== FOLDERS.TRASH &&
++					item.id !== FOLDERS.SPAM &&
++					!startsWith(item.absFolderPath, '/Trash')
+ 				)
+ 					result.push({
+ 						...item,
+@@ -88,39 +81,39 @@
+ 						// @ts-ignore
+ 						CustomComponent: ModalAccordionCustomComponent,
+ 						onClick: () => {
+-							setFolderDestination(item.folder);
++							setFolderDestination(item);
+ 						},
+ 						background:
+-							typeof folderDestination !== 'undefined' && folderDestination.id === item.folder.id
++							typeof folderDestination !== 'undefined' && folderDestination.id === item.id
+ 								? 'highlight'
+ 								: undefined,
+ 						label:
+-							item.folder.id === FOLDERS.USER_ROOT
++							item.id === FOLDERS.USER_ROOT
+ 								? accountName
+ 								: getFolderTranslatedName({
+ 										t,
+-										folderId: item.folder.id,
+-										folderName: item.folder.name
++										folderId: item.id,
++										folderName: item.name
+ 								  }),
+-						activeId: item.folder.id === folderId,
++						activeId: item.id === folderId,
+ 						accordionWidth,
+ 						items: []
+ 					});
+-				if (items) result.push(...flattenFolders(items));
++				if (item.children) result.push(...flattenFolders(item.children));
+ 			});
+ 			return result;
+ 		},
+ 		[folderDestination, accountName, t, folderId, accordionWidth]
+ 	);
+-	const getFolderRootName = (_folder: AccordionFolder): string => {
+-		let result = cloneDeep(_folder.folder);
++	const getFolderRootName = (_folder: Folder): string => {
++		let result = cloneDeep(_folder);
+ 		while (result.parent?.parent) {
+ 			result = result.parent;
+ 		}
+-		return result.owner || result.parent?.name || result.name;
++		return (result.isLink && result.owner) || result.parent?.name || result.name;
+ 	};
+ 
+-	const filteredFolders = folders.filter((item) => item.label === getFolderRootName(folder));
++	const filteredFolders = folders.filter((item) => item.name === getFolderRootName(folder));
+ 
+ 	const flattenedFolders = useMemo(
+ 		() => flattenFolders(filteredFolders),
+@@ -130,7 +123,7 @@
+ 	const filteredFromUserInput = useMemo(
+ 		() =>
+ 			filter(flattenedFolders, (item) => {
+-				const folderName = item.label.toLowerCase();
++				const folderName = item.name.toLowerCase();
+ 				return startsWith(folderName, searchString.toLowerCase());
+ 			}),
+ 		[flattenedFolders, searchString]
+@@ -138,7 +131,7 @@
+ 
+ 	const onConfirm = useCallback(() => {
+ 		const restoreFolder = (): void =>
+-			dispatch(folderAction({ folder: folder.folder, l: folder.folder.l, op: 'move' }))
++			dispatch(folderAction({ folder, l: folder.l, op: 'move' }))
+ 				// eslint-disable-next-line @typescript-eslint/ban-ts-comment
+ 				// @ts-ignore
+ 				.then((res) => {
+@@ -164,13 +157,13 @@
+ 				});
+ 
+ 		if (
+-			folderDestination?.id !== folder.folder?.l &&
+-			!startsWith(folderDestination?.absFolderPath, folder.folder?.absFolderPath)
++			folderDestination?.id !== folder.l &&
++			!startsWith(folderDestination?.absFolderPath, folder.absFolderPath)
+ 		) {
+ 			// if (folderDestination?.id !== folder.id && folderDestination?.l !== folder.folder?.l) {
+ 			dispatch(
+ 				folderAction({
+-					folder: folder.folder,
++					folder,
+ 					l: folderDestination?.id || FOLDERS.USER_ROOT,
+ 					op: 'move'
+ 				})
+@@ -213,7 +206,7 @@
+ 			crossAlignment="flex-start"
+ 			height="fit"
+ 		>
+-			<ModalHeader onClose={onClose} title={`${t('label.move', 'Move')} ${folder.folder?.name}`} />
++			<ModalHeader onClose={onClose} title={`${t('label.move', 'Move')} ${folder.name}`} />
+ 			<Container
+ 				padding={{ all: 'small' }}
+ 				mainAlignment="center"
+@@ -229,7 +222,7 @@
+ 					</Text>
+ 				</Container>
+ 				<Input
+-					inputName={folder.folder?.name}
++					inputName={folder.name}
+ 					label={t('label.filter_folders', 'Filter folders')}
+ 					backgroundColor="gray5"
+ 					value={searchString}
+Index: src/views/sidebar/edit-modal.tsx
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport { Container, SnackbarManagerContext } from '@zextras/carbonio-design-system';\nimport React, { FC, useCallback, useContext, useState } from 'react';\nimport { ModalProps } from '../../types';\nimport { Context } from './parts/edit/edit-context';\nimport EditDefaultModal from './parts/edit/edit-default-modal';\nimport ShareRevokeModal from './parts/edit/share-revoke-modal';\nimport ShareFolderModal from './share-folder-modal';\n\nexport const EditModal: FC<ModalProps> = ({ folder, onClose }) => {\n\t// eslint-disable-next-line @typescript-eslint/ban-types\n\tconst createSnackbar = useContext(SnackbarManagerContext) as Function;\n\tconst [activeModal, setActiveModal] = useState('default');\n\tconst [activeGrant, setActiveGrant] = useState({});\n\tconst goBack = useCallback(() => {\n\t\tsetActiveModal('default');\n\t}, [setActiveModal]);\n\treturn (\n\t\t<Context.Provider value={{ activeModal, setActiveModal, activeGrant, setActiveGrant, onClose }}>\n\t\t\t<Container\n\t\t\t\tpadding={{ all: 'medium' }}\n\t\t\t\tmainAlignment=\"center\"\n\t\t\t\tcrossAlignment=\"flex-start\"\n\t\t\t\theight=\"fit\"\n\t\t\t>\n\t\t\t\t{activeModal === 'default' && (\n\t\t\t\t\t<EditDefaultModal folder={folder} onClose={onClose} setActiveModal={setActiveModal} />\n\t\t\t\t)}\n\n\t\t\t\t{activeModal === 'edit' && (\n\t\t\t\t\t<ShareFolderModal\n\t\t\t\t\t\tfolder={folder}\n\t\t\t\t\t\tactiveGrant={activeGrant}\n\t\t\t\t\t\tgoBack={goBack}\n\t\t\t\t\t\tonClose={onClose}\n\t\t\t\t\t\teditMode\n\t\t\t\t\t/>\n\t\t\t\t)}\n\n\t\t\t\t{activeModal === 'revoke' && (\n\t\t\t\t\t<ShareRevokeModal\n\t\t\t\t\t\tfolder={folder.folder}\n\t\t\t\t\t\tgoBack={goBack}\n\t\t\t\t\t\tgrant={activeGrant || folder?.folder.acl?.grant[0]}\n\t\t\t\t\t\tcreateSnackbar={createSnackbar}\n\t\t\t\t\t/>\n\t\t\t\t)}\n\t\t\t\t{activeModal === 'share' && (\n\t\t\t\t\t<ShareFolderModal\n\t\t\t\t\t\tfolder={folder}\n\t\t\t\t\t\tactiveGrant={activeGrant}\n\t\t\t\t\t\tonClose={onClose}\n\t\t\t\t\t\tgoBack={goBack}\n\t\t\t\t\t/>\n\t\t\t\t)}\n\t\t\t</Container>\n\t\t</Context.Provider>\n\t);\n};\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/views/sidebar/edit-modal.tsx b/src/views/sidebar/edit-modal.tsx
+--- a/src/views/sidebar/edit-modal.tsx	(revision 625354c8af746681a130d381c5881a3713632fe6)
++++ b/src/views/sidebar/edit-modal.tsx	(date 1661735931000)
+@@ -43,9 +43,9 @@
+ 
+ 				{activeModal === 'revoke' && (
+ 					<ShareRevokeModal
+-						folder={folder.folder}
++						folder={folder}
+ 						goBack={goBack}
+-						grant={activeGrant || folder?.folder.acl?.grant[0]}
++						grant={activeGrant || folder?.acl?.grant[0]}
+ 						createSnackbar={createSnackbar}
+ 					/>
+ 				)}
+Index: src/store/actions/folder-action.ts
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport { createAsyncThunk } from '@reduxjs/toolkit';\nimport { soapFetch } from '@zextras/carbonio-shell-ui';\nimport { isEmpty, isNil, omitBy } from 'lodash';\nimport { DataProps, FolderType } from '../../types';\n\ntype FolderActionProps = {\n\tfolder: FolderType | DataProps;\n\tcolor?: number;\n\tzid?: string;\n\top: string;\n\tname?: string;\n\tl?: string;\n\trecursive?: boolean;\n\tretentionPolicy?: unknown;\n};\n\nexport const folderAction = createAsyncThunk(\n\t'contacts/folderAction',\n\tasync ({ folder, color, zid, op, name, l, recursive, retentionPolicy }: FolderActionProps) => {\n\t\tconst result = !isEmpty(retentionPolicy)\n\t\t\t? await soapFetch('Batch', {\n\t\t\t\t\tFolderActionRequest: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\taction: {\n\t\t\t\t\t\t\t\tid: folder.id,\n\t\t\t\t\t\t\t\top,\n\t\t\t\t\t\t\t\tl,\n\t\t\t\t\t\t\t\trecursive,\n\t\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\t\tcolor\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t_jsns: 'urn:zimbraMail'\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\taction: {\n\t\t\t\t\t\t\t\tid: folder.id,\n\t\t\t\t\t\t\t\top: 'retentionpolicy',\n\t\t\t\t\t\t\t\tretentionPolicy\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t_jsns: 'urn:zimbraMail'\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t\t_jsns: 'urn:zimbra'\n\t\t\t  })\n\t\t\t: await soapFetch('FolderAction', {\n\t\t\t\t\taction: omitBy(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tid: folder.id,\n\t\t\t\t\t\t\top,\n\t\t\t\t\t\t\tl,\n\t\t\t\t\t\t\trecursive,\n\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\tcolor,\n\t\t\t\t\t\t\tzid\n\t\t\t\t\t\t},\n\t\t\t\t\t\tisNil\n\t\t\t\t\t),\n\t\t\t\t\t_jsns: 'urn:zimbraMail'\n\t\t\t  });\n\t\treturn result;\n\t}\n);\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/store/actions/folder-action.ts b/src/store/actions/folder-action.ts
+--- a/src/store/actions/folder-action.ts	(revision 625354c8af746681a130d381c5881a3713632fe6)
++++ b/src/store/actions/folder-action.ts	(date 1661768595000)
+@@ -4,12 +4,12 @@
+  * SPDX-License-Identifier: AGPL-3.0-only
+  */
+ import { createAsyncThunk } from '@reduxjs/toolkit';
+-import { soapFetch } from '@zextras/carbonio-shell-ui';
++import { Folder, soapFetch } from '@zextras/carbonio-shell-ui';
+ import { isEmpty, isNil, omitBy } from 'lodash';
+ import { DataProps, FolderType } from '../../types';
+ 
+ type FolderActionProps = {
+-	folder: FolderType | DataProps;
++	folder: FolderType | DataProps | Omit<Folder, 'parent'>;
+ 	color?: number;
+ 	zid?: string;
+ 	op: string;
+Index: src/store/actions/search.ts
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n/* eslint no-param-reassign: [\"error\", { \"props\": true, \"ignorePropertyModificationsFor\": [\"conversation\"] }] */\n\nimport { createAsyncThunk } from '@reduxjs/toolkit';\nimport { soapFetch } from '@zextras/carbonio-shell-ui';\nimport { keyBy, map, reduce } from 'lodash';\nimport { normalizeConversation } from '../../normalizations/normalize-conversation';\nimport { normalizeMailMessageFromSoap } from '../../normalizations/normalize-message';\nimport {\n\tConversation,\n\tSearchRequest,\n\tSearchResponse,\n\tFetchConversationsReturn,\n\tFetchConversationsParameters\n} from '../../types';\n\nexport const search = createAsyncThunk<\n\tFetchConversationsReturn | undefined,\n\tFetchConversationsParameters\n>(\n\t'fetchConversations',\n\tasync ({\n\t\tfolderId,\n\t\tlimit = 100,\n\t\tbefore,\n\t\ttypes = 'conversation',\n\t\tsortBy = 'dateDesc',\n\t\tquery,\n\t\toffset,\n\t\trecip = '2',\n\t\twantContent = 'full'\n\t}) => {\n\t\tconst queryPart = [`inId:\"${folderId}\"`];\n\t\tif (before) queryPart.push(`before:${before.getTime()}`);\n\t\tconst result = await soapFetch<SearchRequest, SearchResponse>('Search', {\n\t\t\t_jsns: 'urn:zimbraMail',\n\t\t\tlimit,\n\t\t\tneedExp: 1,\n\t\t\trecip,\n\t\t\tfullConversation: 1,\n\t\t\twantContent,\n\t\t\tsortBy,\n\t\t\tquery: query || queryPart.join(' '),\n\t\t\toffset,\n\t\t\ttypes\n\t\t});\n\n\t\tif (types === 'conversation') {\n\t\t\tconst conversations = map(result?.c ?? [], (obj) =>\n\t\t\t\tnormalizeConversation(obj)\n\t\t\t) as unknown as Array<Conversation>;\n\t\t\treturn {\n\t\t\t\tconversations: keyBy(conversations, 'id'),\n\t\t\t\thasMore: result.more,\n\t\t\t\ttypes\n\t\t\t};\n\t\t}\n\t\tif (types === 'message') {\n\t\t\treturn {\n\t\t\t\tmessages: reduce(\n\t\t\t\t\tresult.m ?? [],\n\t\t\t\t\t(acc, msg) => {\n\t\t\t\t\t\tconst normalized = normalizeMailMessageFromSoap(msg, false);\n\t\t\t\t\t\treturn { ...acc, [normalized.id]: normalized };\n\t\t\t\t\t},\n\t\t\t\t\t{}\n\t\t\t\t),\n\t\t\t\thasMore: result.more,\n\t\t\t\ttypes\n\t\t\t};\n\t\t}\n\t\treturn undefined;\n\t}\n);\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/store/actions/search.ts b/src/store/actions/search.ts
+--- a/src/store/actions/search.ts	(revision 625354c8af746681a130d381c5881a3713632fe6)
++++ b/src/store/actions/search.ts	(date 1661885418000)
+@@ -6,7 +6,7 @@
+ /* eslint no-param-reassign: ["error", { "props": true, "ignorePropertyModificationsFor": ["conversation"] }] */
+ 
+ import { createAsyncThunk } from '@reduxjs/toolkit';
+-import { soapFetch } from '@zextras/carbonio-shell-ui';
++import { soapFetch, useTags } from '@zextras/carbonio-shell-ui';
+ import { keyBy, map, reduce } from 'lodash';
+ import { normalizeConversation } from '../../normalizations/normalize-conversation';
+ import { normalizeMailMessageFromSoap } from '../../normalizations/normalize-message';
+@@ -50,8 +50,9 @@
+ 		});
+ 
+ 		if (types === 'conversation') {
++			const tags = useTags();
+ 			const conversations = map(result?.c ?? [], (obj) =>
+-				normalizeConversation(obj)
++				normalizeConversation({ c: obj, tags })
+ 			) as unknown as Array<Conversation>;
+ 			return {
+ 				conversations: keyBy(conversations, 'id'),
+Index: src/types/folder/index.d.ts
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>/*\n * SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nexport type FolderType = {\n\tid: string;\n\tuuid: string;\n\tname: string;\n\tpath: string | undefined;\n\tparent: string;\n\tparentUuid: string;\n\tunreadCount: number;\n\tsize: number;\n\titemsCount: number;\n\tsynced: boolean;\n\tabsParent: string;\n\titems: FolderType[];\n\tlevel: number;\n\tto: string;\n\tcolor: string;\n\trgb: string;\n\trid?: string;\n\tisSharedFolder?: boolean;\n\tisShared?: boolean;\n\towner?: string;\n\tzid?: string;\n\tacl?: unknown;\n\tperm?: string;\n\tretentionPolicy?: unknown;\n};\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/types/folder/index.d.ts b/src/types/folder/index.d.ts
+--- a/src/types/folder/index.d.ts	(revision 625354c8af746681a130d381c5881a3713632fe6)
++++ b/src/types/folder/index.d.ts	(date 1661736228000)
+@@ -29,4 +29,5 @@
+ 	acl?: unknown;
+ 	perm?: string;
+ 	retentionPolicy?: unknown;
++	children?: Array<unknown>;
+ };
+Index: src/views/sidebar/share-folder-modal.tsx
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport React, { ChangeEvent, FC, useCallback, useContext, useMemo, useState } from 'react';\nimport {\n\tContainer,\n\tInput,\n\tSelect,\n\tText,\n\tCheckbox,\n\tRow,\n\tChipInput,\n\tPadding,\n\tSnackbarManagerContext\n} from '@zextras/carbonio-design-system';\nimport { useIntegratedComponent, useUserAccounts } from '@zextras/carbonio-shell-ui';\nimport { map, replace, split } from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { useDispatch } from 'react-redux';\nimport {\n\tShareCalendarWithOptions,\n\tfindLabel,\n\tShareCalendarRoleOptions\n} from '../../integrations/shared-invite-reply/parts/utils';\nimport { shareFolder } from '../../store/actions/share-folder';\nimport { sendShareNotification } from '../../store/actions/send-share-notification';\nimport ModalFooter from './commons/modal-footer';\nimport { ModalHeader } from './commons/modal-header';\nimport { capitalise } from './utils';\nimport { GranteeInfo } from './parts/edit/share-folder-properties';\nimport { ModalProps } from '../../types';\n\ntype ShareFolderModalProps = ModalProps & {\n\tgoBack: () => void;\n\teditMode?: boolean;\n\tactiveGrant: Partial<{ perm: string; d: string }>;\n};\n\nconst ShareFolderModal: FC<ShareFolderModalProps> = ({\n\tonClose,\n\tfolder,\n\tgoBack,\n\teditMode = false,\n\tactiveGrant\n}) => {\n\tconst [t] = useTranslation();\n\t// eslint-disable-next-line @typescript-eslint/ban-types\n\tconst dispatch = useDispatch() as Function;\n\t// eslint-disable-next-line @typescript-eslint/ban-types\n\tconst createSnackbar = useContext(SnackbarManagerContext) as Function;\n\tconst [ContactInput, integrationAvailable] = useIntegratedComponent('contact-input');\n\tconst shareCalendarWithOptions = useMemo(() => ShareCalendarWithOptions(t), [t]);\n\tconst shareCalendarRoleOptions = useMemo(() => ShareCalendarRoleOptions(t), [t]);\n\tconst [sendNotification, setSendNotification] = useState(false);\n\tconst [standardMessage, setStandardMessage] = useState('');\n\tconst [contacts, setContacts] = useState<any>([]);\n\tconst [shareWithUserType, setshareWithUserType] = useState('usr');\n\tconst [shareWithUserRole, setshareWithUserRole] = useState(editMode ? activeGrant.perm : 'r');\n\tconst userName = useMemo(() => replace(split(activeGrant?.d, '@')?.[0], '.', ' '), [activeGrant]);\n\tconst userNameCapitalise = useMemo(() => capitalise(userName), [userName]);\n\n\tconst accounts = useUserAccounts();\n\n\tconst title = useMemo(\n\t\t() =>\n\t\t\teditMode\n\t\t\t\t? `${t('label.edit_access', {\n\t\t\t\t\t\tname: userNameCapitalise,\n\t\t\t\t\t\tdefaultValue: \"Edit {{name}}'s access\"\n\t\t\t\t  })} `\n\t\t\t\t: `${t('label.share', 'Share')} ${folder.folder.name}`,\n\t\t[t, folder, editMode, userNameCapitalise]\n\t);\n\n\tconst onShareWithChange = useCallback((shareWith) => {\n\t\tsetshareWithUserType(shareWith);\n\t}, []);\n\n\tconst onShareRoleChange = useCallback((shareRole) => {\n\t\tsetshareWithUserRole(shareRole);\n\t}, []);\n\n\tconst onConfirm = useCallback(() => {\n\t\tdispatch(\n\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t// @ts-ignore\n\t\t\tshareFolder({\n\t\t\t\tsendNotification,\n\t\t\t\tstandardMessage,\n\t\t\t\tcontacts: editMode ? [{ email: activeGrant.d }] : contacts,\n\t\t\t\tshareWithUserType,\n\t\t\t\tshareWithUserRole,\n\t\t\t\tfolder: folder.folder,\n\t\t\t\taccounts\n\t\t\t})\n\t\t).then((res: { type: string }) => {\n\t\t\tif (res.type.includes('fulfilled')) {\n\t\t\t\tcreateSnackbar({\n\t\t\t\t\tkey: `share-${folder.id}`,\n\t\t\t\t\treplace: true,\n\t\t\t\t\thideButton: true,\n\t\t\t\t\ttype: 'info',\n\t\t\t\t\tlabel: editMode\n\t\t\t\t\t\t? t('snackbar.share_updated', '\"Access rights updated\"')\n\t\t\t\t\t\t: t('snackbar.folder_shared', 'Folder shared'),\n\t\t\t\t\tautoHideTimeout: 3000\n\t\t\t\t});\n\t\t\t\tsendNotification &&\n\t\t\t\t\tdispatch(\n\t\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\tsendShareNotification({\n\t\t\t\t\t\t\tsendNotification,\n\t\t\t\t\t\t\tstandardMessage,\n\t\t\t\t\t\t\tcontacts: editMode ? [{ email: activeGrant.d }] : contacts,\n\t\t\t\t\t\t\tshareWithUserType,\n\t\t\t\t\t\t\tshareWithUserRole,\n\t\t\t\t\t\t\tfolder: folder.folder,\n\t\t\t\t\t\t\taccounts\n\t\t\t\t\t\t})\n\t\t\t\t\t).then((res2: { type: string }) => {\n\t\t\t\t\t\tif (!res2.type.includes('fulfilled')) {\n\t\t\t\t\t\t\tcreateSnackbar({\n\t\t\t\t\t\t\t\tkey: `share-${folder.id}`,\n\t\t\t\t\t\t\t\treplace: true,\n\t\t\t\t\t\t\t\ttype: 'error',\n\t\t\t\t\t\t\t\thideButton: true,\n\t\t\t\t\t\t\t\tlabel: t('label.error_try_again', 'Something went wrong, please try again'),\n\t\t\t\t\t\t\t\tautoHideTimeout: 3000\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\tgoBack && goBack();\n\t\t\t}\n\t\t\tonClose();\n\t\t});\n\t}, [\n\t\tdispatch,\n\t\tsendNotification,\n\t\tstandardMessage,\n\t\teditMode,\n\t\tactiveGrant.d,\n\t\tcontacts,\n\t\tshareWithUserType,\n\t\tshareWithUserRole,\n\t\tfolder,\n\t\taccounts,\n\t\tonClose,\n\t\tcreateSnackbar,\n\t\tt,\n\t\tgoBack\n\t]);\n\n\tconst disableEdit = useMemo(\n\t\t() => activeGrant?.perm === shareWithUserRole,\n\t\t[activeGrant?.perm, shareWithUserRole]\n\t);\n\n\treturn (\n\t\t<>\n\t\t\t<Container\n\t\t\t\tmainAlignment=\"center\"\n\t\t\t\tcrossAlignment=\"flex-start\"\n\t\t\t\theight=\"fit\"\n\t\t\t\tpadding={{ vertical: 'small' }}\n\t\t\t>\n\t\t\t\t<ModalHeader title={title} onClose={onClose} />\n\t\t\t\t<Padding top=\"small\" />\n\t\t\t\t{!editMode && (\n\t\t\t\t\t<Container height=\"fit\">\n\t\t\t\t\t\t<Select\n\t\t\t\t\t\t\titems={shareCalendarWithOptions}\n\t\t\t\t\t\t\tbackground=\"gray5\"\n\t\t\t\t\t\t\tlabel={t('label.share_with', 'Share with')}\n\t\t\t\t\t\t\tonChange={onShareWithChange}\n\t\t\t\t\t\t\tdefaultSelection={{\n\t\t\t\t\t\t\t\tvalue: 'usr',\n\t\t\t\t\t\t\t\tlabel: findLabel(shareCalendarWithOptions, 'usr')\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Container>\n\t\t\t\t)}\n\t\t\t\t{editMode ? (\n\t\t\t\t\t<Container\n\t\t\t\t\t\torientation=\"horizontal\"\n\t\t\t\t\t\tmainAlignment=\"flex-end\"\n\t\t\t\t\t\tpadding={{ bottom: 'large', top: 'large' }}\n\t\t\t\t\t>\n\t\t\t\t\t\t<GranteeInfo grant={activeGrant} shareCalendarRoleOptions={shareCalendarRoleOptions} />\n\t\t\t\t\t</Container>\n\t\t\t\t) : (\n\t\t\t\t\t<Container height=\"fit\" padding={{ vertical: 'small' }}>\n\t\t\t\t\t\t{integrationAvailable ? (\n\t\t\t\t\t\t\t<ContactInput\n\t\t\t\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\t\t\tbackground=\"gray4\"\n\t\t\t\t\t\t\t\tplaceholder={t('share.recipients_address', 'Recipients’ e-mail addresses')}\n\t\t\t\t\t\t\t\tonChange={(ev: ChangeEvent<HTMLInputElement>): void => {\n\t\t\t\t\t\t\t\t\tsetContacts(ev);\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tdefaultValue={contacts}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<ChipInput\n\t\t\t\t\t\t\t\tbackgroundColor=\"gray5\"\n\t\t\t\t\t\t\t\tplaceholder={t('share.recipients_address', 'Recipients’ e-mail addresses')}\n\t\t\t\t\t\t\t\tonChange={(ev: ChangeEvent<HTMLInputElement>): void => {\n\t\t\t\t\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\t\t\t\tsetContacts(map(ev, (contact) => ({ email: contact.address })));\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tvalueKey=\"address\"\n\t\t\t\t\t\t\t\tgetChipLabel={(\n\t\t\t\t\t\t\t\t\tparticipant: Partial<{ fullName: string; name: string; address: string }>\n\t\t\t\t\t\t\t\t): string | undefined =>\n\t\t\t\t\t\t\t\t\tparticipant.fullName ?? participant.name ?? participant.address\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</Container>\n\t\t\t\t)}\n\n\t\t\t\t<Container height=\"fit\">\n\t\t\t\t\t<Select\n\t\t\t\t\t\titems={shareCalendarRoleOptions}\n\t\t\t\t\t\tbackground=\"gray5\"\n\t\t\t\t\t\tlabel={t('label.role', 'Role')}\n\t\t\t\t\t\tonChange={onShareRoleChange}\n\t\t\t\t\t\tdefaultSelection={{\n\t\t\t\t\t\t\tvalue: editMode ? activeGrant?.perm : 'r',\n\t\t\t\t\t\t\tlabel: findLabel(shareCalendarRoleOptions, editMode ? activeGrant?.perm : 'r')\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t</Container>\n\t\t\t\t<Container\n\t\t\t\t\theight=\"fit\"\n\t\t\t\t\tmainAlignment=\"flex-start\"\n\t\t\t\t\tcrossAlignment=\"flex-start\"\n\t\t\t\t\tpadding={{ vertical: 'medium' }}\n\t\t\t\t>\n\t\t\t\t\t<Checkbox\n\t\t\t\t\t\tvalue={sendNotification}\n\t\t\t\t\t\tdefaultChecked={sendNotification}\n\t\t\t\t\t\tonClick={(): void => setSendNotification(!sendNotification)}\n\t\t\t\t\t\tlabel={t('share.send_notification', 'Send a notification about this share')}\n\t\t\t\t\t/>\n\t\t\t\t</Container>\n\n\t\t\t\t<Container height=\"fit\">\n\t\t\t\t\t<Input\n\t\t\t\t\t\tlabel={t('share.standard_message', 'Add a note to the standard message')}\n\t\t\t\t\t\tvalue={standardMessage}\n\t\t\t\t\t\tonChange={(ev: ChangeEvent<HTMLInputElement>): void => {\n\t\t\t\t\t\t\tsetStandardMessage(ev.target.value);\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tdisabled={!sendNotification}\n\t\t\t\t\t\tbackgroundColor=\"gray5\"\n\t\t\t\t\t/>\n\t\t\t\t</Container>\n\t\t\t\t<Container\n\t\t\t\t\torientation=\"horizontal\"\n\t\t\t\t\tcrossAlignment=\"baseline\"\n\t\t\t\t\tmainAlignment=\"baseline\"\n\t\t\t\t\tpadding={{ all: 'small' }}\n\t\t\t\t>\n\t\t\t\t\t<Row padding={{ right: 'small' }}>\n\t\t\t\t\t\t<Text weight=\"bold\" size=\"small\" color=\"gray0\">\n\t\t\t\t\t\t\tNote:\n\t\t\t\t\t\t</Text>\n\t\t\t\t\t</Row>\n\t\t\t\t\t<Row padding={{ bottom: 'small' }}>\n\t\t\t\t\t\t<Text overflow=\"break-word\" size=\"small\" color=\"gray1\">\n\t\t\t\t\t\t\t{t(\n\t\t\t\t\t\t\t\t'share.share_note',\n\t\t\t\t\t\t\t\t'The standard message displays your name, the name of the shared item, pemissions granted to the recipients, and sign in information, if necessary.'\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</Text>\n\t\t\t\t\t</Row>\n\t\t\t\t</Container>\n\t\t\t</Container>\n\t\t\t<ModalFooter\n\t\t\t\tlabel={\n\t\t\t\t\teditMode ? t('action.edit_share', 'Edit Share') : t('action.share_folder', 'Share folder')\n\t\t\t\t}\n\t\t\t\tonConfirm={onConfirm}\n\t\t\t\tdisabled={editMode ? disableEdit : contacts.length < 1}\n\t\t\t\tsecondaryAction={goBack}\n\t\t\t\tsecondaryLabel={t('label.go_back', 'Go Back')}\n\t\t\t/>\n\t\t</>\n\t);\n};\n\nexport default ShareFolderModal;\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/views/sidebar/share-folder-modal.tsx b/src/views/sidebar/share-folder-modal.tsx
+--- a/src/views/sidebar/share-folder-modal.tsx	(revision 625354c8af746681a130d381c5881a3713632fe6)
++++ b/src/views/sidebar/share-folder-modal.tsx	(date 1661735930000)
+@@ -70,7 +70,7 @@
+ 						name: userNameCapitalise,
+ 						defaultValue: "Edit {{name}}'s access"
+ 				  })} `
+-				: `${t('label.share', 'Share')} ${folder.folder.name}`,
++				: `${t('label.share', 'Share')} ${folder.name}`,
+ 		[t, folder, editMode, userNameCapitalise]
+ 	);
+ 
+@@ -92,7 +92,7 @@
+ 				contacts: editMode ? [{ email: activeGrant.d }] : contacts,
+ 				shareWithUserType,
+ 				shareWithUserRole,
+-				folder: folder.folder,
++				folder,
+ 				accounts
+ 			})
+ 		).then((res: { type: string }) => {
+@@ -117,7 +117,7 @@
+ 							contacts: editMode ? [{ email: activeGrant.d }] : contacts,
+ 							shareWithUserType,
+ 							shareWithUserRole,
+-							folder: folder.folder,
++							folder,
+ 							accounts
+ 						})
+ 					).then((res2: { type: string }) => {
+Index: src/normalizations/normalize-message.ts
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport { getTags } from '@zextras/carbonio-shell-ui';\nimport { filter, find, isNil, map, omitBy, reduce } from 'lodash';\nimport { ParticipantRole } from '../commons/utils';\nimport {\n\tIncompleteMessage,\n\tMailMessagePart,\n\tSoapEmailParticipantRole,\n\tSoapMailParticipant,\n\tParticipant,\n\tSoapIncompleteMessage,\n\tSoapMailMessagePart\n} from '../types';\n\nexport function normalizeMailPartMapFn(v: SoapMailMessagePart): MailMessagePart {\n\tconst ret: MailMessagePart = {\n\t\tcontentType: v.ct,\n\t\tsize: v.s || 0,\n\t\tname: v.part,\n\t\tdisposition: v.cd\n\t};\n\tif (v.mp) {\n\t\tret.parts = map(v.mp || [], normalizeMailPartMapFn);\n\t}\n\tif (v.filename) ret.filename = v.filename;\n\tif (v.content) ret.content = v.content;\n\tif (v.ci) ret.ci = v.ci;\n\tif (v.cd) ret.disposition = v.cd;\n\treturn ret;\n}\n\nfunction findBodyPart(\n\tmp: Array<SoapMailMessagePart>,\n\tacc: { contentType: string; content: string },\n\tid: string\n): { contentType: string; content: string } {\n\tconst bodyPart = reduce(\n\t\tmp,\n\t\t(found, part) => {\n\t\t\tif (part.mp) return findBodyPart(part.mp, found, id);\n\t\t\tif (part && part.body) {\n\t\t\t\tif (!found.contentType.length) {\n\t\t\t\t\treturn { contentType: part.ct, content: part.content ?? '' };\n\t\t\t\t}\n\t\t\t\tif (\n\t\t\t\t\tpart.part &&\n\t\t\t\t\tpart.part.indexOf('.') === -1 &&\n\t\t\t\t\tpart.cd &&\n\t\t\t\t\tpart.cd === 'inline' &&\n\t\t\t\t\t!part.ci &&\n\t\t\t\t\t!(part.ct && part.ct === 'text/plain')\n\t\t\t\t) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...found,\n\t\t\t\t\t\tcontent: found.content.concat(\n\t\t\t\t\t\t\t`<img src='/service/home/~/?auth=co&loc=en&id=${id}&part=${part?.part}'>` ?? ''\n\t\t\t\t\t\t)\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\treturn { ...found, content: found.content.concat(part.content ?? '') };\n\t\t\t}\n\t\t\treturn found;\n\t\t},\n\t\tacc\n\t);\n\n\treturn bodyPart;\n}\n\nexport function generateBody(\n\tmp: Array<SoapMailMessagePart>,\n\tid: string\n): {\n\tcontentType: string;\n\tcontent: string;\n} {\n\treturn findBodyPart(mp, { contentType: '', content: '' }, id);\n}\n\nfunction participantTypeFromSoap(t: SoapEmailParticipantRole): ParticipantRole {\n\tswitch (t) {\n\t\tcase 'f':\n\t\t\treturn ParticipantRole.FROM;\n\t\tcase 't':\n\t\t\treturn ParticipantRole.TO;\n\t\tcase 'c':\n\t\t\treturn ParticipantRole.CARBON_COPY;\n\t\tcase 'b':\n\t\t\treturn ParticipantRole.BLIND_CARBON_COPY;\n\t\tcase 'r':\n\t\t\treturn ParticipantRole.REPLY_TO;\n\t\tcase 's':\n\t\t\treturn ParticipantRole.SENDER;\n\t\tcase 'n':\n\t\t\treturn ParticipantRole.READ_RECEIPT_NOTIFICATION;\n\t\tcase 'rf':\n\t\t\treturn ParticipantRole.RESENT_FROM;\n\t\tdefault:\n\t\t\tthrow new Error(`Participant type not handled: '${t}'`);\n\t}\n}\n\nexport function normalizeParticipantsFromSoap(e: SoapMailParticipant): Participant {\n\treturn {\n\t\ttype: participantTypeFromSoap(e.t),\n\t\taddress: e.a,\n\t\tname: e.d || e.a,\n\t\tfullName: e.p\n\t};\n}\nexport const getTagIdsFromName = (names: string | undefined): Array<string | undefined> => {\n\tconst tags = getTags();\n\treturn map(names?.split(','), (name) => find(tags, { name })?.id);\n};\n\nexport const getTagIds = (\n\tt: string | undefined,\n\ttn: string | undefined\n): Array<string | undefined> => {\n\tif (!isNil(t)) {\n\t\treturn filter(t.split(','), (tag) => tag !== '');\n\t}\n\tif (!isNil(tn)) {\n\t\treturn getTagIdsFromName(tn);\n\t}\n\treturn [];\n};\nexport const normalizeMailMessageFromSoap = (\n\tm: SoapIncompleteMessage,\n\tisComplete: boolean\n): IncompleteMessage => <IncompleteMessage>omitBy(\n\t\t{\n\t\t\tconversation: m.cid,\n\t\t\tid: m.id,\n\t\t\tdate: m.d,\n\t\t\tsize: m.s,\n\t\t\tparent: m.l,\n\t\t\tfragment: m.fr,\n\t\t\tsubject: m.su,\n\t\t\tparticipants: m.e ? map(m.e || [], normalizeParticipantsFromSoap) : undefined,\n\t\t\ttags: getTagIds(m.t, m.tn),\n\t\t\tparts: m.mp ? map(m.mp || [], normalizeMailPartMapFn) : undefined,\n\t\t\tinvite: m.inv,\n\t\t\tshr: m.shr,\n\t\t\tbody: m.mp ? generateBody(m.mp || [], m.id) : undefined,\n\t\t\tisComplete,\n\t\t\tisScheduled: !!m.autoSendTime,\n\t\t\tautoSendTime: m.autoSendTime,\n\t\t\tread: !isNil(m.f) ? !/u/.test(m.f) : true,\n\t\t\tattachment: !isNil(m.f) ? /a/.test(m.f) : undefined,\n\t\t\tflagged: !isNil(m.f) ? /f/.test(m.f) : undefined,\n\t\t\turgent: !isNil(m.f) ? /!/.test(m.f) : undefined,\n\t\t\tisDeleted: !isNil(m.f) ? /x/.test(m.f) : undefined,\n\t\t\tisDraft: !isNil(m.f) ? /d/.test(m.f) : undefined,\n\t\t\tisForwarded: !isNil(m.f) ? /w/.test(m.f) : undefined,\n\t\t\tisSentByMe: !isNil(m.f) ? /s/.test(m.f) : undefined,\n\t\t\tisInvite: !isNil(m.f) ? /v/.test(m.f) : undefined,\n\t\t\tisReplied: !isNil(m.f) ? /r/.test(m.f) : undefined,\n\t\t\tisReadReceiptRequested: !isNil(m.f) ? !/n/.test(m.f) : true\n\t\t},\n\t\tisNil\n\t);\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/normalizations/normalize-message.ts b/src/normalizations/normalize-message.ts
+--- a/src/normalizations/normalize-message.ts	(revision 625354c8af746681a130d381c5881a3713632fe6)
++++ b/src/normalizations/normalize-message.ts	(date 1661736228000)
+@@ -4,7 +4,7 @@
+  * SPDX-License-Identifier: AGPL-3.0-only
+  */
+ import { getTags } from '@zextras/carbonio-shell-ui';
+-import { filter, find, isNil, map, omitBy, reduce } from 'lodash';
++import { filter, find, isNil, map, reduce, omitBy } from 'lodash';
+ import { ParticipantRole } from '../commons/utils';
+ import {
+ 	IncompleteMessage,
+Index: src/views/sidebar/empty-modal.tsx
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport React, { FC, useCallback, useContext, useMemo } from 'react';\nimport { Text, Container, SnackbarManagerContext } from '@zextras/carbonio-design-system';\nimport { FOLDERS } from '@zextras/carbonio-shell-ui';\nimport { useTranslation } from 'react-i18next';\nimport { useDispatch } from 'react-redux';\nimport ModalFooter from './commons/modal-footer';\nimport { folderAction } from '../../store/actions/folder-action';\nimport { ModalHeader } from './commons/modal-header';\nimport { ModalProps } from '../../types';\n\nexport const EmptyModal: FC<ModalProps> = ({ folder, onClose }) => {\n\tconst [t] = useTranslation();\n\tconst dispatch = useDispatch();\n\t// eslint-disable-next-line @typescript-eslint/ban-types\n\tconst createSnackbar = useContext(SnackbarManagerContext) as Function;\n\n\tconst onConfirm = useCallback(() => {\n\t\tdispatch(folderAction({ folder: folder.folder, recursive: true, op: 'empty' }))\n\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t// @ts-ignore\n\t\t\t.then((res) => {\n\t\t\t\tif (res.type.includes('fulfilled')) {\n\t\t\t\t\tcreateSnackbar({\n\t\t\t\t\t\tkey: `trash`,\n\t\t\t\t\t\treplace: true,\n\t\t\t\t\t\ttype: 'info',\n\t\t\t\t\t\tlabel:\n\t\t\t\t\t\t\tfolder.id === FOLDERS.TRASH\n\t\t\t\t\t\t\t\t? t('messages.snackbar.folder_empty', 'Trash successfully emptied')\n\t\t\t\t\t\t\t\t: t('messages.snackbar.folder_wiped', 'Folder successfully wiped'),\n\t\t\t\t\t\tautoHideTimeout: 3000,\n\t\t\t\t\t\thideButton: true\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tcreateSnackbar({\n\t\t\t\t\t\tkey: `trash`,\n\t\t\t\t\t\treplace: true,\n\t\t\t\t\t\ttype: 'error',\n\t\t\t\t\t\tlabel: t('label.error_try_again', 'Something went wrong, please try again.'),\n\t\t\t\t\t\tautoHideTimeout: 3000,\n\t\t\t\t\t\thideButton: true\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\tonClose();\n\t}, [dispatch, folder, onClose, createSnackbar, t]);\n\n\tconst title = useMemo(\n\t\t() =>\n\t\t\tfolder.id === FOLDERS.TRASH\n\t\t\t\t? `${t('label.empty', 'Empty')} ${folder.folder?.name}`\n\t\t\t\t: `${t('label.wipe', 'Wipe')} ${folder.folder?.name}`,\n\t\t[folder.id, folder.folder?.name, t]\n\t);\n\treturn (\n\t\t<Container\n\t\t\tpadding={{ all: 'large' }}\n\t\t\tmainAlignment=\"center\"\n\t\t\tcrossAlignment=\"flex-start\"\n\t\t\theight=\"fit\"\n\t\t>\n\t\t\t<ModalHeader title={title} onClose={onClose} />\n\t\t\t<Container padding={{ top: 'large', bottom: 'large' }} crossAlignment=\"flex-start\">\n\t\t\t\t{folder.id === FOLDERS.TRASH ? (\n\t\t\t\t\t<Text overflow=\"break-word\">\n\t\t\t\t\t\t{t(\n\t\t\t\t\t\t\t'folder_panel.modal.empty.body.message1',\n\t\t\t\t\t\t\t'Do you want to empty the selected folder?'\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\t{t(\n\t\t\t\t\t\t\t'folder_panel.modal.empty.body.message2',\n\t\t\t\t\t\t\t'If you empty it, all the related content will be deleted permanently.'\n\t\t\t\t\t\t)}\n\t\t\t\t\t</Text>\n\t\t\t\t) : (\n\t\t\t\t\t<Text overflow=\"break-word\">\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t(t('folder_panel.modal.wipe.body.message1'),\n\t\t\t\t\t\t\t'Do you want to wipe the selected folder?')\n\t\t\t\t\t\t}\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\t{t(\n\t\t\t\t\t\t\t'folder_panel.modal.wipe.body.message2',\n\t\t\t\t\t\t\t'If you wipe it, all the related content will be deleted permanently.'\n\t\t\t\t\t\t)}\n\t\t\t\t\t</Text>\n\t\t\t\t)}\n\t\t\t</Container>\n\n\t\t\t<ModalFooter\n\t\t\t\tonConfirm={onConfirm}\n\t\t\t\tlabel={folder.id === FOLDERS.TRASH ? t('label.empty', 'Empty') : t('label.wipe', 'Wipe')}\n\t\t\t\tcolor=\"error\"\n\t\t\t/>\n\t\t</Container>\n\t);\n};\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/views/sidebar/empty-modal.tsx b/src/views/sidebar/empty-modal.tsx
+--- a/src/views/sidebar/empty-modal.tsx	(revision 625354c8af746681a130d381c5881a3713632fe6)
++++ b/src/views/sidebar/empty-modal.tsx	(date 1661735931000)
+@@ -20,7 +20,7 @@
+ 	const createSnackbar = useContext(SnackbarManagerContext) as Function;
+ 
+ 	const onConfirm = useCallback(() => {
+-		dispatch(folderAction({ folder: folder.folder, recursive: true, op: 'empty' }))
++		dispatch(folderAction({ folder, recursive: true, op: 'empty' }))
+ 			// eslint-disable-next-line @typescript-eslint/ban-ts-comment
+ 			// @ts-ignore
+ 			.then((res) => {
+@@ -53,9 +53,9 @@
+ 	const title = useMemo(
+ 		() =>
+ 			folder.id === FOLDERS.TRASH
+-				? `${t('label.empty', 'Empty')} ${folder.folder?.name}`
+-				: `${t('label.wipe', 'Wipe')} ${folder.folder?.name}`,
+-		[folder.id, folder.folder?.name, t]
++				? `${t('label.empty', 'Empty')} ${folder.name}`
++				: `${t('label.wipe', 'Wipe')} ${folder.name}`,
++		[folder.id, folder.name, t]
+ 	);
+ 	return (
+ 		<Container
+Index: .idea/aws.xml
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/.idea/aws.xml b/.idea/aws.xml
+new file mode 100644
+--- /dev/null	(date 1661932451893)
++++ b/.idea/aws.xml	(date 1661932451893)
+@@ -0,0 +1,11 @@
++<?xml version="1.0" encoding="UTF-8"?>
++<project version="4">
++  <component name="accountSettings">
++    <option name="activeRegion" value="us-east-1" />
++    <option name="recentlyUsedRegions">
++      <list>
++        <option value="us-east-1" />
++      </list>
++    </option>
++  </component>
++</project>
+\ No newline at end of file
+Index: src/store/actions/conv-action.ts
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport { createAsyncThunk } from '@reduxjs/toolkit';\nimport { soapFetch } from '@zextras/carbonio-shell-ui';\nimport { isNil, omitBy } from 'lodash';\nimport {\n\tConvActionParameters,\n\tConvActionRequest,\n\tConvActionResponse,\n\tConvActionResult\n} from '../../types';\n\nexport const convAction = createAsyncThunk<ConvActionResult, ConvActionParameters>(\n\t'convAction',\n\tasync ({ ids, operation, parent, tagName }) => {\n\t\tconst { action } = (await soapFetch<ConvActionRequest, ConvActionResponse>('ConvAction', {\n\t\t\t_jsns: 'urn:zimbraMail',\n\n\t\t\taction: omitBy(\n\t\t\t\t{\n\t\t\t\t\tid: ids.join(','),\n\t\t\t\t\top: operation,\n\t\t\t\t\tl: parent,\n\t\t\t\t\ttn: tagName\n\t\t\t\t},\n\t\t\t\tisNil\n\t\t\t)\n\t\t})) as ConvActionResponse;\n\t\treturn {\n\t\t\tids: action.id.split(','),\n\t\t\toperation: action.op\n\t\t};\n\t}\n);\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/store/actions/conv-action.ts b/src/store/actions/conv-action.ts
+--- a/src/store/actions/conv-action.ts	(revision 625354c8af746681a130d381c5881a3713632fe6)
++++ b/src/store/actions/conv-action.ts	(date 1661736228000)
+@@ -6,6 +6,7 @@
+ import { createAsyncThunk } from '@reduxjs/toolkit';
+ import { soapFetch } from '@zextras/carbonio-shell-ui';
+ import { isNil, omitBy } from 'lodash';
++// import { omitBy } from '../../commons/utils';
+ import {
+ 	ConvActionParameters,
+ 	ConvActionRequest,
+Index: src/views/app/folder-panel/conversation-list.jsx
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport React, { useCallback, useMemo, useRef, useState, useContext, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport {\n\tList,\n\tSnackbarManagerContext,\n\tDivider,\n\tContainer,\n\tPadding,\n\tText\n} from '@zextras/carbonio-design-system';\nimport { useDispatch, useSelector } from 'react-redux';\nimport styled from 'styled-components';\nimport { find, map, reduce } from 'lodash';\nimport { useAppContext } from '@zextras/carbonio-shell-ui';\nimport { useTranslation } from 'react-i18next';\nimport {\n\tselectConversationStatus,\n\tselectFolder,\n\tselectFolderSearchStatus\n} from '../../../store/conversations-slice';\nimport ConversationListItem from './lists-item/conversation-list-item';\nimport { search } from '../../../store/actions';\nimport SelectPanelActions from '../../../ui-actions/select-panel-action';\nimport { Breadcrumbs } from './breadcrumbs';\nimport { useSelection } from '../../../hooks/useSelection';\nimport { handleKeyboardShortcuts } from '../../../hooks/keyboard-shortcuts';\nimport { useConversationListItems } from '../../../hooks/use-conversation-list';\nimport ShimmerList from '../../search/shimmer-list';\n\nconst DragImageContainer = styled.div`\n\tposition: absolute;\n\ttop: -5000px;\n\tleft: -5000px;\n\ttransform: translate(-100%, -100%);\n\twidth: 35vw;\n`;\n\nconst DragItems = ({ conversations, draggedIds }) => {\n\tconst items = reduce(\n\t\tdraggedIds,\n\t\t(acc, v, k) => {\n\t\t\tconst obj = find(conversations, ['id', k]);\n\t\t\tif (obj) {\n\t\t\t\treturn [...acc, obj];\n\t\t\t}\n\t\t\treturn acc;\n\t\t},\n\t\t[]\n\t);\n\n\treturn (\n\t\t<>\n\t\t\t{map(items, (item) => (\n\t\t\t\t<ConversationListItem item={item} key={item.id} draggedIds={draggedIds} />\n\t\t\t))}\n\t\t</>\n\t);\n};\n\nconst ConversationList = () => {\n\tconst { folderId, itemId } = useParams();\n\tconst { setCount } = useAppContext();\n\tconst conversations = useConversationListItems();\n\n\tconst [isDragging, setIsDragging] = useState(false);\n\tconst [draggedIds, setDraggedIds] = useState();\n\tconst [isLoading, setIsLoading] = useState(false);\n\tconst dragImageRef = useRef(null);\n\tconst dispatch = useDispatch();\n\tconst [t] = useTranslation();\n\tconst createSnackbar = useContext(SnackbarManagerContext);\n\tconst status = useSelector(selectConversationStatus);\n\tconst conversationListStatus = useSelector((store) => selectFolderSearchStatus(store, folderId));\n\n\tconst { selected, isSelecting, toggle, deselectAll } = useSelection(folderId, setCount);\n\tconst folder = useSelector((state) => selectFolder(state, folderId));\n\n\tconst hasMore = useMemo(() => status === 'hasMore', [status]);\n\n\tconst loadMore = useCallback(\n\t\t(date) => {\n\t\t\tif (hasMore && !isLoading) {\n\t\t\t\tsetIsLoading(true);\n\t\t\t\tconst dateOrNull = date ? new Date(date) : null;\n\t\t\t\tdispatch(search({ folderId, before: dateOrNull, limit: 50 })).then(() => {\n\t\t\t\t\tsetIsLoading(false);\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\t\t[hasMore, isLoading, dispatch, folderId]\n\t);\n\n\tuseEffect(() => {\n\t\tconst handler = (event) =>\n\t\t\thandleKeyboardShortcuts({\n\t\t\t\tevent,\n\t\t\t\tfolderId,\n\t\t\t\titemId,\n\t\t\t\tconversations,\n\t\t\t\tt,\n\t\t\t\tdispatch,\n\t\t\t\tdeselectAll,\n\t\t\t\tcreateSnackbar\n\t\t\t});\n\t\tdocument.addEventListener('keydown', handler);\n\t\treturn () => {\n\t\t\tdocument.removeEventListener('keydown', handler);\n\t\t};\n\t}, [folderId, itemId, conversations, t, dispatch, deselectAll, createSnackbar]);\n\tconst displayerTitle = useMemo(() => {\n\t\tif (conversations?.length === 0) {\n\t\t\tif (folderId === '4') {\n\t\t\t\treturn t('displayer.list_spam_title', 'There are no spam e-mails');\n\t\t\t}\n\t\t\tif (folderId === '5') {\n\t\t\t\treturn t('displayer.list_sent_title', 'You haven’t sent any e-mail yet');\n\t\t\t}\n\t\t\tif (folderId === '6') {\n\t\t\t\treturn t('displayer.list_draft_title', 'There are no saved drafts');\n\t\t\t}\n\t\t\tif (folderId === '3') {\n\t\t\t\treturn t('displayer.list_trash_title', 'The trash is empty');\n\t\t\t}\n\t\t\treturn t('displayer.list_folder_title', 'It looks like there are no e-mails yet');\n\t\t}\n\t\treturn null;\n\t}, [t, conversations, folderId]);\n\treturn (\n\t\t<>\n\t\t\t{isSelecting ? (\n\t\t\t\t<SelectPanelActions\n\t\t\t\t\tconversation={conversations}\n\t\t\t\t\tfolderId={folderId}\n\t\t\t\t\tselectedIds={selected}\n\t\t\t\t\tdeselectAll={deselectAll}\n\t\t\t\t/>\n\t\t\t) : (\n\t\t\t\t<Breadcrumbs\n\t\t\t\t\tfolderPath={folder?.path.substring(1)}\n\t\t\t\t\tfolderId={folderId}\n\t\t\t\t\titemsCount={folder?.itemsCount}\n\t\t\t\t/>\n\t\t\t)}\n\t\t\t{conversationListStatus === 'complete' ? (\n\t\t\t\t<>\n\t\t\t\t\t<Divider color=\"gray2\" />\n\t\t\t\t\t{conversations?.length === 0 ? (\n\t\t\t\t\t\t<Container>\n\t\t\t\t\t\t\t<Padding top=\"medium\">\n\t\t\t\t\t\t\t\t<Text\n\t\t\t\t\t\t\t\t\tcolor=\"gray1\"\n\t\t\t\t\t\t\t\t\toverflow=\"break-word\"\n\t\t\t\t\t\t\t\t\tsize=\"small\"\n\t\t\t\t\t\t\t\t\tstyle={{ whiteSpace: 'pre-line', textAlign: 'center', paddingTop: '32px' }}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{displayerTitle}\n\t\t\t\t\t\t\t\t</Text>\n\t\t\t\t\t\t\t</Padding>\n\t\t\t\t\t\t</Container>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<Container style={{ minHeight: 0 }}>\n\t\t\t\t\t\t\t<List\n\t\t\t\t\t\t\t\tstyle={{ flexGrow: 1, paddingBottom: '4px' }}\n\t\t\t\t\t\t\t\tbackground=\"gray6\"\n\t\t\t\t\t\t\t\tselected={selected}\n\t\t\t\t\t\t\t\tactive={itemId}\n\t\t\t\t\t\t\t\titems={conversations}\n\t\t\t\t\t\t\t\titemProps={{\n\t\t\t\t\t\t\t\t\titemId,\n\t\t\t\t\t\t\t\t\ttoggle,\n\t\t\t\t\t\t\t\t\t// messages,\n\t\t\t\t\t\t\t\t\tfolderId,\n\t\t\t\t\t\t\t\t\tsetDraggedIds,\n\t\t\t\t\t\t\t\t\tsetIsDragging,\n\t\t\t\t\t\t\t\t\tselectedItems: selected,\n\t\t\t\t\t\t\t\t\tdragImageRef\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tItemComponent={ConversationListItem}\n\t\t\t\t\t\t\t\tonListBottom={() =>\n\t\t\t\t\t\t\t\t\tloadMore(conversations?.[(conversations?.length ?? 1) - 1]?.date)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tdata-testid={`conversation-list-${folderId}`}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</Container>\n\t\t\t\t\t)}\n\t\t\t\t\t<DragImageContainer ref={dragImageRef}>\n\t\t\t\t\t\t{isDragging && <DragItems conversations={conversations} draggedIds={draggedIds} />}\n\t\t\t\t\t</DragImageContainer>\n\t\t\t\t</>\n\t\t\t) : (\n\t\t\t\t<ShimmerList count={folder?.itemsCount} delay={500} />\n\t\t\t)}\n\t\t</>\n\t);\n};\nexport default ConversationList;\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/views/app/folder-panel/conversation-list.jsx b/src/views/app/folder-panel/conversation-list.jsx
+--- a/src/views/app/folder-panel/conversation-list.jsx	(revision 625354c8af746681a130d381c5881a3713632fe6)
++++ b/src/views/app/folder-panel/conversation-list.jsx	(date 1661934847372)
+@@ -76,7 +76,8 @@
+ 	const createSnackbar = useContext(SnackbarManagerContext);
+ 	const status = useSelector(selectConversationStatus);
+ 	const conversationListStatus = useSelector((store) => selectFolderSearchStatus(store, folderId));
+-
++	console.log('@@@_ConversationList', conversationListStatus);
++	console.log('@@@_folderId', folderId);
+ 	const { selected, isSelecting, toggle, deselectAll } = useSelection(folderId, setCount);
+ 	const folder = useSelector((state) => selectFolder(state, folderId));
+ 
Index: .idea/shelf/Changes4/shelved.patch
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/shelf/Changes4/shelved.patch b/.idea/shelf/Changes4/shelved.patch
new file mode 100644
--- /dev/null	(date 1662011769000)
+++ b/.idea/shelf/Changes4/shelved.patch	(date 1662011769000)
@@ -0,0 +1,160 @@
+Index: src/views/search/parts/folder-accordion-custom-comp.tsx
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>/*\n * SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { FC, useMemo } from 'react';\nimport {\n\tFOLDERS,\n\tuseUserAccount,\n\tAccordionFolder,\n\tuseUserSettings\n} from '@zextras/carbonio-shell-ui';\nimport { AccordionItem, Tooltip, Row, Padding } from '@zextras/carbonio-design-system';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n\tgetFolderIconColor,\n\tgetFolderIconName,\n\tgetFolderTranslatedName\n} from '../../sidebar/utils';\n\nconst AccordionCustomComponent: FC<{ item: AccordionFolder }> = ({ item }) => {\n\tconst { folder } = item;\n\tconst accountName = useUserAccount().name;\n\tconst [t] = useTranslation();\n\n\tconst accordionItem = useMemo(\n\t\t() => ({\n\t\t\t...item,\n\t\t\tlabel:\n\t\t\t\titem.id === FOLDERS.USER_ROOT\n\t\t\t\t\t? accountName\n\t\t\t\t\t: getFolderTranslatedName({ t, folderId: item.id, folderName: item.label }),\n\t\t\ticon: getFolderIconName(item),\n\t\t\ticonColor: getFolderIconColor(item),\n\t\t\ttextProps: { size: 'small' }\n\t\t}),\n\t\t[item, accountName, t]\n\t);\n\tconst settings = useUserSettings()?.prefs;\n\tconst [includeSpam, includeTrash, includeSharedFolders] = useMemo(\n\t\t() => [\n\t\t\tsettings?.zimbraPrefIncludeSpamInSearch === 'TRUE',\n\t\t\tsettings?.zimbraPrefIncludeTrashInSearch === 'TRUE',\n\t\t\tsettings?.zimbraPrefIncludeSharedItemsInSearch === 'TRUE'\n\t\t],\n\t\t[settings]\n\t);\n\n\tconst hasToExclude = useMemo(\n\t\t() =>\n\t\t\t(!includeTrash && folder.name === 'Trash') ||\n\t\t\t(!includeSpam && folder.name === 'Junk') ||\n\t\t\t(!includeSharedFolders && folder.isLink),\n\t\t[folder.isLink, folder.name, includeSharedFolders, includeSpam, includeTrash]\n\t);\n\n\tif (hasToExclude) return <></>;\n\treturn (\n\t\t<Row>\n\t\t\t<Padding left=\"small\" />\n\t\t\t<Tooltip label={accordionItem.label} placement=\"right\" maxWidth=\"100%\">\n\t\t\t\t<AccordionItem item={accordionItem} />\n\t\t\t</Tooltip>\n\t\t</Row>\n\t);\n};\n\nexport default AccordionCustomComponent;\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/views/search/parts/folder-accordion-custom-comp.tsx b/src/views/search/parts/folder-accordion-custom-comp.tsx
+--- a/src/views/search/parts/folder-accordion-custom-comp.tsx	(revision 625354c8af746681a130d381c5881a3713632fe6)
++++ b/src/views/search/parts/folder-accordion-custom-comp.tsx	(date 1661736228689)
+@@ -5,12 +5,7 @@
+  */
+ 
+ import React, { FC, useMemo } from 'react';
+-import {
+-	FOLDERS,
+-	useUserAccount,
+-	AccordionFolder,
+-	useUserSettings
+-} from '@zextras/carbonio-shell-ui';
++import { FOLDERS, useUserAccount, useUserSettings, Folder } from '@zextras/carbonio-shell-ui';
+ import { AccordionItem, Tooltip, Row, Padding } from '@zextras/carbonio-design-system';
+ import { useTranslation } from 'react-i18next';
+ 
+@@ -20,8 +15,7 @@
+ 	getFolderTranslatedName
+ } from '../../sidebar/utils';
+ 
+-const AccordionCustomComponent: FC<{ item: AccordionFolder }> = ({ item }) => {
+-	const { folder } = item;
++const AccordionCustomComponent: FC<{ item: Folder }> = ({ item }) => {
+ 	const accountName = useUserAccount().name;
+ 	const [t] = useTranslation();
+ 
+@@ -31,7 +25,7 @@
+ 			label:
+ 				item.id === FOLDERS.USER_ROOT
+ 					? accountName
+-					: getFolderTranslatedName({ t, folderId: item.id, folderName: item.label }),
++					: getFolderTranslatedName({ t, folderId: item.id, folderName: item.name }),
+ 			icon: getFolderIconName(item),
+ 			iconColor: getFolderIconColor(item),
+ 			textProps: { size: 'small' }
+@@ -50,10 +44,10 @@
+ 
+ 	const hasToExclude = useMemo(
+ 		() =>
+-			(!includeTrash && folder.name === 'Trash') ||
+-			(!includeSpam && folder.name === 'Junk') ||
+-			(!includeSharedFolders && folder.isLink),
+-		[folder.isLink, folder.name, includeSharedFolders, includeSpam, includeTrash]
++			(!includeTrash && item.name === 'Trash') ||
++			(!includeSpam && item.name === 'Junk') ||
++			(!includeSharedFolders && item.isLink),
++		[item.isLink, item.name, includeSharedFolders, includeSpam, includeTrash]
+ 	);
+ 
+ 	if (hasToExclude) return <></>;
+Index: src/views/search/parts/folder-modal.tsx
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>/*\n * SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { ChangeEvent, FC, ReactElement, useCallback, useMemo, useState } from 'react';\nimport {\n\tContainer,\n\tCustomModal,\n\tInput,\n\tText,\n\tAccordion,\n\tAccordionItem,\n\tTooltip,\n\tAvatar,\n\tIcon,\n\tRow,\n\tPadding\n} from '@zextras/carbonio-design-system';\nimport { TFunction } from 'i18next';\nimport { filter, isEmpty, reduce, startsWith } from 'lodash';\n\nimport {\n\tAccordionFolder,\n\tFOLDERS,\n\tuseFolders,\n\tuseFoldersAccordionByView,\n\tuseUserAccount\n} from '@zextras/carbonio-shell-ui';\n\nimport styled from 'styled-components';\nimport ModalFooter from '../../sidebar/commons/modal-footer';\nimport { ModalHeader } from '../../sidebar/commons/modal-header';\nimport { FolderType } from '../../../types';\nimport { getFolderIconColor, getFolderTranslatedName } from '../../sidebar/utils';\nimport { FOLDER_VIEW } from '../../../constants';\nimport AccordionCustomComponent from './folder-accordion-custom-comp';\n\ntype ComponentProps = {\n\tcompProps: { open: boolean; onClose: () => void; setFolder: (arg: any) => void; t: TFunction };\n};\nconst ContainerEl = styled(Container)`\n\toverflow-y: auto;\n\tdisplay: block;\n`;\nconst FittedRow = styled(Row)`\n\tmax-width: calc(100% - (2 * ${({ theme }): string => theme.sizes.padding.small}));\n\theight: 48px;\n`;\nconst getFolderOwner = (item: any): string => {\n\tif (item.owner) return item.owner;\n\tif (item.parent) {\n\t\treturn getFolderOwner(item.parent);\n\t}\n\treturn item.name;\n};\n\nconst CustomComponent: FC<{ item: AccordionFolder }> = ({ item }): ReactElement => (\n\t<FittedRow>\n\t\t<Padding horizontal=\"small\">\n\t\t\t<Avatar label={item.label} size=\"medium\" />\n\t\t</Padding>\n\t\t<Tooltip label={item.label} placement=\"right\" maxWidth=\"100%\">\n\t\t\t<AccordionItem item={item} />\n\t\t</Tooltip>\n\t</FittedRow>\n);\n\ntype CustomComponent = {\n\tCustomComponent: ReactElement;\n\tdivider: boolean;\n\tbackground: string | undefined;\n\tonClick: () => void;\n\titems: Array<any>;\n};\nconst FolderSelectModal: FC<ComponentProps> = ({ compProps }): ReactElement => {\n\tconst { open, onClose, setFolder, t } = compProps;\n\n\tconst [input, setInput] = useState('');\n\tconst [folderDestination, setFolderDestination] = useState<FolderType | any>({});\n\n\tconst foldersFromStore = useFolders();\n\n\tconst getFolderAbsPath = useCallback(\n\t\t(fid: string) => {\n\t\t\tconst path = foldersFromStore[fid]?.absFolderPath;\n\t\t\treturn filter(path?.split('/'), (p) => p !== '').join('/');\n\t\t},\n\t\t[foldersFromStore]\n\t);\n\tconst accountName = useUserAccount().name;\n\tconst [openIds, setOpenIds] = useState(['USER_ROOT']);\n\tconst additionalProps = (item: AccordionFolder): Record<string, any> => ({\n\t\tonClick: (): void => {\n\t\t\tsetFolderDestination(item);\n\t\t},\n\t\tonOpen: () => setOpenIds((s: Array<string>) => (s.includes(item.id) ? s : [...s, item.id])),\n\t\tonClose: () => setOpenIds((s: Array<string>) => s.filter((id: string) => id !== item.id)),\n\t\topenIds\n\t});\n\n\tconst accordions = useFoldersAccordionByView(\n\t\tFOLDER_VIEW.message,\n\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t// @ts-ignore\n\t\tAccordionCustomComponent,\n\t\tadditionalProps\n\t);\n\n\tconst requiredAcc = useMemo(() => {\n\t\tconst temp = reduce(\n\t\t\taccordions,\n\t\t\t(acc: Array<AccordionFolder & CustomComponent>, v) => {\n\t\t\t\tacc.push({\n\t\t\t\t\tid: v.id,\n\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\tCustomComponent,\n\t\t\t\t\tlabel:\n\t\t\t\t\t\tv.id === FOLDERS.USER_ROOT\n\t\t\t\t\t\t\t? accountName\n\t\t\t\t\t\t\t: getFolderTranslatedName({ t, folderId: v.id, folderName: v.label }),\n\t\t\t\t\tdivider: true,\n\t\t\t\t\titems: v.items,\n\t\t\t\t\tbackground: folderDestination.id === v.id ? 'highlight' : undefined,\n\t\t\t\t\tonClick: () => {\n\t\t\t\t\t\tv.id !== FOLDERS.USER_ROOT && setFolderDestination(v);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\treturn acc;\n\t\t\t},\n\t\t\t[]\n\t\t);\n\n\t\treturn temp;\n\t}, [accordions, accountName, folderDestination.id, t]);\n\n\tconst filteredFolders = useMemo(\n\t\t() =>\n\t\t\tfilter(requiredAcc, (v) => {\n\t\t\t\tif (isEmpty(v)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tconst folderName = getFolderTranslatedName({\n\t\t\t\t\tt,\n\t\t\t\t\tfolderId: v?.id,\n\t\t\t\t\tfolderName: v?.label\n\t\t\t\t})?.toLowerCase();\n\n\t\t\t\treturn startsWith(folderName, input.toLowerCase());\n\t\t\t}),\n\t\t[input, requiredAcc, t]\n\t);\n\n\tconst getFolderPath = useCallback(\n\t\t(folder: AccordionFolder) => {\n\t\t\tconst absoluteParent = getFolderOwner(folder.folder);\n\t\t\tconst relativePath = getFolderAbsPath(folder?.id);\n\n\t\t\tif (absoluteParent === 'USER_ROOT') {\n\t\t\t\treturn relativePath;\n\t\t\t}\n\t\t\tif (relativePath) {\n\t\t\t\treturn `${absoluteParent}/${relativePath}`;\n\t\t\t}\n\t\t\treturn absoluteParent;\n\t\t},\n\t\t[getFolderAbsPath]\n\t);\n\tconst onConfirm = useCallback(() => {\n\t\tconst folderPath = getFolderPath(folderDestination);\n\t\tsetFolder([\n\t\t\t{\n\t\t\t\tlabel: `in:${folderPath}`,\n\t\t\t\thasAvatar: true,\n\t\t\t\tmaxWidth: '200px',\n\t\t\t\tisGeneric: false,\n\t\t\t\tbackground: 'gray2',\n\t\t\t\tavatarBackground: getFolderIconColor(folderDestination),\n\t\t\t\tavatarIcon: 'FolderOutline',\n\t\t\t\tisQueryFilter: true,\n\t\t\t\tvalue: `in:\"${folderPath}\"`\n\t\t\t}\n\t\t]);\n\t\tonClose();\n\t}, [folderDestination, getFolderPath, setFolder, onClose]);\n\n\tconst disabled = useMemo(() => isEmpty(folderDestination), [folderDestination]);\n\n\treturn (\n\t\t<CustomModal open={open} onClose={onClose} maxHeight=\"90vh\" size=\"medium\">\n\t\t\t<Container\n\t\t\t\tpadding={{ all: 'large' }}\n\t\t\t\tmainAlignment=\"center\"\n\t\t\t\tcrossAlignment=\"flex-start\"\n\t\t\t\theight=\"fit\"\n\t\t\t>\n\t\t\t\t<ModalHeader title={t('share.is_contained_in', 'Is contained in')} onClose={onClose} />\n\t\t\t\t<Container mainAlignment=\"center\" crossAlignment=\"flex-start\">\n\t\t\t\t\t<Container\n\t\t\t\t\t\tpadding={{ all: 'small' }}\n\t\t\t\t\t\tmainAlignment=\"center\"\n\t\t\t\t\t\tcrossAlignment=\"flex-start\"\n\t\t\t\t\t\theight=\"fit\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<Container\n\t\t\t\t\t\t\tpadding={{ all: 'small' }}\n\t\t\t\t\t\t\tmainAlignment=\"center\"\n\t\t\t\t\t\t\tcrossAlignment=\"flex-start\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<Text overflow=\"break-word\">\n\t\t\t\t\t\t\t\t{t(\n\t\t\t\t\t\t\t\t\t'share.filter_folder_message',\n\t\t\t\t\t\t\t\t\t'Select a folder where to start your advanced search'\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</Text>\n\t\t\t\t\t\t</Container>\n\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\tinputName=\"test\"\n\t\t\t\t\t\t\tlabel={t('label.filter_folders', 'Filter folders')}\n\t\t\t\t\t\t\tbackgroundColor=\"gray5\"\n\t\t\t\t\t\t\tvalue={input}\n\t\t\t\t\t\t\tCustomIcon={({ hasFocus }: { hasFocus: boolean }): ReactElement => (\n\t\t\t\t\t\t\t\t<Icon icon=\"FunnelOutline\" size=\"large\" color={hasFocus ? 'primary' : 'text'} />\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\tonChange={(e: ChangeEvent<HTMLInputElement>): void => setInput(e.target.value)}\n\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t<ContainerEl\n\t\t\t\t\t\t\torientation=\"vertical\"\n\t\t\t\t\t\t\tmainAlignment=\"flex-start\"\n\t\t\t\t\t\t\tminHeight=\"30vh\"\n\t\t\t\t\t\t\tmaxHeight=\"60vh\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<Accordion\n\t\t\t\t\t\t\t\titems={filteredFolders}\n\t\t\t\t\t\t\t\tactiveId={folderDestination?.id}\n\t\t\t\t\t\t\t\topenIds={openIds}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</ContainerEl>\n\t\t\t\t\t</Container>\n\t\t\t\t\t<ModalFooter\n\t\t\t\t\t\tonConfirm={onConfirm}\n\t\t\t\t\t\tsecondaryAction={onClose}\n\t\t\t\t\t\tlabel={t('label.choose_folder', 'Choose folder')}\n\t\t\t\t\t\tsecondaryLabel={t('label.go_back', 'Go Back')}\n\t\t\t\t\t\tdisabled={disabled}\n\t\t\t\t\t/>\n\t\t\t\t</Container>\n\t\t\t</Container>\n\t\t</CustomModal>\n\t);\n};\n\nexport default FolderSelectModal;\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/views/search/parts/folder-modal.tsx b/src/views/search/parts/folder-modal.tsx
+--- a/src/views/search/parts/folder-modal.tsx	(revision 625354c8af746681a130d381c5881a3713632fe6)
++++ b/src/views/search/parts/folder-modal.tsx	(date 1661736228652)
+@@ -22,10 +22,10 @@
+ import { filter, isEmpty, reduce, startsWith } from 'lodash';
+ 
+ import {
+-	AccordionFolder,
++	Folder,
+ 	FOLDERS,
+ 	useFolders,
+-	useFoldersAccordionByView,
++	useFoldersByView,
+ 	useUserAccount
+ } from '@zextras/carbonio-shell-ui';
+ 
+@@ -56,12 +56,12 @@
+ 	return item.name;
+ };
+ 
+-const CustomComponent: FC<{ item: AccordionFolder }> = ({ item }): ReactElement => (
++const CustomComponent: FC<{ item: Folder }> = ({ item }): ReactElement => (
+ 	<FittedRow>
+ 		<Padding horizontal="small">
+-			<Avatar label={item.label} size="medium" />
++			<Avatar label={item.name} size="medium" />
+ 		</Padding>
+-		<Tooltip label={item.label} placement="right" maxWidth="100%">
++		<Tooltip label={item.name} placement="right" maxWidth="100%">
+ 			<AccordionItem item={item} />
+ 		</Tooltip>
+ 	</FittedRow>
+@@ -91,7 +91,7 @@
+ 	);
+ 	const accountName = useUserAccount().name;
+ 	const [openIds, setOpenIds] = useState(['USER_ROOT']);
+-	const additionalProps = (item: AccordionFolder): Record<string, any> => ({
++	const additionalProps = (item: Folder): Record<string, any> => ({
+ 		onClick: (): void => {
+ 			setFolderDestination(item);
+ 		},
+@@ -100,18 +100,13 @@
+ 		openIds
+ 	});
+ 
+-	const accordions = useFoldersAccordionByView(
+-		FOLDER_VIEW.message,
+-		// eslint-disable-next-line @typescript-eslint/ban-ts-comment
+-		// @ts-ignore
+-		AccordionCustomComponent,
+-		additionalProps
+-	);
++	// @@ finish conversion to use useFoldersByView
++	const accordions = useFoldersByView(FOLDER_VIEW.message);
+ 
+ 	const requiredAcc = useMemo(() => {
+ 		const temp = reduce(
+ 			accordions,
+-			(acc: Array<AccordionFolder & CustomComponent>, v) => {
++			(acc: Array<Folder & CustomComponent>, v) => {
+ 				acc.push({
+ 					id: v.id,
+ 					// eslint-disable-next-line @typescript-eslint/ban-ts-comment
+@@ -120,9 +115,9 @@
+ 					label:
+ 						v.id === FOLDERS.USER_ROOT
+ 							? accountName
+-							: getFolderTranslatedName({ t, folderId: v.id, folderName: v.label }),
++							: getFolderTranslatedName({ t, folderId: v.id, folderName: v.name }),
+ 					divider: true,
+-					items: v.items,
++					items: v.children,
+ 					background: folderDestination.id === v.id ? 'highlight' : undefined,
+ 					onClick: () => {
+ 						v.id !== FOLDERS.USER_ROOT && setFolderDestination(v);
+@@ -146,7 +141,7 @@
+ 				const folderName = getFolderTranslatedName({
+ 					t,
+ 					folderId: v?.id,
+-					folderName: v?.label
++					folderName: v?.name
+ 				})?.toLowerCase();
+ 
+ 				return startsWith(folderName, input.toLowerCase());
+@@ -155,8 +150,8 @@
+ 	);
+ 
+ 	const getFolderPath = useCallback(
+-		(folder: AccordionFolder) => {
+-			const absoluteParent = getFolderOwner(folder.folder);
++		(folder: Folder) => {
++			const absoluteParent = getFolderOwner(folder);
+ 			const relativePath = getFolderAbsPath(folder?.id);
+ 
+ 			if (absoluteParent === 'USER_ROOT') {
Index: src/views/sidebar/sync-data-handler.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport {\n\tFOLDERS,\n\tstore,\n\tuseNotify,\n\tuseRefresh,\n\tupdatePrimaryBadge\n} from '@zextras/carbonio-shell-ui';\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { isEmpty, map, keyBy, find, filter, forEach, sortBy, reduce } from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport {\n\thandleCreatedFolders,\n\thandleModifiedFolders,\n\thandleDeletedFolders,\n\thandleRefresh,\n\tselectFolder\n} from '../../store/folders-slice';\nimport {\n\thandleNotifyCreatedConversations,\n\thandleNotifyModifiedConversations,\n\thandleNotifyDeletedConversations,\n\thandleModifiedMessagesInConversation,\n\thandleDeletedMessagesInConversation,\n\tsetSearchedInFolder,\n\tselectCurrentFolder,\n\thandleCreatedMessagesInConversation,\n\thandleAddMessagesInConversation\n} from '../../store/conversations-slice';\nimport {\n\thandleCreatedMessages,\n\thandleModifiedMessages,\n\thandleDeletedMessages,\n\tselectMessages\n} from '../../store/messages-slice';\nimport { storeReducers } from '../../store/reducers';\nimport { normalizeConversation } from '../../normalizations/normalize-conversation';\nimport { normalizeMailMessageFromSoap } from '../../normalizations/normalize-message';\nimport { extractFolders } from './utils';\nimport { MAILS_ROUTE } from '../../constants';\n\nconst InboxBadgeUpdater = () => {\n\tconst folder = useSelector(selectFolder(FOLDERS.INBOX));\n\tuseEffect(() => {\n\t\tupdatePrimaryBadge(\n\t\t\t{\n\t\t\t\tshow: folder.unreadCount > 0,\n\t\t\t\tcount: folder.unreadCount,\n\t\t\t\tshowCount: true\n\t\t\t},\n\t\t\tMAILS_ROUTE\n\t\t);\n\t}, [folder.unreadCount]);\n\treturn null;\n};\n\nexport const SyncDataHandler = () => {\n\tconst [t] = useTranslation();\n\tconst refresh = useRefresh();\n\tconst notifyList = useNotify();\n\tconst [seq, setSeq] = useState(-1);\n\tconst dispatch = useDispatch();\n\tconst [initialized, setInitialized] = useState(false);\n\tconst currentFolder = useSelector(selectCurrentFolder);\n\tconst messagesState = useSelector(selectMessages);\n\n\tuseEffect(() => {\n\t\tif (!isEmpty(refresh) && !initialized) {\n\t\t\tstore.setReducer(storeReducers);\n\t\t\t// this also normalize folders so no need to normalize it later\n\t\t\tconst extractedFolders = extractFolders([\n\t\t\t\t...(refresh?.folder?.[0]?.folder ?? []),\n\t\t\t\t...(refresh?.folder?.[0]?.link ?? [])\n\t\t\t]);\n\t\t\tdispatch(handleRefresh(extractedFolders));\n\t\t\tsetInitialized(true);\n\t\t}\n\t}, [dispatch, initialized, refresh]);\n\n\tuseEffect(() => {\n\t\tforEach(notifyList, (notify) => {\n\t\t\t// this intercept all changes made from different folders towards the current one, it triggers a search request if it finds at least one item which affect currentFolder\n\t\t\tif (find(notify?.modified?.m, ['l', currentFolder])) {\n\t\t\t\tdispatch(setSearchedInFolder({ [currentFolder]: 'incomplete' }));\n\t\t\t}\n\t\t});\n\t}, [currentFolder, dispatch, notifyList]);\n\n\tuseEffect(() => {\n\t\tif (initialized) {\n\t\t\tif (notifyList.length > 0) {\n\t\t\t\tforEach(sortBy(notifyList, 'seq'), (notify) => {\n\t\t\t\t\tif (!isEmpty(notify) && (notify.seq > seq || (seq > 1 && notify.seq === 1))) {\n\t\t\t\t\t\tif (notify.created) {\n\t\t\t\t\t\t\tif (notify.created.folder || notify.created.link) {\n\t\t\t\t\t\t\t\tdispatch(\n\t\t\t\t\t\t\t\t\thandleCreatedFolders([\n\t\t\t\t\t\t\t\t\t\t...(notify.created.folder ?? []),\n\t\t\t\t\t\t\t\t\t\t...(notify.created.link ?? [])\n\t\t\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (notify.created.c && notify.created.m) {\n\t\t\t\t\t\t\t\tconst conversations = map(notify.created.c, (i) =>\n\t\t\t\t\t\t\t\t\tnormalizeConversation(i, notify.created.m)\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tdispatch(handleNotifyCreatedConversations(keyBy(conversations, 'id')));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (notify.created.m) {\n\t\t\t\t\t\t\t\tdispatch(handleCreatedMessages({ m: notify.created.m }));\n\t\t\t\t\t\t\t\tdispatch(handleCreatedMessagesInConversation({ m: notify.created.m }));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (notify.modified) {\n\t\t\t\t\t\t\tif (notify.modified.folder || notify.modified.link) {\n\t\t\t\t\t\t\t\tdispatch(\n\t\t\t\t\t\t\t\t\thandleModifiedFolders([\n\t\t\t\t\t\t\t\t\t\t...(notify.modified.folder ?? []),\n\t\t\t\t\t\t\t\t\t\t...(notify.modified.link ?? [])\n\t\t\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (notify.modified.c) {\n\t\t\t\t\t\t\t\tconst conversations = map(notify.modified.c, normalizeConversation);\n\t\t\t\t\t\t\t\tdispatch(handleNotifyModifiedConversations(keyBy(conversations, 'id')));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (notify.modified.m) {\n\t\t\t\t\t\t\t\tconst messages = map(notify.modified.m, (obj) =>\n\t\t\t\t\t\t\t\t\tnormalizeMailMessageFromSoap(obj, false)\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tdispatch(handleModifiedMessages(messages));\n\n\t\t\t\t\t\t\t\t// the condition filters messages with parent property (the only ones we need to update)\n\t\t\t\t\t\t\t\tconst toUpdate = filter(messages, 'parent');\n\t\t\t\t\t\t\t\tif (toUpdate?.length > 0) {\n\t\t\t\t\t\t\t\t\t// this function updates messages' parent in conversations. If parent never changes it does not need to be called\n\t\t\t\t\t\t\t\t\tdispatch(handleModifiedMessagesInConversation(toUpdate));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// the condition filters messages with conversation property (the only ones we need to add to conversation)\n\t\t\t\t\t\t\t\tconst conversationToUpdate = filter(messages, 'conversation');\n\t\t\t\t\t\t\t\tif (conversationToUpdate?.length > 0) {\n\t\t\t\t\t\t\t\t\tconst msgsReference = reduce(\n\t\t\t\t\t\t\t\t\t\tconversationToUpdate,\n\t\t\t\t\t\t\t\t\t\t(acc, msg) => {\n\t\t\t\t\t\t\t\t\t\t\tif (messagesState?.[msg?.id]) {\n\t\t\t\t\t\t\t\t\t\t\t\treturn [\n\t\t\t\t\t\t\t\t\t\t\t\t\t...acc,\n\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tid: messagesState?.[msg?.id].id,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tparent: messagesState?.[msg?.id].parent,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tdate: messagesState?.[msg?.id].date,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tconversation: msg.conversation\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t];\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\treturn acc;\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t[]\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t// this function add messages' in conversations. If conversation never changes it does not need to be called\n\t\t\t\t\t\t\t\t\tdispatch(handleAddMessagesInConversation(msgsReference));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (notify.deleted) {\n\t\t\t\t\t\t\tdispatch(handleDeletedFolders(notify.deleted));\n\t\t\t\t\t\t\tdispatch(handleNotifyDeletedConversations(notify.deleted));\n\t\t\t\t\t\t\tdispatch(handleDeletedMessages(notify.deleted));\n\t\t\t\t\t\t\tdispatch(handleDeletedMessagesInConversation(notify.deleted));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tsetSeq(notify.seq);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}, [dispatch, initialized, messagesState, notifyList, seq, t]);\n\treturn <InboxBadgeUpdater />;\n};\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/views/sidebar/sync-data-handler.jsx b/src/views/sidebar/sync-data-handler.jsx
--- a/src/views/sidebar/sync-data-handler.jsx	(revision d8bea371a1253f951f0f0ff48819868807c68aa7)
+++ b/src/views/sidebar/sync-data-handler.jsx	(date 1661936110000)
@@ -8,7 +8,8 @@
 	store,
 	useNotify,
 	useRefresh,
-	updatePrimaryBadge
+	updatePrimaryBadge,
+	getTags
 } from '@zextras/carbonio-shell-ui';
 import React, { useEffect, useState } from 'react';
 import { useDispatch, useSelector } from 'react-redux';
@@ -106,8 +107,9 @@
 								);
 							}
 							if (notify.created.c && notify.created.m) {
+								const tags = getTags();
 								const conversations = map(notify.created.c, (i) =>
-									normalizeConversation(i, notify.created.m)
+									normalizeConversation({ c: i, m: notify.created.m, tags })
 								);
 								dispatch(handleNotifyCreatedConversations(keyBy(conversations, 'id')));
 							}
Index: src/views/sidebar/shares-info-modal.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/views/sidebar/shares-info-modal.jsx b/src/views/sidebar/shares-info-modal.tsx
rename from src/views/sidebar/shares-info-modal.jsx
rename to src/views/sidebar/shares-info-modal.tsx
--- a/src/views/sidebar/shares-info-modal.jsx	(revision d8bea371a1253f951f0f0ff48819868807c68aa7)
+++ b/src/views/sidebar/shares-info-modal.tsx	(date 1661936110000)
@@ -3,12 +3,19 @@
  *
  * SPDX-License-Identifier: AGPL-3.0-only
  */
-import React from 'react';
+import React, { FC } from 'react';
+import { Folder } from '@zextras/carbonio-shell-ui';
 import { useTranslation } from 'react-i18next';
 import { Container, Icon, Row, Text } from '@zextras/carbonio-design-system';
 import { ModalHeader } from './commons/modal-header';
 
-export const ShareInfoRow = ({ icon, label, text }) => (
+type ShareInfoRowProps = {
+	icon: string;
+	label: string;
+	text: string | undefined;
+};
+
+export const ShareInfoRow: FC<ShareInfoRowProps> = ({ icon, label, text }) => (
 	<Row width="fill" mainAlignment="flex-start" padding={{ all: 'small' }}>
 		<Row padding={{ right: 'small' }}>
 			<Icon icon={icon} />
@@ -22,7 +29,12 @@
 	</Row>
 );
 
-export const SharesInfoModal = ({ onClose, folder }) => {
+type SharesInfoModalProps = {
+	onClose: () => void;
+	folder: Folder;
+};
+
+export const SharesInfoModal: FC<SharesInfoModalProps> = ({ onClose, folder }) => {
 	const [t] = useTranslation();
 
 	const text = (/r/.test(folder.perm || '') ? `${t('label.read', 'Read')}` : '')
@@ -50,7 +62,7 @@
 			<ShareInfoRow
 				icon="PersonOutline"
 				label={`${t('label.owner', 'Owner: ')}`}
-				text={folder.owner}
+				text={folder.isLink ? folder?.owner : ''}
 			/>
 			<ShareInfoRow
 				icon="MailModOutline"
@@ -65,7 +77,7 @@
 			<ShareInfoRow
 				icon="EmailOutline"
 				label={`${t('label.messages', 'Messages')}`}
-				text={folder.n}
+				text={String(folder.n)}
 			/>
 		</Container>
 	);
Index: src/normalizations/normalize-message.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport { getTags } from '@zextras/carbonio-shell-ui';\nimport { filter, find, isNil, map, omitBy, reduce } from 'lodash';\nimport { ParticipantRole } from '../commons/utils';\nimport {\n\tIncompleteMessage,\n\tMailMessagePart,\n\tSoapEmailParticipantRole,\n\tSoapMailParticipant,\n\tParticipant,\n\tSoapIncompleteMessage,\n\tSoapMailMessagePart\n} from '../types';\n\nexport function normalizeMailPartMapFn(v: SoapMailMessagePart): MailMessagePart {\n\tconst ret: MailMessagePart = {\n\t\tcontentType: v.ct,\n\t\tsize: v.s || 0,\n\t\tname: v.part,\n\t\tdisposition: v.cd\n\t};\n\tif (v.mp) {\n\t\tret.parts = map(v.mp || [], normalizeMailPartMapFn);\n\t}\n\tif (v.filename) ret.filename = v.filename;\n\tif (v.content) ret.content = v.content;\n\tif (v.ci) ret.ci = v.ci;\n\tif (v.cd) ret.disposition = v.cd;\n\treturn ret;\n}\n\nfunction findBodyPart(\n\tmp: Array<SoapMailMessagePart>,\n\tacc: { contentType: string; content: string },\n\tid: string\n): { contentType: string; content: string } {\n\tconst bodyPart = reduce(\n\t\tmp,\n\t\t(found, part) => {\n\t\t\tif (part.mp) return findBodyPart(part.mp, found, id);\n\t\t\tif (part && part.body) {\n\t\t\t\tif (!found.contentType.length) {\n\t\t\t\t\treturn { contentType: part.ct, content: part.content ?? '' };\n\t\t\t\t}\n\t\t\t\tif (\n\t\t\t\t\tpart.part &&\n\t\t\t\t\tpart.part.indexOf('.') === -1 &&\n\t\t\t\t\tpart.cd &&\n\t\t\t\t\tpart.cd === 'inline' &&\n\t\t\t\t\t!part.ci &&\n\t\t\t\t\t!(part.ct && part.ct === 'text/plain')\n\t\t\t\t) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...found,\n\t\t\t\t\t\tcontent: found.content.concat(\n\t\t\t\t\t\t\t`<img src='/service/home/~/?auth=co&loc=en&id=${id}&part=${part?.part}'>` ?? ''\n\t\t\t\t\t\t)\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\treturn { ...found, content: found.content.concat(part.content ?? '') };\n\t\t\t}\n\t\t\treturn found;\n\t\t},\n\t\tacc\n\t);\n\n\treturn bodyPart;\n}\n\nexport function generateBody(\n\tmp: Array<SoapMailMessagePart>,\n\tid: string\n): {\n\tcontentType: string;\n\tcontent: string;\n} {\n\treturn findBodyPart(mp, { contentType: '', content: '' }, id);\n}\n\nfunction participantTypeFromSoap(t: SoapEmailParticipantRole): ParticipantRole {\n\tswitch (t) {\n\t\tcase 'f':\n\t\t\treturn ParticipantRole.FROM;\n\t\tcase 't':\n\t\t\treturn ParticipantRole.TO;\n\t\tcase 'c':\n\t\t\treturn ParticipantRole.CARBON_COPY;\n\t\tcase 'b':\n\t\t\treturn ParticipantRole.BLIND_CARBON_COPY;\n\t\tcase 'r':\n\t\t\treturn ParticipantRole.REPLY_TO;\n\t\tcase 's':\n\t\t\treturn ParticipantRole.SENDER;\n\t\tcase 'n':\n\t\t\treturn ParticipantRole.READ_RECEIPT_NOTIFICATION;\n\t\tcase 'rf':\n\t\t\treturn ParticipantRole.RESENT_FROM;\n\t\tdefault:\n\t\t\tthrow new Error(`Participant type not handled: '${t}'`);\n\t}\n}\n\nexport function normalizeParticipantsFromSoap(e: SoapMailParticipant): Participant {\n\treturn {\n\t\ttype: participantTypeFromSoap(e.t),\n\t\taddress: e.a,\n\t\tname: e.d || e.a,\n\t\tfullName: e.p\n\t};\n}\nexport const getTagIdsFromName = (names: string | undefined): Array<string | undefined> => {\n\tconst tags = getTags();\n\treturn map(names?.split(','), (name) => find(tags, { name })?.id);\n};\n\nexport const getTagIds = (\n\tt: string | undefined,\n\ttn: string | undefined\n): Array<string | undefined> => {\n\tif (!isNil(t)) {\n\t\treturn filter(t.split(','), (tag) => tag !== '');\n\t}\n\tif (!isNil(tn)) {\n\t\treturn getTagIdsFromName(tn);\n\t}\n\treturn [];\n};\nexport const normalizeMailMessageFromSoap = (\n\tm: SoapIncompleteMessage,\n\tisComplete: boolean\n): IncompleteMessage => <IncompleteMessage>omitBy(\n\t\t{\n\t\t\tconversation: m.cid,\n\t\t\tid: m.id,\n\t\t\tdate: m.d,\n\t\t\tsize: m.s,\n\t\t\tparent: m.l,\n\t\t\tfragment: m.fr,\n\t\t\tsubject: m.su,\n\t\t\tparticipants: m.e ? map(m.e || [], normalizeParticipantsFromSoap) : undefined,\n\t\t\ttags: getTagIds(m.t, m.tn),\n\t\t\tparts: m.mp ? map(m.mp || [], normalizeMailPartMapFn) : undefined,\n\t\t\tinvite: m.inv,\n\t\t\tshr: m.shr,\n\t\t\tbody: m.mp ? generateBody(m.mp || [], m.id) : undefined,\n\t\t\tisComplete,\n\t\t\tisScheduled: !!m.autoSendTime,\n\t\t\tautoSendTime: m.autoSendTime,\n\t\t\tread: !isNil(m.f) ? !/u/.test(m.f) : true,\n\t\t\tattachment: !isNil(m.f) ? /a/.test(m.f) : undefined,\n\t\t\tflagged: !isNil(m.f) ? /f/.test(m.f) : undefined,\n\t\t\turgent: !isNil(m.f) ? /!/.test(m.f) : undefined,\n\t\t\tisDeleted: !isNil(m.f) ? /x/.test(m.f) : undefined,\n\t\t\tisDraft: !isNil(m.f) ? /d/.test(m.f) : undefined,\n\t\t\tisForwarded: !isNil(m.f) ? /w/.test(m.f) : undefined,\n\t\t\tisSentByMe: !isNil(m.f) ? /s/.test(m.f) : undefined,\n\t\t\tisInvite: !isNil(m.f) ? /v/.test(m.f) : undefined,\n\t\t\tisReplied: !isNil(m.f) ? /r/.test(m.f) : undefined,\n\t\t\tisReadReceiptRequested: !isNil(m.f) ? !/n/.test(m.f) : true\n\t\t},\n\t\tisNil\n\t);\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/normalizations/normalize-message.ts b/src/normalizations/normalize-message.ts
--- a/src/normalizations/normalize-message.ts	(revision d8bea371a1253f951f0f0ff48819868807c68aa7)
+++ b/src/normalizations/normalize-message.ts	(date 1661936110000)
@@ -4,7 +4,7 @@
  * SPDX-License-Identifier: AGPL-3.0-only
  */
 import { getTags } from '@zextras/carbonio-shell-ui';
-import { filter, find, isNil, map, omitBy, reduce } from 'lodash';
+import { filter, find, isNil, map, reduce, omitBy } from 'lodash';
 import { ParticipantRole } from '../commons/utils';
 import {
 	IncompleteMessage,
Index: src/views/sidebar/button-find-shares.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/views/sidebar/button-find-shares.tsx b/src/views/sidebar/button-find-shares.tsx
new file mode 100644
--- /dev/null	(date 1662115985000)
+++ b/src/views/sidebar/button-find-shares.tsx	(date 1662115985000)
@@ -0,0 +1,52 @@
+/*
+ * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>
+ *
+ * SPDX-License-Identifier: AGPL-3.0-only
+ */
+
+import React, { FC, useCallback, useContext, useMemo } from 'react';
+import { Button, ModalManagerContext, Container } from '@zextras/carbonio-design-system';
+import { filter, isEqual, uniqWith } from 'lodash';
+import { useTranslation } from 'react-i18next';
+import { useDispatch } from 'react-redux';
+import { getShareInfo } from '../../store/actions/get-share-info';
+import { ResFolder } from '../../types';
+import { SharesModal } from './shares-modal';
+
+export const ButtonFindShares: FC = () => {
+	const [t] = useTranslation();
+	const dispatch = useDispatch();
+	// eslint-disable-next-line @typescript-eslint/ban-types
+	const createModal = useContext(ModalManagerContext) as Function;
+
+	const label = useMemo(() => t('label.find_shares', 'Find shares'), [t]);
+	const openFindShares = useCallback(
+		(ev: MouseEvent): void => {
+			ev.stopPropagation();
+			dispatch(getShareInfo())
+				// eslint-disable-next-line @typescript-eslint/ban-ts-comment
+				// @ts-ignore
+				.then((res: any) => {
+					if (res.type.includes('fulfilled') && res.payload?.share?.length > 0) {
+						const resFolders: Array<ResFolder> = uniqWith(
+							filter(res.payload.share, ['view', 'message']),
+							isEqual
+						);
+						const closeModal = createModal(
+							{
+								children: <SharesModal folders={resFolders} onClose={(): void => closeModal()} />
+							},
+							true
+						);
+					}
+				});
+		},
+		[createModal, dispatch]
+	);
+
+	return (
+		<Container padding={{ horizontal: 'medium', vertical: 'small' }}>
+			<Button type="outlined" label={label} color="primary" size="fill" onClick={openFindShares} />
+		</Container>
+	);
+};
Index: src/views/sidebar/use-folder-actions.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/views/sidebar/use-folder-actions.tsx b/src/views/sidebar/use-folder-actions.tsx
new file mode 100644
--- /dev/null	(date 1662120682000)
+++ b/src/views/sidebar/use-folder-actions.tsx	(date 1662120682000)
@@ -0,0 +1,300 @@
+/*
+ * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>
+ *
+ * SPDX-License-Identifier: AGPL-3.0-only
+ */
+
+import React, { useCallback, useContext, useMemo, useState } from 'react';
+import { ModalManagerContext } from '@zextras/carbonio-design-system';
+import { Folder, FOLDERS } from '@zextras/carbonio-shell-ui';
+import { startsWith } from 'lodash';
+import { useTranslation } from 'react-i18next';
+import { useDispatch } from 'react-redux';
+import { FolderActionsType } from '../../commons/utils';
+import { folderAction } from '../../store/actions/folder-action';
+import { DeleteModal } from './delete-modal';
+import { EditModal } from './edit-modal';
+import { EmptyModal } from './empty-modal';
+import { MoveModal } from './move-modal';
+import { NewModal } from './new-modal';
+import ShareFolderModal from './share-folder-modal';
+import { SharesInfoModal } from './shares-info-modal';
+
+type FolderActionsProps = {
+	id: string;
+	icon: string;
+	label: string;
+	click: (e: MouseEvent) => void;
+	disabled?: boolean;
+};
+export const useFolderActions = (folder: Folder): Array<FolderActionsProps> => {
+	const [t] = useTranslation();
+	const dispatch = useDispatch();
+	// eslint-disable-next-line @typescript-eslint/ban-types
+	const createModal = useContext(ModalManagerContext) as Function;
+	const [activeModal, setActiveModal] = useState('default');
+	const [activeGrant, setActiveGrant] = useState({});
+	const goBack = useCallback(() => {
+		setActiveModal('default');
+	}, [setActiveModal]);
+
+	// const newFolder = useCallback(
+	// 	(_folder, _createModal, t) => ({
+	// 		id: FolderActionsType.NEW,
+	// 		icon: 'FolderAddOutline',
+	// 		label: t('label.new_folder', 'New Folder'),
+	// 		click: (e: MouseEvent): void => {
+	// 			if (e) {
+	// 				e.stopPropagation();
+	// 			}
+	// 			const closeModal = createModal(
+	// 				{
+	// 					maxHeight: '90vh',
+	// 					children: (
+	// 						<>
+	// 							<NewModal folder={_folder} onClose={(): void => closeModal()} />
+	// 						</>
+	// 					)
+	// 				},
+	// 				true
+	// 			);
+	// 		}
+	// 	}),
+	// 	[folder, createModal, t]
+	// );
+
+	const actions = useMemo(
+		() => [
+			{
+				id: FolderActionsType.NEW,
+				icon: 'FolderAddOutline',
+				label: t('label.new_folder', 'New Folder'),
+				click: (e: MouseEvent): void => {
+					if (e) {
+						e.stopPropagation();
+					}
+					const closeModal = createModal(
+						{
+							maxHeight: '90vh',
+							children: (
+								<>
+									<NewModal folder={folder} onClose={(): void => closeModal()} />
+								</>
+							)
+						},
+						true
+					);
+				}
+			},
+			{
+				id: FolderActionsType.MOVE,
+				icon: 'MoveOutline',
+				label: startsWith(folder.absFolderPath, '/Trash')
+					? t('label.restore', 'Restore')
+					: t('label.move', 'Move'),
+				click: (e: MouseEvent): void => {
+					if (e) {
+						e.stopPropagation();
+					}
+					const closeModal = createModal(
+						{
+							maxHeight: '90vh',
+							children: (
+								<>
+									<MoveModal folder={folder} onClose={(): void => closeModal()} />
+								</>
+							)
+						},
+						true
+					);
+				}
+			},
+			{
+				id: FolderActionsType.EMPTY,
+				icon: folder.id === FOLDERS.TRASH ? 'DeletePermanentlyOutline' : 'EmptyFolderOutline',
+				label:
+					folder.id === FOLDERS.TRASH
+						? t('folder_panel.action.empty.trash', 'Empty Trash')
+						: t('folder_panel.action.wipe.folder_panel', 'Wipe Folder'),
+				disabled: folder.n === 0 && folder.children?.length === 0,
+				click: (e: MouseEvent): void => {
+					if (e) {
+						e.stopPropagation();
+					}
+					const closeModal = createModal(
+						{
+							children: (
+								<>
+									<EmptyModal onClose={(): void => closeModal()} folder={folder} />
+								</>
+							)
+						},
+						true
+					);
+				}
+			},
+			{
+				id: FolderActionsType.EDIT,
+				icon: 'Edit2Outline',
+				label: folder.isLink
+					? t('folder_panel.action.edit_properties', 'Edit Properties')
+					: t('label.edit', 'Edit'),
+				click: (e: MouseEvent): void => {
+					if (e) {
+						e.stopPropagation();
+					}
+					const closeModal = createModal(
+						{
+							maxHeight: '90vh',
+							children: (
+								<>
+									<EditModal onClose={(): void => closeModal()} folder={folder} />
+								</>
+							)
+						},
+						true
+					);
+				}
+			},
+			{
+				id: FolderActionsType.DELETE,
+				icon: 'Trash2Outline',
+				label: startsWith(folder.absFolderPath, '/Trash')
+					? t('label.delete_permanently', 'Delete Permanently')
+					: t('label.delete', 'Delete'),
+				click: (e: MouseEvent): void => {
+					if (e) {
+						e.stopPropagation();
+					}
+					const closeModal = createModal(
+						{
+							children: (
+								<>
+									<DeleteModal onClose={(): void => closeModal()} folder={folder} />
+								</>
+							)
+						},
+						true
+					);
+				}
+			},
+			{
+				id: FolderActionsType.SHARE,
+				icon: 'ShareOutline',
+				label: t('action.share_folder', 'Share folder'),
+				click: (e: MouseEvent): void => {
+					if (e) {
+						e.stopPropagation();
+					}
+					const closeModal = createModal(
+						{
+							children: (
+								<>
+									<ShareFolderModal
+										onClose={(): void => closeModal()}
+										folder={folder}
+										activeGrant={activeGrant}
+										goBack={goBack}
+									/>
+								</>
+							)
+						},
+						true
+					);
+				}
+			},
+			{
+				id: FolderActionsType.REMOVE_FROM_LIST,
+				icon: 'CloseOutline',
+				label: t('label.remove_from_this_list', 'Remove from this list'),
+				click: (e): void => {
+					if (e) {
+						e.stopPropagation();
+						dispatch(folderAction({ folder, op: 'delete' }));
+					}
+				}
+			},
+			{
+				id: FolderActionsType.SHARES_INFO,
+				icon: 'InfoOutline',
+				label: t('label.shares_info', `Shared folder's info`),
+				click: (e): void => {
+					if (e) {
+						e.stopPropagation();
+					}
+					const closeModal = createModal(
+						{
+							children: (
+								<>
+									<SharesInfoModal onClose={(): void => closeModal()} folder={folder} />
+								</>
+							)
+						},
+						true
+					);
+				}
+			}
+		],
+		[activeGrant, createModal, dispatch, folder, goBack, t]
+	);
+
+	const defaultFolderActions = useMemo(
+		() =>
+			actions.filter(
+				(action) =>
+					action.id !== FolderActionsType.SHARES_INFO &&
+					action.id !== FolderActionsType.REMOVE_FROM_LIST
+			),
+		[actions]
+	);
+	const id =
+		folder.id.indexOf(':') !== -1 ? folder.id.slice(folder.id.indexOf(':') + 1) : folder.id;
+
+	switch (id) {
+		// default folders
+		case FOLDERS.INBOX:
+		case FOLDERS.SENT:
+		case FOLDERS.DRAFTS:
+			return defaultFolderActions.map((action) =>
+				action.id === FolderActionsType.MOVE || action.id === FolderActionsType.DELETE
+					? { ...action, disabled: true }
+					: action
+			);
+
+		case FOLDERS.SPAM:
+			return defaultFolderActions.map((action) =>
+				action.id === FolderActionsType.NEW ||
+				action.id === FolderActionsType.MOVE ||
+				action.id === FolderActionsType.DELETE
+					? { ...action, disabled: true }
+					: action
+			);
+		case FOLDERS.TRASH:
+			return defaultFolderActions.map((action) =>
+				action.id === FolderActionsType.MOVE ||
+				action.id === FolderActionsType.DELETE ||
+				action.id === FolderActionsType.EDIT ||
+				action.id === FolderActionsType.SHARE
+					? { ...action, disabled: true }
+					: action
+			);
+		// customizable folders
+		default:
+			return folder.isLink
+				? actions.filter(
+						(action) =>
+							action.id === FolderActionsType.SHARES_INFO ||
+							action.id === FolderActionsType.REMOVE_FROM_LIST ||
+							action.id === FolderActionsType.EDIT
+				  )
+				: defaultFolderActions.map((action) => {
+						if (
+							startsWith(folder.absFolderPath, '/Trash') &&
+							(action.id === FolderActionsType.NEW || action.id === FolderActionsType.EDIT)
+						) {
+							return { ...action, disabled: true };
+						}
+						return action;
+				  });
+	}
+};
Index: src/views/sidebar/share-folder-modal.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport React, { ChangeEvent, FC, useCallback, useContext, useMemo, useState } from 'react';\nimport {\n\tContainer,\n\tInput,\n\tSelect,\n\tText,\n\tCheckbox,\n\tRow,\n\tChipInput,\n\tPadding,\n\tSnackbarManagerContext\n} from '@zextras/carbonio-design-system';\nimport { useIntegratedComponent, useUserAccounts } from '@zextras/carbonio-shell-ui';\nimport { map, replace, split } from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { useDispatch } from 'react-redux';\nimport {\n\tShareCalendarWithOptions,\n\tfindLabel,\n\tShareCalendarRoleOptions\n} from '../../integrations/shared-invite-reply/parts/utils';\nimport { shareFolder } from '../../store/actions/share-folder';\nimport { sendShareNotification } from '../../store/actions/send-share-notification';\nimport ModalFooter from './commons/modal-footer';\nimport { ModalHeader } from './commons/modal-header';\nimport { capitalise } from './utils';\nimport { GranteeInfo } from './parts/edit/share-folder-properties';\nimport { ModalProps } from '../../types';\n\ntype ShareFolderModalProps = ModalProps & {\n\tgoBack: () => void;\n\teditMode?: boolean;\n\tactiveGrant: Partial<{ perm: string; d: string }>;\n};\n\nconst ShareFolderModal: FC<ShareFolderModalProps> = ({\n\tonClose,\n\tfolder,\n\tgoBack,\n\teditMode = false,\n\tactiveGrant\n}) => {\n\tconst [t] = useTranslation();\n\t// eslint-disable-next-line @typescript-eslint/ban-types\n\tconst dispatch = useDispatch() as Function;\n\t// eslint-disable-next-line @typescript-eslint/ban-types\n\tconst createSnackbar = useContext(SnackbarManagerContext) as Function;\n\tconst [ContactInput, integrationAvailable] = useIntegratedComponent('contact-input');\n\tconst shareCalendarWithOptions = useMemo(() => ShareCalendarWithOptions(t), [t]);\n\tconst shareCalendarRoleOptions = useMemo(() => ShareCalendarRoleOptions(t), [t]);\n\tconst [sendNotification, setSendNotification] = useState(false);\n\tconst [standardMessage, setStandardMessage] = useState('');\n\tconst [contacts, setContacts] = useState<any>([]);\n\tconst [shareWithUserType, setshareWithUserType] = useState('usr');\n\tconst [shareWithUserRole, setshareWithUserRole] = useState(editMode ? activeGrant.perm : 'r');\n\tconst userName = useMemo(() => replace(split(activeGrant?.d, '@')?.[0], '.', ' '), [activeGrant]);\n\tconst userNameCapitalise = useMemo(() => capitalise(userName), [userName]);\n\n\tconst accounts = useUserAccounts();\n\n\tconst title = useMemo(\n\t\t() =>\n\t\t\teditMode\n\t\t\t\t? `${t('label.edit_access', {\n\t\t\t\t\t\tname: userNameCapitalise,\n\t\t\t\t\t\tdefaultValue: \"Edit {{name}}'s access\"\n\t\t\t\t  })} `\n\t\t\t\t: `${t('label.share', 'Share')} ${folder.folder.name}`,\n\t\t[t, folder, editMode, userNameCapitalise]\n\t);\n\n\tconst onShareWithChange = useCallback((shareWith) => {\n\t\tsetshareWithUserType(shareWith);\n\t}, []);\n\n\tconst onShareRoleChange = useCallback((shareRole) => {\n\t\tsetshareWithUserRole(shareRole);\n\t}, []);\n\n\tconst onConfirm = useCallback(() => {\n\t\tdispatch(\n\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t// @ts-ignore\n\t\t\tshareFolder({\n\t\t\t\tsendNotification,\n\t\t\t\tstandardMessage,\n\t\t\t\tcontacts: editMode ? [{ email: activeGrant.d }] : contacts,\n\t\t\t\tshareWithUserType,\n\t\t\t\tshareWithUserRole,\n\t\t\t\tfolder: folder.folder,\n\t\t\t\taccounts\n\t\t\t})\n\t\t).then((res: { type: string }) => {\n\t\t\tif (res.type.includes('fulfilled')) {\n\t\t\t\tcreateSnackbar({\n\t\t\t\t\tkey: `share-${folder.id}`,\n\t\t\t\t\treplace: true,\n\t\t\t\t\thideButton: true,\n\t\t\t\t\ttype: 'info',\n\t\t\t\t\tlabel: editMode\n\t\t\t\t\t\t? t('snackbar.share_updated', '\"Access rights updated\"')\n\t\t\t\t\t\t: t('snackbar.folder_shared', 'Folder shared'),\n\t\t\t\t\tautoHideTimeout: 3000\n\t\t\t\t});\n\t\t\t\tsendNotification &&\n\t\t\t\t\tdispatch(\n\t\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\tsendShareNotification({\n\t\t\t\t\t\t\tsendNotification,\n\t\t\t\t\t\t\tstandardMessage,\n\t\t\t\t\t\t\tcontacts: editMode ? [{ email: activeGrant.d }] : contacts,\n\t\t\t\t\t\t\tshareWithUserType,\n\t\t\t\t\t\t\tshareWithUserRole,\n\t\t\t\t\t\t\tfolder: folder.folder,\n\t\t\t\t\t\t\taccounts\n\t\t\t\t\t\t})\n\t\t\t\t\t).then((res2: { type: string }) => {\n\t\t\t\t\t\tif (!res2.type.includes('fulfilled')) {\n\t\t\t\t\t\t\tcreateSnackbar({\n\t\t\t\t\t\t\t\tkey: `share-${folder.id}`,\n\t\t\t\t\t\t\t\treplace: true,\n\t\t\t\t\t\t\t\ttype: 'error',\n\t\t\t\t\t\t\t\thideButton: true,\n\t\t\t\t\t\t\t\tlabel: t('label.error_try_again', 'Something went wrong, please try again'),\n\t\t\t\t\t\t\t\tautoHideTimeout: 3000\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\tgoBack && goBack();\n\t\t\t}\n\t\t\tonClose();\n\t\t});\n\t}, [\n\t\tdispatch,\n\t\tsendNotification,\n\t\tstandardMessage,\n\t\teditMode,\n\t\tactiveGrant.d,\n\t\tcontacts,\n\t\tshareWithUserType,\n\t\tshareWithUserRole,\n\t\tfolder,\n\t\taccounts,\n\t\tonClose,\n\t\tcreateSnackbar,\n\t\tt,\n\t\tgoBack\n\t]);\n\n\tconst disableEdit = useMemo(\n\t\t() => activeGrant?.perm === shareWithUserRole,\n\t\t[activeGrant?.perm, shareWithUserRole]\n\t);\n\n\treturn (\n\t\t<>\n\t\t\t<Container\n\t\t\t\tmainAlignment=\"center\"\n\t\t\t\tcrossAlignment=\"flex-start\"\n\t\t\t\theight=\"fit\"\n\t\t\t\tpadding={{ vertical: 'small' }}\n\t\t\t>\n\t\t\t\t<ModalHeader title={title} onClose={onClose} />\n\t\t\t\t<Padding top=\"small\" />\n\t\t\t\t{!editMode && (\n\t\t\t\t\t<Container height=\"fit\">\n\t\t\t\t\t\t<Select\n\t\t\t\t\t\t\titems={shareCalendarWithOptions}\n\t\t\t\t\t\t\tbackground=\"gray5\"\n\t\t\t\t\t\t\tlabel={t('label.share_with', 'Share with')}\n\t\t\t\t\t\t\tonChange={onShareWithChange}\n\t\t\t\t\t\t\tdefaultSelection={{\n\t\t\t\t\t\t\t\tvalue: 'usr',\n\t\t\t\t\t\t\t\tlabel: findLabel(shareCalendarWithOptions, 'usr')\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Container>\n\t\t\t\t)}\n\t\t\t\t{editMode ? (\n\t\t\t\t\t<Container\n\t\t\t\t\t\torientation=\"horizontal\"\n\t\t\t\t\t\tmainAlignment=\"flex-end\"\n\t\t\t\t\t\tpadding={{ bottom: 'large', top: 'large' }}\n\t\t\t\t\t>\n\t\t\t\t\t\t<GranteeInfo grant={activeGrant} shareCalendarRoleOptions={shareCalendarRoleOptions} />\n\t\t\t\t\t</Container>\n\t\t\t\t) : (\n\t\t\t\t\t<Container height=\"fit\" padding={{ vertical: 'small' }}>\n\t\t\t\t\t\t{integrationAvailable ? (\n\t\t\t\t\t\t\t<ContactInput\n\t\t\t\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\t\t\tbackground=\"gray4\"\n\t\t\t\t\t\t\t\tplaceholder={t('share.recipients_address', 'Recipients’ e-mail addresses')}\n\t\t\t\t\t\t\t\tonChange={(ev: ChangeEvent<HTMLInputElement>): void => {\n\t\t\t\t\t\t\t\t\tsetContacts(ev);\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tdefaultValue={contacts}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<ChipInput\n\t\t\t\t\t\t\t\tbackgroundColor=\"gray5\"\n\t\t\t\t\t\t\t\tplaceholder={t('share.recipients_address', 'Recipients’ e-mail addresses')}\n\t\t\t\t\t\t\t\tonChange={(ev: ChangeEvent<HTMLInputElement>): void => {\n\t\t\t\t\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\t\t\t\tsetContacts(map(ev, (contact) => ({ email: contact.address })));\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tvalueKey=\"address\"\n\t\t\t\t\t\t\t\tgetChipLabel={(\n\t\t\t\t\t\t\t\t\tparticipant: Partial<{ fullName: string; name: string; address: string }>\n\t\t\t\t\t\t\t\t): string | undefined =>\n\t\t\t\t\t\t\t\t\tparticipant.fullName ?? participant.name ?? participant.address\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</Container>\n\t\t\t\t)}\n\n\t\t\t\t<Container height=\"fit\">\n\t\t\t\t\t<Select\n\t\t\t\t\t\titems={shareCalendarRoleOptions}\n\t\t\t\t\t\tbackground=\"gray5\"\n\t\t\t\t\t\tlabel={t('label.role', 'Role')}\n\t\t\t\t\t\tonChange={onShareRoleChange}\n\t\t\t\t\t\tdefaultSelection={{\n\t\t\t\t\t\t\tvalue: editMode ? activeGrant?.perm : 'r',\n\t\t\t\t\t\t\tlabel: findLabel(shareCalendarRoleOptions, editMode ? activeGrant?.perm : 'r')\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t</Container>\n\t\t\t\t<Container\n\t\t\t\t\theight=\"fit\"\n\t\t\t\t\tmainAlignment=\"flex-start\"\n\t\t\t\t\tcrossAlignment=\"flex-start\"\n\t\t\t\t\tpadding={{ vertical: 'medium' }}\n\t\t\t\t>\n\t\t\t\t\t<Checkbox\n\t\t\t\t\t\tvalue={sendNotification}\n\t\t\t\t\t\tdefaultChecked={sendNotification}\n\t\t\t\t\t\tonClick={(): void => setSendNotification(!sendNotification)}\n\t\t\t\t\t\tlabel={t('share.send_notification', 'Send a notification about this share')}\n\t\t\t\t\t/>\n\t\t\t\t</Container>\n\n\t\t\t\t<Container height=\"fit\">\n\t\t\t\t\t<Input\n\t\t\t\t\t\tlabel={t('share.standard_message', 'Add a note to the standard message')}\n\t\t\t\t\t\tvalue={standardMessage}\n\t\t\t\t\t\tonChange={(ev: ChangeEvent<HTMLInputElement>): void => {\n\t\t\t\t\t\t\tsetStandardMessage(ev.target.value);\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tdisabled={!sendNotification}\n\t\t\t\t\t\tbackgroundColor=\"gray5\"\n\t\t\t\t\t/>\n\t\t\t\t</Container>\n\t\t\t\t<Container\n\t\t\t\t\torientation=\"horizontal\"\n\t\t\t\t\tcrossAlignment=\"baseline\"\n\t\t\t\t\tmainAlignment=\"baseline\"\n\t\t\t\t\tpadding={{ all: 'small' }}\n\t\t\t\t>\n\t\t\t\t\t<Row padding={{ right: 'small' }}>\n\t\t\t\t\t\t<Text weight=\"bold\" size=\"small\" color=\"gray0\">\n\t\t\t\t\t\t\tNote:\n\t\t\t\t\t\t</Text>\n\t\t\t\t\t</Row>\n\t\t\t\t\t<Row padding={{ bottom: 'small' }}>\n\t\t\t\t\t\t<Text overflow=\"break-word\" size=\"small\" color=\"gray1\">\n\t\t\t\t\t\t\t{t(\n\t\t\t\t\t\t\t\t'share.share_note',\n\t\t\t\t\t\t\t\t'The standard message displays your name, the name of the shared item, pemissions granted to the recipients, and sign in information, if necessary.'\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</Text>\n\t\t\t\t\t</Row>\n\t\t\t\t</Container>\n\t\t\t</Container>\n\t\t\t<ModalFooter\n\t\t\t\tlabel={\n\t\t\t\t\teditMode ? t('action.edit_share', 'Edit Share') : t('action.share_folder', 'Share folder')\n\t\t\t\t}\n\t\t\t\tonConfirm={onConfirm}\n\t\t\t\tdisabled={editMode ? disableEdit : contacts.length < 1}\n\t\t\t\tsecondaryAction={goBack}\n\t\t\t\tsecondaryLabel={t('label.go_back', 'Go Back')}\n\t\t\t/>\n\t\t</>\n\t);\n};\n\nexport default ShareFolderModal;\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/views/sidebar/share-folder-modal.tsx b/src/views/sidebar/share-folder-modal.tsx
--- a/src/views/sidebar/share-folder-modal.tsx	(revision d8bea371a1253f951f0f0ff48819868807c68aa7)
+++ b/src/views/sidebar/share-folder-modal.tsx	(date 1661936110000)
@@ -70,7 +70,7 @@
 						name: userNameCapitalise,
 						defaultValue: "Edit {{name}}'s access"
 				  })} `
-				: `${t('label.share', 'Share')} ${folder.folder.name}`,
+				: `${t('label.share', 'Share')} ${folder.name}`,
 		[t, folder, editMode, userNameCapitalise]
 	);
 
@@ -92,7 +92,7 @@
 				contacts: editMode ? [{ email: activeGrant.d }] : contacts,
 				shareWithUserType,
 				shareWithUserRole,
-				folder: folder.folder,
+				folder,
 				accounts
 			})
 		).then((res: { type: string }) => {
@@ -117,7 +117,7 @@
 							contacts: editMode ? [{ email: activeGrant.d }] : contacts,
 							shareWithUserType,
 							shareWithUserRole,
-							folder: folder.folder,
+							folder,
 							accounts
 						})
 					).then((res2: { type: string }) => {
Index: src/views/sidebar/sidebar-accordion-mui.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/views/sidebar/sidebar-accordion-mui.tsx b/src/views/sidebar/sidebar-accordion-mui.tsx
new file mode 100644
--- /dev/null	(date 1662125496000)
+++ b/src/views/sidebar/sidebar-accordion-mui.tsx	(date 1662125496000)
@@ -0,0 +1,82 @@
+/*
+ * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>
+ *
+ * SPDX-License-Identifier: AGPL-3.0-only
+ */
+
+import ExpandMoreIcon from '@mui/icons-material/ExpandMore';
+import Accordion from '@mui/material/Accordion';
+import AccordionDetails from '@mui/material/AccordionDetails';
+import AccordionSummary from '@mui/material/AccordionSummary';
+import Container from '@mui/material/Container';
+import { Folder } from '@zextras/carbonio-shell-ui';
+import React, { FC, useCallback, useRef } from 'react';
+import { useLocalStorage } from '../../hooks/use-local-storage';
+import AccordionCustomComponent from './accordion-custom-component';
+import { ButtonFindShares } from './button-find-shares';
+
+export const SidebarAccordionMui: FC<{ accordions: Array<Folder>; folderId: string }> = ({
+	accordions,
+	folderId
+}) => {
+	const [openIds, setOpenIds] = useLocalStorage<Array<string>>('open_mails_folders', []);
+	const sidebarRef = useRef<HTMLInputElement>(null);
+
+	const onClick = useCallback(
+		(accordion: Folder, expanded: boolean): void => {
+			if (expanded) {
+				setOpenIds((state: Array<string>) =>
+					state.includes(accordion.id) ? state : [...state, accordion.id]
+				);
+			} else {
+				setOpenIds((state: Array<string>) => state.filter((id) => id !== accordion.id));
+			}
+		},
+		[setOpenIds]
+	);
+
+	return (
+		<Container disableGutters sx={{ width: '100%' }}>
+			{accordions.map((accordion) =>
+				accordion.id === 'find_shares' ? (
+					<ButtonFindShares />
+				) : (
+					<div key={accordion.id} ref={sidebarRef}>
+						<Accordion
+							disableGutters
+							TransitionProps={{ unmountOnExit: true }}
+							expanded={openIds.includes(accordion.id)}
+						>
+							<AccordionSummary
+								expandIcon={
+									accordion.children.length > 0 && (
+										<ExpandMoreIcon
+											color="primary"
+											onClick={(e): void => {
+												e.preventDefault();
+												onClick(accordion, !openIds.includes(accordion.id));
+											}}
+										/>
+									)
+								}
+								aria-controls="panel1a-content"
+								id={accordion.id}
+								sx={{
+									backgroundColor: accordion.id === folderId ? '#96b8e8' : '#f5f6f8',
+									'&:hover': { backgroundColor: accordion.id === folderId ? '#abc7ed' : '#D7DBE3' }
+								}}
+							>
+								<AccordionCustomComponent item={accordion} />
+							</AccordionSummary>
+							{accordion.children.length > 0 && (
+								<AccordionDetails>
+									<SidebarAccordionMui accordions={accordion.children} folderId={folderId} />
+								</AccordionDetails>
+							)}
+						</Accordion>
+					</div>
+				)
+			)}
+		</Container>
+	);
+};
Index: src/normalizations/normalize-conversation.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport { getTags } from '@zextras/carbonio-shell-ui';\nimport { filter, find, isNil, map, omitBy } from 'lodash';\nimport { Conversation, SoapIncompleteMessage, SoapConversation } from '../types';\nimport { normalizeParticipantsFromSoap } from './normalize-message';\n\nexport const getTagIdsFromName = (names: string | undefined): Array<string | undefined> => {\n\tconst tags = getTags();\n\treturn map(names?.split(','), (name) => find(tags, { name })?.id);\n};\n\nexport const getTagIds = (\n\tt: string | undefined,\n\ttn: string | undefined\n): Array<string | undefined> => {\n\tif (!isNil(t)) {\n\t\treturn filter(t.split(','), (tag) => tag !== '');\n\t}\n\tif (!isNil(tn)) {\n\t\treturn getTagIdsFromName(tn);\n\t}\n\treturn [];\n};\nexport const normalizeConversation = (\n\tc: SoapConversation,\n\tm?: Array<SoapIncompleteMessage>\n): Partial<Conversation> => {\n\tconst filteredMsgs = c?.m ?? filter(m ?? [], ['cid', c?.id]);\n\tconst messages = filteredMsgs?.length\n\t\t? map(filteredMsgs, (msg) => ({\n\t\t\t\tid: msg.id,\n\t\t\t\tparent: msg.l,\n\t\t\t\tdate: Number(msg?.d)\n\t\t  }))\n\t\t: undefined;\n\n\treturn omitBy(\n\t\t{\n\t\t\ttags: getTagIds(c.t, c.tn),\n\t\t\tid: c.id,\n\t\t\tdate: c.d,\n\t\t\tmsgCount: c.n,\n\t\t\tunreadMsgCount: c.u,\n\t\t\tmessages,\n\t\t\tparticipants: c.e ? map(c.e, normalizeParticipantsFromSoap) : undefined,\n\t\t\tsubject: c.su,\n\t\t\tfragment: c.fr,\n\t\t\tread: !isNil(c.f) ? !/u/.test(c.f) : !(c.u > 0),\n\t\t\tattachment: !isNil(c.f) ? /a/.test(c.f) : undefined,\n\t\t\tflagged: !isNil(c.f) ? /f/.test(c.f) : undefined,\n\t\t\turgent: !isNil(c.f) ? /!/.test(c.f) : undefined\n\t\t},\n\t\tisNil\n\t);\n};\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/normalizations/normalize-conversation.ts b/src/normalizations/normalize-conversation.ts
--- a/src/normalizations/normalize-conversation.ts	(revision d8bea371a1253f951f0f0ff48819868807c68aa7)
+++ b/src/normalizations/normalize-conversation.ts	(date 1662124979000)
@@ -3,32 +3,41 @@
  *
  * SPDX-License-Identifier: AGPL-3.0-only
  */
-import { getTags } from '@zextras/carbonio-shell-ui';
-import { filter, find, isNil, map, omitBy } from 'lodash';
+import { Tags } from '@zextras/carbonio-shell-ui';
+import { filter, find, isNil, map } from 'lodash';
+import { omitBy } from '../commons/utils';
 import { Conversation, SoapIncompleteMessage, SoapConversation } from '../types';
 import { normalizeParticipantsFromSoap } from './normalize-message';
 
-export const getTagIdsFromName = (names: string | undefined): Array<string | undefined> => {
-	const tags = getTags();
-	return map(names?.split(','), (name) => find(tags, { name })?.id);
-};
-
+export const getTagIdsFromName = (
+	names: string | undefined,
+	tags?: Tags
+): Array<string | undefined> => map(names?.split(','), (name) => find(tags, { name })?.id);
 export const getTagIds = (
 	t: string | undefined,
-	tn: string | undefined
+	tn: string | undefined,
+	tags?: Tags
 ): Array<string | undefined> => {
 	if (!isNil(t)) {
 		return filter(t.split(','), (tag) => tag !== '');
 	}
 	if (!isNil(tn)) {
-		return getTagIdsFromName(tn);
+		return getTagIdsFromName(tn, tags);
 	}
 	return [];
 };
-export const normalizeConversation = (
-	c: SoapConversation,
-	m?: Array<SoapIncompleteMessage>
-): Partial<Conversation> => {
+
+export type NormalizeConversationProps = {
+	c: SoapConversation;
+	tags: Tags;
+	m?: Array<SoapIncompleteMessage>;
+};
+
+export const normalizeConversation = ({
+	c,
+	m,
+	tags
+}: NormalizeConversationProps): Partial<Conversation> => {
 	const filteredMsgs = c?.m ?? filter(m ?? [], ['cid', c?.id]);
 	const messages = filteredMsgs?.length
 		? map(filteredMsgs, (msg) => ({
@@ -40,7 +49,7 @@
 
 	return omitBy(
 		{
-			tags: getTagIds(c.t, c.tn),
+			tags: getTagIds(c.t, c.tn, tags),
 			id: c.id,
 			date: c.d,
 			msgCount: c.n,
Index: src/views/sidebar/collapsed-sidebar-items.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/views/sidebar/collapsed-sidebar-items.jsx b/src/views/sidebar/collapsed-sidebar-items.tsx
rename from src/views/sidebar/collapsed-sidebar-items.jsx
rename to src/views/sidebar/collapsed-sidebar-items.tsx
--- a/src/views/sidebar/collapsed-sidebar-items.jsx	(revision d8bea371a1253f951f0f0ff48819868807c68aa7)
+++ b/src/views/sidebar/collapsed-sidebar-items.tsx	(date 1662114713000)
@@ -3,25 +3,25 @@
  *
  * SPDX-License-Identifier: AGPL-3.0-only
  */
-import React, { useMemo } from 'react';
-import { AppLink } from '@zextras/carbonio-shell-ui';
+import React, { FC, useMemo } from 'react';
+import { AppLink, Folder } from '@zextras/carbonio-shell-ui';
 import { Row, Padding, Tooltip, IconButton } from '@zextras/carbonio-design-system';
 import { getFolderIconColor, getFolderIconName } from './utils';
 
-const CollapsedSideBarItems = ({ folder }) => {
+const CollapsedSideBarItems: FC<{ folder: Folder }> = ({ folder }) => {
 	const folderIconColor = useMemo(() => getFolderIconColor(folder), [folder]);
 	const folderIconLabel = useMemo(() => getFolderIconName(folder), [folder]);
 
 	return (
 		<AppLink to={`/folder/${folder.id}`} style={{ width: '100%', textDecoration: 'none' }}>
 			<Row mainAlignment="flex-start" takeAvailableSpace>
-				<Tooltip label={folder.label} placement="right">
+				<Tooltip label={folder.name} placement="right">
 					<Padding all="extrasmall">
 						<IconButton
 							customSize={{ iconSize: 'large', paddingSize: 'small' }}
 							icon={folderIconLabel}
 							customIconColor={folderIconColor}
-							onClick={() => undefined}
+							onClick={(): void => undefined}
 						/>
 					</Padding>
 				</Tooltip>
Index: package.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\n  \"name\": \"carbonio-mails-ui\",\n  \"version\": \"0.1.30\",\n  \"description\": \"Mails module for Zextras Carbonio\",\n  \"main\": \"src/app.jsx\",\n  \"scripts\": {\n    \"build\": \"sdk build\",\n    \"deploy\": \"sdk deploy\",\n    \"start\": \"sdk watch\",\n    \"postinstall\": \"is-ci || husky install\",\n    \"prepublishOnly\": \"pinst --disable\",\n    \"postpublish\": \"pinst --enable\",\n    \"type-check\": \"tsc --noEmit\",\n    \"type-check:watch\": \"npm run type-check -- --watch\",\n    \"lint\": \"eslint --ext .js,.jsx,.ts,.tsx --resolve-plugins-relative-to node_modules/@zextras/carbonio-ui-configs src\",\n    \"test\": \"jest\"\n  },\n  \"files\": [\n    \"src/types/\"\n  ],\n  \"types\": \"./src/types/index.d.ts\",\n  \"keywords\": [],\n  \"author\": \"Zextras Crab Onions Team <https://www.zextras.com/carbonio/>\",\n  \"maintainers\": [\n    \"Gabriele Marino <gabriele.marino@zextras.com>\",\n    \"Abhishek Kumar <abhishek.kumar@zextras.com>\",\n    \"Giuliano Caregnato <giuliano.caregnato@zextras.com>\",\n    \"Dhaval Dodiya <dhaval.dodiya@zextras.com>\",\n    \"Francesco Gottardi <francesco.gottardi@zextras.com>\",\n    \"Luca Stauble <luca.stauble@zextras.com>\"\n  ],\n  \"license\": \"AGPL-3.0-only\",\n  \"devDependencies\": {\n    \"@babel/core\": \"7.16.0\",\n    \"@babel/plugin-proposal-class-properties\": \"7.16.0\",\n    \"@babel/plugin-transform-runtime\": \"7.16.4\",\n    \"@babel/preset-env\": \"7.16.4\",\n    \"@babel/preset-react\": \"7.16.0\",\n    \"@babel/preset-typescript\": \"^7.16.0\",\n    \"@commitlint/cli\": \"14.1.0\",\n    \"@commitlint/config-conventional\": \"14.1.0\",\n    \"@testing-library/jest-dom\": \"^5.16.4\",\n    \"@testing-library/react\": \"^12.1.5\",\n    \"@testing-library/user-event\": \"^14.3.0\",\n    \"@types/history\": \"4.7.9\",\n    \"@types/jest\": \"^28.1.6\",\n    \"@types/lodash\": \"4.14.177\",\n    \"@types/react\": \"17.0.36\",\n    \"@types/react-dom\": \"17.0.11\",\n    \"@types/react-redux\": \"7.1.20\",\n    \"@types/react-router-dom\": \"5.3.2\",\n    \"@types/styled-components\": \"^5.1.15\",\n    \"@zextras/carbonio-ui-configs\": \"^0.1.11\",\n    \"@zextras/carbonio-ui-sdk\": \"1.3.1\",\n    \"babel-jest\": \"^28.1.3\",\n    \"babel-plugin-i18next-extract\": \"0.8.3\",\n    \"babel-plugin-styled-components\": \"2.0.1\",\n    \"eslint-plugin-import\": \"^2.26.0\",\n    \"eslint-plugin-jest-dom\": \"^4.0.2\",\n    \"eslint-plugin-notice\": \"^0.9.10\",\n    \"eslint-plugin-testing-library\": \"^5.5.1\",\n    \"eslint-plugin-unused-imports\": \"^2.0.0\",\n    \"husky\": \"^5.2.0\",\n    \"is-ci\": \"3.0.1\",\n    \"jest\": \"^28.1.3\",\n    \"jest-environment-jsdom\": \"^28.1.3\",\n    \"jest-fail-on-console\": \"^2.4.2\",\n    \"jest-junit\": \"^14.0.0\",\n    \"pinst\": \"2.1.6\"\n  },\n  \"dependencies\": {\n    \"@reduxjs/toolkit\": \"1.6.2\",\n    \"@zextras/carbonio-design-system\": \"^0.3.7\",\n    \"@zextras/carbonio-shell-ui\": \"^0.4.30\",\n    \"@zextras/carbonio-ui-preview\": \"^0.1.5\",\n    \"core-js\": \"3.19.1\",\n    \"i18next\": \"^21.5.4\",\n    \"immer\": \"7.0.14\",\n    \"lodash\": \"4.17.21\",\n    \"moment\": \"2.29.1\",\n    \"path-browserify\": \"^1.0.1\",\n    \"prop-types\": \"15.7.2\",\n    \"react\": \"17.0.2\",\n    \"react-dom\": \"17.0.2\",\n    \"react-hook-form\": \"^6.15.8\",\n    \"react-i18next\": \"11.14.3\",\n    \"react-redux\": \"7.2.6\",\n    \"react-router-dom\": \"^5.3.0\",\n    \"styled-components\": \"5.3.3\",\n    \"uuid\": \"^8.3.2\"\n  },\n  \"browserslist\": [\n    \">1%\",\n    \"last 1 version\",\n    \"Firefox ESR\",\n    \"not dead\"\n  ],\n  \"carbonio\": {\n    \"translations_repository\": \"git@bitbucket.org:zextras/com_zextras_zapp_mails.git\",\n    \"name\": \"carbonio-mails-ui\",\n    \"priority\": 5,\n    \"type\": \"carbonio\",\n    \"attrKey\": \"zimbraFeatureMailEnabled\",\n    \"display\": \"Mails\",\n    \"icon\": \"MailModOutline\",\n    \"sentryDsn\": \"https://90672cc95a43460485b50717c4be69ab@feedback.zextras.tools/7\"\n  }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/package.json b/package.json
--- a/package.json	(revision d8bea371a1253f951f0f0ff48819868807c68aa7)
+++ b/package.json	(date 1662033129000)
@@ -69,6 +69,10 @@
     "pinst": "2.1.6"
   },
   "dependencies": {
+    "@emotion/react": "^11.10.0",
+    "@emotion/styled": "^11.10.0",
+    "@mui/icons-material": "^5.10.2",
+    "@mui/material": "^5.10.2",
     "@reduxjs/toolkit": "1.6.2",
     "@zextras/carbonio-design-system": "^0.3.7",
     "@zextras/carbonio-shell-ui": "^0.4.30",
Index: src/views/sidebar/parts/edit/folder-details.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport React, { FC } from 'react';\nimport { Container, Row, Padding, Text, Divider } from '@zextras/carbonio-design-system';\nimport { useTranslation } from 'react-i18next';\nimport { AccordionFolder } from '@zextras/carbonio-shell-ui';\n\nconst bytesToSize = (bytes: number): string => {\n\tconst sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\n\tif (bytes === 0) return '0 Byte';\n\tconst i = Math.floor(Math.log(bytes) / Math.log(1024));\n\treturn `${Math.round(bytes / 1024 ** i)} ${sizes[i]}`;\n};\n\nconst FolderDetails: FC<{ folder: AccordionFolder }> = ({ folder }) => {\n\tconst [t] = useTranslation();\n\treturn (\n\t\t<>\n\t\t\t<Container\n\t\t\t\tmainAlignment=\"flex-start\"\n\t\t\t\tpadding={{ all: 'small' }}\n\t\t\t\tcrossAlignment=\"flex-start\"\n\t\t\t\ttakeAvailableSpace\n\t\t\t\twidth=\"100%\"\n\t\t\t\torientation=\"horizontal\"\n\t\t\t>\n\t\t\t\t<Row orientation=\"vertical\" width=\"33.33%\" crossAlignment=\"flex-start\">\n\t\t\t\t\t<Text size=\"small\" color=\"secondary\">\n\t\t\t\t\t\t{t('label.type', 'Type')}\n\t\t\t\t\t</Text>\n\t\t\t\t\t<Padding top=\"extrasmall\" />\n\t\t\t\t\t<Text>{t('label.mail_folder', 'E-mail folder')}</Text>\n\t\t\t\t</Row>\n\t\t\t\t<Row orientation=\"vertical\" width=\"33.33%\" crossAlignment=\"flex-start\">\n\t\t\t\t\t<Text size=\"small\" color=\"secondary\">\n\t\t\t\t\t\t{t('label.messages', 'Messages')}\n\t\t\t\t\t</Text>\n\t\t\t\t\t<Padding top=\"extrasmall\" />\n\t\t\t\t\t<Text>{folder.folder?.n}</Text>\n\t\t\t\t</Row>\n\t\t\t\t<Row orientation=\"vertical\" width=\"33.33%\" crossAlignment=\"flex-start\">\n\t\t\t\t\t<Text size=\"small\" color=\"secondary\">\n\t\t\t\t\t\tSize{t('label.size', 'Size')}\n\t\t\t\t\t</Text>\n\t\t\t\t\t<Padding top=\"extrasmall\" />\n\t\t\t\t\t<Text>{bytesToSize(folder.folder?.s || 0)}</Text>\n\t\t\t\t</Row>\n\t\t\t</Container>\n\t\t\t<Divider />\n\t\t\t<Padding bottom=\"medium\" />\n\t\t</>\n\t);\n};\n\nexport default FolderDetails;\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/views/sidebar/parts/edit/folder-details.tsx b/src/views/sidebar/parts/edit/folder-details.tsx
--- a/src/views/sidebar/parts/edit/folder-details.tsx	(revision d8bea371a1253f951f0f0ff48819868807c68aa7)
+++ b/src/views/sidebar/parts/edit/folder-details.tsx	(date 1661936110000)
@@ -6,7 +6,7 @@
 import React, { FC } from 'react';
 import { Container, Row, Padding, Text, Divider } from '@zextras/carbonio-design-system';
 import { useTranslation } from 'react-i18next';
-import { AccordionFolder } from '@zextras/carbonio-shell-ui';
+import { Folder } from '@zextras/carbonio-shell-ui';
 
 const bytesToSize = (bytes: number): string => {
 	const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
@@ -15,7 +15,7 @@
 	return `${Math.round(bytes / 1024 ** i)} ${sizes[i]}`;
 };
 
-const FolderDetails: FC<{ folder: AccordionFolder }> = ({ folder }) => {
+const FolderDetails: FC<{ folder: Folder }> = ({ folder }) => {
 	const [t] = useTranslation();
 	return (
 		<>
@@ -39,14 +39,14 @@
 						{t('label.messages', 'Messages')}
 					</Text>
 					<Padding top="extrasmall" />
-					<Text>{folder.folder?.n}</Text>
+					<Text>{folder.n}</Text>
 				</Row>
 				<Row orientation="vertical" width="33.33%" crossAlignment="flex-start">
 					<Text size="small" color="secondary">
 						Size{t('label.size', 'Size')}
 					</Text>
 					<Padding top="extrasmall" />
-					<Text>{bytesToSize(folder.folder?.s || 0)}</Text>
+					<Text>{bytesToSize(folder.s || 0)}</Text>
 				</Row>
 			</Container>
 			<Divider />
Index: src/views/sidebar/accordion-custom-component.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport React, { FC, useCallback, useContext, useMemo, useState } from 'react';\nimport {\n\tAppLink,\n\tFOLDERS,\n\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t// @ts-ignore\n\tROOT_NAME,\n\treplaceHistory,\n\tuseUserSettings,\n\tgetBridgedFunctions,\n\tuseUserAccount,\n\tpushHistory,\n\tAccordionFolder\n} from '@zextras/carbonio-shell-ui';\nimport styled from 'styled-components';\nimport {\n\tAccordionItem,\n\tDropdown,\n\tDrag,\n\tDrop,\n\tContainer,\n\tTooltip,\n\tAvatar,\n\tIcon,\n\tRow,\n\tPadding,\n\tModalManagerContext\n} from '@zextras/carbonio-design-system';\nimport { find, startsWith } from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { useDispatch } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport { convAction, msgAction, search } from '../../store/actions';\nimport { folderAction } from '../../store/actions/folder-action';\nimport { getFolderIconColor, getFolderIconName, getFolderTranslatedName } from './utils';\nimport { NewModal } from './new-modal';\nimport { MoveModal } from './move-modal';\nimport { EmptyModal } from './empty-modal';\nimport { DeleteModal } from './delete-modal';\nimport { EditModal } from './edit-modal';\nimport { SharesInfoModal } from './shares-info-modal';\nimport ShareFolderModal from './share-folder-modal';\nimport { FolderActionsType } from '../../commons/utils';\nimport { DataProps } from '../../types';\n\nconst FittedRow = styled(Row)`\n\tmax-width: calc(100% - (2 * ${({ theme }): string => theme.sizes.padding.small}));\n\theight: 48px;\n`;\n\nconst DropOverlayContainer = styled(Container)`\n\tposition: absolute;\n\twidth: calc(248px - ${(props): number => (props.folder.level - 2) * 16}px);\n\theight: 100%;\n\tbackground: ${(props): string => props.theme.palette.primary.regular};\n\tborder-radius: 4px;\n\tborder: 4px solid #d5e3f6;\n\topacity: 0.4;\n`;\n\nconst DropDenyOverlayContainer = styled(Container)`\n\tposition: absolute;\n\twidth: calc(248px - ${(props): number => (props.folder.level - 2) * 16}px);\n\theight: 100%;\n\tbackground: ${(props): string => props.theme.palette.gray1.regular};\n\tborder-radius: 4px;\n\tborder: 4px solid #d5e3f6;\n\topacity: 0.4;\n`;\n\ntype FolderActionsProps = {\n\tid: string;\n\ticon: string;\n\tlabel: string;\n\tclick: (e: MouseEvent) => void;\n\tdisabled?: boolean;\n};\n\nconst useFolderActions = (folder: AccordionFolder): Array<FolderActionsProps> => {\n\tconst [t] = useTranslation();\n\tconst dispatch = useDispatch();\n\t// eslint-disable-next-line @typescript-eslint/ban-types\n\tconst createModal = useContext(ModalManagerContext) as Function;\n\tconst [activeModal, setActiveModal] = useState('default');\n\tconst [activeGrant, setActiveGrant] = useState({});\n\tconst goBack = useCallback(() => {\n\t\tsetActiveModal('default');\n\t}, [setActiveModal]);\n\n\tconst actions = useMemo(\n\t\t() => [\n\t\t\t{\n\t\t\t\tid: FolderActionsType.NEW,\n\t\t\t\ticon: 'FolderAddOutline',\n\t\t\t\tlabel: t('label.new_folder', 'New Folder'),\n\t\t\t\tclick: (e: MouseEvent): void => {\n\t\t\t\t\tif (e) {\n\t\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t}\n\t\t\t\t\tconst closeModal = createModal(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmaxHeight: '90vh',\n\t\t\t\t\t\t\tchildren: (\n\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t<NewModal folder={folder} onClose={(): void => closeModal()} />\n\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttrue\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: FolderActionsType.MOVE,\n\t\t\t\ticon: 'MoveOutline',\n\t\t\t\tlabel: startsWith(folder.folder?.absFolderPath, '/Trash')\n\t\t\t\t\t? t('label.restore', 'Restore')\n\t\t\t\t\t: t('label.move', 'Move'),\n\t\t\t\tclick: (e: MouseEvent): void => {\n\t\t\t\t\tif (e) {\n\t\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t}\n\t\t\t\t\tconst closeModal = createModal(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmaxHeight: '90vh',\n\t\t\t\t\t\t\tchildren: (\n\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t<MoveModal folder={folder} onClose={(): void => closeModal()} />\n\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttrue\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: FolderActionsType.EMPTY,\n\t\t\t\ticon: folder.id === FOLDERS.TRASH ? 'DeletePermanentlyOutline' : 'EmptyFolderOutline',\n\t\t\t\tlabel:\n\t\t\t\t\tfolder.id === FOLDERS.TRASH\n\t\t\t\t\t\t? t('folder_panel.action.empty.trash', 'Empty Trash')\n\t\t\t\t\t\t: t('folder_panel.action.wipe.folder_panel', 'Wipe Folder'),\n\t\t\t\tdisabled: folder.folder?.n === 0 && folder.folder?.children?.length === 0,\n\t\t\t\tclick: (e: MouseEvent): void => {\n\t\t\t\t\tif (e) {\n\t\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t}\n\t\t\t\t\tconst closeModal = createModal(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tchildren: (\n\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t<EmptyModal onClose={(): void => closeModal()} folder={folder} />\n\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttrue\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: FolderActionsType.EDIT,\n\t\t\t\ticon: 'Edit2Outline',\n\t\t\t\tlabel: folder?.folder?.isLink\n\t\t\t\t\t? t('folder_panel.action.edit_properties', 'Edit Properties')\n\t\t\t\t\t: t('label.edit', 'Edit'),\n\t\t\t\tclick: (e: MouseEvent): void => {\n\t\t\t\t\tif (e) {\n\t\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t}\n\t\t\t\t\tconst closeModal = createModal(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmaxHeight: '90vh',\n\t\t\t\t\t\t\tchildren: (\n\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t<EditModal onClose={(): void => closeModal()} folder={folder} />\n\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttrue\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: FolderActionsType.DELETE,\n\t\t\t\ticon: 'Trash2Outline',\n\t\t\t\tlabel: startsWith(folder.folder?.absFolderPath, '/Trash')\n\t\t\t\t\t? t('label.delete_permanently', 'Delete Permanently')\n\t\t\t\t\t: t('label.delete', 'Delete'),\n\t\t\t\tclick: (e: MouseEvent): void => {\n\t\t\t\t\tif (e) {\n\t\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t}\n\t\t\t\t\tconst closeModal = createModal(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tchildren: (\n\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t<DeleteModal onClose={(): void => closeModal()} folder={folder} />\n\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttrue\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: FolderActionsType.SHARE,\n\t\t\t\ticon: 'ShareOutline',\n\t\t\t\tlabel: t('action.share_folder', 'Share folder'),\n\t\t\t\tclick: (e: MouseEvent): void => {\n\t\t\t\t\tif (e) {\n\t\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t}\n\t\t\t\t\tconst closeModal = createModal(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tchildren: (\n\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t<ShareFolderModal\n\t\t\t\t\t\t\t\t\t\tonClose={(): void => closeModal()}\n\t\t\t\t\t\t\t\t\t\tfolder={folder}\n\t\t\t\t\t\t\t\t\t\tactiveGrant={activeGrant}\n\t\t\t\t\t\t\t\t\t\tgoBack={goBack}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttrue\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: FolderActionsType.REMOVE_FROM_LIST,\n\t\t\t\ticon: 'CloseOutline',\n\t\t\t\tlabel: t('label.remove_from_this_list', 'Remove from this list'),\n\t\t\t\tclick: (e): void => {\n\t\t\t\t\tif (e) {\n\t\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t\tdispatch(folderAction({ folder: folder.folder, op: 'delete' }));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: FolderActionsType.SHARES_INFO,\n\t\t\t\ticon: 'InfoOutline',\n\t\t\t\tlabel: t('label.shares_info', `Shared folder's info`),\n\t\t\t\tclick: (e): void => {\n\t\t\t\t\tif (e) {\n\t\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t}\n\t\t\t\t\tconst closeModal = createModal(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tchildren: (\n\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t<SharesInfoModal onClose={(): void => closeModal()} folder={folder.folder} />\n\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttrue\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t],\n\t\t[activeGrant, createModal, dispatch, folder, goBack, t]\n\t);\n\n\tconst defaultFolderActions = useMemo(\n\t\t() =>\n\t\t\tactions.filter(\n\t\t\t\t(action) =>\n\t\t\t\t\taction.id !== FolderActionsType.SHARES_INFO &&\n\t\t\t\t\taction.id !== FolderActionsType.REMOVE_FROM_LIST\n\t\t\t),\n\t\t[actions]\n\t);\n\tconst id =\n\t\tfolder.id.indexOf(':') !== -1 ? folder.id.slice(folder.id.indexOf(':') + 1) : folder.id;\n\tswitch (id) {\n\t\t// default folders\n\t\tcase FOLDERS.INBOX:\n\t\tcase FOLDERS.SENT:\n\t\tcase FOLDERS.DRAFTS:\n\t\t\treturn defaultFolderActions.map((action) =>\n\t\t\t\taction.id === FolderActionsType.MOVE || action.id === FolderActionsType.DELETE\n\t\t\t\t\t? { ...action, disabled: true }\n\t\t\t\t\t: action\n\t\t\t);\n\n\t\tcase FOLDERS.SPAM:\n\t\t\treturn defaultFolderActions.map((action) =>\n\t\t\t\taction.id === FolderActionsType.NEW ||\n\t\t\t\taction.id === FolderActionsType.MOVE ||\n\t\t\t\taction.id === FolderActionsType.DELETE\n\t\t\t\t\t? { ...action, disabled: true }\n\t\t\t\t\t: action\n\t\t\t);\n\t\tcase FOLDERS.TRASH:\n\t\t\treturn defaultFolderActions.map((action) =>\n\t\t\t\taction.id === FolderActionsType.MOVE ||\n\t\t\t\taction.id === FolderActionsType.DELETE ||\n\t\t\t\taction.id === FolderActionsType.EDIT ||\n\t\t\t\taction.id === FolderActionsType.SHARE\n\t\t\t\t\t? { ...action, disabled: true }\n\t\t\t\t\t: action\n\t\t\t);\n\t\t// customizable folders\n\t\tdefault:\n\t\t\treturn folder.folder?.isLink\n\t\t\t\t? actions.filter(\n\t\t\t\t\t\t(action) =>\n\t\t\t\t\t\t\taction.id === FolderActionsType.SHARES_INFO ||\n\t\t\t\t\t\t\taction.id === FolderActionsType.REMOVE_FROM_LIST ||\n\t\t\t\t\t\t\taction.id === FolderActionsType.EDIT\n\t\t\t\t  )\n\t\t\t\t: defaultFolderActions.map((action) => {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tstartsWith(folder.folder?.absFolderPath, '/Trash') &&\n\t\t\t\t\t\t\t(action.id === FolderActionsType.NEW || action.id === FolderActionsType.EDIT)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\treturn { ...action, disabled: true };\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn action;\n\t\t\t\t  });\n\t}\n};\n\ntype DragEnterAction =\n\t| undefined\n\t| {\n\t\t\tsuccess: false;\n\t  };\n\ntype OnDropActionProps = {\n\ttype: string;\n\tdata: DataProps;\n};\n\nconst badgeCount = (v?: number): number | undefined => (v && v > 0 ? v : undefined);\nexport const AccordionCustomComponent: FC<{ item: AccordionFolder }> = ({ item }) => {\n\tconst { folder } = item;\n\tconst accountName = useUserAccount().name;\n\tconst [t] = useTranslation();\n\tconst dispatch = useDispatch();\n\tconst { folderId } = useParams<{ folderId: string }>();\n\n\tconst onDragEnterAction = (data: OnDropActionProps): DragEnterAction => {\n\t\tif (data.type === 'conversation' || data.type === 'message') {\n\t\t\tif (\n\t\t\t\tdata.data.parentFolderId === folder.id || // same folder not allowed\n\t\t\t\t(data.data.parentFolderId === FOLDERS.INBOX && [5, 6].includes(Number(folder.id))) || // from inbox not allowed in draft and sent\n\t\t\t\t(data.data.parentFolderId === FOLDERS.DRAFTS && ![3].includes(Number(folder.id))) || // from draft only allowed in Trash\n\t\t\t\t(folder.id === FOLDERS.DRAFTS && data.data.parentFolderId !== FOLDERS.TRASH) || // only from Trash can move in Draft\n\t\t\t\t(folder.isLink && folder.perm?.indexOf('w') === -1) || // only if shared folder have write permission\n\t\t\t\tfolder.id === FOLDERS.USER_ROOT ||\n\t\t\t\tfolder.oname === ROOT_NAME\n\t\t\t) {\n\t\t\t\treturn { success: false };\n\t\t\t}\n\t\t}\n\t\tif (data.type === 'folder') {\n\t\t\tif (\n\t\t\t\tfolder.id === data.data.id || // same folder not allowed\n\t\t\t\tfolder.isLink || //  shared folder not allowed\n\t\t\t\t[FOLDERS.DRAFTS, FOLDERS.SPAM].includes(folder.id) // cannot be moved inside Draft and Spam\n\t\t\t)\n\t\t\t\treturn { success: false };\n\t\t}\n\t\treturn undefined;\n\t};\n\n\tconst onDropAction = (data: OnDropActionProps): void => {\n\t\tconst dragEnterResponse = onDragEnterAction(data);\n\t\tif (dragEnterResponse && dragEnterResponse?.success === false) return;\n\t\tlet convMsgsIds = [data.data.id];\n\t\tif (\n\t\t\tdata.type !== 'folder' &&\n\t\t\tdata.data?.selectedIDs?.length &&\n\t\t\tdata.data?.selectedIDs.includes(data.data.id)\n\t\t) {\n\t\t\tconvMsgsIds = data.data?.selectedIDs;\n\t\t}\n\n\t\tif (data.type === 'folder') {\n\t\t\tdispatch(folderAction({ folder: data.data, l: folder.id || FOLDERS.USER_ROOT, op: 'move' }))\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t\t// @ts-ignore\n\t\t\t\t.then((res) => {\n\t\t\t\t\tif (res.type.includes('fulfilled')) {\n\t\t\t\t\t\tgetBridgedFunctions().createSnackbar({\n\t\t\t\t\t\t\tkey: `move`,\n\t\t\t\t\t\t\treplace: true,\n\t\t\t\t\t\t\ttype: 'success',\n\t\t\t\t\t\t\tlabel: t('messages.snackbar.folder_moved', 'Folder successfully moved'),\n\t\t\t\t\t\t\tautoHideTimeout: 3000\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tgetBridgedFunctions().createSnackbar({\n\t\t\t\t\t\t\tkey: `move`,\n\t\t\t\t\t\t\treplace: true,\n\t\t\t\t\t\t\ttype: 'error',\n\t\t\t\t\t\t\tlabel: t('label.error_try_again', 'Something went wrong, please try again.'),\n\t\t\t\t\t\t\tautoHideTimeout: 3000\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t} else if (data.type === 'conversation') {\n\t\t\tdispatch(\n\t\t\t\tconvAction({\n\t\t\t\t\toperation: `move`,\n\t\t\t\t\tids: convMsgsIds,\n\t\t\t\t\tparent: folder.id\n\t\t\t\t})\n\t\t\t)\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t\t// @ts-ignore\n\t\t\t\t.then((res) => {\n\t\t\t\t\tif (res.type.includes('fulfilled')) {\n\t\t\t\t\t\treplaceHistory(`/folder/${folderId}`);\n\t\t\t\t\t\tgetBridgedFunctions().createSnackbar({\n\t\t\t\t\t\t\tkey: `edit`,\n\t\t\t\t\t\t\treplace: true,\n\t\t\t\t\t\t\ttype: 'info',\n\t\t\t\t\t\t\tlabel: t('messages.snackbar.conversation_move', 'Conversation successfully moved'),\n\t\t\t\t\t\t\tautoHideTimeout: 3000,\n\t\t\t\t\t\t\tactionLabel: t('action.goto_folder', 'GO TO FOLDER'),\n\t\t\t\t\t\t\tonActionClick: () => {\n\t\t\t\t\t\t\t\treplaceHistory(`/folder/${folder.id}`);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tgetBridgedFunctions().createSnackbar({\n\t\t\t\t\t\t\tkey: `edit`,\n\t\t\t\t\t\t\treplace: true,\n\t\t\t\t\t\t\ttype: 'error',\n\t\t\t\t\t\t\tlabel: t('label.error_try_again', 'Something went wrong, please try again'),\n\t\t\t\t\t\t\tautoHideTimeout: 3000,\n\t\t\t\t\t\t\thideButton: true\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t} else {\n\t\t\tdispatch(\n\t\t\t\tmsgAction({\n\t\t\t\t\toperation: `move`,\n\t\t\t\t\tids: convMsgsIds,\n\t\t\t\t\tparent: folder.id\n\t\t\t\t})\n\t\t\t)\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t\t// @ts-ignore\n\t\t\t\t.then((res) => {\n\t\t\t\t\tif (res.type.includes('fulfilled')) {\n\t\t\t\t\t\tgetBridgedFunctions().createSnackbar({\n\t\t\t\t\t\t\tkey: `edit`,\n\t\t\t\t\t\t\treplace: true,\n\t\t\t\t\t\t\ttype: 'info',\n\t\t\t\t\t\t\tlabel: t('messages.snackbar.message_move', 'Message successfully moved'),\n\t\t\t\t\t\t\tautoHideTimeout: 3000,\n\t\t\t\t\t\t\tactionLabel: t('action.goto_folder', 'GO TO FOLDER'),\n\t\t\t\t\t\t\tonActionClick: () => {\n\t\t\t\t\t\t\t\treplaceHistory(`/folder/${folder.id}`);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tgetBridgedFunctions().createSnackbar({\n\t\t\t\t\t\t\tkey: `edit`,\n\t\t\t\t\t\t\treplace: true,\n\t\t\t\t\t\t\ttype: 'error',\n\t\t\t\t\t\t\tlabel: t('label.error_try_again', 'Something went wrong, please try again'),\n\t\t\t\t\t\t\tautoHideTimeout: 3000,\n\t\t\t\t\t\t\thideButton: true\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t}\n\t};\n\n\tconst dragFolderDisable = useMemo(\n\t\t() =>\n\t\t\t[FOLDERS.INBOX, FOLDERS.TRASH, FOLDERS.SPAM, FOLDERS.SENT, FOLDERS.DRAFTS].includes(\n\t\t\t\tfolder.id\n\t\t\t) || folder.isLink, // Default folders and shared folders not allowed to drag\n\t\t[folder.id, folder.isLink]\n\t);\n\tconst { zimbraPrefGroupMailBy } = useUserSettings().prefs;\n\n\t/* NOTE: Need to comment out when need to sort as per the configured sort order */\n\t// const { zimbraPrefSortOrder, zimbraPrefGroupMailBy } = useUserSettings().prefs;\n\t// const sorting = useMemo(() => {\n\t// \tif (typeof zimbraPrefSortOrder === 'string') {\n\t// \t\treturn (\n\t// \t\t\tfind(zimbraPrefSortOrder?.split(','), (f) => f?.split(':')?.[0] === folder.id)?.split(\n\t// \t\t\t\t':'\n\t// \t\t\t)?.[1] ?? 'dateDesc'\n\t// \t\t);\n\t// \t}\n\t// \treturn 'dateDesc';\n\t// }, [zimbraPrefSortOrder, folder.id]) as 'dateDesc' | 'dateAsc';\n\n\tconst onClick = useCallback((): void => {\n\t\tpushHistory(`/folder/${folder.id}`);\n\t\tdispatch(\n\t\t\tsearch({\n\t\t\t\tfolderId: folder.id,\n\t\t\t\tlimit: 101,\n\t\t\t\tsortBy: 'dateDesc',\n\t\t\t\t// folder.id === FOLDERS.DRAFTS ? 'message' : zimbraPrefGroupMailBy\n\t\t\t\ttypes:\n\t\t\t\t\tfolder.id === FOLDERS.DRAFTS || typeof zimbraPrefGroupMailBy !== 'string'\n\t\t\t\t\t\t? 'message'\n\t\t\t\t\t\t: zimbraPrefGroupMailBy\n\t\t\t})\n\t\t);\n\t}, [dispatch, folder.id, zimbraPrefGroupMailBy]);\n\n\tconst accordionItem = useMemo(\n\t\t() => ({\n\t\t\t...item,\n\t\t\tlabel:\n\t\t\t\titem.id === FOLDERS.USER_ROOT\n\t\t\t\t\t? accountName\n\t\t\t\t\t: getFolderTranslatedName({ t, folderId: item.id, folderName: item.label }),\n\t\t\ticon: getFolderIconName(item),\n\t\t\ticonColor: getFolderIconColor(item),\n\t\t\t// open: openIds ? openIds.includes(folder.id) : false,\n\t\t\tbadgeCounter: badgeCount(item.id === FOLDERS.DRAFTS ? item?.folder.n : item?.folder?.u),\n\t\t\tbadgeType: item.id === FOLDERS.DRAFTS ? 'read' : 'unread',\n\t\t\tto: `/folder/${item.id}`,\n\t\t\ttextProps: { size: 'small' }\n\t\t}),\n\t\t[item, accountName, t]\n\t);\n\n\tconst dropdownItems = useFolderActions(item);\n\n\tconst statusIcon = useMemo(() => {\n\t\tconst RowWithIcon = (icon: string, color: string, tooltipText: string): JSX.Element => (\n\t\t\t<Padding left=\"small\">\n\t\t\t\t<Tooltip placement=\"right\" label={tooltipText}>\n\t\t\t\t\t<Row>\n\t\t\t\t\t\t<Icon icon={icon} color={color} size=\"medium\" />\n\t\t\t\t\t</Row>\n\t\t\t\t</Tooltip>\n\t\t\t</Padding>\n\t\t);\n\n\t\tif (folder.acl?.grant) {\n\t\t\tconst tooltipText = t('tooltip.folder_sharing_status', {\n\t\t\t\tcount: folder.acl.grant.length,\n\t\t\t\tdefaultValue_one: 'Shared with {{count}} person',\n\t\t\t\tdefaultValue: 'Shared with {{count}} people'\n\t\t\t});\n\t\t\treturn RowWithIcon('Shared', 'shared', tooltipText);\n\t\t}\n\t\tif (folder.isLink) {\n\t\t\tconst tooltipText = t('tooltip.folder_linked_status', 'Linked to me');\n\t\t\treturn RowWithIcon('Linked', 'linked', tooltipText);\n\t\t}\n\t\treturn '';\n\t}, [folder, t]);\n\n\t// hide folders where a share was provided and subsequently removed\n\tif (folder.broken) {\n\t\treturn <></>;\n\t}\n\n\treturn folder.id === FOLDERS.USER_ROOT || folder.oname === ROOT_NAME ? (\n\t\t<FittedRow>\n\t\t\t<Padding horizontal=\"small\">\n\t\t\t\t<Avatar label={accordionItem.label} colorLabel={accordionItem.iconColor} size=\"medium\" />\n\t\t\t</Padding>\n\t\t\t<Tooltip label={accordionItem.label} placement=\"right\" maxWidth=\"100%\">\n\t\t\t\t<AccordionItem item={accordionItem} />\n\t\t\t</Tooltip>\n\t\t</FittedRow>\n\t) : (\n\t\t<Row width=\"fill\" minWidth={0}>\n\t\t\t<Drop\n\t\t\t\tacceptType={['message', 'conversation', 'folder']}\n\t\t\t\tonDrop={(data: OnDropActionProps): void => onDropAction(data)}\n\t\t\t\tonDragEnter={(data: OnDropActionProps): unknown => onDragEnterAction(data)}\n\t\t\t\toverlayAcceptComponent={<DropOverlayContainer folder={folder} />}\n\t\t\t\toverlayDenyComponent={<DropDenyOverlayContainer folder={folder} />}\n\t\t\t>\n\t\t\t\t<Drag\n\t\t\t\t\ttype=\"folder\"\n\t\t\t\t\tdata={folder}\n\t\t\t\t\tdragDisabled={dragFolderDisable}\n\t\t\t\t\tstyle={{ display: 'block' }}\n\t\t\t\t>\n\t\t\t\t\t<AppLink\n\t\t\t\t\t\tonClick={onClick}\n\t\t\t\t\t\tto={`/folder/${folder.id}`}\n\t\t\t\t\t\tstyle={{ width: '100%', height: '100%', textDecoration: 'none' }}\n\t\t\t\t\t>\n\t\t\t\t\t\t<Dropdown contextMenu items={dropdownItems} display=\"block\" width=\"100%\">\n\t\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t\t<Padding left=\"small\" />\n\t\t\t\t\t\t\t\t<Tooltip label={accordionItem.label} placement=\"right\" maxWidth=\"100%\">\n\t\t\t\t\t\t\t\t\t<AccordionItem item={accordionItem}>{statusIcon}</AccordionItem>\n\t\t\t\t\t\t\t\t</Tooltip>\n\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t</Dropdown>\n\t\t\t\t\t</AppLink>\n\t\t\t\t</Drag>\n\t\t\t</Drop>\n\t\t</Row>\n\t);\n};\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/views/sidebar/accordion-custom-component.tsx b/src/views/sidebar/accordion-custom-component.tsx
--- a/src/views/sidebar/accordion-custom-component.tsx	(revision d8bea371a1253f951f0f0ff48819868807c68aa7)
+++ b/src/views/sidebar/accordion-custom-component.tsx	(date 1662120664000)
@@ -3,57 +3,48 @@
  *
  * SPDX-License-Identifier: AGPL-3.0-only
  */
-import React, { FC, useCallback, useContext, useMemo, useState } from 'react';
+import {
+	AccordionItem,
+	Avatar,
+	Container,
+	Drag,
+	Drop,
+	Dropdown,
+	Icon,
+	Padding,
+	Row,
+	Tooltip
+} from '@zextras/carbonio-design-system';
 import {
 	AppLink,
+	Folder,
 	FOLDERS,
+	getBridgedFunctions,
+	pushHistory,
+	replaceHistory,
 	// eslint-disable-next-line @typescript-eslint/ban-ts-comment
 	// @ts-ignore
 	ROOT_NAME,
-	replaceHistory,
-	useUserSettings,
-	getBridgedFunctions,
 	useUserAccount,
-	pushHistory,
-	AccordionFolder
+	useUserSettings
 } from '@zextras/carbonio-shell-ui';
-import styled from 'styled-components';
-import {
-	AccordionItem,
-	Dropdown,
-	Drag,
-	Drop,
-	Container,
-	Tooltip,
-	Avatar,
-	Icon,
-	Row,
-	Padding,
-	ModalManagerContext
-} from '@zextras/carbonio-design-system';
-import { find, startsWith } from 'lodash';
+import React, { FC, useCallback, useMemo } from 'react';
 import { useTranslation } from 'react-i18next';
 import { useDispatch } from 'react-redux';
 import { useParams } from 'react-router-dom';
+import styled from 'styled-components';
 import { convAction, msgAction, search } from '../../store/actions';
 import { folderAction } from '../../store/actions/folder-action';
+import { DataProps } from '../../types';
+import { useFolderActions } from './use-folder-actions';
 import { getFolderIconColor, getFolderIconName, getFolderTranslatedName } from './utils';
-import { NewModal } from './new-modal';
-import { MoveModal } from './move-modal';
-import { EmptyModal } from './empty-modal';
-import { DeleteModal } from './delete-modal';
-import { EditModal } from './edit-modal';
-import { SharesInfoModal } from './shares-info-modal';
-import ShareFolderModal from './share-folder-modal';
-import { FolderActionsType } from '../../commons/utils';
-import { DataProps } from '../../types';
 
 const FittedRow = styled(Row)`
 	max-width: calc(100% - (2 * ${({ theme }): string => theme.sizes.padding.small}));
 	height: 48px;
 `;
 
-const DropOverlayContainer = styled(Container)`
+export const DropOverlayContainer = styled(Container)`
 	position: absolute;
 	width: calc(248px - ${(props): number => (props.folder.level - 2) * 16}px);
 	height: 100%;
@@ -62,8 +53,7 @@
 	border: 4px solid #d5e3f6;
 	opacity: 0.4;
 `;
-
-const DropDenyOverlayContainer = styled(Container)`
+export const DropDenyOverlayContainer = styled(Container)`
 	position: absolute;
 	width: calc(248px - ${(props): number => (props.folder.level - 2) * 16}px);
 	height: 100%;
@@ -72,304 +62,51 @@
 	border: 4px solid #d5e3f6;
 	opacity: 0.4;
 `;
-
-type FolderActionsProps = {
-	id: string;
-	icon: string;
-	label: string;
-	click: (e: MouseEvent) => void;
-	disabled?: boolean;
-};
-
-const useFolderActions = (folder: AccordionFolder): Array<FolderActionsProps> => {
-	const [t] = useTranslation();
-	const dispatch = useDispatch();
-	// eslint-disable-next-line @typescript-eslint/ban-types
-	const createModal = useContext(ModalManagerContext) as Function;
-	const [activeModal, setActiveModal] = useState('default');
-	const [activeGrant, setActiveGrant] = useState({});
-	const goBack = useCallback(() => {
-		setActiveModal('default');
-	}, [setActiveModal]);
-
-	const actions = useMemo(
-		() => [
-			{
-				id: FolderActionsType.NEW,
-				icon: 'FolderAddOutline',
-				label: t('label.new_folder', 'New Folder'),
-				click: (e: MouseEvent): void => {
-					if (e) {
-						e.stopPropagation();
-					}
-					const closeModal = createModal(
-						{
-							maxHeight: '90vh',
-							children: (
-								<>
-									<NewModal folder={folder} onClose={(): void => closeModal()} />
-								</>
-							)
-						},
-						true
-					);
-				}
-			},
-			{
-				id: FolderActionsType.MOVE,
-				icon: 'MoveOutline',
-				label: startsWith(folder.folder?.absFolderPath, '/Trash')
-					? t('label.restore', 'Restore')
-					: t('label.move', 'Move'),
-				click: (e: MouseEvent): void => {
-					if (e) {
-						e.stopPropagation();
-					}
-					const closeModal = createModal(
-						{
-							maxHeight: '90vh',
-							children: (
-								<>
-									<MoveModal folder={folder} onClose={(): void => closeModal()} />
-								</>
-							)
-						},
-						true
-					);
-				}
-			},
-			{
-				id: FolderActionsType.EMPTY,
-				icon: folder.id === FOLDERS.TRASH ? 'DeletePermanentlyOutline' : 'EmptyFolderOutline',
-				label:
-					folder.id === FOLDERS.TRASH
-						? t('folder_panel.action.empty.trash', 'Empty Trash')
-						: t('folder_panel.action.wipe.folder_panel', 'Wipe Folder'),
-				disabled: folder.folder?.n === 0 && folder.folder?.children?.length === 0,
-				click: (e: MouseEvent): void => {
-					if (e) {
-						e.stopPropagation();
-					}
-					const closeModal = createModal(
-						{
-							children: (
-								<>
-									<EmptyModal onClose={(): void => closeModal()} folder={folder} />
-								</>
-							)
-						},
-						true
-					);
-				}
-			},
-			{
-				id: FolderActionsType.EDIT,
-				icon: 'Edit2Outline',
-				label: folder?.folder?.isLink
-					? t('folder_panel.action.edit_properties', 'Edit Properties')
-					: t('label.edit', 'Edit'),
-				click: (e: MouseEvent): void => {
-					if (e) {
-						e.stopPropagation();
-					}
-					const closeModal = createModal(
-						{
-							maxHeight: '90vh',
-							children: (
-								<>
-									<EditModal onClose={(): void => closeModal()} folder={folder} />
-								</>
-							)
-						},
-						true
-					);
-				}
-			},
-			{
-				id: FolderActionsType.DELETE,
-				icon: 'Trash2Outline',
-				label: startsWith(folder.folder?.absFolderPath, '/Trash')
-					? t('label.delete_permanently', 'Delete Permanently')
-					: t('label.delete', 'Delete'),
-				click: (e: MouseEvent): void => {
-					if (e) {
-						e.stopPropagation();
-					}
-					const closeModal = createModal(
-						{
-							children: (
-								<>
-									<DeleteModal onClose={(): void => closeModal()} folder={folder} />
-								</>
-							)
-						},
-						true
-					);
-				}
-			},
-			{
-				id: FolderActionsType.SHARE,
-				icon: 'ShareOutline',
-				label: t('action.share_folder', 'Share folder'),
-				click: (e: MouseEvent): void => {
-					if (e) {
-						e.stopPropagation();
-					}
-					const closeModal = createModal(
-						{
-							children: (
-								<>
-									<ShareFolderModal
-										onClose={(): void => closeModal()}
-										folder={folder}
-										activeGrant={activeGrant}
-										goBack={goBack}
-									/>
-								</>
-							)
-						},
-						true
-					);
-				}
-			},
-			{
-				id: FolderActionsType.REMOVE_FROM_LIST,
-				icon: 'CloseOutline',
-				label: t('label.remove_from_this_list', 'Remove from this list'),
-				click: (e): void => {
-					if (e) {
-						e.stopPropagation();
-						dispatch(folderAction({ folder: folder.folder, op: 'delete' }));
-					}
-				}
-			},
-			{
-				id: FolderActionsType.SHARES_INFO,
-				icon: 'InfoOutline',
-				label: t('label.shares_info', `Shared folder's info`),
-				click: (e): void => {
-					if (e) {
-						e.stopPropagation();
-					}
-					const closeModal = createModal(
-						{
-							children: (
-								<>
-									<SharesInfoModal onClose={(): void => closeModal()} folder={folder.folder} />
-								</>
-							)
-						},
-						true
-					);
-				}
-			}
-		],
-		[activeGrant, createModal, dispatch, folder, goBack, t]
-	);
-
-	const defaultFolderActions = useMemo(
-		() =>
-			actions.filter(
-				(action) =>
-					action.id !== FolderActionsType.SHARES_INFO &&
-					action.id !== FolderActionsType.REMOVE_FROM_LIST
-			),
-		[actions]
-	);
-	const id =
-		folder.id.indexOf(':') !== -1 ? folder.id.slice(folder.id.indexOf(':') + 1) : folder.id;
-	switch (id) {
-		// default folders
-		case FOLDERS.INBOX:
-		case FOLDERS.SENT:
-		case FOLDERS.DRAFTS:
-			return defaultFolderActions.map((action) =>
-				action.id === FolderActionsType.MOVE || action.id === FolderActionsType.DELETE
-					? { ...action, disabled: true }
-					: action
-			);
-
-		case FOLDERS.SPAM:
-			return defaultFolderActions.map((action) =>
-				action.id === FolderActionsType.NEW ||
-				action.id === FolderActionsType.MOVE ||
-				action.id === FolderActionsType.DELETE
-					? { ...action, disabled: true }
-					: action
-			);
-		case FOLDERS.TRASH:
-			return defaultFolderActions.map((action) =>
-				action.id === FolderActionsType.MOVE ||
-				action.id === FolderActionsType.DELETE ||
-				action.id === FolderActionsType.EDIT ||
-				action.id === FolderActionsType.SHARE
-					? { ...action, disabled: true }
-					: action
-			);
-		// customizable folders
-		default:
-			return folder.folder?.isLink
-				? actions.filter(
-						(action) =>
-							action.id === FolderActionsType.SHARES_INFO ||
-							action.id === FolderActionsType.REMOVE_FROM_LIST ||
-							action.id === FolderActionsType.EDIT
-				  )
-				: defaultFolderActions.map((action) => {
-						if (
-							startsWith(folder.folder?.absFolderPath, '/Trash') &&
-							(action.id === FolderActionsType.NEW || action.id === FolderActionsType.EDIT)
-						) {
-							return { ...action, disabled: true };
-						}
-						return action;
-				  });
-	}
-};
-
-type DragEnterAction =
+export type DragEnterAction =
 	| undefined
 	| {
 			success: false;
 	  };
-
-type OnDropActionProps = {
+export type OnDropActionProps = {
 	type: string;
 	data: DataProps;
 };
 
 const badgeCount = (v?: number): number | undefined => (v && v > 0 ? v : undefined);
-export const AccordionCustomComponent: FC<{ item: AccordionFolder }> = ({ item }) => {
-	const { folder } = item;
+
+const AccordionCustomComponent: FC<{ item: Folder }> = ({ item }) => {
 	const accountName = useUserAccount().name;
 	const [t] = useTranslation();
 	const dispatch = useDispatch();
 	const { folderId } = useParams<{ folderId: string }>();
 
-	const onDragEnterAction = (data: OnDropActionProps): DragEnterAction => {
-		if (data.type === 'conversation' || data.type === 'message') {
-			if (
-				data.data.parentFolderId === folder.id || // same folder not allowed
-				(data.data.parentFolderId === FOLDERS.INBOX && [5, 6].includes(Number(folder.id))) || // from inbox not allowed in draft and sent
-				(data.data.parentFolderId === FOLDERS.DRAFTS && ![3].includes(Number(folder.id))) || // from draft only allowed in Trash
-				(folder.id === FOLDERS.DRAFTS && data.data.parentFolderId !== FOLDERS.TRASH) || // only from Trash can move in Draft
-				(folder.isLink && folder.perm?.indexOf('w') === -1) || // only if shared folder have write permission
-				folder.id === FOLDERS.USER_ROOT ||
-				folder.oname === ROOT_NAME
-			) {
-				return { success: false };
-			}
-		}
-		if (data.type === 'folder') {
-			if (
-				folder.id === data.data.id || // same folder not allowed
-				folder.isLink || //  shared folder not allowed
-				[FOLDERS.DRAFTS, FOLDERS.SPAM].includes(folder.id) // cannot be moved inside Draft and Spam
-			)
-				return { success: false };
-		}
-		return undefined;
-	};
+	const onDragEnterAction = useCallback(
+		(data: OnDropActionProps): DragEnterAction => {
+			if (data.type === 'conversation' || data.type === 'message') {
+				if (
+					data.data.parentFolderId === item.id || // same folder not allowed
+					(data.data.parentFolderId === FOLDERS.INBOX && [5, 6].includes(Number(item.id))) || // from inbox not allowed in draft and sent
+					(data.data.parentFolderId === FOLDERS.DRAFTS && ![3].includes(Number(item.id))) || // from draft only allowed in Trash
+					(item.id === FOLDERS.DRAFTS && data.data.parentFolderId !== FOLDERS.TRASH) || // only from Trash can move in Draft
+					(item.isLink && item.perm?.indexOf('w') === -1) || // only if shared folder have write permission
+					item.id === FOLDERS.USER_ROOT ||
+					(item.isLink && item.oname === ROOT_NAME)
+				) {
+					return { success: false };
+				}
+			}
+			if (data.type === 'folder') {
+				if (
+					item.id === data.data.id || // same folder not allowed
+					item.isLink || //  shared folder not allowed
+					[FOLDERS.DRAFTS, FOLDERS.SPAM].includes(item.id) // cannot be moved inside Draft and Spam
+				)
+					return { success: false };
+			}
+			return undefined;
+		},
+		[item]
+	);
 
 	const onDropAction = (data: OnDropActionProps): void => {
 		const dragEnterResponse = onDragEnterAction(data);
@@ -384,7 +121,7 @@
 		}
 
 		if (data.type === 'folder') {
-			dispatch(folderAction({ folder: data.data, l: folder.id || FOLDERS.USER_ROOT, op: 'move' }))
+			dispatch(folderAction({ folder: data.data, l: item.id || FOLDERS.USER_ROOT, op: 'move' }))
 				// eslint-disable-next-line @typescript-eslint/ban-ts-comment
 				// @ts-ignore
 				.then((res) => {
@@ -411,7 +148,7 @@
 				convAction({
 					operation: `move`,
 					ids: convMsgsIds,
-					parent: folder.id
+					parent: item.id
 				})
 			)
 				// eslint-disable-next-line @typescript-eslint/ban-ts-comment
@@ -427,7 +164,7 @@
 							autoHideTimeout: 3000,
 							actionLabel: t('action.goto_folder', 'GO TO FOLDER'),
 							onActionClick: () => {
-								replaceHistory(`/folder/${folder.id}`);
+								replaceHistory(`/folder/${item.id}`);
 							}
 						});
 					} else {
@@ -446,7 +183,7 @@
 				msgAction({
 					operation: `move`,
 					ids: convMsgsIds,
-					parent: folder.id
+					parent: item.id
 				})
 			)
 				// eslint-disable-next-line @typescript-eslint/ban-ts-comment
@@ -461,7 +198,7 @@
 							autoHideTimeout: 3000,
 							actionLabel: t('action.goto_folder', 'GO TO FOLDER'),
 							onActionClick: () => {
-								replaceHistory(`/folder/${folder.id}`);
+								replaceHistory(`/folder/${item.id}`);
 							}
 						});
 					} else {
@@ -481,9 +218,9 @@
 	const dragFolderDisable = useMemo(
 		() =>
 			[FOLDERS.INBOX, FOLDERS.TRASH, FOLDERS.SPAM, FOLDERS.SENT, FOLDERS.DRAFTS].includes(
-				folder.id
-			) || folder.isLink, // Default folders and shared folders not allowed to drag
-		[folder.id, folder.isLink]
+				item.id
+			) || item.isLink, // Default folders and shared folders not allowed to drag
+		[item.id, item.isLink]
 	);
 	const { zimbraPrefGroupMailBy } = useUserSettings().prefs;
 
@@ -501,20 +238,20 @@
 	// }, [zimbraPrefSortOrder, folder.id]) as 'dateDesc' | 'dateAsc';
 
 	const onClick = useCallback((): void => {
-		pushHistory(`/folder/${folder.id}`);
+		pushHistory(`/folder/${item.id}`);
 		dispatch(
 			search({
-				folderId: folder.id,
+				folderId: item.id,
 				limit: 101,
 				sortBy: 'dateDesc',
 				// folder.id === FOLDERS.DRAFTS ? 'message' : zimbraPrefGroupMailBy
 				types:
-					folder.id === FOLDERS.DRAFTS || typeof zimbraPrefGroupMailBy !== 'string'
+					item.id === FOLDERS.DRAFTS || typeof zimbraPrefGroupMailBy !== 'string'
 						? 'message'
 						: zimbraPrefGroupMailBy
 			})
 		);
-	}, [dispatch, folder.id, zimbraPrefGroupMailBy]);
+	}, [dispatch, item.id, zimbraPrefGroupMailBy]);
 
 	const accordionItem = useMemo(
 		() => ({
@@ -522,11 +259,11 @@
 			label:
 				item.id === FOLDERS.USER_ROOT
 					? accountName
-					: getFolderTranslatedName({ t, folderId: item.id, folderName: item.label }),
+					: getFolderTranslatedName({ t, folderId: item.id, folderName: item.name }),
 			icon: getFolderIconName(item),
 			iconColor: getFolderIconColor(item),
 			// open: openIds ? openIds.includes(folder.id) : false,
-			badgeCounter: badgeCount(item.id === FOLDERS.DRAFTS ? item?.folder.n : item?.folder?.u),
+			badgeCounter: badgeCount(item.id === FOLDERS.DRAFTS ? item?.n : item?.u),
 			badgeType: item.id === FOLDERS.DRAFTS ? 'read' : 'unread',
 			to: `/folder/${item.id}`,
 			textProps: { size: 'small' }
@@ -547,29 +284,29 @@
 			</Padding>
 		);
 
-		if (folder.acl?.grant) {
+		if (item.acl?.grant) {
 			const tooltipText = t('tooltip.folder_sharing_status', {
-				count: folder.acl.grant.length,
+				count: item.acl.grant.length,
 				defaultValue_one: 'Shared with {{count}} person',
 				defaultValue: 'Shared with {{count}} people'
 			});
 			return RowWithIcon('Shared', 'shared', tooltipText);
 		}
-		if (folder.isLink) {
+		if (item.isLink) {
 			const tooltipText = t('tooltip.folder_linked_status', 'Linked to me');
 			return RowWithIcon('Linked', 'linked', tooltipText);
 		}
 		return '';
-	}, [folder, t]);
+	}, [item, t]);
 
 	// hide folders where a share was provided and subsequently removed
-	if (folder.broken) {
+	if (item.isLink && item.broken) {
 		return <></>;
 	}
 
-	return folder.id === FOLDERS.USER_ROOT || folder.oname === ROOT_NAME ? (
+	return item.id === FOLDERS.USER_ROOT || (item.isLink && item.oname === ROOT_NAME) ? (
 		<FittedRow>
-			<Padding horizontal="small">
+			<Padding left="small">
 				<Avatar label={accordionItem.label} colorLabel={accordionItem.iconColor} size="medium" />
 			</Padding>
 			<Tooltip label={accordionItem.label} placement="right" maxWidth="100%">
@@ -582,18 +319,18 @@
 				acceptType={['message', 'conversation', 'folder']}
 				onDrop={(data: OnDropActionProps): void => onDropAction(data)}
 				onDragEnter={(data: OnDropActionProps): unknown => onDragEnterAction(data)}
-				overlayAcceptComponent={<DropOverlayContainer folder={folder} />}
-				overlayDenyComponent={<DropDenyOverlayContainer folder={folder} />}
+				overlayAcceptComponent={<DropOverlayContainer folder={item} />}
+				overlayDenyComponent={<DropDenyOverlayContainer folder={item} />}
 			>
 				<Drag
 					type="folder"
-					data={folder}
+					data={item}
 					dragDisabled={dragFolderDisable}
 					style={{ display: 'block' }}
 				>
 					<AppLink
 						onClick={onClick}
-						to={`/folder/${folder.id}`}
+						to={`/folder/${item.id}`}
 						style={{ width: '100%', height: '100%', textDecoration: 'none' }}
 					>
 						<Dropdown contextMenu items={dropdownItems} display="block" width="100%">
@@ -610,3 +347,5 @@
 		</Row>
 	);
 };
+
+export default AccordionCustomComponent;
Index: src/views/settings/receiving-messages-settings.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport React, { useMemo } from 'react';\nimport {\n\tContainer,\n\tFormSubSection,\n\tSelect,\n\tInput,\n\tCheckbox,\n\tPadding\n} from '@zextras/carbonio-design-system';\nimport { useTranslation } from 'react-i18next';\nimport { isNil } from 'lodash';\nimport Heading from './components/settings-heading';\nimport { NotifyFolderOpts, ReadReceiptOpts, MsgsFromMeOpts, findLabel } from './components/utils';\nimport { receivingMessagesSubSection } from './subsections';\nimport { MAIL_APP_ID } from '../../constants';\n\nexport default function ReceivingMessagesSettings({\n\tsettingsObj,\n\tupdateSettings,\n\tupdatedProps,\n\tupdateProps\n}) {\n\tconst [t] = useTranslation();\n\tconst notifyFolderOptn = useMemo(() => NotifyFolderOpts(t), [t]);\n\tconst readReceiptOptn = useMemo(() => ReadReceiptOpts(t), [t]);\n\tconst msgsFromMeOpts = useMemo(() => MsgsFromMeOpts(t), [t]);\n\tconst sectionTitle = useMemo(() => receivingMessagesSubSection(t), [t]);\n\n\tconst mailNotificationSoundDefault = useMemo(\n\t\t() =>\n\t\t\tisNil(updatedProps?.mailNotificationSound?.value)\n\t\t\t\t? true\n\t\t\t\t: updatedProps?.mailNotificationSound?.value === 'TRUE',\n\t\t[updatedProps?.mailNotificationSound?.value]\n\t);\n\n\treturn (\n\t\t<FormSubSection label={sectionTitle.label} id={sectionTitle.id}>\n\t\t\t<Container crossAlignment=\"baseline\" padding={{ all: 'small' }}>\n\t\t\t\t<Heading title=\"Message Arrival\" />\n\t\t\t\t<Input\n\t\t\t\t\tlabel={t('label.send_notification', 'Send a notification message to')}\n\t\t\t\t\tvalue={settingsObj.zimbraPrefNewMailNotificationAddress}\n\t\t\t\t\tonChange={(e) => {\n\t\t\t\t\t\tupdateSettings({\n\t\t\t\t\t\t\ttarget: {\n\t\t\t\t\t\t\t\tname: 'zimbraPrefNewMailNotificationAddress',\n\t\t\t\t\t\t\t\tvalue: e.target.value\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t</Container>\n\t\t\t<Container crossAlignment=\"baseline\" padding={{ all: 'small' }}>\n\t\t\t\t<Heading title=\"Arrival Notifications\" />\n\t\t\t\t<Checkbox\n\t\t\t\t\tlabel={t('label.show_popup', 'Show a popup notification')}\n\t\t\t\t\tvalue={settingsObj.zimbraPrefMailToasterEnabled === 'TRUE'}\n\t\t\t\t\tonClick={() =>\n\t\t\t\t\t\tupdateSettings({\n\t\t\t\t\t\t\ttarget: {\n\t\t\t\t\t\t\t\tname: 'zimbraPrefMailToasterEnabled',\n\t\t\t\t\t\t\t\tvalue: settingsObj.zimbraPrefMailToasterEnabled === 'TRUE' ? 'FALSE' : 'TRUE'\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t/>\n\t\t\t\t{/* todo: disabled because unsupported yet\n\t\t\t\t<Padding bottom=\"small\" />\n\t\t\t\t<Checkbox\n\t\t\t\t\tlabel={t('label.highlight_tab', 'Highlight the Mail tab')}\n\t\t\t\t\tvalue={settingsObj.zimbraPrefMailFlashIcon === 'TRUE'}\n\t\t\t\t\tonClick={() =>\n\t\t\t\t\t\tupdateSettings({\n\t\t\t\t\t\t\ttarget: {\n\t\t\t\t\t\t\t\tname: 'zimbraPrefMailFlashIcon',\n\t\t\t\t\t\t\t\tvalue: settingsObj.zimbraPrefMailFlashIcon === 'TRUE' ? 'FALSE' : 'TRUE'\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t/>\n\t\t\t\t<Padding bottom=\"small\" />\n\t\t\t\t<Checkbox\n\t\t\t\t\tlabel={t('label.flash_browser_title', 'Flash the browser title')}\n\t\t\t\t\tvalue={settingsObj.zimbraPrefMailFlashTitle === 'TRUE'}\n\t\t\t\t\tonClick={() =>\n\t\t\t\t\t\tupdateSettings({\n\t\t\t\t\t\t\ttarget: {\n\t\t\t\t\t\t\t\tname: 'zimbraPrefMailFlashTitle',\n\t\t\t\t\t\t\t\tvalue: settingsObj.zimbraPrefMailFlashTitle === 'TRUE' ? 'FALSE' : 'TRUE'\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t/> */}\n\t\t\t\t<Padding bottom=\"small\" />\n\t\t\t\t<Checkbox\n\t\t\t\t\tlabel={t('label.notification_audio', 'Play audio hint when new notification appears')}\n\t\t\t\t\tvalue={mailNotificationSoundDefault}\n\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\tupdateProps({\n\t\t\t\t\t\t\ttarget: {\n\t\t\t\t\t\t\t\tname: 'mailNotificationSound',\n\t\t\t\t\t\t\t\tvalue: {\n\t\t\t\t\t\t\t\t\tapp: MAIL_APP_ID,\n\t\t\t\t\t\t\t\t\tvalue: mailNotificationSoundDefault ? 'FALSE' : 'TRUE'\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t</Container>\n\t\t\t<Container crossAlignment=\"baseline\" padding={{ all: 'small' }}>\n\t\t\t\t<Heading title={t('label.notification_folders', 'Notification Folders')} />\n\t\t\t\t<Select\n\t\t\t\t\tlabel={t('label.select_folder', 'Select folder')}\n\t\t\t\t\tname=\"zimbraPrefShowAllNewMailNotifications\"\n\t\t\t\t\titems={notifyFolderOptn}\n\t\t\t\t\tonChange={(view) =>\n\t\t\t\t\t\tupdateSettings({\n\t\t\t\t\t\t\ttarget: { name: 'zimbraPrefShowAllNewMailNotifications', value: view }\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t\tdefaultSelection={{\n\t\t\t\t\t\tlabel: findLabel(notifyFolderOptn, settingsObj.zimbraPrefShowAllNewMailNotifications),\n\t\t\t\t\t\tvalue: settingsObj.zimbraPrefShowAllNewMailNotifications\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t</Container>\n\t\t\t<Container crossAlignment=\"baseline\" padding={{ all: 'small' }}>\n\t\t\t\t<Heading title=\"Read Reciept\" />\n\t\t\t\t<Select\n\t\t\t\t\titems={readReceiptOptn}\n\t\t\t\t\tonChange={(view) =>\n\t\t\t\t\t\tupdateSettings({ target: { name: 'zimbraPrefMailSendReadReceipts', value: view } })\n\t\t\t\t\t}\n\t\t\t\t\tdefaultSelection={{\n\t\t\t\t\t\tlabel: findLabel(readReceiptOptn, settingsObj.zimbraPrefMailSendReadReceipts),\n\t\t\t\t\t\tvalue: settingsObj.zimbraPrefMailSendReadReceipts\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t</Container>\n\t\t\t<Container crossAlignment=\"baseline\" padding={{ all: 'small' }}>\n\t\t\t\t<Heading title=\"Messages from me\" />\n\t\t\t\t<Select\n\t\t\t\t\titems={msgsFromMeOpts}\n\t\t\t\t\tname=\"zimbraPrefDedupeMessagesSentToSelf\"\n\t\t\t\t\tonChange={(view) =>\n\t\t\t\t\t\tupdateSettings({\n\t\t\t\t\t\t\ttarget: { name: 'zimbraPrefDedupeMessagesSentToSelf', value: view }\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t\tdefaultSelection={{\n\t\t\t\t\t\tlabel: findLabel(msgsFromMeOpts, settingsObj.zimbraPrefDedupeMessagesSentToSelf),\n\t\t\t\t\t\tvalue: settingsObj.zimbraPrefDedupeMessagesSentToSelf\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t</Container>\n\t\t\t<Container crossAlignment=\"baseline\" padding={{ all: 'small' }}>\n\t\t\t\t<Heading title=\"Duplicate Messages\" />\n\t\t\t\t<Checkbox\n\t\t\t\t\tlabel={t(\n\t\t\t\t\t\t'label.automatically_delete_duplicates',\n\t\t\t\t\t\t'Automatically delete duplicate copies of the same message when received'\n\t\t\t\t\t)}\n\t\t\t\t\tvalue={settingsObj.zimbraPrefMessageIdDedupingEnabled === 'TRUE'}\n\t\t\t\t\tonClick={() =>\n\t\t\t\t\t\tupdateSettings({\n\t\t\t\t\t\t\ttarget: {\n\t\t\t\t\t\t\t\tname: 'zimbraPrefMessageIdDedupingEnabled',\n\t\t\t\t\t\t\t\tvalue: settingsObj.zimbraPrefMessageIdDedupingEnabled === 'TRUE' ? 'FALSE' : 'TRUE'\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t/>\n\t\t\t</Container>\n\t\t</FormSubSection>\n\t);\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/views/settings/receiving-messages-settings.jsx b/src/views/settings/receiving-messages-settings.jsx
--- a/src/views/settings/receiving-messages-settings.jsx	(revision d8bea371a1253f951f0f0ff48819868807c68aa7)
+++ b/src/views/settings/receiving-messages-settings.jsx	(date 1662121818000)
@@ -42,7 +42,7 @@
 	return (
 		<FormSubSection label={sectionTitle.label} id={sectionTitle.id}>
 			<Container crossAlignment="baseline" padding={{ all: 'small' }}>
-				<Heading title="Message Arrival" />
+				<Heading title={t('label.message_arrival', 'Message Arrival')} />
 				<Input
 					label={t('label.send_notification', 'Send a notification message to')}
 					value={settingsObj.zimbraPrefNewMailNotificationAddress}
@@ -57,7 +57,7 @@
 				/>
 			</Container>
 			<Container crossAlignment="baseline" padding={{ all: 'small' }}>
-				<Heading title="Arrival Notifications" />
+				<Heading title={t('label.arrival_notifications', 'Arrival Notifications')} />
 				<Checkbox
 					label={t('label.show_popup', 'Show a popup notification')}
 					value={settingsObj.zimbraPrefMailToasterEnabled === 'TRUE'}
@@ -132,7 +132,7 @@
 				/>
 			</Container>
 			<Container crossAlignment="baseline" padding={{ all: 'small' }}>
-				<Heading title="Read Reciept" />
+				<Heading title={t('label.read_receipt', 'Read Receipt')} />
 				<Select
 					items={readReceiptOptn}
 					onChange={(view) =>
@@ -145,7 +145,7 @@
 				/>
 			</Container>
 			<Container crossAlignment="baseline" padding={{ all: 'small' }}>
-				<Heading title="Messages from me" />
+				<Heading title={t('label.message_from_me', 'Messages from me')} />
 				<Select
 					items={msgsFromMeOpts}
 					name="zimbraPrefDedupeMessagesSentToSelf"
@@ -161,7 +161,7 @@
 				/>
 			</Container>
 			<Container crossAlignment="baseline" padding={{ all: 'small' }}>
-				<Heading title="Duplicate Messages" />
+				<Heading title={t('label.duplicate_messages', 'Duplicate Messages')} />
 				<Checkbox
 					label={t(
 						'label.automatically_delete_duplicates',
Index: src/views/sidebar/parts/edit/edit-default-modal.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport { Container, SnackbarManagerContext } from '@zextras/carbonio-design-system';\nimport { FOLDERS } from '@zextras/carbonio-shell-ui';\nimport { filter, includes, isEmpty } from 'lodash';\nimport React, { FC, useCallback, useContext, useEffect, useMemo, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useDispatch } from 'react-redux';\nimport { folderAction } from '../../../../store/actions/folder-action';\nimport { ModalProps } from '../../../../types';\nimport ModalFooter from '../../commons/modal-footer';\nimport { ModalHeader } from '../../commons/modal-header';\nimport { translatedSystemFolders } from '../../utils';\nimport FolderDetails from './folder-details';\nimport NameInputRow from './name-input';\nimport RetentionPolicies from './retention-policies';\nimport { ShareFolderProperties } from './share-folder-properties';\n\nconst retentionPeriod = [\n\t{\n\t\tlabel: 'Days',\n\t\tvalue: 'd'\n\t},\n\t{\n\t\tlabel: 'Weeks',\n\t\tvalue: 'w'\n\t},\n\t{\n\t\tlabel: 'Months',\n\t\tvalue: 'm'\n\t},\n\t{\n\t\tlabel: 'Years',\n\t\tvalue: 'y'\n\t}\n];\nconst numberRegex = /^\\d+$/;\n\ntype EditModalProps = ModalProps & {\n\tsetActiveModal: (modal: string) => void;\n};\n\nconst EditDefaultModal: FC<EditModalProps> = ({ folder, onClose, setActiveModal }) => {\n\tconst [t] = useTranslation();\n\tconst dispatch = useDispatch();\n\t// eslint-disable-next-line @typescript-eslint/ban-types\n\tconst createSnackbar = useContext(SnackbarManagerContext) as Function;\n\n\tconst [inputValue, setInputValue] = useState(folder.folder?.name);\n\tconst [showPolicy, setShowPolicy] = useState(false);\n\tconst [rtnValue, setRtnValue] = useState<number | string>(0);\n\tconst [purgeValue, setPurgeValue] = useState<number | string>(0);\n\tconst [rtnYear, setRtnYear] = useState('d');\n\tconst [dspYear, setDspYear] = useState('d');\n\tconst [rtnRange, setRtnRange] = useState('');\n\tconst [dspRange, setDspRange] = useState<string>('');\n\tconst [dsblMsgDis, setDsblMsgDis] = useState(false);\n\tconst [dsblMsgRet, setDsblMsgRet] = useState(false);\n\tconst [emptyRtnValue, setEmptyRtnValue] = useState(false);\n\tconst [emptyDisValue, setEmptyDisValue] = useState(false);\n\tconst [folderColor, setFolderColor] = useState(folder.folder?.color);\n\n\tuseEffect(() => {\n\t\tif (\n\t\t\tfolder.folder?.retentionPolicy &&\n\t\t\tfolder.folder?.retentionPolicy?.length &&\n\t\t\tfolder.folder?.retentionPolicy[0].keep !== undefined &&\n\t\t\tfolder.folder?.retentionPolicy[0].keep &&\n\t\t\tObject.keys(folder.folder?.retentionPolicy[0].keep[0]).length !== 0\n\t\t) {\n\t\t\tconst lifetime = folder.folder?.retentionPolicy[0]?.keep[0]?.policy[0]?.lifetime;\n\t\t\t// eslint-disable-next-line radix\n\t\t\tconst d = parseInt(lifetime);\n\t\t\tsetDsblMsgRet(true);\n\t\t\tsetShowPolicy(true);\n\n\t\t\tif (d % 365 === 0) {\n\t\t\t\tsetRtnYear('y');\n\t\t\t\tsetRtnValue(d / 365);\n\t\t\t\tsetRtnRange('Years');\n\t\t\t} else if (d % 31 === 0) {\n\t\t\t\tsetRtnYear('m');\n\t\t\t\tsetRtnValue(d / 31);\n\t\t\t\tsetRtnRange('Months');\n\t\t\t} else if (d % 7 === 0) {\n\t\t\t\tsetRtnYear('w');\n\t\t\t\tsetRtnValue(d / 7);\n\t\t\t\tsetRtnRange('Weeks');\n\t\t\t} else {\n\t\t\t\tsetRtnYear('d');\n\t\t\t\tsetRtnValue(d);\n\t\t\t\tsetRtnRange('Days');\n\t\t\t}\n\t\t} else {\n\t\t\tsetRtnYear('d');\n\t\t\tsetRtnRange('Days');\n\t\t}\n\n\t\tif (\n\t\t\tfolder.folder?.retentionPolicy &&\n\t\t\tfolder.folder?.retentionPolicy.length &&\n\t\t\tfolder.folder?.retentionPolicy[0].purge !== undefined &&\n\t\t\tfolder.folder?.retentionPolicy[0].purge &&\n\t\t\tObject.keys(folder.folder?.retentionPolicy[0].purge[0]).length !== 0\n\t\t) {\n\t\t\tconst lifetime = folder.folder?.retentionPolicy[0]?.purge[0]?.policy[0]?.lifetime;\n\t\t\t// eslint-disable-next-line radix\n\t\t\tconst d = parseInt(lifetime);\n\t\t\tsetDsblMsgDis(true);\n\t\t\tsetShowPolicy(true);\n\n\t\t\tif (d % 365 === 0) {\n\t\t\t\tsetDspYear('y');\n\t\t\t\tsetPurgeValue(d / 365);\n\t\t\t\tsetDspRange('Years');\n\t\t\t} else if (d % 31 === 0) {\n\t\t\t\tsetDspYear('m');\n\t\t\t\tsetPurgeValue(d / 31);\n\t\t\t\tsetDspRange('Months');\n\t\t\t} else if (d % 7 === 0) {\n\t\t\t\tsetDspYear('w');\n\t\t\t\tsetPurgeValue(d / 7);\n\t\t\t\tsetDspRange('Weeks');\n\t\t\t} else {\n\t\t\t\tsetDspYear('d');\n\t\t\t\tsetPurgeValue(d);\n\t\t\t\tsetDspRange('Days');\n\t\t\t}\n\t\t} else {\n\t\t\tsetDspYear('d');\n\t\t\tsetDspRange('Days');\n\t\t}\n\t}, [folder.folder?.retentionPolicy]);\n\n\tconst showWarning = useMemo(\n\t\t() =>\n\t\t\tincludes(\n\t\t\t\tfilter(translatedSystemFolders, (f) => f !== folder.folder?.name),\n\t\t\t\tinputValue\n\t\t\t),\n\t\t[inputValue, folder]\n\t);\n\tconst inpDisable = useMemo(\n\t\t() =>\n\t\t\tincludes(\n\t\t\t\t[FOLDERS.INBOX, FOLDERS.TRASH, FOLDERS.SPAM, FOLDERS.SENT, FOLDERS.DRAFTS],\n\t\t\t\tfolder.id\n\t\t\t),\n\t\t[folder]\n\t);\n\tconst disableSubmit = useMemo(() => showWarning || emptyRtnValue, [showWarning, emptyRtnValue]);\n\n\tconst onConfirm = useCallback(() => {\n\t\tlet submit = true;\n\t\tif (dsblMsgRet) {\n\t\t\tsubmit = false;\n\t\t\tif (rtnValue && numberRegex.test(rtnValue.toString())) {\n\t\t\t\tsubmit = true;\n\t\t\t} else {\n\t\t\t\tsetEmptyRtnValue(true);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tif (dsblMsgDis) {\n\t\t\tsubmit = false;\n\t\t\tif (purgeValue && numberRegex.test(purgeValue.toString())) {\n\t\t\t\tsubmit = true;\n\t\t\t} else {\n\t\t\t\tsetEmptyDisValue(true);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (inputValue && submit) {\n\t\t\tlet lt = 1;\n\t\t\tlet pr = 1;\n\n\t\t\tif (rtnYear === 'w') lt = Number(rtnValue) * 7;\n\t\t\telse if (rtnYear === 'm') lt = Number(rtnValue) * 31;\n\t\t\telse if (rtnYear === 'y') lt = Number(rtnValue) * 365;\n\t\t\telse lt = Number(rtnValue);\n\n\t\t\tif (dspYear === 'w') pr = Number(purgeValue) * 7;\n\t\t\telse if (dspYear === 'm') pr = Number(purgeValue) * 31;\n\t\t\telse if (dspYear === 'y') pr = Number(purgeValue) * 365;\n\t\t\telse pr = Number(purgeValue);\n\n\t\t\tdispatch(\n\t\t\t\tfolderAction({\n\t\t\t\t\tfolder: {\n\t\t\t\t\t\t...folder.folder,\n\t\t\t\t\t\tparent: folder.folder?.l,\n\t\t\t\t\t\tpath: folder.folder?.absFolderPath,\n\t\t\t\t\t\tabsParent: '2',\n\t\t\t\t\t\tchildren: []\n\t\t\t\t\t},\n\t\t\t\t\tname: inputValue,\n\t\t\t\t\top: 'update',\n\t\t\t\t\tcolor: folderColor,\n\t\t\t\t\tretentionPolicy:\n\t\t\t\t\t\tdsblMsgRet || dsblMsgDis || folder?.folder.retentionPolicy\n\t\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\t\tkeep: dsblMsgRet\n\t\t\t\t\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\t\t\t\t\tpolicy: {\n\t\t\t\t\t\t\t\t\t\t\t\t\tlifetime: `${lt}d`,\n\t\t\t\t\t\t\t\t\t\t\t\t\ttype: 'user'\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t\t\t: {},\n\t\t\t\t\t\t\t\t\tpurge: dsblMsgDis\n\t\t\t\t\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\t\t\t\t\tpolicy: {\n\t\t\t\t\t\t\t\t\t\t\t\t\tlifetime: `${pr}d`,\n\t\t\t\t\t\t\t\t\t\t\t\t\ttype: 'user'\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t\t\t: {}\n\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t: {}\n\t\t\t\t})\n\t\t\t)\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t\t// @ts-ignore\n\t\t\t\t.then((res) => {\n\t\t\t\t\tif (res.type.includes('fulfilled')) {\n\t\t\t\t\t\tcreateSnackbar({\n\t\t\t\t\t\t\tkey: `edit`,\n\t\t\t\t\t\t\treplace: true,\n\t\t\t\t\t\t\ttype: 'info',\n\t\t\t\t\t\t\thideButton: true,\n\t\t\t\t\t\t\tlabel: t('messages.snackbar.folder_edited', 'Changes correctly saved'),\n\t\t\t\t\t\t\tautoHideTimeout: 3000\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcreateSnackbar({\n\t\t\t\t\t\t\tkey: `edit`,\n\t\t\t\t\t\t\treplace: true,\n\t\t\t\t\t\t\ttype: 'error',\n\t\t\t\t\t\t\thideButton: true,\n\t\t\t\t\t\t\tlabel: t('label.error_try_again', 'Something went wrong, please try again'),\n\t\t\t\t\t\t\tautoHideTimeout: 3000\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t}\n\t\tsetInputValue('');\n\t\tonClose();\n\t}, [\n\t\tdsblMsgRet,\n\t\tdsblMsgDis,\n\t\tinputValue,\n\t\tonClose,\n\t\trtnValue,\n\t\tpurgeValue,\n\t\trtnYear,\n\t\tdspYear,\n\t\tdispatch,\n\t\tfolder,\n\t\tfolderColor,\n\t\tcreateSnackbar,\n\t\tt\n\t]);\n\n\treturn (\n\t\t<>\n\t\t\t<ModalHeader\n\t\t\t\tonClose={onClose}\n\t\t\t\ttitle={`${t('label.edit_folder_properties', {\n\t\t\t\t\tname: folder.folder?.name,\n\t\t\t\t\tdefaultValue: 'Edit {{name}} properties'\n\t\t\t\t})}`}\n\t\t\t/>\n\n\t\t\t<NameInputRow\n\t\t\t\tshowWarning={showWarning}\n\t\t\t\tsetInputValue={setInputValue}\n\t\t\t\tinputValue={inputValue}\n\t\t\t\tinpDisable={inpDisable}\n\t\t\t\tfolderColor={folderColor}\n\t\t\t\tsetFolderColor={setFolderColor}\n\t\t\t/>\n\t\t\t<Container mainAlignment=\"flex-start\" crossAlignment=\"flex-start\" padding={{ top: 'medium' }}>\n\t\t\t\t<FolderDetails folder={folder} />\n\n\t\t\t\t{!isEmpty(folder?.folder.acl) && !folder.folder?.owner && (\n\t\t\t\t\t<ShareFolderProperties folder={folder} setActiveModal={setActiveModal} />\n\t\t\t\t)}\n\t\t\t\t<RetentionPolicies\n\t\t\t\t\tsetShowPolicy={setShowPolicy}\n\t\t\t\t\temptyRtnValue={emptyRtnValue}\n\t\t\t\t\tsetEmptyRtnValue={setEmptyRtnValue}\n\t\t\t\t\tshowPolicy={showPolicy}\n\t\t\t\t\tdsblMsgRet={dsblMsgRet}\n\t\t\t\t\tsetDsblMsgRet={setDsblMsgRet}\n\t\t\t\t\tsetRtnValue={setRtnValue}\n\t\t\t\t\trtnValue={rtnValue}\n\t\t\t\t\tretentionPeriod={retentionPeriod}\n\t\t\t\t\tsetRtnYear={setRtnYear}\n\t\t\t\t\tdsblMsgDis={dsblMsgDis}\n\t\t\t\t\temptyDisValue={emptyDisValue}\n\t\t\t\t\tsetEmptyDisValue={setEmptyDisValue}\n\t\t\t\t\tsetDsblMsgDis={setDsblMsgDis}\n\t\t\t\t\tsetPurgeValue={setPurgeValue}\n\t\t\t\t\tsetDspYear={setDspYear}\n\t\t\t\t\trtnYear={rtnYear}\n\t\t\t\t\trtnRange={rtnRange}\n\t\t\t\t\tdspYear={dspYear}\n\t\t\t\t\tdspRange={dspRange}\n\t\t\t\t\tpurgeValue={purgeValue}\n\t\t\t\t/>\n\t\t\t</Container>\n\n\t\t\t<ModalFooter\n\t\t\t\tonConfirm={onConfirm}\n\t\t\t\tlabel={t('label.edit', 'Edit')}\n\t\t\t\tsecondaryAction={(): void => setActiveModal('share')}\n\t\t\t\tsecondaryLabel={t('folder.modal.edit.add_share', 'Add Share')}\n\t\t\t\tdisabled={disableSubmit}\n\t\t\t\tsecondaryBtnType=\"outlined\"\n\t\t\t\tsecondaryColor=\"primary\"\n\t\t\t/>\n\t\t</>\n\t);\n};\n\nexport default EditDefaultModal;\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/views/sidebar/parts/edit/edit-default-modal.tsx b/src/views/sidebar/parts/edit/edit-default-modal.tsx
--- a/src/views/sidebar/parts/edit/edit-default-modal.tsx	(revision d8bea371a1253f951f0f0ff48819868807c68aa7)
+++ b/src/views/sidebar/parts/edit/edit-default-modal.tsx	(date 1662121386000)
@@ -49,7 +49,7 @@
 	// eslint-disable-next-line @typescript-eslint/ban-types
 	const createSnackbar = useContext(SnackbarManagerContext) as Function;
 
-	const [inputValue, setInputValue] = useState(folder.folder?.name);
+	const [inputValue, setInputValue] = useState(folder.name);
 	const [showPolicy, setShowPolicy] = useState(false);
 	const [rtnValue, setRtnValue] = useState<number | string>(0);
 	const [purgeValue, setPurgeValue] = useState<number | string>(0);
@@ -61,17 +61,19 @@
 	const [dsblMsgRet, setDsblMsgRet] = useState(false);
 	const [emptyRtnValue, setEmptyRtnValue] = useState(false);
 	const [emptyDisValue, setEmptyDisValue] = useState(false);
-	const [folderColor, setFolderColor] = useState(folder.folder?.color);
+	const [folderColor, setFolderColor] = useState(folder.color);
 
 	useEffect(() => {
 		if (
-			folder.folder?.retentionPolicy &&
-			folder.folder?.retentionPolicy?.length &&
-			folder.folder?.retentionPolicy[0].keep !== undefined &&
-			folder.folder?.retentionPolicy[0].keep &&
-			Object.keys(folder.folder?.retentionPolicy[0].keep[0]).length !== 0
+			folder.retentionPolicy &&
+			folder.retentionPolicy?.length &&
+			folder.retentionPolicy[0].keep !== undefined &&
+			folder.retentionPolicy[0].keep &&
+			Object.keys(folder.retentionPolicy[0].keep[0]).length !== 0
 		) {
-			const lifetime = folder.folder?.retentionPolicy[0]?.keep[0]?.policy[0]?.lifetime;
+			// eslint-disable-next-line @typescript-eslint/ban-ts-comment
+			// @ts-ignore
+			const lifetime = folder.retentionPolicy[0]?.keep[0]?.policy[0]?.lifetime;
 			// eslint-disable-next-line radix
 			const d = parseInt(lifetime);
 			setDsblMsgRet(true);
@@ -100,15 +102,16 @@
 		}
 
 		if (
-			folder.folder?.retentionPolicy &&
-			folder.folder?.retentionPolicy.length &&
-			folder.folder?.retentionPolicy[0].purge !== undefined &&
-			folder.folder?.retentionPolicy[0].purge &&
-			Object.keys(folder.folder?.retentionPolicy[0].purge[0]).length !== 0
+			folder.retentionPolicy &&
+			folder.retentionPolicy.length &&
+			folder.retentionPolicy[0].purge !== undefined &&
+			folder.retentionPolicy[0].purge &&
+			Object.keys(folder.retentionPolicy[0].purge[0]).length !== 0
 		) {
-			const lifetime = folder.folder?.retentionPolicy[0]?.purge[0]?.policy[0]?.lifetime;
-			// eslint-disable-next-line radix
-			const d = parseInt(lifetime);
+			// eslint-disable-next-line @typescript-eslint/ban-ts-comment
+			// @ts-ignore
+			const lifetime = folder.retentionPolicy[0]?.purge[0]?.policy[0]?.lifetime;
+			const d = parseInt(lifetime, 10);
 			setDsblMsgDis(true);
 			setShowPolicy(true);
 
@@ -133,12 +136,12 @@
 			setDspYear('d');
 			setDspRange('Days');
 		}
-	}, [folder.folder?.retentionPolicy]);
+	}, [folder.retentionPolicy]);
 
 	const showWarning = useMemo(
 		() =>
 			includes(
-				filter(translatedSystemFolders, (f) => f !== folder.folder?.name),
+				filter(translatedSystemFolders, (f) => f !== folder.name),
 				inputValue
 			),
 		[inputValue, folder]
@@ -191,17 +194,17 @@
 			dispatch(
 				folderAction({
 					folder: {
-						...folder.folder,
-						parent: folder.folder?.l,
-						path: folder.folder?.absFolderPath,
+						...folder,
+						parent: folder.l || '',
+						path: folder.absFolderPath,
 						absParent: '2',
 						children: []
 					},
 					name: inputValue,
 					op: 'update',
-					color: folderColor,
+					color: Number(folderColor),
 					retentionPolicy:
-						dsblMsgRet || dsblMsgDis || folder?.folder.retentionPolicy
+						dsblMsgRet || dsblMsgDis || folder?.retentionPolicy
 							? {
 									keep: dsblMsgRet
 										? {
@@ -270,7 +273,7 @@
 			<ModalHeader
 				onClose={onClose}
 				title={`${t('label.edit_folder_properties', {
-					name: folder.folder?.name,
+					name: folder.name,
 					defaultValue: 'Edit {{name}} properties'
 				})}`}
 			/>
@@ -280,13 +283,13 @@
 				setInputValue={setInputValue}
 				inputValue={inputValue}
 				inpDisable={inpDisable}
-				folderColor={folderColor}
+				folderColor={String(folderColor)}
 				setFolderColor={setFolderColor}
 			/>
 			<Container mainAlignment="flex-start" crossAlignment="flex-start" padding={{ top: 'medium' }}>
 				<FolderDetails folder={folder} />
 
-				{!isEmpty(folder?.folder.acl) && !folder.folder?.owner && (
+				{!isEmpty(folder?.acl) && folder.isLink && !folder.owner && (
 					<ShareFolderProperties folder={folder} setActiveModal={setActiveModal} />
 				)}
 				<RetentionPolicies
Index: src/views/search/parts/folder-accordion-custom-comp.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\n * SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { FC, useMemo } from 'react';\nimport {\n\tFOLDERS,\n\tuseUserAccount,\n\tAccordionFolder,\n\tuseUserSettings\n} from '@zextras/carbonio-shell-ui';\nimport { AccordionItem, Tooltip, Row, Padding } from '@zextras/carbonio-design-system';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n\tgetFolderIconColor,\n\tgetFolderIconName,\n\tgetFolderTranslatedName\n} from '../../sidebar/utils';\n\nconst AccordionCustomComponent: FC<{ item: AccordionFolder }> = ({ item }) => {\n\tconst { folder } = item;\n\tconst accountName = useUserAccount().name;\n\tconst [t] = useTranslation();\n\n\tconst accordionItem = useMemo(\n\t\t() => ({\n\t\t\t...item,\n\t\t\tlabel:\n\t\t\t\titem.id === FOLDERS.USER_ROOT\n\t\t\t\t\t? accountName\n\t\t\t\t\t: getFolderTranslatedName({ t, folderId: item.id, folderName: item.label }),\n\t\t\ticon: getFolderIconName(item),\n\t\t\ticonColor: getFolderIconColor(item),\n\t\t\ttextProps: { size: 'small' }\n\t\t}),\n\t\t[item, accountName, t]\n\t);\n\tconst settings = useUserSettings()?.prefs;\n\tconst [includeSpam, includeTrash, includeSharedFolders] = useMemo(\n\t\t() => [\n\t\t\tsettings?.zimbraPrefIncludeSpamInSearch === 'TRUE',\n\t\t\tsettings?.zimbraPrefIncludeTrashInSearch === 'TRUE',\n\t\t\tsettings?.zimbraPrefIncludeSharedItemsInSearch === 'TRUE'\n\t\t],\n\t\t[settings]\n\t);\n\n\tconst hasToExclude = useMemo(\n\t\t() =>\n\t\t\t(!includeTrash && folder.name === 'Trash') ||\n\t\t\t(!includeSpam && folder.name === 'Junk') ||\n\t\t\t(!includeSharedFolders && folder.isLink),\n\t\t[folder.isLink, folder.name, includeSharedFolders, includeSpam, includeTrash]\n\t);\n\n\tif (hasToExclude) return <></>;\n\treturn (\n\t\t<Row>\n\t\t\t<Padding left=\"small\" />\n\t\t\t<Tooltip label={accordionItem.label} placement=\"right\" maxWidth=\"100%\">\n\t\t\t\t<AccordionItem item={accordionItem} />\n\t\t\t</Tooltip>\n\t\t</Row>\n\t);\n};\n\nexport default AccordionCustomComponent;\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/views/search/parts/folder-accordion-custom-comp.tsx b/src/views/search/parts/folder-accordion-custom-comp.tsx
--- a/src/views/search/parts/folder-accordion-custom-comp.tsx	(revision d8bea371a1253f951f0f0ff48819868807c68aa7)
+++ b/src/views/search/parts/folder-accordion-custom-comp.tsx	(date 1662123430000)
@@ -15,8 +15,8 @@
 import { useTranslation } from 'react-i18next';
 
 import {
-	getFolderIconColor,
-	getFolderIconName,
+	getFolderIconColorForAccordionFolder,
+	getFolderIconNameForAccordionFolder,
 	getFolderTranslatedName
 } from '../../sidebar/utils';
 
@@ -32,8 +32,8 @@
 				item.id === FOLDERS.USER_ROOT
 					? accountName
 					: getFolderTranslatedName({ t, folderId: item.id, folderName: item.label }),
-			icon: getFolderIconName(item),
-			iconColor: getFolderIconColor(item),
+			icon: getFolderIconNameForAccordionFolder(item),
+			iconColor: getFolderIconColorForAccordionFolder(item),
 			textProps: { size: 'small' }
 		}),
 		[item, accountName, t]
Index: .idea/shelf/Changes1.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/shelf/Changes1.xml b/.idea/shelf/Changes1.xml
new file mode 100644
--- /dev/null	(date 1663573795012)
+++ b/.idea/shelf/Changes1.xml	(date 1663573795012)
@@ -0,0 +1,4 @@
+<changelist name="Changes1" date="1661734983986" recycled="false">
+  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Changes1/shelved.patch" />
+  <option name="DESCRIPTION" value="Changes" />
+</changelist>
\ No newline at end of file
Index: src/views/sidebar/parts/edit/share-folder-properties.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport {\n\tButton,\n\tChip,\n\tContainer,\n\tDivider,\n\tPadding,\n\tSnackbarManagerContext,\n\tText,\n\tTooltip\n} from '@zextras/carbonio-design-system';\nimport { Grant, soapFetch, useUserAccounts } from '@zextras/carbonio-shell-ui';\nimport { map, replace, split } from 'lodash';\nimport React, { FC, useCallback, useContext, useEffect, useMemo, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useDispatch } from 'react-redux';\n\nimport styled from 'styled-components';\nimport {\n\tfindLabel,\n\tShareCalendarRoleOptions\n} from '../../../../integrations/shared-invite-reply/parts/utils';\nimport { sendShareNotification } from '../../../../store/actions/send-share-notification';\nimport {\n\tActionProps,\n\tGranteeInfoProps,\n\tGranteeProps,\n\tShareFolderPropertiesProps\n} from '../../../../types';\nimport { capitalise } from '../../utils';\nimport { Context } from './edit-context';\n\nconst HoverChip = styled(Chip)`\n\tbackground-color: ${({ theme, hovered }): string =>\n\t\thovered ? theme.palette.gray3.hover : theme.palette.gray3.regular};\n`;\n\nexport const GranteeInfo: FC<GranteeInfoProps> = ({ grant, shareCalendarRoleOptions, hovered }) => {\n\tconst role = useMemo(\n\t\t() => findLabel(shareCalendarRoleOptions, grant.perm || ''),\n\t\t[shareCalendarRoleOptions, grant.perm]\n\t);\n\tconst label = useMemo(\n\t\t() => `${replace(split(grant.d, '@')?.[0], '.', ' ')} - ${role}`,\n\t\t[grant.d, role]\n\t);\n\tconst upperCaseLabel = useMemo(() => capitalise(label), [label]);\n\treturn (\n\t\t<Container crossAlignment=\"flex-start\">\n\t\t\t<Text>\n\t\t\t\t<HoverChip label={upperCaseLabel} hovered={hovered} />\n\t\t\t</Text>\n\t\t</Container>\n\t);\n};\n\nconst Actions: FC<ActionProps> = ({\n\tfolder,\n\tgrant,\n\tsetActiveModal,\n\tonMouseLeave,\n\tonMouseEnter\n}) => {\n\tconst [t] = useTranslation();\n\t// eslint-disable-next-line @typescript-eslint/ban-types\n\tconst createSnackbar = useContext(SnackbarManagerContext) as Function;\n\tconst accounts = useUserAccounts();\n\tconst { setActiveGrant } = useContext(Context);\n\t// eslint-disable-next-line @typescript-eslint/ban-types\n\tconst dispatch = useDispatch() as Function;\n\tconst onRevoke = useCallback(() => {\n\t\tsetActiveGrant(grant);\n\t\tsetActiveModal('revoke');\n\t}, [setActiveModal, setActiveGrant, grant]);\n\n\tconst onResend = useCallback(() => {\n\t\tdispatch(\n\t\t\tsendShareNotification({\n\t\t\t\tstandardMessage: '',\n\t\t\t\tcontacts: [{ email: grant.d }],\n\t\t\t\tfolder,\n\t\t\t\taccounts\n\t\t\t})\n\t\t).then((res: Response) => {\n\t\t\tif (res.type.includes('fulfilled')) {\n\t\t\t\tcreateSnackbar({\n\t\t\t\t\tkey: `resend-${folder.id}`,\n\t\t\t\t\treplace: true,\n\t\t\t\t\ttype: 'info',\n\t\t\t\t\tlabel: t('snackbar.share_resend', 'Share invite resent'),\n\t\t\t\t\tautoHideTimeout: 2000,\n\t\t\t\t\thideButton: true\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}, [accounts, dispatch, folder, t, grant.d, createSnackbar]);\n\tconst onEdit = useCallback(() => {\n\t\tsetActiveGrant(grant);\n\t\tsetActiveModal('edit');\n\t}, [setActiveModal, setActiveGrant, grant]);\n\n\treturn (\n\t\t<Container\n\t\t\torientation=\"horizontal\"\n\t\t\tmainAlignment=\"flex-end\"\n\t\t\tonMouseEnter={onMouseEnter}\n\t\t\tonMouseLeave={onMouseLeave}\n\t\t\tmaxWidth=\"fit\"\n\t\t>\n\t\t\t<Tooltip label={t('tooltip.edit', 'Edit share properties')} placement=\"top\">\n\t\t\t\t<Button type=\"outlined\" label={t('label.edit', 'Edit')} onClick={onEdit} isSmall />\n\t\t\t</Tooltip>\n\t\t\t<Padding horizontal=\"extrasmall\" />\n\t\t\t<Tooltip label={t('tooltip.revoke', 'Revoke access')} placement=\"top\">\n\t\t\t\t<Button\n\t\t\t\t\ttype=\"outlined\"\n\t\t\t\t\tlabel={t('label.revoke', 'Revoke')}\n\t\t\t\t\tcolor=\"error\"\n\t\t\t\t\tonClick={onRevoke}\n\t\t\t\t\tisSmall\n\t\t\t\t/>\n\t\t\t</Tooltip>\n\t\t\t<Padding horizontal=\"extrasmall\" />\n\t\t\t<Tooltip\n\t\t\t\tlabel={t('tooltip.resend', 'Send mail notification about this share')}\n\t\t\t\tplacement=\"top\"\n\t\t\t\tmaxWidth=\"300px\"\n\t\t\t>\n\t\t\t\t<Button type=\"outlined\" label={t('label.resend', 'Resend')} onClick={onResend} isSmall />\n\t\t\t</Tooltip>\n\t\t</Container>\n\t);\n};\nconst Grantee: FC<GranteeProps> = ({ grant, folder, setActiveModal, shareCalendarRoleOptions }) => {\n\tconst [hovered, setHovered] = useState(false);\n\tconst onMouseEnter = useCallback(() => {\n\t\tsetHovered(true);\n\t}, []);\n\tconst onMouseLeave = useCallback(() => {\n\t\tsetHovered(false);\n\t}, []);\n\treturn (\n\t\t<Container orientation=\"horizontal\" mainAlignment=\"flex-end\" padding={{ bottom: 'small' }}>\n\t\t\t<GranteeInfo\n\t\t\t\tgrant={grant}\n\t\t\t\tshareCalendarRoleOptions={shareCalendarRoleOptions}\n\t\t\t\thovered={hovered}\n\t\t\t/>\n\t\t\t<Actions\n\t\t\t\tfolder={folder}\n\t\t\t\tonMouseLeave={onMouseLeave}\n\t\t\t\tonMouseEnter={onMouseEnter}\n\t\t\t\tgrant={grant}\n\t\t\t\tsetActiveModal={setActiveModal}\n\t\t\t/>\n\t\t</Container>\n\t);\n};\n\nexport const ShareFolderProperties: FC<ShareFolderPropertiesProps> = ({\n\tfolder,\n\tsetActiveModal\n}) => {\n\tconst [t] = useTranslation();\n\tconst [grant, setGrant] = useState<Array<Grant>>(folder.folder.acl.grant);\n\tconst shareCalendarRoleOptions = useCallback(\n\t\t(_grant: Grant) => ShareCalendarRoleOptions(t, _grant.perm.includes('p')),\n\t\t[t]\n\t);\n\tuseEffect(() => {\n\t\tsoapFetch('GetFolder', {\n\t\t\t_jsns: 'urn:zimbraMail',\n\t\t\tfolder: { l: folder.id }\n\t\t}).then((res: any): void => {\n\t\t\tif (res?.folder) {\n\t\t\t\tsetGrant(res.folder[0].acl.grant);\n\t\t\t}\n\t\t});\n\t}, [folder.id]);\n\n\treturn (\n\t\t<Container mainAlignment=\"center\" crossAlignment=\"flex-start\" height=\"fit\">\n\t\t\t<Padding vertical=\"small\" />\n\t\t\t<Text weight=\"bold\">{t('label.shares_folder_edit', 'Sharing of this folder')}</Text>\n\t\t\t<Padding vertical=\"small\" />\n\t\t\t{map(grant, (item) => (\n\t\t\t\t<Grantee\n\t\t\t\t\tkey={item?.zid}\n\t\t\t\t\tgrant={item}\n\t\t\t\t\tfolder={folder}\n\t\t\t\t\tsetActiveModal={setActiveModal}\n\t\t\t\t\tshareCalendarRoleOptions={shareCalendarRoleOptions(item)}\n\t\t\t\t/>\n\t\t\t))}\n\t\t\t<Padding top=\"medium\" />\n\t\t\t<Divider />\n\t\t\t<Padding bottom=\"medium\" />\n\t\t</Container>\n\t);\n};\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/views/sidebar/parts/edit/share-folder-properties.tsx b/src/views/sidebar/parts/edit/share-folder-properties.tsx
--- a/src/views/sidebar/parts/edit/share-folder-properties.tsx	(revision d8bea371a1253f951f0f0ff48819868807c68aa7)
+++ b/src/views/sidebar/parts/edit/share-folder-properties.tsx	(date 1662125339000)
@@ -166,11 +166,8 @@
 	setActiveModal
 }) => {
 	const [t] = useTranslation();
-	const [grant, setGrant] = useState<Array<Grant>>(folder.folder.acl.grant);
-	const shareCalendarRoleOptions = useCallback(
-		(_grant: Grant) => ShareCalendarRoleOptions(t, _grant.perm.includes('p')),
-		[t]
-	);
+	const [grant, setGrant] = useState<Array<Grant> | undefined>();
+
 	useEffect(() => {
 		soapFetch('GetFolder', {
 			_jsns: 'urn:zimbraMail',
@@ -182,8 +179,12 @@
 		});
 	}, [folder.id]);
 
+	const shareCalendarRoleOptions = useMemo(
+		() => ShareCalendarRoleOptions(t, grant?.[0]?.perm?.includes('p')),
+		[t, grant]
+	);
 	return (
-		<Container mainAlignment="center" crossAlignment="flex-start" height="fit">
+		<Container mainAlignmenEt="center" crossAlignment="flex-start" height="fit">
 			<Padding vertical="small" />
 			<Text weight="bold">{t('label.shares_folder_edit', 'Sharing of this folder')}</Text>
 			<Padding vertical="small" />
@@ -193,7 +194,7 @@
 					grant={item}
 					folder={folder}
 					setActiveModal={setActiveModal}
-					shareCalendarRoleOptions={shareCalendarRoleOptions(item)}
+					shareCalendarRoleOptions={shareCalendarRoleOptions}
 				/>
 			))}
 			<Padding top="medium" />
Index: src/views/sidebar/parts/edit/modal-accordion-custom-component.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport React, { FC, useLayoutEffect, useMemo, useRef, useState } from 'react';\nimport { Padding, Row, Icon, Container, TextWithTooltip } from '@zextras/carbonio-design-system';\n\nimport { AccordionFolder } from '@zextras/carbonio-shell-ui';\nimport { useTranslation } from 'react-i18next';\nimport { indexOf, lastIndexOf, min } from 'lodash';\nimport { getFolderIconColor, getFolderIconName, getSystemFolderTranslatedName } from '../../utils';\nimport { Crumb } from '../../../../types';\nimport { Breadcrumbs } from './breadcrumbs';\n\nconst ModalAccordionCustomComponent: FC<{\n\titem: AccordionFolder;\n}> = (folder) => {\n\tconst { item } = folder;\n\tconst [t] = useTranslation();\n\tconst systemFolder = useMemo(() => {\n\t\tlet result = '';\n\t\tif (item.folder.absFolderPath) {\n\t\t\tresult =\n\t\t\t\titem.folder.absFolderPath.indexOf('/', 1) === -1\n\t\t\t\t\t? item.folder.absFolderPath.slice(1, item.folder.absFolderPath.indexOf('/', 0))\n\t\t\t\t\t: item.folder.absFolderPath.slice(1, item.folder.absFolderPath.indexOf('/', 1));\n\t\t}\n\t\treturn result;\n\t}, [item.folder.absFolderPath]);\n\tconst translatedSystemFolder = getSystemFolderTranslatedName({ t, folderName: systemFolder });\n\tconst factor = 10;\n\tconst path = useMemo(\n\t\t() =>\n\t\t\titem.folder.absFolderPath &&\n\t\t\titem.folder.absFolderPath\n\t\t\t\t.slice(\n\t\t\t\t\titem.folder.absFolderPath.indexOf('/', 1) + 1,\n\t\t\t\t\titem.folder.absFolderPath.lastIndexOf('/')\n\t\t\t\t)\n\t\t\t\t.split('/'),\n\t\t[item.folder.absFolderPath]\n\t);\n\tconst targetFolder = useMemo(\n\t\t() => item.label || item.folder.name,\n\t\t[item.label, item.folder.name]\n\t);\n\tconst targetFolderWidth = useMemo(\n\t\t() => min([targetFolder.length * factor + 18, 150]) || 0,\n\t\t[targetFolder.length]\n\t);\n\tconst containerRef = useRef<HTMLDivElement>();\n\tconst [availableWidth, setAvailableWidth] = useState(\n\t\t(containerRef?.current?.clientWidth || 405) - targetFolderWidth\n\t);\n\tconst iconName = getFolderIconName(item);\n\tconst iconColor = getFolderIconColor(item);\n\n\tconst fullPath = useMemo(\n\t\t() => (path ? [translatedSystemFolder, ...path].join(' / ') : ''),\n\t\t[path, translatedSystemFolder]\n\t);\n\n\tuseLayoutEffect(() => {\n\t\tconst calculateAvailableWidth = (): void => {\n\t\t\tif (containerRef && containerRef.current) {\n\t\t\t\tsetAvailableWidth(containerRef?.current?.clientWidth || 0 - targetFolderWidth);\n\t\t\t}\n\t\t};\n\t\twindow.addEventListener('resize', calculateAvailableWidth);\n\t\treturn (): void => window.removeEventListener('resize', calculateAvailableWidth);\n\t}, [containerRef?.current?.clientWidth, targetFolderWidth]);\n\n\tconst crumbs: Array<Crumb> | undefined = useMemo(() => {\n\t\tconst result = [];\n\t\tlet exitLoop = false;\n\t\tlet stringRemainingWidth = availableWidth;\n\t\twhile (\n\t\t\t!(\n\t\t\t\texitLoop !== false ||\n\t\t\t\titem.folder.parent?.absFolderPath === '/' ||\n\t\t\t\t(item.folder.parent?.isLink === true &&\n\t\t\t\t\titem.folder.parent?.absFolderPath.lastIndexOf('/', 1) !== -1)\n\t\t\t)\n\t\t) {\n\t\t\tconst value = item.folder.absFolderPath.slice(\n\t\t\t\tlastIndexOf(item.folder.absFolderPath, '/') + 1\n\t\t\t);\n\t\t\tstringRemainingWidth -= item.folder.name.length * factor + 18;\n\t\t\tif (value !== '' && stringRemainingWidth > 0) {\n\t\t\t\tresult.push({\n\t\t\t\t\tlabel: value,\n\t\t\t\t\ttooltip: ''\n\t\t\t\t});\n\t\t\t\titem.folder = item.folder.parent;\n\t\t\t} else {\n\t\t\t\tresult.push({\n\t\t\t\t\tlabel: '...',\n\t\t\t\t\ttooltip: item.folder.absFolderPath.slice(indexOf(item.folder.absFolderPath, '/', 2) + 1)\n\t\t\t\t});\n\t\t\t\texitLoop = true;\n\t\t\t}\n\t\t}\n\t\tif (translatedSystemFolder) {\n\t\t\tresult.push({ label: translatedSystemFolder, tooltip: '' });\n\t\t}\n\t\tresult.shift();\n\t\treturn result.reverse();\n\t}, [availableWidth, item, translatedSystemFolder]);\n\treturn (\n\t\t<Container\n\t\t\tref={containerRef}\n\t\t\twidth=\"fill\"\n\t\t\tmain-alignment=\"flex-start\"\n\t\t\torientation=\"vertical\"\n\t\t\tcrossAlignment=\"flex-start\"\n\t\t>\n\t\t\t<Padding all=\"medium\">\n\t\t\t\t<Row orientation=\"horizontal\" width=\"fill\" crossAlignment=\"flex-start\">\n\t\t\t\t\t<Icon color={iconColor} icon={iconName || 'FolderOutline'} size=\"large\" />\n\t\t\t\t\t<Padding right=\"medium\" />\n\t\t\t\t\t{crumbs?.length > 0 && <Breadcrumbs breadcrumbs={crumbs} />}\n\t\t\t\t\t<Container width=\"fit\" maxWidth={availableWidth - fullPath.length + item.label.length}>\n\t\t\t\t\t\t<TextWithTooltip overflow=\"ellipsis\">&nbsp;{item.label}</TextWithTooltip>\n\t\t\t\t\t</Container>\n\t\t\t\t</Row>\n\t\t\t</Padding>\n\t\t</Container>\n\t);\n};\n\nexport default ModalAccordionCustomComponent;\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/views/sidebar/parts/edit/modal-accordion-custom-component.tsx b/src/views/sidebar/parts/edit/modal-accordion-custom-component.tsx
--- a/src/views/sidebar/parts/edit/modal-accordion-custom-component.tsx	(revision d8bea371a1253f951f0f0ff48819868807c68aa7)
+++ b/src/views/sidebar/parts/edit/modal-accordion-custom-component.tsx	(date 1661936110000)
@@ -6,7 +6,7 @@
 import React, { FC, useLayoutEffect, useMemo, useRef, useState } from 'react';
 import { Padding, Row, Icon, Container, TextWithTooltip } from '@zextras/carbonio-design-system';
 
-import { AccordionFolder } from '@zextras/carbonio-shell-ui';
+import { Folder } from '@zextras/carbonio-shell-ui';
 import { useTranslation } from 'react-i18next';
 import { indexOf, lastIndexOf, min } from 'lodash';
 import { getFolderIconColor, getFolderIconName, getSystemFolderTranslatedName } from '../../utils';
@@ -14,37 +14,30 @@
 import { Breadcrumbs } from './breadcrumbs';
 
 const ModalAccordionCustomComponent: FC<{
-	item: AccordionFolder;
-}> = (folder) => {
-	const { item } = folder;
+	item: Folder;
+}> = ({ item }) => {
 	const [t] = useTranslation();
 	const systemFolder = useMemo(() => {
 		let result = '';
-		if (item.folder.absFolderPath) {
+		if (item.absFolderPath) {
 			result =
-				item.folder.absFolderPath.indexOf('/', 1) === -1
-					? item.folder.absFolderPath.slice(1, item.folder.absFolderPath.indexOf('/', 0))
-					: item.folder.absFolderPath.slice(1, item.folder.absFolderPath.indexOf('/', 1));
+				item.absFolderPath.indexOf('/', 1) === -1
+					? item.absFolderPath.slice(1, item.absFolderPath.indexOf('/', 0))
+					: item.absFolderPath.slice(1, item.absFolderPath.indexOf('/', 1));
 		}
 		return result;
-	}, [item.folder.absFolderPath]);
+	}, [item.absFolderPath]);
 	const translatedSystemFolder = getSystemFolderTranslatedName({ t, folderName: systemFolder });
 	const factor = 10;
 	const path = useMemo(
 		() =>
-			item.folder.absFolderPath &&
-			item.folder.absFolderPath
-				.slice(
-					item.folder.absFolderPath.indexOf('/', 1) + 1,
-					item.folder.absFolderPath.lastIndexOf('/')
-				)
+			item.absFolderPath &&
+			item.absFolderPath
+				.slice(item.absFolderPath.indexOf('/', 1) + 1, item.absFolderPath.lastIndexOf('/'))
 				.split('/'),
-		[item.folder.absFolderPath]
+		[item.absFolderPath]
 	);
-	const targetFolder = useMemo(
-		() => item.label || item.folder.name,
-		[item.label, item.folder.name]
-	);
+	const targetFolder = useMemo(() => item.name, [item.name]);
 	const targetFolderWidth = useMemo(
 		() => min([targetFolder.length * factor + 18, 150]) || 0,
 		[targetFolder.length]
@@ -73,30 +66,33 @@
 
 	const crumbs: Array<Crumb> | undefined = useMemo(() => {
 		const result = [];
+		let crumbItem = item;
 		let exitLoop = false;
 		let stringRemainingWidth = availableWidth;
 		while (
 			!(
-				exitLoop !== false ||
-				item.folder.parent?.absFolderPath === '/' ||
-				(item.folder.parent?.isLink === true &&
-					item.folder.parent?.absFolderPath.lastIndexOf('/', 1) !== -1)
+				exitLoop ||
+				crumbItem.parent?.absFolderPath === '/' ||
+				(crumbItem.parent?.isLink === true &&
+					crumbItem.parent?.absFolderPath?.lastIndexOf('/', 1) !== -1)
 			)
 		) {
-			const value = item.folder.absFolderPath.slice(
-				lastIndexOf(item.folder.absFolderPath, '/') + 1
-			);
-			stringRemainingWidth -= item.folder.name.length * factor + 18;
-			if (value !== '' && stringRemainingWidth > 0) {
+			const value = crumbItem.absFolderPath?.slice(lastIndexOf(crumbItem.absFolderPath, '/') + 1);
+			stringRemainingWidth -= crumbItem.name.length * factor + 18;
+			if (value && value !== '' && stringRemainingWidth > 0) {
 				result.push({
 					label: value,
 					tooltip: ''
 				});
-				item.folder = item.folder.parent;
+				if (crumbItem.parent) {
+					// eslint-disable-next-line no-param-reassign
+					crumbItem = crumbItem.parent;
+				}
 			} else {
 				result.push({
 					label: '...',
-					tooltip: item.folder.absFolderPath.slice(indexOf(item.folder.absFolderPath, '/', 2) + 1)
+					tooltip:
+						crumbItem.absFolderPath?.slice(indexOf(crumbItem.absFolderPath, '/', 2) + 1) || ''
 				});
 				exitLoop = true;
 			}
@@ -119,9 +115,9 @@
 				<Row orientation="horizontal" width="fill" crossAlignment="flex-start">
 					<Icon color={iconColor} icon={iconName || 'FolderOutline'} size="large" />
 					<Padding right="medium" />
-					{crumbs?.length > 0 && <Breadcrumbs breadcrumbs={crumbs} />}
-					<Container width="fit" maxWidth={availableWidth - fullPath.length + item.label.length}>
-						<TextWithTooltip overflow="ellipsis">&nbsp;{item.label}</TextWithTooltip>
+					{crumbs && crumbs?.length > 0 && <Breadcrumbs breadcrumbs={crumbs} />}
+					<Container width="fit" maxWidth={availableWidth - fullPath.length + item.name.length}>
+						<TextWithTooltip overflow="ellipsis">&nbsp;{item.name}</TextWithTooltip>
 					</Container>
 				</Row>
 			</Padding>
Index: .idea/shelf/Changes.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/shelf/Changes.xml b/.idea/shelf/Changes.xml
new file mode 100644
--- /dev/null	(date 1663573795012)
+++ b/.idea/shelf/Changes.xml	(date 1663573795012)
@@ -0,0 +1,4 @@
+<changelist name="Changes" date="1661734920046" recycled="false">
+  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Changes/shelved.patch" />
+  <option name="DESCRIPTION" value="Changes" />
+</changelist>
\ No newline at end of file
Index: .idea/shelf/fix__shared_with_information_on_edit_folder_modal/shelved.patch
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/shelf/fix__shared_with_information_on_edit_folder_modal/shelved.patch b/.idea/shelf/fix__shared_with_information_on_edit_folder_modal/shelved.patch
new file mode 100644
--- /dev/null	(date 1661936110000)
+++ b/.idea/shelf/fix__shared_with_information_on_edit_folder_modal/shelved.patch	(date 1661936110000)
@@ -0,0 +1,293 @@
+Index: src/store/actions/conv-action.ts
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport { createAsyncThunk } from '@reduxjs/toolkit';\nimport { soapFetch } from '@zextras/carbonio-shell-ui';\nimport { isNil, omitBy } from 'lodash';\nimport {\n\tConvActionParameters,\n\tConvActionRequest,\n\tConvActionResponse,\n\tConvActionResult\n} from '../../types';\n\nexport const convAction = createAsyncThunk<ConvActionResult, ConvActionParameters>(\n\t'convAction',\n\tasync ({ ids, operation, parent, tagName }) => {\n\t\tconst { action } = (await soapFetch<ConvActionRequest, ConvActionResponse>('ConvAction', {\n\t\t\t_jsns: 'urn:zimbraMail',\n\n\t\t\taction: omitBy(\n\t\t\t\t{\n\t\t\t\t\tid: ids.join(','),\n\t\t\t\t\top: operation,\n\t\t\t\t\tl: parent,\n\t\t\t\t\ttn: tagName\n\t\t\t\t},\n\t\t\t\tisNil\n\t\t\t)\n\t\t})) as ConvActionResponse;\n\t\treturn {\n\t\t\tids: action.id.split(','),\n\t\t\toperation: action.op\n\t\t};\n\t}\n);\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/store/actions/conv-action.ts b/src/store/actions/conv-action.ts
+--- a/src/store/actions/conv-action.ts	(revision 4adaba21c8889cfd3cf44adf6271b75e82f59433)
++++ b/src/store/actions/conv-action.ts	(date 1659976268999)
+@@ -6,6 +6,7 @@
+ import { createAsyncThunk } from '@reduxjs/toolkit';
+ import { soapFetch } from '@zextras/carbonio-shell-ui';
+ import { isNil, omitBy } from 'lodash';
++// import { omitBy } from '../../commons/utils';
+ import {
+ 	ConvActionParameters,
+ 	ConvActionRequest,
+Index: src/commons/utils.tsx
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport moment from 'moment';\nimport { find, isArray } from 'lodash';\nimport { TFunction } from 'react-i18next';\nimport { Account } from '@zextras/carbonio-shell-ui';\nimport { Participant } from '../types/participant';\n\nexport const getTimeLabel = (date: number): string => {\n\tconst momentDate = moment(date);\n\tif (momentDate.isSame(new Date(), 'day')) {\n\t\treturn momentDate.format('LT');\n\t}\n\tif (momentDate.isSame(new Date(), 'week')) {\n\t\treturn momentDate.format('dddd, LT');\n\t}\n\tif (momentDate.isSame(new Date(), 'month')) {\n\t\treturn momentDate.format('DD MMMM');\n\t}\n\treturn momentDate.format('DD/MM/YYYY');\n};\n\nexport const participantToString = (\n\tparticipant: Participant | undefined,\n\tt: TFunction,\n\taccounts: Array<Account>\n): string => {\n\tconst me = find(accounts, ['name', participant?.address]);\n\tif (me) {\n\t\treturn t('label.me', 'Me');\n\t}\n\treturn participant?.fullName || participant?.name || participant?.address || '';\n};\n\nexport const isAvailableInTrusteeList = (\n\ttrusteeList: Array<string> | string,\n\taddress: string\n): boolean => {\n\tlet trusteeAddress: Array<string> = [];\n\tlet availableInTrusteeList = false;\n\tif (trusteeList) {\n\t\ttrusteeAddress = isArray(trusteeList) ? trusteeList : trusteeList.split(',');\n\t}\n\tif (trusteeAddress.length > 0) {\n\t\tconst domain = address.substring(address.lastIndexOf('@') + 1);\n\t\ttrusteeAddress.forEach((ta) => {\n\t\t\tif (ta === domain || ta === address) {\n\t\t\t\tavailableInTrusteeList = true;\n\t\t\t}\n\t\t});\n\t}\n\treturn availableInTrusteeList;\n};\n\n// eslint-disable-next-line no-shadow\nexport enum LineType {\n\tORIG_UNKNOWN = 'UNKNOWN',\n\tORIG_QUOTED = 'QUOTED',\n\tORIG_SEP_STRONG = 'SEP_STRONG',\n\tORIG_WROTE_STRONG = 'WROTE_STRONG',\n\tORIG_WROTE_WEAK = 'WROTE_WEAK',\n\tORIG_HEADER = 'HEADER',\n\tORIG_LINE = 'LINE',\n\tHTML_SEP_ID = 'zwchr',\n\tNOTES_SEPARATOR = '*~*~*~*~*~*~*~*~*~*'\n}\n\n// eslint-disable-next-line no-shadow\nexport enum FolderActionsType {\n\tNEW = 'new',\n\tMOVE = 'move',\n\tDELETE = 'delete',\n\tEDIT = 'edit',\n\tEMPTY = 'empty',\n\tREMOVE_FROM_LIST = 'removeFromList',\n\tSHARES_INFO = 'sharesInfo',\n\tSHARE = 'share'\n}\n\n// eslint-disable-next-line no-shadow\nexport enum ParticipantRole {\n\tFROM = 'f',\n\tTO = 't',\n\tCARBON_COPY = 'c',\n\tBLIND_CARBON_COPY = 'b',\n\tREPLY_TO = 'r',\n\tSENDER = 's',\n\tREAD_RECEIPT_NOTIFICATION = 'n',\n\tRESENT_FROM = 'rf'\n}\n\n// eslint-disable-next-line no-shadow\nexport enum ActionsType {\n\tNEW = 'new',\n\tEDIT_AS_DRAFT = 'editAsDraft',\n\tEDIT_AS_NEW = 'editAsNew',\n\tREPLY = 'reply',\n\tREPLY_ALL = 'replyAll',\n\tFORWARD = 'forward',\n\tMAIL_TO = 'mailTo',\n\tCOMPOSE = 'compose',\n\tPREFILL_COMPOSE = 'prefillCompose'\n}\n\n// eslint-disable-next-line no-shadow\nexport enum TagsActionsType {\n\tNEW = 'new',\n\tDELETE = 'delete',\n\tEDIT = 'edit',\n\tApply = 'apply'\n}\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/commons/utils.tsx b/src/commons/utils.tsx
+--- a/src/commons/utils.tsx	(revision 4adaba21c8889cfd3cf44adf6271b75e82f59433)
++++ b/src/commons/utils.tsx	(date 1659976157630)
+@@ -112,3 +112,12 @@
+ 	EDIT = 'edit',
+ 	Apply = 'apply'
+ }
++
++// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
++export const omitBy = (obj: any, check: (arg: unknown) => boolean): any => {
++	// eslint-disable-next-line no-param-reassign
++	obj = { ...obj };
++	// eslint-disable-next-line no-param-reassign
++	Object.entries(obj).forEach(([key, value]) => check(value) && delete obj[key]);
++	return obj;
++};
+Index: src/store/actions/search.ts
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n/* eslint no-param-reassign: [\"error\", { \"props\": true, \"ignorePropertyModificationsFor\": [\"conversation\"] }] */\n\nimport { createAsyncThunk } from '@reduxjs/toolkit';\nimport { soapFetch } from '@zextras/carbonio-shell-ui';\nimport { keyBy, map, reduce } from 'lodash';\nimport { normalizeConversation } from '../../normalizations/normalize-conversation';\nimport { normalizeMailMessageFromSoap } from '../../normalizations/normalize-message';\nimport {\n\tConversation,\n\tSearchRequest,\n\tSearchResponse,\n\tFetchConversationsReturn,\n\tFetchConversationsParameters\n} from '../../types';\n\nexport const search = createAsyncThunk<\n\tFetchConversationsReturn | undefined,\n\tFetchConversationsParameters\n>(\n\t'fetchConversations',\n\tasync ({\n\t\tfolderId,\n\t\tlimit = 100,\n\t\tbefore,\n\t\ttypes = 'conversation',\n\t\tsortBy = 'dateDesc',\n\t\tquery,\n\t\toffset,\n\t\trecip = '2',\n\t\twantContent = 'full'\n\t}) => {\n\t\tconst queryPart = [`inId:\"${folderId}\"`];\n\t\tif (before) queryPart.push(`before:${before.getTime()}`);\n\t\tconst result = await soapFetch<SearchRequest, SearchResponse>('Search', {\n\t\t\t_jsns: 'urn:zimbraMail',\n\t\t\tlimit,\n\t\t\tneedExp: 1,\n\t\t\trecip,\n\t\t\tfullConversation: 1,\n\t\t\twantContent,\n\t\t\tsortBy,\n\t\t\tquery: query || queryPart.join(' '),\n\t\t\toffset,\n\t\t\ttypes\n\t\t});\n\n\t\tif (types === 'conversation') {\n\t\t\tconst conversations = map(result?.c ?? [], (obj) =>\n\t\t\t\tnormalizeConversation(obj)\n\t\t\t) as unknown as Array<Conversation>;\n\t\t\treturn {\n\t\t\t\tconversations: keyBy(conversations, 'id'),\n\t\t\t\thasMore: result.more,\n\t\t\t\ttypes\n\t\t\t};\n\t\t}\n\t\tif (types === 'message') {\n\t\t\treturn {\n\t\t\t\tmessages: reduce(\n\t\t\t\t\tresult.m ?? [],\n\t\t\t\t\t(acc, msg) => {\n\t\t\t\t\t\tconst normalized = normalizeMailMessageFromSoap(msg, false);\n\t\t\t\t\t\treturn { ...acc, [normalized.id]: normalized };\n\t\t\t\t\t},\n\t\t\t\t\t{}\n\t\t\t\t),\n\t\t\t\thasMore: result.more,\n\t\t\t\ttypes\n\t\t\t};\n\t\t}\n\t\treturn undefined;\n\t}\n);\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/store/actions/search.ts b/src/store/actions/search.ts
+--- a/src/store/actions/search.ts	(revision 4adaba21c8889cfd3cf44adf6271b75e82f59433)
++++ b/src/store/actions/search.ts	(date 1659976157631)
+@@ -6,7 +6,7 @@
+ /* eslint no-param-reassign: ["error", { "props": true, "ignorePropertyModificationsFor": ["conversation"] }] */
+ 
+ import { createAsyncThunk } from '@reduxjs/toolkit';
+-import { soapFetch } from '@zextras/carbonio-shell-ui';
++import { getTags, soapFetch } from '@zextras/carbonio-shell-ui';
+ import { keyBy, map, reduce } from 'lodash';
+ import { normalizeConversation } from '../../normalizations/normalize-conversation';
+ import { normalizeMailMessageFromSoap } from '../../normalizations/normalize-message';
+@@ -49,9 +49,10 @@
+ 			types
+ 		});
+ 
++		const tags = getTags();
+ 		if (types === 'conversation') {
+ 			const conversations = map(result?.c ?? [], (obj) =>
+-				normalizeConversation(obj)
++				normalizeConversation({ c: obj, tags })
+ 			) as unknown as Array<Conversation>;
+ 			return {
+ 				conversations: keyBy(conversations, 'id'),
+Index: src/store/utils.ts
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport { max, map, filter, find, reduce, some, merge, isNil, omitBy } from 'lodash';\nimport { FolderType, MailsFolderMap, FoldersStateType } from '../types';\n\nexport function findDepth(subFolder: FolderType, depth = 1): number {\n\tif (subFolder && subFolder.items && subFolder.items.length) {\n\t\treturn <number>max(map(subFolder.items, (item) => findDepth(item, depth + 1)));\n\t}\n\treturn depth;\n}\n\nexport function calcFolderItems(\n\tfolders: MailsFolderMap,\n\tsubFolders: FolderType | undefined,\n\tid: string\n): FolderType[] {\n\treturn map(\n\t\tfilter(folders, (item) => item.parent === id),\n\t\t(item) => ({\n\t\t\t...item,\n\t\t\titems: calcFolderItems(folders, subFolders, item.id),\n\t\t\tto: `/folder/${item.id}`\n\t\t})\n\t);\n}\n\nexport function calcFolderAbsParentLevelAndPath(\n\tfolders: MailsFolderMap,\n\tsubFolder: FolderType | undefined,\n\tpath = subFolder && subFolder.name,\n\tlevel = 1\n): { absParent: string; level: number; path: string | undefined } | undefined {\n\tif (!subFolder) return undefined;\n\tconst nextFolder = find(folders, (item) => item.id === subFolder.parent);\n\tconst nextPath = `${nextFolder ? nextFolder.name : ''}/${path}`;\n\treturn (\n\t\tcalcFolderAbsParentLevelAndPath(folders, nextFolder, nextPath, level + 1) || {\n\t\t\tabsParent: level > 1 ? subFolder.id : subFolder.parent,\n\t\t\tlevel,\n\t\t\tpath\n\t\t}\n\t);\n}\n\n// replaced lodash \"reduce\" method with vanilla JS in order to decrease iterations and improve performance\nexport function updateFolders(state: FoldersStateType, folders: FolderType[]): void {\n\tstate.folders = Object.values(state.folders).reduce((acc, item) => {\n\t\tconst newFolder = omitBy(\n\t\t\tObject.values(folders).find((c) => c.id === item.id),\n\t\t\tisNil\n\t\t);\n\t\tconst toRet = newFolder ? { ...item, ...newFolder } : item;\n\n\t\treturn {\n\t\t\t...acc,\n\t\t\t[toRet.id]: {\n\t\t\t\t...toRet\n\t\t\t}\n\t\t};\n\t}, {});\n}\n\nexport function updateFolderInStore(state: FoldersStateType, folders: FolderType[]): void {\n\tstate.folders = reduce(\n\t\tstate.folders,\n\t\t(acc, item) => {\n\t\t\tconst toRet = find(folders, (c) => c.id === item.id) || item;\n\n\t\t\tconst items = calcFolderItems(state.folders, toRet, toRet.id);\n\t\t\tconst moreParams = calcFolderAbsParentLevelAndPath(state.folders, toRet);\n\t\t\treturn {\n\t\t\t\t...acc,\n\t\t\t\t[toRet.id]: {\n\t\t\t\t\t...toRet,\n\t\t\t\t\t...moreParams,\n\t\t\t\t\tdepth: findDepth({ ...toRet, items }),\n\t\t\t\t\titems,\n\t\t\t\t\tpath: moreParams ? `/${moreParams.path}` : undefined\n\t\t\t\t}\n\t\t\t};\n\t\t},\n\t\t{}\n\t);\n}\n\nexport function updatePartialFolderInStore(state: FoldersStateType, folders: FolderType[]): void {\n\tstate.folders = reduce(\n\t\tstate.folders,\n\t\t(acc, item) => {\n\t\t\tconst itemToUpdate = find(folders, (c) => c.id === item.id);\n\t\t\tconst toRet = merge(item, itemToUpdate ?? {});\n\n\t\t\tconst items = calcFolderItems(state.folders, toRet, toRet.id);\n\t\t\tconst moreParams = calcFolderAbsParentLevelAndPath(state.folders, toRet);\n\t\t\treturn {\n\t\t\t\t...acc,\n\t\t\t\t[toRet.id]: {\n\t\t\t\t\t...toRet,\n\t\t\t\t\t...moreParams,\n\t\t\t\t\tdepth: findDepth({ ...toRet, items }),\n\t\t\t\t\titems,\n\t\t\t\t\tpath: moreParams ? `/${moreParams.path}` : undefined\n\t\t\t\t}\n\t\t\t};\n\t\t},\n\t\t{}\n\t);\n}\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport function addFoldersToStore(state: FoldersStateType, folders: any): void {\n\tstate.folders = reduce(folders, (acc, v, k) => ({ ...acc, [v.id]: v }), state.folders);\n}\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport function removeFoldersFromStore(state: FoldersStateType, idsToDelete: any): void {\n\t// state.folders = omit(state.folders, idsToDelete); Maybe?\n\tstate.folders = reduce(\n\t\tstate.folders,\n\t\t(acc, v, k) => {\n\t\t\tconst value = some(idsToDelete, (cid) => cid === v.id);\n\t\t\treturn value ? { ...acc } : { ...acc, [v.id]: v };\n\t\t},\n\t\t{} as MailsFolderMap\n\t);\n}\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/store/utils.ts b/src/store/utils.ts
+--- a/src/store/utils.ts	(revision 4adaba21c8889cfd3cf44adf6271b75e82f59433)
++++ b/src/store/utils.ts	(date 1659976428473)
+@@ -3,7 +3,7 @@
+  *
+  * SPDX-License-Identifier: AGPL-3.0-only
+  */
+-import { max, map, filter, find, reduce, some, merge, isNil, omitBy } from 'lodash';
++import { max, map, filter, find, reduce, omitBy, some, merge, isNil } from 'lodash';
+ import { FolderType, MailsFolderMap, FoldersStateType } from '../types';
+ 
+ export function findDepth(subFolder: FolderType, depth = 1): number {
+Index: src/normalizations/normalize-message.ts
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport { getTags } from '@zextras/carbonio-shell-ui';\nimport { filter, find, isNil, map, omitBy, reduce } from 'lodash';\nimport { ParticipantRole } from '../commons/utils';\nimport {\n\tIncompleteMessage,\n\tMailMessagePart,\n\tSoapEmailParticipantRole,\n\tSoapMailParticipant,\n\tParticipant,\n\tSoapIncompleteMessage,\n\tSoapMailMessagePart\n} from '../types';\n\nexport function normalizeMailPartMapFn(v: SoapMailMessagePart): MailMessagePart {\n\tconst ret: MailMessagePart = {\n\t\tcontentType: v.ct,\n\t\tsize: v.s || 0,\n\t\tname: v.part,\n\t\tdisposition: v.cd\n\t};\n\tif (v.mp) {\n\t\tret.parts = map(v.mp || [], normalizeMailPartMapFn);\n\t}\n\tif (v.filename) ret.filename = v.filename;\n\tif (v.content) ret.content = v.content;\n\tif (v.ci) ret.ci = v.ci;\n\tif (v.cd) ret.disposition = v.cd;\n\treturn ret;\n}\n\nfunction findBodyPart(\n\tmp: Array<SoapMailMessagePart>,\n\tacc: { contentType: string; content: string },\n\tid: string\n): { contentType: string; content: string } {\n\tconst bodyPart = reduce(\n\t\tmp,\n\t\t(found, part) => {\n\t\t\tif (part.mp) return findBodyPart(part.mp, found, id);\n\t\t\tif (part && part.body) {\n\t\t\t\tif (!found.contentType.length) {\n\t\t\t\t\treturn { contentType: part.ct, content: part.content ?? '' };\n\t\t\t\t}\n\t\t\t\tif (\n\t\t\t\t\tpart.part &&\n\t\t\t\t\tpart.part.indexOf('.') === -1 &&\n\t\t\t\t\tpart.cd &&\n\t\t\t\t\tpart.cd === 'inline' &&\n\t\t\t\t\t!part.ci &&\n\t\t\t\t\t!(part.ct && part.ct === 'text/plain')\n\t\t\t\t) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...found,\n\t\t\t\t\t\tcontent: found.content.concat(\n\t\t\t\t\t\t\t`<img src='/service/home/~/?auth=co&loc=en&id=${id}&part=${part?.part}'>` ?? ''\n\t\t\t\t\t\t)\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\treturn { ...found, content: found.content.concat(part.content ?? '') };\n\t\t\t}\n\t\t\treturn found;\n\t\t},\n\t\tacc\n\t);\n\n\treturn bodyPart;\n}\n\nexport function generateBody(\n\tmp: Array<SoapMailMessagePart>,\n\tid: string\n): {\n\tcontentType: string;\n\tcontent: string;\n} {\n\treturn findBodyPart(mp, { contentType: '', content: '' }, id);\n}\n\nfunction participantTypeFromSoap(t: SoapEmailParticipantRole): ParticipantRole {\n\tswitch (t) {\n\t\tcase 'f':\n\t\t\treturn ParticipantRole.FROM;\n\t\tcase 't':\n\t\t\treturn ParticipantRole.TO;\n\t\tcase 'c':\n\t\t\treturn ParticipantRole.CARBON_COPY;\n\t\tcase 'b':\n\t\t\treturn ParticipantRole.BLIND_CARBON_COPY;\n\t\tcase 'r':\n\t\t\treturn ParticipantRole.REPLY_TO;\n\t\tcase 's':\n\t\t\treturn ParticipantRole.SENDER;\n\t\tcase 'n':\n\t\t\treturn ParticipantRole.READ_RECEIPT_NOTIFICATION;\n\t\tcase 'rf':\n\t\t\treturn ParticipantRole.RESENT_FROM;\n\t\tdefault:\n\t\t\tthrow new Error(`Participant type not handled: '${t}'`);\n\t}\n}\n\nexport function normalizeParticipantsFromSoap(e: SoapMailParticipant): Participant {\n\treturn {\n\t\ttype: participantTypeFromSoap(e.t),\n\t\taddress: e.a,\n\t\tname: e.d || e.a,\n\t\tfullName: e.p\n\t};\n}\nexport const getTagIdsFromName = (names: string | undefined): Array<string | undefined> => {\n\tconst tags = getTags();\n\treturn map(names?.split(','), (name) => find(tags, { name })?.id);\n};\n\nexport const getTagIds = (\n\tt: string | undefined,\n\ttn: string | undefined\n): Array<string | undefined> => {\n\tif (!isNil(t)) {\n\t\treturn filter(t.split(','), (tag) => tag !== '');\n\t}\n\tif (!isNil(tn)) {\n\t\treturn getTagIdsFromName(tn);\n\t}\n\treturn [];\n};\nexport const normalizeMailMessageFromSoap = (\n\tm: SoapIncompleteMessage,\n\tisComplete: boolean\n): IncompleteMessage => <IncompleteMessage>omitBy(\n\t\t{\n\t\t\tconversation: m.cid,\n\t\t\tid: m.id,\n\t\t\tdate: m.d,\n\t\t\tsize: m.s,\n\t\t\tparent: m.l,\n\t\t\tfragment: m.fr,\n\t\t\tsubject: m.su,\n\t\t\tparticipants: m.e ? map(m.e || [], normalizeParticipantsFromSoap) : undefined,\n\t\t\ttags: getTagIds(m.t, m.tn),\n\t\t\tparts: m.mp ? map(m.mp || [], normalizeMailPartMapFn) : undefined,\n\t\t\tinvite: m.inv,\n\t\t\tshr: m.shr,\n\t\t\tbody: m.mp ? generateBody(m.mp || [], m.id) : undefined,\n\t\t\tisComplete,\n\t\t\tread: !isNil(m.f) ? !/u/.test(m.f) : true,\n\t\t\tattachment: !isNil(m.f) ? /a/.test(m.f) : undefined,\n\t\t\tflagged: !isNil(m.f) ? /f/.test(m.f) : undefined,\n\t\t\turgent: !isNil(m.f) ? /!/.test(m.f) : undefined,\n\t\t\tisDeleted: !isNil(m.f) ? /x/.test(m.f) : undefined,\n\t\t\tisDraft: !isNil(m.f) ? /d/.test(m.f) : undefined,\n\t\t\tisForwarded: !isNil(m.f) ? /w/.test(m.f) : undefined,\n\t\t\tisSentByMe: !isNil(m.f) ? /s/.test(m.f) : undefined,\n\t\t\tisInvite: !isNil(m.f) ? /v/.test(m.f) : undefined,\n\t\t\tisReplied: !isNil(m.f) ? /r/.test(m.f) : undefined,\n\t\t\tisReadReceiptRequested: !isNil(m.f) ? !/n/.test(m.f) : true\n\t\t},\n\t\tisNil\n\t);\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/normalizations/normalize-message.ts b/src/normalizations/normalize-message.ts
+--- a/src/normalizations/normalize-message.ts	(revision 4adaba21c8889cfd3cf44adf6271b75e82f59433)
++++ b/src/normalizations/normalize-message.ts	(date 1659976375980)
+@@ -4,7 +4,7 @@
+  * SPDX-License-Identifier: AGPL-3.0-only
+  */
+ import { getTags } from '@zextras/carbonio-shell-ui';
+-import { filter, find, isNil, map, omitBy, reduce } from 'lodash';
++import { filter, find, isNil, map, reduce, omitBy } from 'lodash';
+ import { ParticipantRole } from '../commons/utils';
+ import {
+ 	IncompleteMessage,
+Index: src/normalizations/normalize-conversation.ts
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport { getTags } from '@zextras/carbonio-shell-ui';\nimport { filter, find, isNil, map, omitBy } from 'lodash';\nimport { Conversation, SoapIncompleteMessage, SoapConversation } from '../types';\nimport { normalizeParticipantsFromSoap } from './normalize-message';\n\nexport const getTagIdsFromName = (names: string | undefined): Array<string | undefined> => {\n\tconst tags = getTags();\n\treturn map(names?.split(','), (name) => find(tags, { name })?.id);\n};\n\nexport const getTagIds = (\n\tt: string | undefined,\n\ttn: string | undefined\n): Array<string | undefined> => {\n\tif (!isNil(t)) {\n\t\treturn filter(t.split(','), (tag) => tag !== '');\n\t}\n\tif (!isNil(tn)) {\n\t\treturn getTagIdsFromName(tn);\n\t}\n\treturn [];\n};\nexport const normalizeConversation = (\n\tc: SoapConversation,\n\tm?: Array<SoapIncompleteMessage>\n): Partial<Conversation> => {\n\tconst filteredMsgs = c?.m ?? filter(m ?? [], ['cid', c?.id]);\n\tconst messages = filteredMsgs?.length\n\t\t? map(filteredMsgs, (msg) => ({\n\t\t\t\tid: msg.id,\n\t\t\t\tparent: msg.l,\n\t\t\t\tdate: Number(msg?.d)\n\t\t  }))\n\t\t: undefined;\n\n\treturn omitBy(\n\t\t{\n\t\t\ttags: getTagIds(c.t, c.tn),\n\t\t\tid: c.id,\n\t\t\tdate: c.d,\n\t\t\tmsgCount: c.n,\n\t\t\tunreadMsgCount: c.u,\n\t\t\tmessages,\n\t\t\tparticipants: c.e ? map(c.e, normalizeParticipantsFromSoap) : undefined,\n\t\t\tsubject: c.su,\n\t\t\tfragment: c.fr,\n\t\t\tread: !isNil(c.f) ? !/u/.test(c.f) : !(c.u > 0),\n\t\t\tattachment: !isNil(c.f) ? /a/.test(c.f) : undefined,\n\t\t\tflagged: !isNil(c.f) ? /f/.test(c.f) : undefined,\n\t\t\turgent: !isNil(c.f) ? /!/.test(c.f) : undefined\n\t\t},\n\t\tisNil\n\t);\n};\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/normalizations/normalize-conversation.ts b/src/normalizations/normalize-conversation.ts
+--- a/src/normalizations/normalize-conversation.ts	(revision 4adaba21c8889cfd3cf44adf6271b75e82f59433)
++++ b/src/normalizations/normalize-conversation.ts	(date 1659976157630)
+@@ -3,32 +3,41 @@
+  *
+  * SPDX-License-Identifier: AGPL-3.0-only
+  */
+-import { getTags } from '@zextras/carbonio-shell-ui';
+-import { filter, find, isNil, map, omitBy } from 'lodash';
++import { Tags } from '@zextras/carbonio-shell-ui';
++import { filter, find, isNil, map } from 'lodash';
++import { omitBy } from '../commons/utils';
+ import { Conversation, SoapIncompleteMessage, SoapConversation } from '../types';
+ import { normalizeParticipantsFromSoap } from './normalize-message';
+ 
+-export const getTagIdsFromName = (names: string | undefined): Array<string | undefined> => {
+-	const tags = getTags();
+-	return map(names?.split(','), (name) => find(tags, { name })?.id);
+-};
+-
++export const getTagIdsFromName = (
++	names: string | undefined,
++	tags?: Tags
++): Array<string | undefined> => map(names?.split(','), (name) => find(tags, { name })?.id);
+ export const getTagIds = (
+ 	t: string | undefined,
+-	tn: string | undefined
++	tn: string | undefined,
++	tags?: Tags
+ ): Array<string | undefined> => {
+ 	if (!isNil(t)) {
+ 		return filter(t.split(','), (tag) => tag !== '');
+ 	}
+ 	if (!isNil(tn)) {
+-		return getTagIdsFromName(tn);
++		return getTagIdsFromName(tn, tags);
+ 	}
+ 	return [];
+ };
+-export const normalizeConversation = (
+-	c: SoapConversation,
+-	m?: Array<SoapIncompleteMessage>
+-): Partial<Conversation> => {
++
++export type NormalizeConversationProps = {
++	c: SoapConversation;
++	tags: Tags;
++	m?: Array<SoapIncompleteMessage>;
++};
++
++export const normalizeConversation = ({
++	c,
++	m,
++	tags
++}: NormalizeConversationProps): Partial<Conversation> => {
+ 	const filteredMsgs = c?.m ?? filter(m ?? [], ['cid', c?.id]);
+ 	const messages = filteredMsgs?.length
+ 		? map(filteredMsgs, (msg) => ({
+@@ -38,9 +47,10 @@
+ 		  }))
+ 		: undefined;
+ 
+-	return omitBy(
++	console.time('@@normalizeConversation');
++	const result = omitBy(
+ 		{
+-			tags: getTagIds(c.t, c.tn),
++			tags: getTagIds(c.t, c.tn, tags),
+ 			id: c.id,
+ 			date: c.d,
+ 			msgCount: c.n,
+@@ -56,4 +66,7 @@
+ 		},
+ 		isNil
+ 	);
++	console.timeEnd('@@normalizeConversation');
++
++	return result;
+ };
+Index: src/views/sidebar/sync-data-handler.jsx
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport {\n\tFOLDERS,\n\tstore,\n\tuseNotify,\n\tuseRefresh,\n\tupdatePrimaryBadge\n} from '@zextras/carbonio-shell-ui';\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { isEmpty, map, keyBy, find, filter, forEach, sortBy, reduce } from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport {\n\thandleCreatedFolders,\n\thandleModifiedFolders,\n\thandleDeletedFolders,\n\thandleRefresh,\n\tselectFolder\n} from '../../store/folders-slice';\nimport {\n\thandleNotifyCreatedConversations,\n\thandleNotifyModifiedConversations,\n\thandleNotifyDeletedConversations,\n\thandleModifiedMessagesInConversation,\n\thandleDeletedMessagesInConversation,\n\tsetSearchedInFolder,\n\tselectCurrentFolder,\n\thandleCreatedMessagesInConversation,\n\thandleAddMessagesInConversation\n} from '../../store/conversations-slice';\nimport {\n\thandleCreatedMessages,\n\thandleModifiedMessages,\n\thandleDeletedMessages,\n\tselectMessages\n} from '../../store/messages-slice';\nimport { storeReducers } from '../../store/reducers';\nimport { normalizeConversation } from '../../normalizations/normalize-conversation';\nimport { normalizeMailMessageFromSoap } from '../../normalizations/normalize-message';\nimport { extractFolders } from './utils';\nimport { MAILS_ROUTE } from '../../constants';\n\nconst InboxBadgeUpdater = () => {\n\tconst folder = useSelector(selectFolder(FOLDERS.INBOX));\n\tuseEffect(() => {\n\t\tupdatePrimaryBadge(\n\t\t\t{\n\t\t\t\tshow: folder.unreadCount > 0,\n\t\t\t\tcount: folder.unreadCount,\n\t\t\t\tshowCount: true\n\t\t\t},\n\t\t\tMAILS_ROUTE\n\t\t);\n\t}, [folder.unreadCount]);\n\treturn null;\n};\n\nexport const SyncDataHandler = () => {\n\tconst [t] = useTranslation();\n\tconst refresh = useRefresh();\n\tconst notifyList = useNotify();\n\tconst [seq, setSeq] = useState(-1);\n\tconst dispatch = useDispatch();\n\tconst [initialized, setInitialized] = useState(false);\n\tconst currentFolder = useSelector(selectCurrentFolder);\n\tconst messagesState = useSelector(selectMessages);\n\n\tuseEffect(() => {\n\t\tif (!isEmpty(refresh) && !initialized) {\n\t\t\tstore.setReducer(storeReducers);\n\t\t\t// this also normalize folders so no need to normalize it later\n\t\t\tconst extractedFolders = extractFolders([\n\t\t\t\t...(refresh?.folder?.[0]?.folder ?? []),\n\t\t\t\t...(refresh?.folder?.[0]?.link ?? [])\n\t\t\t]);\n\t\t\tdispatch(handleRefresh(extractedFolders));\n\t\t\tsetInitialized(true);\n\t\t}\n\t}, [dispatch, initialized, refresh]);\n\n\tuseEffect(() => {\n\t\tforEach(notifyList, (notify) => {\n\t\t\t// this intercept all changes made from different folders towards the current one, it triggers a search request if it finds at least one item which affect currentFolder\n\t\t\tif (find(notify?.modified?.m, ['l', currentFolder])) {\n\t\t\t\tdispatch(setSearchedInFolder({ [currentFolder]: 'incomplete' }));\n\t\t\t}\n\t\t});\n\t}, [currentFolder, dispatch, notifyList]);\n\n\tuseEffect(() => {\n\t\tif (initialized) {\n\t\t\tif (notifyList.length > 0) {\n\t\t\t\tforEach(sortBy(notifyList, 'seq'), (notify) => {\n\t\t\t\t\tif (!isEmpty(notify) && (notify.seq > seq || (seq > 1 && notify.seq === 1))) {\n\t\t\t\t\t\tif (notify.created) {\n\t\t\t\t\t\t\tif (notify.created.folder || notify.created.link) {\n\t\t\t\t\t\t\t\tdispatch(\n\t\t\t\t\t\t\t\t\thandleCreatedFolders([\n\t\t\t\t\t\t\t\t\t\t...(notify.created.folder ?? []),\n\t\t\t\t\t\t\t\t\t\t...(notify.created.link ?? [])\n\t\t\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (notify.created.c && notify.created.m) {\n\t\t\t\t\t\t\t\tconst conversations = map(notify.created.c, (i) =>\n\t\t\t\t\t\t\t\t\tnormalizeConversation(i, notify.created.m)\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tdispatch(handleNotifyCreatedConversations(keyBy(conversations, 'id')));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (notify.created.m) {\n\t\t\t\t\t\t\t\tdispatch(handleCreatedMessages({ m: notify.created.m }));\n\t\t\t\t\t\t\t\tdispatch(handleCreatedMessagesInConversation({ m: notify.created.m }));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (notify.modified) {\n\t\t\t\t\t\t\tif (notify.modified.folder || notify.modified.link) {\n\t\t\t\t\t\t\t\tdispatch(\n\t\t\t\t\t\t\t\t\thandleModifiedFolders([\n\t\t\t\t\t\t\t\t\t\t...(notify.modified.folder ?? []),\n\t\t\t\t\t\t\t\t\t\t...(notify.modified.link ?? [])\n\t\t\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (notify.modified.c) {\n\t\t\t\t\t\t\t\tconst conversations = map(notify.modified.c, normalizeConversation);\n\t\t\t\t\t\t\t\tdispatch(handleNotifyModifiedConversations(keyBy(conversations, 'id')));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (notify.modified.m) {\n\t\t\t\t\t\t\t\tconst messages = map(notify.modified.m, (obj) =>\n\t\t\t\t\t\t\t\t\tnormalizeMailMessageFromSoap(obj, false)\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tdispatch(handleModifiedMessages(messages));\n\n\t\t\t\t\t\t\t\t// the condition filters messages with parent property (the only ones we need to update)\n\t\t\t\t\t\t\t\tconst toUpdate = filter(messages, 'parent');\n\t\t\t\t\t\t\t\tif (toUpdate?.length > 0) {\n\t\t\t\t\t\t\t\t\t// this function updates messages' parent in conversations. If parent never changes it does not need to be called\n\t\t\t\t\t\t\t\t\tdispatch(handleModifiedMessagesInConversation(toUpdate));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// the condition filters messages with conversation property (the only ones we need to add to conversation)\n\t\t\t\t\t\t\t\tconst conversationToUpdate = filter(messages, 'conversation');\n\t\t\t\t\t\t\t\tif (conversationToUpdate?.length > 0) {\n\t\t\t\t\t\t\t\t\tconst msgsReference = reduce(\n\t\t\t\t\t\t\t\t\t\tconversationToUpdate,\n\t\t\t\t\t\t\t\t\t\t(acc, msg) => {\n\t\t\t\t\t\t\t\t\t\t\tif (messagesState?.[msg?.id]) {\n\t\t\t\t\t\t\t\t\t\t\t\treturn [\n\t\t\t\t\t\t\t\t\t\t\t\t\t...acc,\n\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tid: messagesState?.[msg?.id].id,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tparent: messagesState?.[msg?.id].parent,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tdate: messagesState?.[msg?.id].date,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tconversation: msg.conversation\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t];\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\treturn acc;\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t[]\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t// this function add messages' in conversations. If conversation never changes it does not need to be called\n\t\t\t\t\t\t\t\t\tdispatch(handleAddMessagesInConversation(msgsReference));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (notify.deleted) {\n\t\t\t\t\t\t\tdispatch(handleDeletedFolders(notify.deleted));\n\t\t\t\t\t\t\tdispatch(handleNotifyDeletedConversations(notify.deleted));\n\t\t\t\t\t\t\tdispatch(handleDeletedMessages(notify.deleted));\n\t\t\t\t\t\t\tdispatch(handleDeletedMessagesInConversation(notify.deleted));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tsetSeq(notify.seq);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}, [dispatch, initialized, messagesState, notifyList, seq, t]);\n\treturn <InboxBadgeUpdater />;\n};\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/views/sidebar/sync-data-handler.jsx b/src/views/sidebar/sync-data-handler.jsx
+--- a/src/views/sidebar/sync-data-handler.jsx	(revision 4adaba21c8889cfd3cf44adf6271b75e82f59433)
++++ b/src/views/sidebar/sync-data-handler.jsx	(date 1659976157631)
+@@ -8,7 +8,8 @@
+ 	store,
+ 	useNotify,
+ 	useRefresh,
+-	updatePrimaryBadge
++	updatePrimaryBadge,
++	getTags
+ } from '@zextras/carbonio-shell-ui';
+ import React, { useEffect, useState } from 'react';
+ import { useDispatch, useSelector } from 'react-redux';
+@@ -106,8 +107,9 @@
+ 								);
+ 							}
+ 							if (notify.created.c && notify.created.m) {
++								const tags = getTags();
+ 								const conversations = map(notify.created.c, (i) =>
+-									normalizeConversation(i, notify.created.m)
++									normalizeConversation({ c: i, m: notify.created.m, tags })
+ 								);
+ 								dispatch(handleNotifyCreatedConversations(keyBy(conversations, 'id')));
+ 							}
+Index: src/store/actions/get-conv.ts
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport { createAsyncThunk } from '@reduxjs/toolkit';\nimport { soapFetch } from '@zextras/carbonio-shell-ui';\nimport { map } from 'lodash';\nimport { normalizeConversation } from '../../normalizations/normalize-conversation';\nimport { normalizeMailMessageFromSoap } from '../../normalizations/normalize-message';\nimport {\n\tConversation,\n\tGetConvParameters,\n\tGetConvRequest,\n\tGetConvResponse,\n\tIncompleteMessage\n} from '../../types';\n\nexport const getConv = createAsyncThunk<\n\t{ conversation: Partial<Conversation>; messages: Array<IncompleteMessage> },\n\tGetConvParameters\n>(\n\t'conversations/getConv',\n\tasync ({ conversationId, fetch = 'all' }) => {\n\t\tconst result = (await soapFetch<GetConvRequest, GetConvResponse>('GetConv', {\n\t\t\t_jsns: 'urn:zimbraMail',\n\t\t\tc: {\n\t\t\t\tid: conversationId,\n\t\t\t\thtml: 1,\n\t\t\t\tneedExp: 1,\n\t\t\t\tfetch\n\t\t\t}\n\t\t})) as GetConvResponse;\n\t\tconst conversation = normalizeConversation(result.c[0]);\n\t\tconst messages = map(result.c[0].m, (item) =>\n\t\t\tnormalizeMailMessageFromSoap(item, false)\n\t\t) as unknown as Array<IncompleteMessage>;\n\t\treturn { conversation, messages };\n\t},\n\t{\n\t\tcondition: ({ folderId, conversationId }: GetConvParameters, { getState }: any) => {\n\t\t\tif (!folderId) return true;\n\t\t\treturn (\n\t\t\t\tgetState().conversations?.expandedStatus[conversationId] !== 'complete' &&\n\t\t\t\tgetState().conversations?.expandedStatus[conversationId] !== 'pending'\n\t\t\t);\n\t\t}\n\t}\n);\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/store/actions/get-conv.ts b/src/store/actions/get-conv.ts
+--- a/src/store/actions/get-conv.ts	(revision 4adaba21c8889cfd3cf44adf6271b75e82f59433)
++++ b/src/store/actions/get-conv.ts	(date 1659976157631)
+@@ -4,7 +4,7 @@
+  * SPDX-License-Identifier: AGPL-3.0-only
+  */
+ import { createAsyncThunk } from '@reduxjs/toolkit';
+-import { soapFetch } from '@zextras/carbonio-shell-ui';
++import { getTags, soapFetch } from '@zextras/carbonio-shell-ui';
+ import { map } from 'lodash';
+ import { normalizeConversation } from '../../normalizations/normalize-conversation';
+ import { normalizeMailMessageFromSoap } from '../../normalizations/normalize-message';
+@@ -31,7 +31,8 @@
+ 				fetch
+ 			}
+ 		})) as GetConvResponse;
+-		const conversation = normalizeConversation(result.c[0]);
++		const tags = getTags();
++		const conversation = normalizeConversation({ c: result.c[0], tags });
+ 		const messages = map(result.c[0].m, (item) =>
+ 			normalizeMailMessageFromSoap(item, false)
+ 		) as unknown as Array<IncompleteMessage>;
+Index: src/views/sidebar/utils.ts
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport {\n\tZIMBRA_STANDARD_COLORS,\n\tFOLDERS,\n\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t// @ts-ignore\n\tROOT_NAME,\n\tAccordionFolder,\n\tFolder,\n\tLinkFolderFields\n} from '@zextras/carbonio-shell-ui';\nimport { isNil, omitBy, reduce } from 'lodash';\nimport { TFunction } from 'react-i18next';\n\nconst folderIdRegex = /^(.+:)*(\\d+)$/;\n\nexport const normalizeFolder = (\n\tfolder: Folder & Partial<LinkFolderFields>\n): Partial<Folder & Partial<LinkFolderFields>> =>\n\tomitBy(\n\t\t{\n\t\t\tid: folder.id,\n\t\t\tuuid: folder.uuid,\n\t\t\tcolor: folder.color,\n\t\t\tname: folder.name,\n\t\t\tpath: folder.absFolderPath,\n\t\t\tparent: folder.l,\n\t\t\tparentUuid: folder.luuid,\n\t\t\titemsCount: folder.n,\n\t\t\tsize: folder.s,\n\t\t\tunreadCount: folder.u,\n\t\t\tsynced: true,\n\t\t\trgb: folder.rgb,\n\t\t\towner: folder.owner,\n\t\t\trid: folder.rid,\n\t\t\tzid: folder.zid,\n\t\t\tacl: folder.acl,\n\t\t\tperm: folder.perm,\n\t\t\tisSharedFolder: !!folder.owner,\n\t\t\tretentionPolicy: folder.retentionPolicy,\n\t\t\tview: folder.view\n\t\t},\n\t\tisNil\n\t);\n\nexport const extractFolders = (accordion: Array<any>, acc = {}): any =>\n\treduce(\n\t\taccordion,\n\t\t(acc2, folder) => {\n\t\t\tif (folder.folder) {\n\t\t\t\treturn (folder.view === 'message' &&\n\t\t\t\t\tfolder.id !== FOLDERS.IM_LOGS &&\n\t\t\t\t\tfolder.id !== FOLDERS.USER_ROOT) ||\n\t\t\t\t\tfolder.id === FOLDERS.TRASH\n\t\t\t\t\t? {\n\t\t\t\t\t\t\t...acc2,\n\t\t\t\t\t\t\t[folder.id]: normalizeFolder(folder),\n\t\t\t\t\t\t\t...extractFolders(folder.folder, acc2)\n\t\t\t\t\t  }\n\t\t\t\t\t: { ...acc2, ...extractFolders(folder.folder, acc2) };\n\t\t\t}\n\t\t\treturn (folder.view === 'message' &&\n\t\t\t\tfolder.id !== FOLDERS.IM_LOGS &&\n\t\t\t\tfolder.id !== FOLDERS.USER_ROOT) ||\n\t\t\t\tfolder.id === FOLDERS.TRASH\n\t\t\t\t? {\n\t\t\t\t\t\t...acc2,\n\t\t\t\t\t\t[folder.id]: normalizeFolder(folder)\n\t\t\t\t  }\n\t\t\t\t: acc2;\n\t\t},\n\t\tacc\n\t);\n\nexport const capitalise = (word: string): string => {\n\tconst asciiRef = word?.charCodeAt(0);\n\tconst newAsciiRef = asciiRef - 32;\n\tconst newChar = String.fromCharCode(newAsciiRef);\n\treturn word ? newChar + word.substring(1) : '';\n};\n\nexport const getFolderIconColor = (f: AccordionFolder): string => {\n\tif (f?.folder?.color) {\n\t\treturn f.folder.color < 10\n\t\t\t? ZIMBRA_STANDARD_COLORS[f.folder.color].hex\n\t\t\t: f?.folder.rgb ?? ZIMBRA_STANDARD_COLORS[0].hex;\n\t}\n\treturn ZIMBRA_STANDARD_COLORS[0].hex;\n};\n\nexport const getFolderIconName = (folder: AccordionFolder): string | null => {\n\tconst systemFolders = [\n\t\tFOLDERS.USER_ROOT,\n\t\tFOLDERS.INBOX,\n\t\tFOLDERS.TRASH,\n\t\tFOLDERS.DRAFTS,\n\t\tFOLDERS.SPAM,\n\t\tFOLDERS.SENT\n\t];\n\n\tif (folder.id === FOLDERS.USER_ROOT || folder.folder?.oname === ROOT_NAME) {\n\t\treturn null;\n\t}\n\n\tif (folder.id && systemFolders.includes(folder.id)) {\n\t\tswitch (folder.id) {\n\t\t\tcase FOLDERS.INBOX:\n\t\t\t\treturn 'InboxOutline';\n\t\t\tcase FOLDERS.DRAFTS:\n\t\t\t\treturn 'FileOutline';\n\t\t\tcase FOLDERS.SENT:\n\t\t\t\treturn 'PaperPlaneOutline';\n\t\t\tcase FOLDERS.SPAM:\n\t\t\t\treturn 'SlashOutline';\n\t\t\tcase FOLDERS.TRASH:\n\t\t\t\treturn 'Trash2Outline';\n\t\t\tdefault:\n\t\t\t\treturn 'FolderOutline';\n\t\t}\n\t}\n\tif (\n\t\tfolder.id?.charAt(folder.id.length - 2) === ':' &&\n\t\tsystemFolders.includes(folder.id.slice(-1))\n\t) {\n\t\tswitch (folder.id.slice(-1)) {\n\t\t\tcase FOLDERS.INBOX:\n\t\t\t\treturn 'InboxOutline';\n\t\t\tcase FOLDERS.DRAFTS:\n\t\t\t\treturn 'FileOutline';\n\t\t\tcase FOLDERS.SENT:\n\t\t\t\treturn 'PaperPlaneOutline';\n\t\t\tcase FOLDERS.SPAM:\n\t\t\t\treturn 'SlashOutline';\n\t\t\tcase FOLDERS.TRASH:\n\t\t\t\treturn 'Trash2Outline';\n\t\t\tdefault:\n\t\t\t\treturn 'FolderOutline';\n\t\t}\n\t}\n\treturn 'FolderOutline';\n};\n\nexport const translatedSystemFolders = (t: TFunction): Array<string> => [\n\tt('folders.inbox', 'Inbox'),\n\tt('folders.sent', 'Sent'),\n\tt('folders.drafts', 'Drafts'),\n\tt('folders.trash', 'Trash'),\n\tt('folders.spam', 'Spam'),\n\tt('folders.junk', 'Junk')\n];\n\ntype GetSystemFolderProps = {\n\tt: TFunction;\n\tfolderId?: string;\n\tfolderName: string;\n};\n\nexport const getSystemFolderTranslatedName = ({ t, folderName }: GetSystemFolderProps): string => {\n\tif (folderName) {\n\t\tswitch (folderName) {\n\t\t\tcase 'Inbox':\n\t\t\t\treturn t('folders.inbox', 'Inbox');\n\t\t\tcase 'Sent':\n\t\t\t\treturn t('folders.sent', 'Sent');\n\t\t\tcase 'Drafts':\n\t\t\t\treturn t('folders.drafts', 'Drafts');\n\t\t\tcase 'Trash':\n\t\t\t\treturn t('folders.trash', 'Trash');\n\t\t\tcase 'Spam':\n\t\t\t\treturn t('folders.spam', 'Spam');\n\t\t\tcase 'Junk':\n\t\t\t\treturn t('folders.junk', 'Junk');\n\t\t\tdefault:\n\t\t\t\treturn folderName;\n\t\t}\n\t}\n\treturn folderName;\n};\n\nexport const getFolderTranslatedName = ({\n\tt,\n\tfolderId,\n\tfolderName\n}: GetSystemFolderProps): string => {\n\tconst id = folderIdRegex.exec(folderId ?? '')?.[2];\n\tif (id && Object.values(FOLDERS).includes(id)) {\n\t\treturn getSystemFolderTranslatedName({ t, folderName });\n\t}\n\n\treturn folderName;\n};\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/views/sidebar/utils.ts b/src/views/sidebar/utils.ts
+--- a/src/views/sidebar/utils.ts	(revision 4adaba21c8889cfd3cf44adf6271b75e82f59433)
++++ b/src/views/sidebar/utils.ts	(date 1659976441039)
+@@ -13,7 +13,7 @@
+ 	Folder,
+ 	LinkFolderFields
+ } from '@zextras/carbonio-shell-ui';
+-import { isNil, omitBy, reduce } from 'lodash';
++import { isNil, reduce, omitBy } from 'lodash';
+ import { TFunction } from 'react-i18next';
+ 
+ const folderIdRegex = /^(.+:)*(\d+)$/;
+Index: .idea/prettier.xml
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/.idea/prettier.xml b/.idea/prettier.xml
+new file mode 100644
+--- /dev/null	(date 1659976157630)
++++ b/.idea/prettier.xml	(date 1659976157630)
+@@ -0,0 +1,7 @@
++<?xml version="1.0" encoding="UTF-8"?>
++<project version="4">
++  <component name="PrettierConfiguration">
++    <option name="myRunOnSave" value="true" />
++    <option name="myRunOnReformat" value="true" />
++  </component>
++</project>
+\ No newline at end of file
Index: .idea/shelf/Changes3.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/shelf/Changes3.xml b/.idea/shelf/Changes3.xml
new file mode 100644
--- /dev/null	(date 1663573795019)
+++ b/.idea/shelf/Changes3.xml	(date 1663573795019)
@@ -0,0 +1,4 @@
+<changelist name="Changes3" date="1662011723561" recycled="false">
+  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Changes3/shelved.patch" />
+  <option name="DESCRIPTION" value="Changes" />
+</changelist>
\ No newline at end of file
Index: .idea/shelf/fix__shared_with_information_on_edit_folder_modal.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/shelf/fix__shared_with_information_on_edit_folder_modal.xml b/.idea/shelf/fix__shared_with_information_on_edit_folder_modal.xml
new file mode 100644
--- /dev/null	(date 1663573795022)
+++ b/.idea/shelf/fix__shared_with_information_on_edit_folder_modal.xml	(date 1663573795022)
@@ -0,0 +1,4 @@
+<changelist name="fix__shared_with_information_on_edit_folder_modal" date="1660292803725" recycled="false">
+  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/fix__shared_with_information_on_edit_folder_modal/shelved.patch" />
+  <option name="DESCRIPTION" value="fix: shared with information on edit folder modal" />
+</changelist>
\ No newline at end of file
Index: .idea/shelf/Changes4.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/shelf/Changes4.xml b/.idea/shelf/Changes4.xml
new file mode 100644
--- /dev/null	(date 1663573795019)
+++ b/.idea/shelf/Changes4.xml	(date 1663573795019)
@@ -0,0 +1,4 @@
+<changelist name="Changes4" date="1662011769444" recycled="false">
+  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Changes4/shelved.patch" />
+  <option name="DESCRIPTION" value="Changes" />
+</changelist>
\ No newline at end of file
Index: .idea/shelf/Changes2.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/shelf/Changes2.xml b/.idea/shelf/Changes2.xml
new file mode 100644
--- /dev/null	(date 1663573795016)
+++ b/.idea/shelf/Changes2.xml	(date 1663573795016)
@@ -0,0 +1,4 @@
+<changelist name="Changes2" date="1661935986408" recycled="false">
+  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Changes2/shelved.patch" />
+  <option name="DESCRIPTION" value="Changes" />
+</changelist>
\ No newline at end of file
